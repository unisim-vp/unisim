#include "powerpc.hh"
#include <cassert>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"


#include <unisim/util/arithmetic/arithmetic.hh>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					using unisim::util::arithmetic::Add32;
					using unisim::util::arithmetic::RotateLeft;
					using unisim::util::arithmetic::CountLeadingZeros;

					inline uint32_t Mask(uint32_t mb, uint32_t me)
					{
						return (mb > me) ? ~(((uint32_t) -1 >> mb) ^ ((me >= 31) ? 0 : (uint32_t) -1 >> (me + 1))) : (((uint32_t)-1 >> mb) ^ ((me >= 31) ? 0 : (uint32_t) -1 >> (me + 1)));
					}

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 30 "powerpc.tcc"
#line 41 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"


#include <unisim/component/cxx/processor/powerpc/floating.hh>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					template <class CONFIG, class FLOAT>
					inline void GenFPSCR_FPRF(uint32_t& fpscr, const FLOAT& result)
					{
						fpscr = fpscr & ~CONFIG::FPSCR_FPRF_MASK;

						if(unlikely(result.isQNaN()))
						{
							fpscr = fpscr | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(result.isInfty()))
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(result.isDenormalized()))
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_DENORMAL << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_DENORMAL << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(result.isZero()))
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else
						{
							if(result.isNegative())
							fpscr = fpscr | (CONFIG::FPRF_FOR_NEGATIVE_NORMAL << CONFIG::FPSCR_FPRF_OFFSET);
							else
							fpscr = fpscr | (CONFIG::FPRF_FOR_POSITIVE_NORMAL << CONFIG::FPSCR_FPRF_OFFSET);
						}
					}

					template <class CONFIG, class FLOAT>
					inline void GenFPSCR_FR(uint32_t& fpscr, const FLOAT& result, const Flags& flags)
					{
						if(flags.hasIncrementFraction(result.isNegative()))
						fpscr = fpscr | CONFIG::FPSCR_FR_MASK;
						else
						fpscr = fpscr & ~CONFIG::FPSCR_FR_MASK;
					}

					template <class CONFIG>
					inline void GenFPSCR_FI(uint32_t& fpscr, const Flags& flags)
					{
						if(flags.isApproximate())
						fpscr = fpscr | CONFIG::FPSCR_FI_MASK;
						else
						fpscr = fpscr & ~CONFIG::FPSCR_FI_MASK;
					}

					template <class CONFIG>
					inline void GenFPSCR_OX(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.hasFlowException() && flags.isApproximate()))
						{
							if(flags.isOverflow())
							{
								fpscr = fpscr | CONFIG::FPSCR_OX_MASK;
							}
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_UX(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.hasFlowException() && flags.isApproximate()))
						{
							if(flags.isUnderflow())
							{
								fpscr = fpscr | CONFIG::FPSCR_UX_MASK;
							}
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_ZX(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isDivisionByZero()))
						{
							fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXSNAN(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.hasSNaNOperand()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXISI(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isInftyMinusInfty()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXISI_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXIDI(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isInftyOnInfty()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXIDI_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXZDZ(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isZeroOnZero()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXZDZ_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXIMZ(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isInftyMultZero()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXIMZ_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_VXCVI(uint32_t& fpscr, const Flags& flags)
					{
						if(unlikely(flags.isOverflow()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXCVI_MASK;
						}
					}

					template <class CONFIG>
					inline void GenFPSCR_XX(uint32_t& fpscr)
					{
						fpscr = fpscr | ((fpscr & CONFIG::FPSCR_FI_MASK) ? CONFIG::FPSCR_XX_MASK : 0);
					}

					template <class CONFIG>
					inline void GenFPSCR_FX(uint32_t& fpscr, uint32_t old_fpscr)
					{
						fpscr = fpscr |
						(((~old_fpscr & fpscr & CONFIG::FPSCR_OX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_UX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_ZX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_XX_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXSNAN_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXISI_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXIDI_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXZDZ_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXIMZ_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXVC_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXSOFT_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXSQRT_MASK) |
						(~old_fpscr & fpscr & CONFIG::FPSCR_VXCVI_MASK)) ? CONFIG::FPSCR_FX_MASK : 0);
					}

					template <class CONFIG>
					inline void GenFPSCR_VX(uint32_t& fpscr)
					{
						fpscr = (fpscr & ~CONFIG::FPSCR_VX_MASK) |
						(((fpscr & CONFIG::FPSCR_VXSNAN_MASK) |
						(fpscr & CONFIG::FPSCR_VXISI_MASK) |
						(fpscr & CONFIG::FPSCR_VXIDI_MASK) |
						(fpscr & CONFIG::FPSCR_VXZDZ_MASK) |
						(fpscr & CONFIG::FPSCR_VXIMZ_MASK) |
						(fpscr & CONFIG::FPSCR_VXVC_MASK) |
						(fpscr & CONFIG::FPSCR_VXSOFT_MASK) |
						(fpscr & CONFIG::FPSCR_VXSQRT_MASK) |
						(fpscr & CONFIG::FPSCR_VXCVI_MASK)) ? CONFIG::FPSCR_VX_MASK : 0);
					}

					template <class CONFIG>
					inline void GenFPSCR_FEX(uint32_t& fpscr)
					{
						fpscr = (fpscr & ~CONFIG::FPSCR_FEX_MASK) |
						(((fpscr & CONFIG::FPSCR_VX_MASK) && (fpscr & CONFIG::FPSCR_VE_MASK) ||
						(fpscr & CONFIG::FPSCR_OX_MASK) && (fpscr & CONFIG::FPSCR_OE_MASK) ||
						(fpscr & CONFIG::FPSCR_UX_MASK) && (fpscr & CONFIG::FPSCR_UE_MASK) ||
						(fpscr & CONFIG::FPSCR_ZX_MASK) && (fpscr & CONFIG::FPSCR_ZE_MASK) ||
						(fpscr & CONFIG::FPSCR_XX_MASK) && (fpscr & CONFIG::FPSCR_XE_MASK)) ? CONFIG::FPSCR_FEX_MASK : 0);
					}

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 243 "powerpc.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"


#include <iostream>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					using std::hex;
					using std::dec;
					using std::endl;
					using std::ios;

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 266 "powerpc.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace powerpc {
template <
#line 38 "ppc.isa"
class
#line 271 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 274 "powerpc.tcc"
>
Operation<
#line 38 "ppc.isa"
CONFIG
#line 279 "powerpc.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
num_uops(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
1
#line 285 "powerpc.tcc"
),
num_insn_operands(
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
0
#line 290 "powerpc.tcc"
),
execution_unit(
#line 38 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
CONFIG::NO_UNIT_T
#line 295 "powerpc.tcc"
),
serialization(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
CONFIG::NO_SERIALIZATION
#line 300 "powerpc.tcc"
),
insn_latency(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
1
#line 305 "powerpc.tcc"
),
insn_inv_thoughput(
#line 41 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
1
#line 310 "powerpc.tcc"
),
function(
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
FnInvalid
#line 315 "powerpc.tcc"
),
latency(
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
0
#line 320 "powerpc.tcc"
),
nstages(
#line 58 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
0
#line 325 "powerpc.tcc"
),
noperands(
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
0
#line 330 "powerpc.tcc"
),
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 38 "ppc.isa"
class
#line 341 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 344 "powerpc.tcc"
>
Operation<
#line 38 "ppc.isa"
CONFIG
#line 349 "powerpc.tcc"
>::~Operation()
{
}

template <
#line 38 "ppc.isa"
class
#line 357 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 360 "powerpc.tcc"
>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 364 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 368 "powerpc.tcc"
>::is_sign_extended()
{
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 375 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 380 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 383 "powerpc.tcc"
>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 387 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 391 "powerpc.tcc"
>::load_need_conversion()
{
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 398 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 403 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 406 "powerpc.tcc"
>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 410 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 414 "powerpc.tcc"
>::store_need_conversion()
{
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 421 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 426 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 429 "powerpc.tcc"
>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
uint32_t
#line 433 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 437 "powerpc.tcc"
>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 441 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 444 "powerpc.tcc"
)
{
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: operation do not provide single precision information: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 454 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 459 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 462 "powerpc.tcc"
>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
list <Operation<CONFIG> *>
#line 466 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 470 "powerpc.tcc"
>::split_into()
{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: operation non splitable: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 480 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 485 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 488 "powerpc.tcc"
>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 492 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 496 "powerpc.tcc"
>::is_splitted()
{
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 503 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 508 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 511 "powerpc.tcc"
>
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::address_t
#line 515 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 519 "powerpc.tcc"
>::loadstore_effective_address(
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 523 "powerpc.tcc"
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 526 "powerpc.tcc"
)
{
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return cpu->GetEA();
	}
#line 533 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 538 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 541 "powerpc.tcc"
>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 545 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 549 "powerpc.tcc"
>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 553 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 556 "powerpc.tcc"
)
{
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action memory_acces_size not set for: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 566 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 571 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 574 "powerpc.tcc"
>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 578 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 582 "powerpc.tcc"
>::memory_access_size()
{
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action memory_acces_size not set for: ";
		Operation<CONFIG>::disasm(0, cerr);
		cerr << endl;
		exit(1);
	}
#line 592 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 597 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 600 "powerpc.tcc"
>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 604 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 608 "powerpc.tcc"
>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::STATE *
#line 612 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 615 "powerpc.tcc"
)
{
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action loadstore_target_register not set for: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 625 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 630 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 633 "powerpc.tcc"
>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 637 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 641 "powerpc.tcc"
>::branch_conditioned()
{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return true;
	}
#line 648 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 653 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 656 "powerpc.tcc"
>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 660 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 664 "powerpc.tcc"
>::branch_linked()
{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return false;
	}
#line 671 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 676 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 679 "powerpc.tcc"
>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 683 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 687 "powerpc.tcc"
>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::STATE *
#line 691 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cpu
#line 694 "powerpc.tcc"
)
{
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return true;
	}
#line 701 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 706 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 709 "powerpc.tcc"
>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::address_t
#line 713 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 717 "powerpc.tcc"
>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::address_t
#line 721 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cia
#line 724 "powerpc.tcc"
,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::STATE *
#line 728 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cpu
#line 731 "powerpc.tcc"
)
{
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return 0;
	}
#line 738 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 743 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 746 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 753 "powerpc.tcc"
>::initialize_operands()
{
#line 130 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
	{
		stringstream ss;
		Operation<CONFIG>::disasm(0,ss);
		string s;
		ss >> s;
		if(s!="???")
		{ cerr << "Error: missing initialize_operands for instruction \"" << s << "\" !" << endl;
		}
	}
#line 766 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 771 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 774 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 781 "powerpc.tcc"
>::initialize_latencies()
{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
	{
	}
#line 787 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 792 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 795 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 802 "powerpc.tcc"
>::initialize_function()
{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
	{
		/*
		Operation<CONFIG>::function = FnInvalid;
		registers_written = RegNone;
		*/
	}
#line 812 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 817 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 820 "powerpc.tcc"
>
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
unsigned int
#line 824 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 828 "powerpc.tcc"
>::get_num_uops(
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
typename CONFIG::STATE *
#line 832 "powerpc.tcc"
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
cpu
#line 835 "powerpc.tcc"
)
{
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{ return 1; }
#line 840 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 845 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 848 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 855 "powerpc.tcc"
>::initialize_write_fpscr()
{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 860 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 865 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 868 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 875 "powerpc.tcc"
>::initialize_read_xer()
{
#line 98 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 880 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 885 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 888 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 895 "powerpc.tcc"
>::initialize_write_xer()
{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 900 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 905 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 908 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 915 "powerpc.tcc"
>::initialize_write_crbd()
{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 920 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 925 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 928 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 935 "powerpc.tcc"
>::initialize_write_cr()
{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 940 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 945 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 948 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 955 "powerpc.tcc"
>::initialize_read_crbb()
{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 960 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 965 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 968 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 975 "powerpc.tcc"
>::initialize_read_crba()
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 980 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 985 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 988 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 995 "powerpc.tcc"
>::initialize_read_cr()
{
#line 86 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1000 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1005 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1008 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1015 "powerpc.tcc"
>::initialize_write_ctr()
{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1020 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1025 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1028 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1035 "powerpc.tcc"
>::initialize_write_lr()
{
#line 82 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1040 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1045 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1048 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1055 "powerpc.tcc"
>::initialize_write_ear()
{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1060 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1065 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1068 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1075 "powerpc.tcc"
>::initialize_write_ra()
{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1080 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1085 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1088 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1095 "powerpc.tcc"
>::initialize_write_rd()
{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1100 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1105 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1108 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1115 "powerpc.tcc"
>::initialize_write_fd()
{
#line 74 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1120 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1125 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1128 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1135 "powerpc.tcc"
>::initialize_read_ctr()
{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1140 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1145 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1148 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1155 "powerpc.tcc"
>::initialize_read_lr()
{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1160 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1165 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1168 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1175 "powerpc.tcc"
>::initialize_read_fs()
{
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1180 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1185 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1188 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1195 "powerpc.tcc"
>::initialize_read_fc()
{
#line 66 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1200 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1205 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1208 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1215 "powerpc.tcc"
>::initialize_read_fb()
{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1220 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1225 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1228 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1235 "powerpc.tcc"
>::initialize_read_fa()
{
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1240 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1245 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1248 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1255 "powerpc.tcc"
>::initialize_read_rs()
{
#line 60 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1260 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1265 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1268 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1275 "powerpc.tcc"
>::initialize_read_rb()
{
#line 58 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1280 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1285 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1288 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1295 "powerpc.tcc"
>::initialize_read_ra()
{
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1300 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1305 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1308 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1315 "powerpc.tcc"
>::initialize_serialization()
{
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1320 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1325 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1328 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1335 "powerpc.tcc"
>::initialize_unit()
{
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{}
#line 1340 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1345 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1348 "powerpc.tcc"
>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
void
#line 1352 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1356 "powerpc.tcc"
>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
typename CONFIG::STATE *
#line 1360 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
cpu
#line 1363 "powerpc.tcc"
,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
unsigned int
#line 1367 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
uop_num
#line 1370 "powerpc.tcc"
)
{
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{
		assert(uop_num == 0);
		execute(cpu);
	}
#line 1378 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1383 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1386 "powerpc.tcc"
>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
void
#line 1390 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1394 "powerpc.tcc"
>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
typename CONFIG::STATE *
#line 1398 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
cpu
#line 1401 "powerpc.tcc"
,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
unsigned int
#line 1405 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
uop_num
#line 1408 "powerpc.tcc"
)
{
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	{
		assert(uop_num == 0);
	}
#line 1415 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1420 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1423 "powerpc.tcc"
>
#line 64 "ppc.isa"
void
#line 1427 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1431 "powerpc.tcc"
>::disasm(
#line 64 "ppc.isa"
typename CONFIG::STATE *
#line 1435 "powerpc.tcc"
#line 64 "ppc.isa"
cpu
#line 1438 "powerpc.tcc"
,
#line 64 "ppc.isa"
ostream&
#line 1442 "powerpc.tcc"
#line 64 "ppc.isa"
os
#line 1445 "powerpc.tcc"
)
{
#line 64 "ppc.isa"
	{
		os << "???";
	}
#line 1452 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1457 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1460 "powerpc.tcc"
>
#line 60 "ppc.isa"
void
#line 1464 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 1468 "powerpc.tcc"
>::execute(
#line 60 "ppc.isa"
typename CONFIG::STATE *
#line 1472 "powerpc.tcc"
#line 60 "ppc.isa"
cpu
#line 1475 "powerpc.tcc"
)
{
#line 60 "ppc.isa"
	{
		throw IllegalInstructionException<CONFIG>();
	}
#line 1482 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 1487 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1490 "powerpc.tcc"
>
class OpAdd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1495 "powerpc.tcc"
>
{
public:
	OpAdd(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 1542 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 1546 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 1549 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 1554 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 1558 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 1561 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 1565 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 1568 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 1737 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1740 "powerpc.tcc"
>
class OpAddc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1745 "powerpc.tcc"
>
{
public:
	OpAddc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 1792 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 1796 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 1799 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 1804 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 1808 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 1811 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 1815 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 1818 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 1990 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1993 "powerpc.tcc"
>
class OpAdde : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1998 "powerpc.tcc"
>
{
public:
	OpAdde(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2045 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2049 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2052 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2057 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2061 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2064 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2068 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2071 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2249 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2252 "powerpc.tcc"
>
class OpAddi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2257 "powerpc.tcc"
>
{
public:
	OpAddi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2302 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2306 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2309 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2314 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2318 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2321 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2325 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2328 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2491 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2494 "powerpc.tcc"
>
class OpAddic : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2499 "powerpc.tcc"
>
{
public:
	OpAddic(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2544 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2548 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2551 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2556 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2560 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2563 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2567 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2570 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2736 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2739 "powerpc.tcc"
>
class OpAddic_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2744 "powerpc.tcc"
>
{
public:
	OpAddic_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 2789 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 2793 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 2796 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 2801 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 2805 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 2808 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 2812 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 2815 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2981 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2984 "powerpc.tcc"
>
class OpAddis : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2989 "powerpc.tcc"
>
{
public:
	OpAddis(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3034 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3038 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3041 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3046 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3050 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3053 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3057 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3060 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3223 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3226 "powerpc.tcc"
>
class OpAddme : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3231 "powerpc.tcc"
>
{
public:
	OpAddme(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3277 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3281 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3284 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3289 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3293 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3296 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3300 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3303 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3475 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3478 "powerpc.tcc"
>
class OpAddze : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3483 "powerpc.tcc"
>
{
public:
	OpAddze(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3529 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3533 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3536 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3541 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3545 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3548 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3552 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3555 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3730 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3733 "powerpc.tcc"
>
class OpDivw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3738 "powerpc.tcc"
>
{
public:
	OpDivw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 3785 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 3789 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 3792 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 3797 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 3801 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 3804 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 3808 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 3811 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3980 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3983 "powerpc.tcc"
>
class OpDivwu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3988 "powerpc.tcc"
>
{
public:
	OpDivwu(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4035 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4039 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4042 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4047 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4051 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4054 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4058 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4061 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4230 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4233 "powerpc.tcc"
>
class OpMulhw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4238 "powerpc.tcc"
>
{
public:
	OpMulhw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4284 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4288 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4291 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4296 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4300 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4303 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4307 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4310 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4479 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4482 "powerpc.tcc"
>
class OpMulhwu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4487 "powerpc.tcc"
>
{
public:
	OpMulhwu(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4533 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4537 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4540 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4545 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4549 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4552 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4556 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4559 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4728 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4731 "powerpc.tcc"
>
class OpMulli : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4736 "powerpc.tcc"
>
{
public:
	OpMulli(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 4781 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 4785 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 4788 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 4793 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 4797 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 4800 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 4804 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 4807 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4970 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4973 "powerpc.tcc"
>
class OpMullw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4978 "powerpc.tcc"
>
{
public:
	OpMullw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5025 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5029 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5032 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5037 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5041 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5044 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5048 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5051 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5220 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5223 "powerpc.tcc"
>
class OpNeg : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5228 "powerpc.tcc"
>
{
public:
	OpNeg(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5274 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5278 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5281 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5286 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5290 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5293 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5297 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5300 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5463 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5466 "powerpc.tcc"
>
class OpSubf : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5471 "powerpc.tcc"
>
{
public:
	OpSubf(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5518 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5522 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5525 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5530 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5534 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5537 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5541 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5544 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5707 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5710 "powerpc.tcc"
>
class OpSubfc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5715 "powerpc.tcc"
>
{
public:
	OpSubfc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 5762 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 5766 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 5769 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 5774 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 5778 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 5781 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 5785 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 5788 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5954 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5957 "powerpc.tcc"
>
class OpSubfe : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5962 "powerpc.tcc"
>
{
public:
	OpSubfe(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6009 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6013 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6016 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6021 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6025 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6028 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6032 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6035 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6207 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6210 "powerpc.tcc"
>
class OpSubfic : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6215 "powerpc.tcc"
>
{
public:
	OpSubfic(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6260 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6264 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6267 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6272 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6276 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6279 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6283 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6286 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6452 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6455 "powerpc.tcc"
>
class OpSubfme : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6460 "powerpc.tcc"
>
{
public:
	OpSubfme(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6506 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6510 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6513 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6518 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6522 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6525 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6529 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6532 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6704 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6707 "powerpc.tcc"
>
class OpSubfze : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6712 "powerpc.tcc"
>
{
public:
	OpSubfze(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 6758 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 6762 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 6765 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 6770 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 6774 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 6777 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 6781 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 6784 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_xer();
	virtual
	void
	initialize_write_rd();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6956 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6959 "powerpc.tcc"
>
class OpCmp : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6964 "powerpc.tcc"
>
{
public:
	OpCmp(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t rb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7010 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7014 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7017 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7022 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7026 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7029 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7033 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7036 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7202 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7205 "powerpc.tcc"
>
class OpCmpi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7210 "powerpc.tcc"
>
{
public:
	OpCmpi(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7256 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7260 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7263 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7268 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7272 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7275 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7279 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7282 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7442 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7445 "powerpc.tcc"
>
class OpCmpl : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7450 "powerpc.tcc"
>
{
public:
	OpCmpl(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t rb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7496 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7500 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7503 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7508 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7512 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7515 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7519 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7522 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rb();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7685 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7688 "powerpc.tcc"
>
class OpCmpli : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7693 "powerpc.tcc"
>
{
public:
	OpCmpli(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7739 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7743 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7746 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7751 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7755 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7758 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 7762 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 7765 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7925 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7928 "powerpc.tcc"
>
class OpAnd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7933 "powerpc.tcc"
>
{
public:
	OpAnd(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 7979 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 7983 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 7986 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 7991 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 7995 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 7998 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8002 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8005 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8168 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8171 "powerpc.tcc"
>
class OpAndc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8176 "powerpc.tcc"
>
{
public:
	OpAndc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8222 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8226 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8229 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8234 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8238 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8241 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8245 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8248 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8411 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8414 "powerpc.tcc"
>
class OpAndi_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8419 "powerpc.tcc"
>
{
public:
	OpAndi_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8464 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8468 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8471 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8476 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8480 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8483 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8487 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8490 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8650 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8653 "powerpc.tcc"
>
class OpAndis_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8658 "powerpc.tcc"
>
{
public:
	OpAndis_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8703 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8707 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8710 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8715 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8719 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8722 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8726 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8729 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8889 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8892 "powerpc.tcc"
>
class OpCntlzw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8897 "powerpc.tcc"
>
{
public:
	OpCntlzw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 8942 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 8946 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 8949 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 8954 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 8958 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 8961 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 8965 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 8968 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9128 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9131 "powerpc.tcc"
>
class OpEqv : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9136 "powerpc.tcc"
>
{
public:
	OpEqv(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9182 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9186 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9189 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9194 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9198 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9201 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9205 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9208 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9371 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9374 "powerpc.tcc"
>
class OpExtsb : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9379 "powerpc.tcc"
>
{
public:
	OpExtsb(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9424 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9428 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9431 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9436 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9440 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9443 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9447 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9450 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9610 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9613 "powerpc.tcc"
>
class OpExtsh : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9618 "powerpc.tcc"
>
{
public:
	OpExtsh(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9663 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9667 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9670 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9675 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9679 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9682 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9686 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9689 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9849 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9852 "powerpc.tcc"
>
class OpNand : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9857 "powerpc.tcc"
>
{
public:
	OpNand(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 9903 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 9907 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 9910 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 9915 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 9919 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 9922 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 9926 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 9929 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10092 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10095 "powerpc.tcc"
>
class OpNor : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10100 "powerpc.tcc"
>
{
public:
	OpNor(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10146 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10150 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10153 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10158 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10162 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10165 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10169 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10172 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10335 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10338 "powerpc.tcc"
>
class OpOr : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10343 "powerpc.tcc"
>
{
public:
	OpOr(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10389 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10393 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10396 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10401 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10405 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10408 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10412 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10415 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10578 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10581 "powerpc.tcc"
>
class OpOrc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10586 "powerpc.tcc"
>
{
public:
	OpOrc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10632 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10636 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10639 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10644 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10648 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10651 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10655 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10658 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10821 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10824 "powerpc.tcc"
>
class OpOri : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10829 "powerpc.tcc"
>
{
public:
	OpOri(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 10874 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 10878 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 10881 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 10886 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 10890 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 10893 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 10897 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 10900 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11060 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11063 "powerpc.tcc"
>
class OpOris : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11068 "powerpc.tcc"
>
{
public:
	OpOris(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11113 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11117 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11120 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11125 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11129 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11132 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11136 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11139 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11299 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11302 "powerpc.tcc"
>
class OpXor : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11307 "powerpc.tcc"
>
{
public:
	OpXor(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11353 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11357 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11360 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11365 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11369 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11372 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11376 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11379 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11542 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11545 "powerpc.tcc"
>
class OpXori : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11550 "powerpc.tcc"
>
{
public:
	OpXori(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11595 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11599 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11602 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11607 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11611 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11614 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11618 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11621 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11781 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11784 "powerpc.tcc"
>
class OpXoris : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11789 "powerpc.tcc"
>
{
public:
	OpXoris(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 11834 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 11838 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 11841 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 11846 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 11850 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 11853 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 11857 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 11860 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12020 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12023 "powerpc.tcc"
>
class OpRlwimi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12028 "powerpc.tcc"
>
{
public:
	OpRlwimi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12076 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12080 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12083 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12088 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12092 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12095 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12099 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12102 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_ra();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12265 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12268 "powerpc.tcc"
>
class OpRlwinm : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12273 "powerpc.tcc"
>
{
public:
	OpRlwinm(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12321 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12325 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12328 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12333 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12337 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12340 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12344 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12347 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12507 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12510 "powerpc.tcc"
>
class OpRlwnm : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12515 "powerpc.tcc"
>
{
public:
	OpRlwnm(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12563 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12567 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12570 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12575 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12579 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12582 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12586 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12589 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12752 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12755 "powerpc.tcc"
>
class OpSlw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12760 "powerpc.tcc"
>
{
public:
	OpSlw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 12806 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 12810 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 12813 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 12818 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 12822 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 12825 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 12829 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 12832 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12995 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12998 "powerpc.tcc"
>
class OpSraw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13003 "powerpc.tcc"
>
{
public:
	OpSraw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13049 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13053 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13056 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13061 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13065 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13068 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13072 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13075 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	virtual
	void
	initialize_write_xer();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13241 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13244 "powerpc.tcc"
>
class OpSrawi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13249 "powerpc.tcc"
>
{
public:
	OpSrawi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13295 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13299 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13302 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13307 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13311 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13314 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13318 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13321 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13481 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13484 "powerpc.tcc"
>
class OpSrw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13489 "powerpc.tcc"
>
{
public:
	OpSrw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13535 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13539 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13542 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13547 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13551 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13554 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13558 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13561 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_rb();
	virtual
	void
	initialize_read_rs();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13724 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13727 "powerpc.tcc"
>
class OpFadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13732 "powerpc.tcc"
>
{
public:
	OpFadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 13778 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 13782 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 13785 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 13790 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 13794 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 13797 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 13801 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 13804 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13976 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13979 "powerpc.tcc"
>
class OpFadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13984 "powerpc.tcc"
>
{
public:
	OpFadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14030 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14034 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14037 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14042 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14046 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14049 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14053 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14056 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14228 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14231 "powerpc.tcc"
>
class OpFdiv : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14236 "powerpc.tcc"
>
{
public:
	OpFdiv(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14282 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14286 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14289 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14294 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14298 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14301 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14305 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14308 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14480 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14483 "powerpc.tcc"
>
class OpFdivs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14488 "powerpc.tcc"
>
{
public:
	OpFdivs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14534 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14538 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14541 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14546 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14550 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14553 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14557 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14560 "powerpc.tcc"
	);
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14729 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14732 "powerpc.tcc"
>
class OpFmul : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14737 "powerpc.tcc"
>
{
public:
	OpFmul(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 14783 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 14787 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 14790 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 14795 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 14799 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 14802 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 14806 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 14809 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14981 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14984 "powerpc.tcc"
>
class OpFmuls : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14989 "powerpc.tcc"
>
{
public:
	OpFmuls(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15035 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15039 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15042 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15047 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15051 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15054 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15058 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15061 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15233 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15236 "powerpc.tcc"
>
class OpFres : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15241 "powerpc.tcc"
>
{
public:
	OpFres(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15286 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15290 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15293 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15298 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15302 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15305 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15309 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15312 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15481 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15484 "powerpc.tcc"
>
class OpFrsqrte : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15489 "powerpc.tcc"
>
{
public:
	OpFrsqrte(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15534 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15538 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15541 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15546 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15550 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15553 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15557 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15560 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15729 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15732 "powerpc.tcc"
>
class OpFsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15737 "powerpc.tcc"
>
{
public:
	OpFsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 15783 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 15787 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 15790 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 15795 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 15799 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 15802 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 15806 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 15809 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15981 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15984 "powerpc.tcc"
>
class OpFsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15989 "powerpc.tcc"
>
{
public:
	OpFsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16035 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16039 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16042 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16047 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16051 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16054 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16058 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16061 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16233 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16236 "powerpc.tcc"
>
class OpFsel : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16241 "powerpc.tcc"
>
{
public:
	OpFsel(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16288 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16292 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16295 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16300 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16304 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16307 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16311 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16314 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16489 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16492 "powerpc.tcc"
>
class OpFsqrt : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16497 "powerpc.tcc"
>
{
public:
	OpFsqrt(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16542 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16546 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16549 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16554 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16558 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16561 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16565 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16568 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16734 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16737 "powerpc.tcc"
>
class OpFsqrts : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16742 "powerpc.tcc"
>
{
public:
	OpFsqrts(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 16787 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 16791 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 16794 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 16799 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 16803 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 16806 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 16810 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 16813 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16979 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16982 "powerpc.tcc"
>
class OpFmadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16987 "powerpc.tcc"
>
{
public:
	OpFmadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17034 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17038 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17041 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17046 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17050 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17053 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17057 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17060 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17235 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17238 "powerpc.tcc"
>
class OpFmadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17243 "powerpc.tcc"
>
{
public:
	OpFmadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17290 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17294 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17297 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17302 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17306 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17309 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17313 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17316 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17491 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17494 "powerpc.tcc"
>
class OpFmsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17499 "powerpc.tcc"
>
{
public:
	OpFmsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17546 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17550 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17553 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17558 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17562 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17565 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17569 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17572 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17747 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17750 "powerpc.tcc"
>
class OpFmsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17755 "powerpc.tcc"
>
{
public:
	OpFmsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 17802 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 17806 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 17809 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 17814 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 17818 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 17821 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 17825 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 17828 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18003 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18006 "powerpc.tcc"
>
class OpFnmadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18011 "powerpc.tcc"
>
{
public:
	OpFnmadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18058 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18062 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18065 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18070 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18074 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18077 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18081 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18084 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18259 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18262 "powerpc.tcc"
>
class OpFnmadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18267 "powerpc.tcc"
>
{
public:
	OpFnmadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18314 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18318 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18321 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18326 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18330 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18333 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18337 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18340 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18515 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18518 "powerpc.tcc"
>
class OpFnmsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18523 "powerpc.tcc"
>
{
public:
	OpFnmsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18570 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18574 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18577 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18582 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18586 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18589 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18593 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18596 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18771 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18774 "powerpc.tcc"
>
class OpFnmsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18779 "powerpc.tcc"
>
{
public:
	OpFnmsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 18826 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 18830 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 18833 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 18838 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 18842 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 18845 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 18849 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 18852 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_read_fc();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19027 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19030 "powerpc.tcc"
>
class OpFcmpo : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19035 "powerpc.tcc"
>
{
public:
	OpFcmpo(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t fa;
	uint32_t fb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19080 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19084 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19087 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19092 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19096 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19099 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19103 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19106 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19275 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19278 "powerpc.tcc"
>
class OpFcmpu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19283 "powerpc.tcc"
>
{
public:
	OpFcmpu(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t fa;
	uint32_t fb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19328 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19332 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19335 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19340 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19344 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19347 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19351 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19354 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fa();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19523 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19526 "powerpc.tcc"
>
class OpFctiw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19531 "powerpc.tcc"
>
{
public:
	OpFctiw(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19576 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19580 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19583 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19588 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19592 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19595 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19599 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19602 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19771 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19774 "powerpc.tcc"
>
class OpFctiwz : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19779 "powerpc.tcc"
>
{
public:
	OpFctiwz(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 19824 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 19828 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 19831 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 19836 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 19840 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 19843 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 19847 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 19850 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20019 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20022 "powerpc.tcc"
>
class OpFrsp : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20027 "powerpc.tcc"
>
{
public:
	OpFrsp(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20072 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20076 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20079 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20084 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20088 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20091 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20095 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20098 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20267 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20270 "powerpc.tcc"
>
class OpFabs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20275 "powerpc.tcc"
>
{
public:
	OpFabs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20320 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20324 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20327 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20332 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20336 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20339 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20343 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20346 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20515 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20518 "powerpc.tcc"
>
class OpFmr : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20523 "powerpc.tcc"
>
{
public:
	OpFmr(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20568 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20572 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20575 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20580 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20584 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20587 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20591 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20594 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20763 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20766 "powerpc.tcc"
>
class OpFnabs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20771 "powerpc.tcc"
>
{
public:
	OpFnabs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 20816 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 20820 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 20823 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 20828 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 20832 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 20835 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 20839 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 20842 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21011 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21014 "powerpc.tcc"
>
class OpFneg : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21019 "powerpc.tcc"
>
{
public:
	OpFneg(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21064 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21068 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21071 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21076 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21080 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21083 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21087 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21090 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_read_fb();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21259 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21262 "powerpc.tcc"
>
class OpMcrfs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21267 "powerpc.tcc"
>
{
public:
	OpMcrfs(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t crfS;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21311 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21315 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21318 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21323 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21327 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21330 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21334 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21337 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21497 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21500 "powerpc.tcc"
>
class OpMffs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21505 "powerpc.tcc"
>
{
public:
	OpMffs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21549 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21553 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21556 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21561 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21565 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21568 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21572 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21575 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_fd();
	virtual
	void
	initialize_write_fpscr();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21744 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21747 "powerpc.tcc"
>
class OpMtfsb0 : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21752 "powerpc.tcc"
>
{
public:
	OpMtfsb0(CodeType code, typename CONFIG::address_t addr);
	uint32_t crbD;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 21796 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 21800 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 21803 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 21808 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 21812 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 21815 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 21819 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 21822 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 21985 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 21988 "powerpc.tcc"
>
class OpMtfsb1 : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 21993 "powerpc.tcc"
>
{
public:
	OpMtfsb1(CodeType code, typename CONFIG::address_t addr);
	uint32_t crbD;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22037 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22041 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22044 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22049 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22053 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22056 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22060 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22063 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 22226 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 22229 "powerpc.tcc"
>
class OpMtfsf : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 22234 "powerpc.tcc"
>
{
public:
	OpMtfsf(CodeType code, typename CONFIG::address_t addr);
	uint32_t fm;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22279 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22283 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22286 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22291 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22295 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22298 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22302 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22305 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_read_fb();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 22468 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 22471 "powerpc.tcc"
>
class OpMtfsfi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 22476 "powerpc.tcc"
>
{
public:
	OpMtfsfi(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t imm;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22521 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22525 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22528 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22533 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22537 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22540 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22544 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22547 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_serialization();
	virtual
	void
	initialize_write_cr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 22710 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 22713 "powerpc.tcc"
>
class OpB : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 22718 "powerpc.tcc"
>
{
public:
	OpB(CodeType code, typename CONFIG::address_t addr);
	int32_t li;
	uint32_t aa;
	uint32_t lk;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 60 "ppc.isa"
	void
#line 22763 "powerpc.tcc"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 22767 "powerpc.tcc"
#line 60 "ppc.isa"
	cpu
#line 22770 "powerpc.tcc"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 22775 "powerpc.tcc"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 22779 "powerpc.tcc"
#line 64 "ppc.isa"
	cpu
#line 22782 "powerpc.tcc"
	,
#line 64 "ppc.isa"
	ostream&
#line 22786 "powerpc.tcc"
#line 64 "ppc.isa"
	os
#line 22789 "powerpc.tcc"
	);
	virtual
	void
	initialize_unit();
	virtual
	void
	initialize_write_lr();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Returns the target address of branch instructions.
	* The AA bit inform if the branch is relative or absolute.
	*/
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::address_t
#line 22984 "powerpc.tcc"
	get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::address_t
#line 22988 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cia
#line 22991 "powerpc.tcc"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::STATE *
#line 22995 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cpu
#line 22998 "powerpc.tcc"
	);
	// ----------------------------------------------------------------------------
	/**
	* Returns true if the branch is statically preficten taken.
	* The powerpc instruction set has a bit of the bo field to set
	* up the default branch prediction value statically.
	* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
	*/
	virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	bool
#line 23010 "powerpc.tcc"
	branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::STATE *
#line 23014 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cpu
#line 23017 "powerpc.tcc"
	);
	// Are branches linked ?
	//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
		virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 23024 "powerpc.tcc"
		branch_linked();
		virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 23029 "powerpc.tcc"
		branch_conditioned();
	private:
	};

	template <
#line 38 "ppc.isa"
	class
#line 23037 "powerpc.tcc"
#line 38 "ppc.isa"
	CONFIG
#line 23040 "powerpc.tcc"
	>
	class OpBc : public Operation<
#line 38 "ppc.isa"
	CONFIG
#line 23045 "powerpc.tcc"
	>
	{
	public:
		OpBc(CodeType code, typename CONFIG::address_t addr);
		uint32_t bo;
		uint32_t bi;
		int32_t bd;
		uint32_t aa;
		uint32_t lk;
		/*
		*  Copyright (c) 2007,
		*  Commissariat a l'Energie Atomique (CEA)
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
		*/
		/* instruction endian */
		virtual
#line 60 "ppc.isa"
		void
#line 23092 "powerpc.tcc"
		execute(
#line 60 "ppc.isa"
		typename CONFIG::STATE *
#line 23096 "powerpc.tcc"
#line 60 "ppc.isa"
		cpu
#line 23099 "powerpc.tcc"
		);
		virtual
#line 64 "ppc.isa"
		void
#line 23104 "powerpc.tcc"
		disasm(
#line 64 "ppc.isa"
		typename CONFIG::STATE *
#line 23108 "powerpc.tcc"
#line 64 "ppc.isa"
		cpu
#line 23111 "powerpc.tcc"
		,
#line 64 "ppc.isa"
		ostream&
#line 23115 "powerpc.tcc"
#line 64 "ppc.isa"
		os
#line 23118 "powerpc.tcc"
		);
		virtual
		void
		initialize_unit();
		virtual
		void
		initialize_read_ctr();
		virtual
		void
		initialize_read_cr();
		virtual
		void
		initialize_write_lr();
		virtual
		void
		initialize_write_ctr();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
		*          Eric Renard (erenard@lri.fr)
		*          Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		//var registers_written : {registers_written_t} = {0}
		/** Functions **/
		virtual
		void
		initialize_function();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/**
		* Initilize the latency values of each instrucion
		*/
		virtual
		void
		initialize_latencies();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/* --------------------------------------------------------------------------

		Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
		Mais sinon elle respecte bien le format rd = premier registre

		> lbzu lhau lhzu lwzu
		> lbzux, lhaux, lhzux, lwzux
		> stbu, sthu, stwu
		> stbux, sthux, stwux

		> lfdu, lfsu
		> lfdux
		> stfdu, stfsu
		> stfdux, stfsux

		manque les loafd flottant a update comme lfdu)
		-------------------------------------------------------------------------- */
		/* ----
		lswi: load string should output to (rd .. rd+ ceil(nb/4))
		lswx: should output to (rd.. XER[25..31] /4)
		stswi: should input (rs .. rs+ceil(nb/4))
		stswx: should input (rs .. rs+ceil(XER[25..31]/4))
		----- */
		/*
	* NOTES :
		*     -- For store fisrt operand is to oprand to write into memory.
		*     -- For other instructions (to defined)
		*/
		virtual
		void
		initialize_operands();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/**
		* Returns the target address of branch instructions.
		* The AA bit inform if the branch is relative or absolute.
		*/
		virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::address_t
#line 23322 "powerpc.tcc"
		get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::address_t
#line 23326 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cia
#line 23329 "powerpc.tcc"
		,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::STATE *
#line 23333 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cpu
#line 23336 "powerpc.tcc"
		);
		// ----------------------------------------------------------------------------
		/**
		* Returns true if the branch is statically preficten taken.
		* The powerpc instruction set has a bit of the bo field to set
		* up the default branch prediction value statically.
		* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
		*/
		virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 23348 "powerpc.tcc"
		branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::STATE *
#line 23352 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cpu
#line 23355 "powerpc.tcc"
		);
		// Are branches linked ?
		//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
			virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 23362 "powerpc.tcc"
			branch_linked();
			virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 23367 "powerpc.tcc"
			branch_conditioned();
		private:
		};

		template <
#line 38 "ppc.isa"
		class
#line 23375 "powerpc.tcc"
#line 38 "ppc.isa"
		CONFIG
#line 23378 "powerpc.tcc"
		>
		class OpBcctr : public Operation<
#line 38 "ppc.isa"
		CONFIG
#line 23383 "powerpc.tcc"
		>
		{
		public:
			OpBcctr(CodeType code, typename CONFIG::address_t addr);
			uint32_t bo;
			uint32_t bi;
			uint32_t lk;
			/*
			*  Copyright (c) 2007,
			*  Commissariat a l'Energie Atomique (CEA)
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
			*/
			/* instruction endian */
			virtual
#line 60 "ppc.isa"
			void
#line 23428 "powerpc.tcc"
			execute(
#line 60 "ppc.isa"
			typename CONFIG::STATE *
#line 23432 "powerpc.tcc"
#line 60 "ppc.isa"
			cpu
#line 23435 "powerpc.tcc"
			);
			virtual
#line 64 "ppc.isa"
			void
#line 23440 "powerpc.tcc"
			disasm(
#line 64 "ppc.isa"
			typename CONFIG::STATE *
#line 23444 "powerpc.tcc"
#line 64 "ppc.isa"
			cpu
#line 23447 "powerpc.tcc"
			,
#line 64 "ppc.isa"
			ostream&
#line 23451 "powerpc.tcc"
#line 64 "ppc.isa"
			os
#line 23454 "powerpc.tcc"
			);
			virtual
			void
			initialize_unit();
			virtual
			void
			initialize_read_ctr();
			virtual
			void
			initialize_read_cr();
			virtual
			void
			initialize_write_lr();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
			*          Eric Renard (erenard@lri.fr)
			*          Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			//var registers_written : {registers_written_t} = {0}
			/** Functions **/
			virtual
			void
			initialize_function();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/**
			* Initilize the latency values of each instrucion
			*/
			virtual
			void
			initialize_latencies();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/* --------------------------------------------------------------------------

			Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
			Mais sinon elle respecte bien le format rd = premier registre

			> lbzu lhau lhzu lwzu
			> lbzux, lhaux, lhzux, lwzux
			> stbu, sthu, stwu
			> stbux, sthux, stwux

			> lfdu, lfsu
			> lfdux
			> stfdu, stfsu
			> stfdux, stfsux

			manque les loafd flottant a update comme lfdu)
			-------------------------------------------------------------------------- */
			/* ----
			lswi: load string should output to (rd .. rd+ ceil(nb/4))
			lswx: should output to (rd.. XER[25..31] /4)
			stswi: should input (rs .. rs+ceil(nb/4))
			stswx: should input (rs .. rs+ceil(XER[25..31]/4))
			----- */
			/*
		* NOTES :
			*     -- For store fisrt operand is to oprand to write into memory.
			*     -- For other instructions (to defined)
			*/
			virtual
			void
			initialize_operands();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/**
			* Returns the target address of branch instructions.
			* The AA bit inform if the branch is relative or absolute.
			*/
			virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::address_t
#line 23655 "powerpc.tcc"
			get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::address_t
#line 23659 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cia
#line 23662 "powerpc.tcc"
			,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::STATE *
#line 23666 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cpu
#line 23669 "powerpc.tcc"
			);
			// ----------------------------------------------------------------------------
			/**
			* Returns true if the branch is statically preficten taken.
			* The powerpc instruction set has a bit of the bo field to set
			* up the default branch prediction value statically.
			* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
			*/
			virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 23681 "powerpc.tcc"
			branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::STATE *
#line 23685 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cpu
#line 23688 "powerpc.tcc"
			);
			// Are branches linked ?
			//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
				virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 23695 "powerpc.tcc"
				branch_linked();
				virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 23700 "powerpc.tcc"
				branch_conditioned();
			private:
			};

			template <
#line 38 "ppc.isa"
			class
#line 23708 "powerpc.tcc"
#line 38 "ppc.isa"
			CONFIG
#line 23711 "powerpc.tcc"
			>
			class OpBclr : public Operation<
#line 38 "ppc.isa"
			CONFIG
#line 23716 "powerpc.tcc"
			>
			{
			public:
				OpBclr(CodeType code, typename CONFIG::address_t addr);
				uint32_t bo;
				uint32_t bi;
				uint32_t lk;
				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/* instruction endian */
				virtual
#line 60 "ppc.isa"
				void
#line 23761 "powerpc.tcc"
				execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 23765 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 23768 "powerpc.tcc"
				);
				virtual
#line 64 "ppc.isa"
				void
#line 23773 "powerpc.tcc"
				disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 23777 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 23780 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 23784 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 23787 "powerpc.tcc"
				);
				virtual
				void
				initialize_unit();
				virtual
				void
				initialize_read_lr();
				virtual
				void
				initialize_read_ctr();
				virtual
				void
				initialize_read_cr();
				virtual
				void
				initialize_write_lr();
				virtual
				void
				initialize_write_ctr();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*          Eric Renard (erenard@lri.fr)
				*          Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				//var registers_written : {registers_written_t} = {0}
				/** Functions **/
				virtual
				void
				initialize_function();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/**
				* Initilize the latency values of each instrucion
				*/
				virtual
				void
				initialize_latencies();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/* --------------------------------------------------------------------------

				Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
				Mais sinon elle respecte bien le format rd = premier registre

				> lbzu lhau lhzu lwzu
				> lbzux, lhaux, lhzux, lwzux
				> stbu, sthu, stwu
				> stbux, sthux, stwux

				> lfdu, lfsu
				> lfdux
				> stfdu, stfsu
				> stfdux, stfsux

				manque les loafd flottant a update comme lfdu)
				-------------------------------------------------------------------------- */
				/* ----
				lswi: load string should output to (rd .. rd+ ceil(nb/4))
				lswx: should output to (rd.. XER[25..31] /4)
				stswi: should input (rs .. rs+ceil(nb/4))
				stswx: should input (rs .. rs+ceil(XER[25..31]/4))
				----- */
				/*
			* NOTES :
				*     -- For store fisrt operand is to oprand to write into memory.
				*     -- For other instructions (to defined)
				*/
				virtual
				void
				initialize_operands();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/**
				* Returns the target address of branch instructions.
				* The AA bit inform if the branch is relative or absolute.
				*/
				virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 23994 "powerpc.tcc"
				get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 23998 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 24001 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 24005 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 24008 "powerpc.tcc"
				);
				// ----------------------------------------------------------------------------
				/**
				* Returns true if the branch is statically preficten taken.
				* The powerpc instruction set has a bit of the bo field to set
				* up the default branch prediction value statically.
				* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
				*/
				virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 24020 "powerpc.tcc"
				branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 24024 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 24027 "powerpc.tcc"
				);
				// Are branches linked ?
				//action {bool} branch_linked({typename CONFIG::STATE *} {cpu}) {
					virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					bool
#line 24034 "powerpc.tcc"
					branch_linked();
					virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					bool
#line 24039 "powerpc.tcc"
					branch_conditioned();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24050 "powerpc.tcc"
				>
				class OpCrand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24055 "powerpc.tcc"
				>
				{
				public:
					OpCrand(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24100 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24104 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24107 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24112 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24116 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24119 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24123 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24126 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24298 "powerpc.tcc"
				>
				class OpCrandc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24303 "powerpc.tcc"
				>
				{
				public:
					OpCrandc(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24348 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24352 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24355 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24360 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24364 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24367 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24371 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24374 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24546 "powerpc.tcc"
				>
				class OpCreqv : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24551 "powerpc.tcc"
				>
				{
				public:
					OpCreqv(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24596 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24600 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24603 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24608 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24612 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24615 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24619 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24622 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24794 "powerpc.tcc"
				>
				class OpCrnand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24799 "powerpc.tcc"
				>
				{
				public:
					OpCrnand(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 24844 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 24848 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 24851 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 24856 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 24860 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 24863 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 24867 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 24870 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25042 "powerpc.tcc"
				>
				class OpCrnor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25047 "powerpc.tcc"
				>
				{
				public:
					OpCrnor(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25092 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25096 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25099 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25104 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25108 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25111 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25115 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25118 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25290 "powerpc.tcc"
				>
				class OpCror : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25295 "powerpc.tcc"
				>
				{
				public:
					OpCror(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25340 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25344 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25347 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25352 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25356 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25359 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25363 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25366 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25538 "powerpc.tcc"
				>
				class OpCrorc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25543 "powerpc.tcc"
				>
				{
				public:
					OpCrorc(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25588 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25592 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25595 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25600 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25604 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25607 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25611 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25614 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25786 "powerpc.tcc"
				>
				class OpCrxor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25791 "powerpc.tcc"
				>
				{
				public:
					OpCrxor(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 25836 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 25840 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 25843 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 25848 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 25852 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 25855 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 25859 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 25862 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_crba();
					virtual
					void
					initialize_read_crbb();
					virtual
					void
					initialize_write_crbd();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26034 "powerpc.tcc"
				>
				class OpMcrf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26039 "powerpc.tcc"
				>
				{
				public:
					OpMcrf(CodeType code, typename CONFIG::address_t addr);
					uint32_t crfD;
					uint32_t crfS;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26083 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26087 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26090 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26095 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26099 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26102 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26106 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26109 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_cr();
					virtual
					void
					initialize_write_cr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26275 "powerpc.tcc"
				>
				class OpLbz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26280 "powerpc.tcc"
				>
				{
				public:
					OpLbz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26325 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26329 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26332 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26337 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26341 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26344 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26348 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26351 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26545 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 26549 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 26552 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26560 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26571 "powerpc.tcc"
				>
				class OpLbzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26576 "powerpc.tcc"
				>
				{
				public:
					OpLbzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26621 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26625 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26628 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26633 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26637 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26640 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26644 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26647 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26844 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 26848 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 26851 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26859 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 26865 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 26870 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26881 "powerpc.tcc"
				>
				class OpLbzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26886 "powerpc.tcc"
				>
				{
				public:
					OpLbzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 26931 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 26935 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 26938 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 26943 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 26947 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 26950 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 26954 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 26957 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27157 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 27161 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27164 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27172 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 27178 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 27183 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27194 "powerpc.tcc"
				>
				class OpLbzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27199 "powerpc.tcc"
				>
				{
				public:
					OpLbzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 27244 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 27248 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 27251 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 27256 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 27260 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 27263 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 27267 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 27270 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27467 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 27471 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27474 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27482 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27493 "powerpc.tcc"
				>
				class OpLha : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27498 "powerpc.tcc"
				>
				{
				public:
					OpLha(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 27543 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 27547 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 27550 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 27555 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 27559 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 27562 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 27566 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 27569 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27763 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 27767 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27770 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27778 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 27784 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27795 "powerpc.tcc"
				>
				class OpLhau : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27800 "powerpc.tcc"
				>
				{
				public:
					OpLhau(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 27845 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 27849 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 27852 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 27857 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 27861 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 27864 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 27868 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 27871 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28068 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28072 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28075 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28083 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28089 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28100 "powerpc.tcc"
				>
				class OpLhaux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28105 "powerpc.tcc"
				>
				{
				public:
					OpLhaux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 28150 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 28154 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 28157 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 28162 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 28166 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 28169 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 28173 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 28176 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28376 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28380 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28383 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28391 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28397 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28408 "powerpc.tcc"
				>
				class OpLhax : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28413 "powerpc.tcc"
				>
				{
				public:
					OpLhax(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 28458 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 28462 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 28465 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 28470 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 28474 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 28477 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 28481 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 28484 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28681 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28685 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28688 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28696 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28702 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28713 "powerpc.tcc"
				>
				class OpLhz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28718 "powerpc.tcc"
				>
				{
				public:
					OpLhz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 28763 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 28767 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 28770 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 28775 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 28779 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 28782 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 28786 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 28789 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28983 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 28987 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28990 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28998 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29009 "powerpc.tcc"
				>
				class OpLhzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29014 "powerpc.tcc"
				>
				{
				public:
					OpLhzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29059 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29063 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29066 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29071 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29075 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29078 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 29082 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 29085 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29282 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 29286 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29289 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29297 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 29303 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 29308 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29319 "powerpc.tcc"
				>
				class OpLhzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29324 "powerpc.tcc"
				>
				{
				public:
					OpLhzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29369 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29373 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29376 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29381 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29385 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29388 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 29392 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 29395 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29595 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 29599 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29602 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29610 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 29616 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 29621 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29632 "powerpc.tcc"
				>
				class OpLhzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29637 "powerpc.tcc"
				>
				{
				public:
					OpLhzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29682 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29686 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29689 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29694 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29698 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 29701 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 29705 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 29708 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29905 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 29909 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29912 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29920 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29931 "powerpc.tcc"
				>
				class OpLwz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29936 "powerpc.tcc"
				>
				{
				public:
					OpLwz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 29981 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 29985 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 29988 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 29993 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 29997 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30000 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30004 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30007 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30201 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 30205 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30208 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30216 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30224 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30227 "powerpc.tcc"
				>
				class OpLwzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30232 "powerpc.tcc"
				>
				{
				public:
					OpLwzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 30277 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 30281 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 30284 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 30289 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 30293 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30296 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30300 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30303 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30500 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 30504 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30507 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30515 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 30521 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 30526 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30534 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30537 "powerpc.tcc"
				>
				class OpLwzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30542 "powerpc.tcc"
				>
				{
				public:
					OpLwzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 30587 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 30591 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 30594 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 30599 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 30603 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30606 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30610 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30613 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30813 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 30817 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30820 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30828 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 30834 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 30839 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30850 "powerpc.tcc"
				>
				class OpLwzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30855 "powerpc.tcc"
				>
				{
				public:
					OpLwzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 30900 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 30904 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 30907 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 30912 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 30916 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 30919 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 30923 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 30926 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31123 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 31127 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31130 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31138 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31149 "powerpc.tcc"
				>
				class OpStb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31154 "powerpc.tcc"
				>
				{
				public:
					OpStb(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 31199 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 31203 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 31206 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 31211 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 31215 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 31218 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 31222 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 31225 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31425 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 31429 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31432 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31440 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31451 "powerpc.tcc"
				>
				class OpStbu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31456 "powerpc.tcc"
				>
				{
				public:
					OpStbu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 31501 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 31505 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 31508 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 31513 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 31517 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 31520 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 31524 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 31527 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31730 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 31734 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31737 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31745 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 31751 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 31756 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31767 "powerpc.tcc"
				>
				class OpStbux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31772 "powerpc.tcc"
				>
				{
				public:
					OpStbux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 31817 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 31821 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 31824 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 31829 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 31833 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 31836 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 31840 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 31843 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32049 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32053 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32056 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32064 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 32070 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 32075 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32086 "powerpc.tcc"
				>
				class OpStbx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32091 "powerpc.tcc"
				>
				{
				public:
					OpStbx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 32136 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 32140 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 32143 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 32148 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 32152 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 32155 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 32159 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 32162 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32365 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32369 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32372 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32380 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32391 "powerpc.tcc"
				>
				class OpSth : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32396 "powerpc.tcc"
				>
				{
				public:
					OpSth(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 32441 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 32445 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 32448 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 32453 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 32457 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 32460 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 32464 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 32467 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32667 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32671 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32674 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32682 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32693 "powerpc.tcc"
				>
				class OpSthu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32698 "powerpc.tcc"
				>
				{
				public:
					OpSthu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 32743 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 32747 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 32750 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 32755 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 32759 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 32762 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 32766 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 32769 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32972 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 32976 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32979 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32987 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 32993 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 32998 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33009 "powerpc.tcc"
				>
				class OpSthux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33014 "powerpc.tcc"
				>
				{
				public:
					OpSthux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33059 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33063 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33066 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33071 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33075 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33078 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 33082 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 33085 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33288 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 33292 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33295 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33303 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 33309 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 33314 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33325 "powerpc.tcc"
				>
				class OpSthx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33330 "powerpc.tcc"
				>
				{
				public:
					OpSthx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33375 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33379 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33382 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33387 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33391 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33394 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 33398 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 33401 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33601 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 33605 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33608 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33616 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33627 "powerpc.tcc"
				>
				class OpStw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33632 "powerpc.tcc"
				>
				{
				public:
					OpStw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33677 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33681 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33684 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33689 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33693 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33696 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 33700 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 33703 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33903 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 33907 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33910 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33918 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33929 "powerpc.tcc"
				>
				class OpStwu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33934 "powerpc.tcc"
				>
				{
				public:
					OpStwu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 33979 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 33983 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 33986 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 33991 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 33995 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 33998 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34002 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34005 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34208 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 34212 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34215 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34223 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 34229 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 34234 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34245 "powerpc.tcc"
				>
				class OpStwux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34250 "powerpc.tcc"
				>
				{
				public:
					OpStwux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 34295 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 34299 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 34302 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 34307 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 34311 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 34314 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34318 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34321 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34527 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 34531 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34534 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34542 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 34548 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 34553 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34564 "powerpc.tcc"
				>
				class OpStwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34569 "powerpc.tcc"
				>
				{
				public:
					OpStwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 34614 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 34618 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 34621 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 34626 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 34630 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 34633 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34637 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34640 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34843 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 34847 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34850 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34858 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34869 "powerpc.tcc"
				>
				class OpLhbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34874 "powerpc.tcc"
				>
				{
				public:
					OpLhbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 34919 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 34923 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 34926 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 34931 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 34935 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 34938 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 34942 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 34945 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35142 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 35146 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35149 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35157 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35168 "powerpc.tcc"
				>
				class OpLwbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35173 "powerpc.tcc"
				>
				{
				public:
					OpLwbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 35218 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 35222 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 35225 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 35230 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 35234 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 35237 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 35241 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 35244 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35441 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 35445 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35448 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35456 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35467 "powerpc.tcc"
				>
				class OpSthbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35472 "powerpc.tcc"
				>
				{
				public:
					OpSthbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 35517 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 35521 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 35524 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 35529 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 35533 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 35536 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 35540 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 35543 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35746 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 35750 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35753 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35761 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35772 "powerpc.tcc"
				>
				class OpStwbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35777 "powerpc.tcc"
				>
				{
				public:
					OpStwbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 35822 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 35826 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 35829 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 35834 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 35838 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 35841 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 35845 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 35848 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36051 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36055 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36058 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36066 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36077 "powerpc.tcc"
				>
				class OpLswi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36082 "powerpc.tcc"
				>
				{
				public:
					OpLswi(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t nb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 36127 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 36131 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 36134 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 36139 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 36143 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 36146 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 36150 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 36153 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36197 "powerpc.tcc"
					resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36201 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36204 "powerpc.tcc"
					,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36208 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36211 "powerpc.tcc"
					);
					virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36216 "powerpc.tcc"
					uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36220 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36223 "powerpc.tcc"
					,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36227 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36230 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36418 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36422 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36425 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36433 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36441 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36445 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36448 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36459 "powerpc.tcc"
				>
				class OpLswx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36464 "powerpc.tcc"
				>
				{
				public:
					OpLswx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 36509 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 36513 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 36516 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 36521 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 36525 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 36528 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 36532 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 36535 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36582 "powerpc.tcc"
					resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36586 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36589 "powerpc.tcc"
					,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36593 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36596 "powerpc.tcc"
					);
					virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36601 "powerpc.tcc"
					uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36605 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36608 "powerpc.tcc"
					,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36612 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36615 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36803 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36807 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36810 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36818 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36826 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 36830 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36833 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36844 "powerpc.tcc"
				>
				class OpStswi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36849 "powerpc.tcc"
				>
				{
				public:
					OpStswi(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t nb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 36894 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 36898 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 36901 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 36906 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 36910 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 36913 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 36917 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 36920 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36967 "powerpc.tcc"
					resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36971 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36974 "powerpc.tcc"
					,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36978 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 36981 "powerpc.tcc"
					);
					virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 36986 "powerpc.tcc"
					uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 36990 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 36993 "powerpc.tcc"
					,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 36997 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37000 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37188 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37192 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37195 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37203 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37211 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37215 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37218 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37229 "powerpc.tcc"
				>
				class OpStswx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37234 "powerpc.tcc"
				>
				{
				public:
					OpStswx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 37279 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 37283 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 37286 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 37291 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 37295 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 37298 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 37302 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 37305 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37355 "powerpc.tcc"
					resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37359 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37362 "powerpc.tcc"
					,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37366 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37369 "powerpc.tcc"
					);
					virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37374 "powerpc.tcc"
					uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37378 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37381 "powerpc.tcc"
					,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37385 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37388 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37576 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37580 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37583 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37591 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37599 "powerpc.tcc"
					loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37603 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37606 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37617 "powerpc.tcc"
				>
				class OpLmw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37622 "powerpc.tcc"
				>
				{
				public:
					OpLmw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 37667 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 37671 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 37674 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 37679 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 37683 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 37686 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 37690 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 37693 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37737 "powerpc.tcc"
					resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37741 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37744 "powerpc.tcc"
					,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37748 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37751 "powerpc.tcc"
					);
					virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 37756 "powerpc.tcc"
					uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 37760 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 37763 "powerpc.tcc"
					,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 37767 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 37770 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37958 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 37962 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37965 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37973 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37984 "powerpc.tcc"
				>
				class OpStmw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37989 "powerpc.tcc"
				>
				{
				public:
					OpStmw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 38034 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 38038 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 38041 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 38046 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 38050 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 38053 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 38057 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 38060 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 38107 "powerpc.tcc"
					resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 38111 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 38114 "powerpc.tcc"
					,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 38118 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 38121 "powerpc.tcc"
					);
					virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					void
#line 38126 "powerpc.tcc"
					uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					typename CONFIG::STATE *
#line 38130 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					cpu
#line 38133 "powerpc.tcc"
					,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					unsigned int
#line 38137 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					uop_num
#line 38140 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38328 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 38332 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38335 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38343 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38354 "powerpc.tcc"
				>
				class OpLfd : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38359 "powerpc.tcc"
				>
				{
				public:
					OpLfd(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 38404 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 38408 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 38411 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 38416 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 38420 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 38423 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 38427 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 38430 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38630 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 38634 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38637 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38645 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38656 "powerpc.tcc"
				>
				class OpLfdu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38661 "powerpc.tcc"
				>
				{
				public:
					OpLfdu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 38706 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 38710 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 38713 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 38718 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 38722 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 38725 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 38729 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 38732 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38935 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 38939 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38942 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38950 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 38956 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 38961 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38972 "powerpc.tcc"
				>
				class OpLfdux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38977 "powerpc.tcc"
				>
				{
				public:
					OpLfdux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39022 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39026 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39029 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39034 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39038 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39041 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39045 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39048 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39254 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 39258 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39261 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39269 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 39275 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 39280 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39288 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39291 "powerpc.tcc"
				>
				class OpLfdx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39296 "powerpc.tcc"
				>
				{
				public:
					OpLfdx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39341 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39345 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39348 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39353 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39357 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39360 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39364 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39367 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39570 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 39574 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39577 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39585 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39596 "powerpc.tcc"
				>
				class OpLfs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39601 "powerpc.tcc"
				>
				{
				public:
					OpLfs(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39646 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39650 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39653 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39658 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39662 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39665 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39669 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39672 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39872 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 39876 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39879 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39887 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 39895 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39906 "powerpc.tcc"
				>
				class OpLfsu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39911 "powerpc.tcc"
				>
				{
				public:
					OpLfsu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 39956 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 39960 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 39963 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 39968 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 39972 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 39975 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 39979 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 39982 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40185 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 40189 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40192 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40200 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40206 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 40211 "powerpc.tcc"
					split_into();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40219 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40230 "powerpc.tcc"
				>
				class OpLfsux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40235 "powerpc.tcc"
				>
				{
				public:
					OpLfsux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 40280 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 40284 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 40287 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 40292 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 40296 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 40299 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 40303 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 40306 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_ra();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40447 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 40451 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40454 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40462 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40468 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 40473 "powerpc.tcc"
					split_into();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40481 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40492 "powerpc.tcc"
				>
				class OpLfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40497 "powerpc.tcc"
				>
				{
				public:
					OpLfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 40542 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 40546 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 40549 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 40554 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 40558 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 40561 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 40565 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 40568 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_write_fd();
					virtual
					void
					initialize_write_fpscr();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40771 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 40775 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40778 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40786 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40794 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40805 "powerpc.tcc"
				>
				class OpStfd : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40810 "powerpc.tcc"
				>
				{
				public:
					OpStfd(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 40855 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 40859 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 40862 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 40867 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 40871 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 40874 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 40878 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 40881 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41081 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 41085 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 41088 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41096 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41107 "powerpc.tcc"
				>
				class OpStfdu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41112 "powerpc.tcc"
				>
				{
				public:
					OpStfdu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 41157 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 41161 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 41164 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 41169 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 41173 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 41176 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 41180 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 41183 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41386 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 41390 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 41393 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41401 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 41407 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 41412 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41423 "powerpc.tcc"
				>
				class OpStfdux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41428 "powerpc.tcc"
				>
				{
				public:
					OpStfdux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 41473 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 41477 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 41480 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 41485 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 41489 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 41492 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 41496 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 41499 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41705 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 41709 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 41712 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41720 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 41726 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 41731 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41739 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41742 "powerpc.tcc"
				>
				class OpStfdx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41747 "powerpc.tcc"
				>
				{
				public:
					OpStfdx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 41792 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 41796 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 41799 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 41804 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 41808 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 41811 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 41815 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 41818 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42021 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42025 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42028 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42036 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42047 "powerpc.tcc"
				>
				class OpStfiwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42052 "powerpc.tcc"
				>
				{
				public:
					OpStfiwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 42097 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 42101 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 42104 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 42109 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 42113 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 42116 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 42120 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 42123 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42326 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42330 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42333 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42341 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42352 "powerpc.tcc"
				>
				class OpStfs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42357 "powerpc.tcc"
				>
				{
				public:
					OpStfs(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 42402 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 42406 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 42409 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 42414 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 42418 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 42421 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 42425 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 42428 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42628 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42632 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42635 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42643 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 42651 "powerpc.tcc"
					get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42655 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42658 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 42674 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42685 "powerpc.tcc"
				>
				class OpStfsu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42690 "powerpc.tcc"
				>
				{
				public:
					OpStfsu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 42735 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 42739 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 42742 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 42747 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 42751 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 42754 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 42758 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 42761 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42964 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 42968 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 42971 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42979 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 42985 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 42990 "powerpc.tcc"
					split_into();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 42998 "powerpc.tcc"
					get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43002 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43005 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43021 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43032 "powerpc.tcc"
				>
				class OpStfsux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43037 "powerpc.tcc"
				>
				{
				public:
					OpStfsux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 43082 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 43086 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 43089 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 43094 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 43098 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 43101 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 43105 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 43108 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					virtual
					void
					initialize_write_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43314 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43318 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43321 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43329 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43335 "powerpc.tcc"
					is_splitted();
					virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 43340 "powerpc.tcc"
					split_into();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 43348 "powerpc.tcc"
					get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43352 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43355 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43371 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43382 "powerpc.tcc"
				>
				class OpStfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43387 "powerpc.tcc"
				>
				{
				public:
					OpStfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 43432 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 43436 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 43439 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 43444 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 43448 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 43451 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 43455 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 43458 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_fs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43661 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43665 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43668 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43676 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 43684 "powerpc.tcc"
					get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 43688 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43691 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 43707 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43718 "powerpc.tcc"
				>
				class OpDcba : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43723 "powerpc.tcc"
				>
				{
				public:
					OpDcba(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 43767 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 43771 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 43774 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 43779 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 43783 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 43786 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 43790 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 43793 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43959 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43970 "powerpc.tcc"
				>
				class OpDcbf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43975 "powerpc.tcc"
				>
				{
				public:
					OpDcbf(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44019 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44023 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44026 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44031 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44035 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44038 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44042 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44045 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44211 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44222 "powerpc.tcc"
				>
				class OpDcbi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44227 "powerpc.tcc"
				>
				{
				public:
					OpDcbi(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44271 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44275 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44278 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44283 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44287 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44290 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44294 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44297 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44460 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44471 "powerpc.tcc"
				>
				class OpDcbst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44476 "powerpc.tcc"
				>
				{
				public:
					OpDcbst(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44520 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44524 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44527 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44532 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44536 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44539 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44543 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44546 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44712 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44723 "powerpc.tcc"
				>
				class OpDcbt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44728 "powerpc.tcc"
				>
				{
				public:
					OpDcbt(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 44772 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 44776 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 44779 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 44784 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 44788 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 44791 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 44795 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 44798 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44958 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44969 "powerpc.tcc"
				>
				class OpDcbtst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44974 "powerpc.tcc"
				>
				{
				public:
					OpDcbtst(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45018 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45022 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45025 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45030 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45034 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45037 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45041 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45044 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45204 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45215 "powerpc.tcc"
				>
				class OpDcbz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45220 "powerpc.tcc"
				>
				{
				public:
					OpDcbz(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45264 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45268 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45271 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45276 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45280 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45283 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45287 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45290 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45456 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45467 "powerpc.tcc"
				>
				class OpIcbi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45472 "powerpc.tcc"
				>
				{
				public:
					OpIcbi(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45516 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45520 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45523 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45528 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45532 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45535 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45539 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45542 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45708 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45719 "powerpc.tcc"
				>
				class OpTlbia : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45724 "powerpc.tcc"
				>
				{
				public:
					OpTlbia(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 45766 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 45770 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 45773 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 45778 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 45782 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 45785 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 45789 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 45792 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45949 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45960 "powerpc.tcc"
				>
				class OpTlbie : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45965 "powerpc.tcc"
				>
				{
				public:
					OpTlbie(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46008 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46012 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46015 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46020 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46024 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46027 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46031 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46034 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46197 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46208 "powerpc.tcc"
				>
				class OpTlbsync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46213 "powerpc.tcc"
				>
				{
				public:
					OpTlbsync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46255 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46259 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46262 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46267 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46271 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46274 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46278 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46281 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46441 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46449 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46452 "powerpc.tcc"
				>
				class OpTlbld : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46457 "powerpc.tcc"
				>
				{
				public:
					OpTlbld(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46500 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46504 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46507 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46512 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46516 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46519 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46523 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46526 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_rb();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46546 "powerpc.tcc"
				>
				class OpTlbli : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46551 "powerpc.tcc"
				>
				{
				public:
					OpTlbli(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46594 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46598 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46601 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46606 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46610 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46613 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46617 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46620 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_rb();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46640 "powerpc.tcc"
				>
				class OpEciwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46645 "powerpc.tcc"
				>
				{
				public:
					OpEciwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46690 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46694 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46697 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46702 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 46706 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 46709 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 46713 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 46716 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46910 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 46914 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 46917 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 46925 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46936 "powerpc.tcc"
				>
				class OpEcowx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46941 "powerpc.tcc"
				>
				{
				public:
					OpEcowx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 46986 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 46990 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 46993 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 46998 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47002 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47005 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47009 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47012 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_read_ra();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47141 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 47145 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 47148 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47156 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47167 "powerpc.tcc"
				>
				class OpEieio : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47172 "powerpc.tcc"
				>
				{
				public:
					OpEieio(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 47214 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 47218 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 47221 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 47226 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47230 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47233 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47237 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47240 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47400 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47411 "powerpc.tcc"
				>
				class OpIsync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47416 "powerpc.tcc"
				>
				{
				public:
					OpIsync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 47458 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 47462 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 47465 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 47470 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47474 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47477 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47481 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47484 "powerpc.tcc"
					);
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47641 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47652 "powerpc.tcc"
				>
				class OpLwarx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47657 "powerpc.tcc"
				>
				{
				public:
					OpLwarx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 47702 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 47706 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 47709 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 47714 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 47718 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 47721 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 47725 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 47728 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47928 "powerpc.tcc"
					loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					typename CONFIG::STATE *
#line 47932 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 47935 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 47943 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47954 "powerpc.tcc"
				>
				class OpStwcx_ : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47959 "powerpc.tcc"
				>
				{
				public:
					OpStwcx_(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48004 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48008 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48011 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48016 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48020 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48023 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48027 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48030 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					virtual
					void
					initialize_read_ra();
					virtual
					void
					initialize_read_rb();
					virtual
					void
					initialize_read_rs();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 48199 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48210 "powerpc.tcc"
				>
				class OpSync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48215 "powerpc.tcc"
				>
				{
				public:
					OpSync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48257 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48261 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48264 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48269 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48273 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48276 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48280 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48283 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 48443 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48454 "powerpc.tcc"
				>
				class OpSc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48459 "powerpc.tcc"
				>
				{
				public:
					OpSc(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48501 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48505 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48508 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48513 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48517 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48520 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48524 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48527 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48684 "powerpc.tcc"
				>
				class OpRfi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48689 "powerpc.tcc"
				>
				{
				public:
					OpRfi(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48731 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48735 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48738 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48743 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48747 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48750 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48754 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48757 "powerpc.tcc"
					);
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48914 "powerpc.tcc"
				>
				class OpTw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48919 "powerpc.tcc"
				>
				{
				public:
					OpTw(CodeType code, typename CONFIG::address_t addr);
					uint32_t to;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 48964 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 48968 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 48971 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 48976 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 48980 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 48983 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 48987 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 48990 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49150 "powerpc.tcc"
				>
				class OpTwi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49155 "powerpc.tcc"
				>
				{
				public:
					OpTwi(CodeType code, typename CONFIG::address_t addr);
					uint32_t to;
					uint32_t ra;
					int32_t simm;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49200 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49204 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49207 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49212 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49216 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49219 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49223 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49226 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49386 "powerpc.tcc"
				>
				class OpMcrxr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49391 "powerpc.tcc"
				>
				{
				public:
					OpMcrxr(CodeType code, typename CONFIG::address_t addr);
					uint32_t crfD;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49434 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49438 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49441 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49446 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49450 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49453 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49457 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49460 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49620 "powerpc.tcc"
				>
				class OpMfcr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49625 "powerpc.tcc"
				>
				{
				public:
					OpMfcr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49668 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49672 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49675 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49680 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49684 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49687 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49691 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49694 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49857 "powerpc.tcc"
				>
				class OpMfmsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49862 "powerpc.tcc"
				>
				{
				public:
					OpMfmsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 49905 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 49909 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 49912 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 49917 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 49921 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 49924 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 49928 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 49931 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50091 "powerpc.tcc"
				>
				class OpMfspr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50096 "powerpc.tcc"
				>
				{
				public:
					OpMfspr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t spr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50140 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50144 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50147 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50152 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50156 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50159 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50163 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50166 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50329 "powerpc.tcc"
				>
				class OpMtspr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50334 "powerpc.tcc"
				>
				{
				public:
					OpMtspr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t spr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50378 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50382 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50385 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50390 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50394 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50397 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50401 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50404 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50567 "powerpc.tcc"
				>
				class OpMftb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50572 "powerpc.tcc"
				>
				{
				public:
					OpMftb(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t tbr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50616 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50620 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50623 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50628 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50632 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50635 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50639 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50642 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50805 "powerpc.tcc"
				>
				class OpMtcrf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50810 "powerpc.tcc"
				>
				{
				public:
					OpMtcrf(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t crm;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 50854 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 50858 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 50861 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 50866 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 50870 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 50873 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 50877 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 50880 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51037 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51040 "powerpc.tcc"
				>
				class OpMtmsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51045 "powerpc.tcc"
				>
				{
				public:
					OpMtmsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51088 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51092 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51095 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51100 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51104 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51107 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51111 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51114 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51274 "powerpc.tcc"
				>
				class OpMfsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51279 "powerpc.tcc"
				>
				{
				public:
					OpMfsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t sr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51323 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51327 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51330 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51335 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51339 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51342 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51346 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51349 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51509 "powerpc.tcc"
				>
				class OpMfsrin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51514 "powerpc.tcc"
				>
				{
				public:
					OpMfsrin(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51558 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51562 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51565 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51570 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51574 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51577 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51581 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51584 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51744 "powerpc.tcc"
				>
				class OpMtsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51749 "powerpc.tcc"
				>
				{
				public:
					OpMtsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t sr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 51793 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 51797 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 51800 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 51805 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 51809 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 51812 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 51816 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 51819 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51982 "powerpc.tcc"
				>
				class OpMtsrin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51987 "powerpc.tcc"
				>
				{
				public:
					OpMtsrin(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 60 "ppc.isa"
					void
#line 52031 "powerpc.tcc"
					execute(
#line 60 "ppc.isa"
					typename CONFIG::STATE *
#line 52035 "powerpc.tcc"
#line 60 "ppc.isa"
					cpu
#line 52038 "powerpc.tcc"
					);
					virtual
#line 64 "ppc.isa"
					void
#line 52043 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52047 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52050 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52054 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52057 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52220 "powerpc.tcc"
				>
				class OpDss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52225 "powerpc.tcc"
				>
				{
				public:
					OpDss(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					virtual
#line 64 "ppc.isa"
					void
#line 52234 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52238 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52241 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52245 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52248 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52262 "powerpc.tcc"
				>
				class OpDssall : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52267 "powerpc.tcc"
				>
				{
				public:
					OpDssall(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					virtual
#line 64 "ppc.isa"
					void
#line 52276 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52280 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52283 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52287 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52290 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52301 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52304 "powerpc.tcc"
				>
				class OpDst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52309 "powerpc.tcc"
				>
				{
				public:
					OpDst(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52320 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52324 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52327 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52331 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52334 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52348 "powerpc.tcc"
				>
				class OpDstst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52353 "powerpc.tcc"
				>
				{
				public:
					OpDstst(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52364 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52368 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52371 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52375 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52378 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52389 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52392 "powerpc.tcc"
				>
				class OpDststt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52397 "powerpc.tcc"
				>
				{
				public:
					OpDststt(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52408 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52412 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52415 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52419 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52422 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52436 "powerpc.tcc"
				>
				class OpDstt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52441 "powerpc.tcc"
				>
				{
				public:
					OpDstt(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52452 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52456 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52459 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52463 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52466 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52480 "powerpc.tcc"
				>
				class OpLvebx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52485 "powerpc.tcc"
				>
				{
				public:
					OpLvebx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52496 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52500 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52503 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52507 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52510 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52524 "powerpc.tcc"
				>
				class OpLvehx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52529 "powerpc.tcc"
				>
				{
				public:
					OpLvehx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52540 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52544 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52547 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52551 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52554 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52568 "powerpc.tcc"
				>
				class OpLvewx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52573 "powerpc.tcc"
				>
				{
				public:
					OpLvewx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52584 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52588 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52591 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52595 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52598 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52612 "powerpc.tcc"
				>
				class OpLvsl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52617 "powerpc.tcc"
				>
				{
				public:
					OpLvsl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52628 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52632 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52635 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52639 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52642 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52656 "powerpc.tcc"
				>
				class OpLvsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52661 "powerpc.tcc"
				>
				{
				public:
					OpLvsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52672 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52676 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52679 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52683 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52686 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52700 "powerpc.tcc"
				>
				class OpLvx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52705 "powerpc.tcc"
				>
				{
				public:
					OpLvx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52716 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52720 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52723 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52727 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52730 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52744 "powerpc.tcc"
				>
				class OpLvxl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52749 "powerpc.tcc"
				>
				{
				public:
					OpLvxl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52760 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52764 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52767 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52771 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52774 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52788 "powerpc.tcc"
				>
				class OpMfvscr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52793 "powerpc.tcc"
				>
				{
				public:
					OpMfvscr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					virtual
#line 64 "ppc.isa"
					void
#line 52802 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52806 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52809 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52813 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52816 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52833 "powerpc.tcc"
				>
				class OpMtvscr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52838 "powerpc.tcc"
				>
				{
				public:
					OpMtvscr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 52847 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52851 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52854 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52858 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52861 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52878 "powerpc.tcc"
				>
				class OpStvebx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52883 "powerpc.tcc"
				>
				{
				public:
					OpStvebx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52894 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52898 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52901 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52905 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52908 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52925 "powerpc.tcc"
				>
				class OpStvehx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52930 "powerpc.tcc"
				>
				{
				public:
					OpStvehx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52941 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52945 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52948 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52952 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 52955 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52972 "powerpc.tcc"
				>
				class OpStvewx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52977 "powerpc.tcc"
				>
				{
				public:
					OpStvewx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 52988 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 52992 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 52995 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 52999 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53002 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53019 "powerpc.tcc"
				>
				class OpStvx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53024 "powerpc.tcc"
				>
				{
				public:
					OpStvx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 53035 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53039 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53042 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53046 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53049 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53063 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53066 "powerpc.tcc"
				>
				class OpStvxl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53071 "powerpc.tcc"
				>
				{
				public:
					OpStvxl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 64 "ppc.isa"
					void
#line 53082 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53086 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53089 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53093 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53096 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
					virtual
					void
					initialize_serialization();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53113 "powerpc.tcc"
				>
				class OpVaddcuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53118 "powerpc.tcc"
				>
				{
				public:
					OpVaddcuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53129 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53133 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53136 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53140 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53143 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53157 "powerpc.tcc"
				>
				class OpVaddfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53162 "powerpc.tcc"
				>
				{
				public:
					OpVaddfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53173 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53177 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53180 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53184 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53187 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53201 "powerpc.tcc"
				>
				class OpVaddsbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53206 "powerpc.tcc"
				>
				{
				public:
					OpVaddsbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53217 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53221 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53224 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53228 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53231 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53245 "powerpc.tcc"
				>
				class OpVaddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53250 "powerpc.tcc"
				>
				{
				public:
					OpVaddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53261 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53265 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53268 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53272 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53275 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53289 "powerpc.tcc"
				>
				class OpVaddsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53294 "powerpc.tcc"
				>
				{
				public:
					OpVaddsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53305 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53309 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53312 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53316 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53319 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53333 "powerpc.tcc"
				>
				class OpVaddubm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53338 "powerpc.tcc"
				>
				{
				public:
					OpVaddubm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53349 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53353 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53356 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53360 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53363 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53377 "powerpc.tcc"
				>
				class OpVaddubs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53382 "powerpc.tcc"
				>
				{
				public:
					OpVaddubs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53393 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53397 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53400 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53404 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53407 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53421 "powerpc.tcc"
				>
				class OpVadduhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53426 "powerpc.tcc"
				>
				{
				public:
					OpVadduhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53437 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53441 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53444 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53448 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53451 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53465 "powerpc.tcc"
				>
				class OpVadduhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53470 "powerpc.tcc"
				>
				{
				public:
					OpVadduhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53481 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53485 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53488 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53492 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53495 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53509 "powerpc.tcc"
				>
				class OpVadduwm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53514 "powerpc.tcc"
				>
				{
				public:
					OpVadduwm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53525 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53529 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53532 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53536 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53539 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53553 "powerpc.tcc"
				>
				class OpVadduws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53558 "powerpc.tcc"
				>
				{
				public:
					OpVadduws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53569 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53573 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53576 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53580 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53583 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53597 "powerpc.tcc"
				>
				class OpVand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53602 "powerpc.tcc"
				>
				{
				public:
					OpVand(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53613 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53617 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53620 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53624 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53627 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53641 "powerpc.tcc"
				>
				class OpVandc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53646 "powerpc.tcc"
				>
				{
				public:
					OpVandc(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53657 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53661 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53664 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53668 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53671 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53685 "powerpc.tcc"
				>
				class OpVavgsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53690 "powerpc.tcc"
				>
				{
				public:
					OpVavgsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53701 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53705 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53708 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53712 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53715 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53729 "powerpc.tcc"
				>
				class OpVavgsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53734 "powerpc.tcc"
				>
				{
				public:
					OpVavgsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53745 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53749 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53752 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53756 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53759 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53773 "powerpc.tcc"
				>
				class OpVavgsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53778 "powerpc.tcc"
				>
				{
				public:
					OpVavgsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53789 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53793 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53796 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53800 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53803 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53814 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53817 "powerpc.tcc"
				>
				class OpVavgub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53822 "powerpc.tcc"
				>
				{
				public:
					OpVavgub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53833 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53837 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53840 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53844 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53847 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53858 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53861 "powerpc.tcc"
				>
				class OpVavguh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53866 "powerpc.tcc"
				>
				{
				public:
					OpVavguh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53877 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53881 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53884 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53888 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53891 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53905 "powerpc.tcc"
				>
				class OpVavguw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53910 "powerpc.tcc"
				>
				{
				public:
					OpVavguw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53921 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53925 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53928 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53932 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53935 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53949 "powerpc.tcc"
				>
				class OpVcfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53954 "powerpc.tcc"
				>
				{
				public:
					OpVcfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 53965 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 53969 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 53972 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 53976 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 53979 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53993 "powerpc.tcc"
				>
				class OpVcfux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53998 "powerpc.tcc"
				>
				{
				public:
					OpVcfux(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54009 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54013 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54016 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54020 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54023 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54037 "powerpc.tcc"
				>
				class OpVcmpbfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54042 "powerpc.tcc"
				>
				{
				public:
					OpVcmpbfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54054 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54058 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54061 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54065 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54068 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54082 "powerpc.tcc"
				>
				class OpVcmpeqfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54087 "powerpc.tcc"
				>
				{
				public:
					OpVcmpeqfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54099 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54103 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54106 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54110 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54113 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54127 "powerpc.tcc"
				>
				class OpVcmpequb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54132 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54144 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54148 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54151 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54155 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54158 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54172 "powerpc.tcc"
				>
				class OpVcmpequh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54177 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54189 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54193 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54196 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54200 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54203 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54217 "powerpc.tcc"
				>
				class OpVcmpequw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54222 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54234 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54238 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54241 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54245 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54248 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54262 "powerpc.tcc"
				>
				class OpVcmpgefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54267 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54279 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54283 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54286 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54290 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54293 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54307 "powerpc.tcc"
				>
				class OpVcmpgtfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54312 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54324 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54328 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54331 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54335 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54338 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54352 "powerpc.tcc"
				>
				class OpVcmpgtsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54357 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54369 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54373 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54376 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54380 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54383 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54397 "powerpc.tcc"
				>
				class OpVcmpgtsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54402 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54414 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54418 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54421 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54425 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54428 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54442 "powerpc.tcc"
				>
				class OpVcmpgtsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54447 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54459 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54463 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54466 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54470 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54473 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54487 "powerpc.tcc"
				>
				class OpVcmpgtub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54492 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54504 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54508 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54511 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54515 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54518 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54532 "powerpc.tcc"
				>
				class OpVcmpgtuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54537 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54549 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54553 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54556 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54560 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54563 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54577 "powerpc.tcc"
				>
				class OpVcmpgtuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54582 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 64 "ppc.isa"
					void
#line 54594 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54598 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54601 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54605 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54608 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54622 "powerpc.tcc"
				>
				class OpVctsxs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54627 "powerpc.tcc"
				>
				{
				public:
					OpVctsxs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54638 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54642 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54645 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54649 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54652 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54666 "powerpc.tcc"
				>
				class OpVctuxs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54671 "powerpc.tcc"
				>
				{
				public:
					OpVctuxs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54682 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54686 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54689 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54693 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54696 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54710 "powerpc.tcc"
				>
				class OpVexptefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54715 "powerpc.tcc"
				>
				{
				public:
					OpVexptefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54725 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54729 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54732 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54736 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54739 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54753 "powerpc.tcc"
				>
				class OpVlogefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54758 "powerpc.tcc"
				>
				{
				public:
					OpVlogefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54768 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54772 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54775 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54779 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54782 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54796 "powerpc.tcc"
				>
				class OpVmaddfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54801 "powerpc.tcc"
				>
				{
				public:
					OpVmaddfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 54813 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54817 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54820 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54824 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54827 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54841 "powerpc.tcc"
				>
				class OpVmaxfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54846 "powerpc.tcc"
				>
				{
				public:
					OpVmaxfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54857 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54861 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54864 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54868 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54871 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54885 "powerpc.tcc"
				>
				class OpVmaxsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54890 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54901 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54905 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54908 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54912 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54915 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54929 "powerpc.tcc"
				>
				class OpVmaxsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54934 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54945 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54949 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54952 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 54956 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 54959 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54973 "powerpc.tcc"
				>
				class OpVmaxsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54978 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 54989 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 54993 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 54996 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55000 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55003 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55017 "powerpc.tcc"
				>
				class OpVmaxub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55022 "powerpc.tcc"
				>
				{
				public:
					OpVmaxub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55033 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55037 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55040 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55044 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55047 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55061 "powerpc.tcc"
				>
				class OpVmaxuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55066 "powerpc.tcc"
				>
				{
				public:
					OpVmaxuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55077 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55081 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55084 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55088 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55091 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55105 "powerpc.tcc"
				>
				class OpVmaxuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55110 "powerpc.tcc"
				>
				{
				public:
					OpVmaxuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55121 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55125 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55128 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55132 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55135 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55149 "powerpc.tcc"
				>
				class OpVmhaddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55154 "powerpc.tcc"
				>
				{
				public:
					OpVmhaddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55166 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55170 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55173 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55177 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55180 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55194 "powerpc.tcc"
				>
				class OpVmhraddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55199 "powerpc.tcc"
				>
				{
				public:
					OpVmhraddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55211 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55215 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55218 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55222 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55225 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55239 "powerpc.tcc"
				>
				class OpVminfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55244 "powerpc.tcc"
				>
				{
				public:
					OpVminfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55255 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55259 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55262 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55266 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55269 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55283 "powerpc.tcc"
				>
				class OpVminsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55288 "powerpc.tcc"
				>
				{
				public:
					OpVminsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55299 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55303 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55306 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55310 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55313 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55324 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55327 "powerpc.tcc"
				>
				class OpVminsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55332 "powerpc.tcc"
				>
				{
				public:
					OpVminsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55343 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55347 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55350 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55354 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55357 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55368 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55371 "powerpc.tcc"
				>
				class OpVminsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55376 "powerpc.tcc"
				>
				{
				public:
					OpVminsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55387 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55391 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55394 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55398 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55401 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55415 "powerpc.tcc"
				>
				class OpVminub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55420 "powerpc.tcc"
				>
				{
				public:
					OpVminub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55431 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55435 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55438 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55442 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55445 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55459 "powerpc.tcc"
				>
				class OpVminuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55464 "powerpc.tcc"
				>
				{
				public:
					OpVminuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55475 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55479 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55482 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55486 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55489 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55503 "powerpc.tcc"
				>
				class OpVminuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55508 "powerpc.tcc"
				>
				{
				public:
					OpVminuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55519 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55523 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55526 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55530 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55533 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55544 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55547 "powerpc.tcc"
				>
				class OpVmladduhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55552 "powerpc.tcc"
				>
				{
				public:
					OpVmladduhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55564 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55568 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55571 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55575 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55578 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55592 "powerpc.tcc"
				>
				class OpVmrghb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55597 "powerpc.tcc"
				>
				{
				public:
					OpVmrghb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55608 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55612 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55615 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55619 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55622 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55633 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55636 "powerpc.tcc"
				>
				class OpVmrghh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55641 "powerpc.tcc"
				>
				{
				public:
					OpVmrghh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55652 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55656 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55659 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55663 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55666 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55680 "powerpc.tcc"
				>
				class OpVmrghw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55685 "powerpc.tcc"
				>
				{
				public:
					OpVmrghw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55696 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55700 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55703 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55707 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55710 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55724 "powerpc.tcc"
				>
				class OpVmrglb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55729 "powerpc.tcc"
				>
				{
				public:
					OpVmrglb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55740 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55744 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55747 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55751 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55754 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55768 "powerpc.tcc"
				>
				class OpVmrglh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55773 "powerpc.tcc"
				>
				{
				public:
					OpVmrglh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55784 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55788 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55791 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55795 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55798 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55812 "powerpc.tcc"
				>
				class OpVmrglw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55817 "powerpc.tcc"
				>
				{
				public:
					OpVmrglw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 55828 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55832 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55835 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55839 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55842 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55856 "powerpc.tcc"
				>
				class OpVmsummbm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55861 "powerpc.tcc"
				>
				{
				public:
					OpVmsummbm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55873 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55877 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55880 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55884 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55887 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55901 "powerpc.tcc"
				>
				class OpVmsumshm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55906 "powerpc.tcc"
				>
				{
				public:
					OpVmsumshm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55918 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55922 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55925 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55929 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55932 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55943 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55946 "powerpc.tcc"
				>
				class OpVmsumshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55951 "powerpc.tcc"
				>
				{
				public:
					OpVmsumshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 55963 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 55967 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 55970 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 55974 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 55977 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55991 "powerpc.tcc"
				>
				class OpVmsumubm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55996 "powerpc.tcc"
				>
				{
				public:
					OpVmsumubm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56008 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56012 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56015 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56019 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56022 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56036 "powerpc.tcc"
				>
				class OpVmsumuhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56041 "powerpc.tcc"
				>
				{
				public:
					OpVmsumuhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56053 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56057 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56060 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56064 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56067 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56081 "powerpc.tcc"
				>
				class OpVmsumuhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56086 "powerpc.tcc"
				>
				{
				public:
					OpVmsumuhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56098 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56102 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56105 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56109 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56112 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56126 "powerpc.tcc"
				>
				class OpVmulesb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56131 "powerpc.tcc"
				>
				{
				public:
					OpVmulesb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56142 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56146 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56149 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56153 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56156 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56170 "powerpc.tcc"
				>
				class OpVmulesh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56175 "powerpc.tcc"
				>
				{
				public:
					OpVmulesh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56186 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56190 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56193 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56197 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56200 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56214 "powerpc.tcc"
				>
				class OpVmuleub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56219 "powerpc.tcc"
				>
				{
				public:
					OpVmuleub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56230 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56234 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56237 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56241 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56244 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56255 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56258 "powerpc.tcc"
				>
				class OpVmuleuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56263 "powerpc.tcc"
				>
				{
				public:
					OpVmuleuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56274 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56278 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56281 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56285 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56288 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56302 "powerpc.tcc"
				>
				class OpVmulosb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56307 "powerpc.tcc"
				>
				{
				public:
					OpVmulosb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56318 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56322 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56325 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56329 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56332 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56346 "powerpc.tcc"
				>
				class OpVmulosh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56351 "powerpc.tcc"
				>
				{
				public:
					OpVmulosh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56362 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56366 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56369 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56373 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56376 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56390 "powerpc.tcc"
				>
				class OpVmuloub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56395 "powerpc.tcc"
				>
				{
				public:
					OpVmuloub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56406 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56410 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56413 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56417 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56420 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56434 "powerpc.tcc"
				>
				class OpVmulouh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56439 "powerpc.tcc"
				>
				{
				public:
					OpVmulouh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56450 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56454 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56457 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56461 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56464 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56478 "powerpc.tcc"
				>
				class OpVnmsubfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56483 "powerpc.tcc"
				>
				{
				public:
					OpVnmsubfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56495 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56499 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56502 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56506 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56509 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56523 "powerpc.tcc"
				>
				class OpVnor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56528 "powerpc.tcc"
				>
				{
				public:
					OpVnor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56539 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56543 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56546 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56550 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56553 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56567 "powerpc.tcc"
				>
				class OpVor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56572 "powerpc.tcc"
				>
				{
				public:
					OpVor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56583 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56587 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56590 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56594 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56597 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56611 "powerpc.tcc"
				>
				class OpVperm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56616 "powerpc.tcc"
				>
				{
				public:
					OpVperm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 56628 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56632 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56635 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56639 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56642 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56656 "powerpc.tcc"
				>
				class OpVpkpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56661 "powerpc.tcc"
				>
				{
				public:
					OpVpkpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56672 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56676 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56679 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56683 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56686 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56700 "powerpc.tcc"
				>
				class OpVpkshss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56705 "powerpc.tcc"
				>
				{
				public:
					OpVpkshss(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56716 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56720 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56723 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56727 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56730 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56744 "powerpc.tcc"
				>
				class OpVpkshus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56749 "powerpc.tcc"
				>
				{
				public:
					OpVpkshus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56760 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56764 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56767 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56771 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56774 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56788 "powerpc.tcc"
				>
				class OpVpkswss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56793 "powerpc.tcc"
				>
				{
				public:
					OpVpkswss(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56804 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56808 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56811 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56815 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56818 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56832 "powerpc.tcc"
				>
				class OpVpkswus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56837 "powerpc.tcc"
				>
				{
				public:
					OpVpkswus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56848 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56852 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56855 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56859 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56862 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56876 "powerpc.tcc"
				>
				class OpVpkuhum : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56881 "powerpc.tcc"
				>
				{
				public:
					OpVpkuhum(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56892 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56896 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56899 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56903 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56906 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56920 "powerpc.tcc"
				>
				class OpVpkuhus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56925 "powerpc.tcc"
				>
				{
				public:
					OpVpkuhus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56936 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56940 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56943 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56947 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56950 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 56961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56964 "powerpc.tcc"
				>
				class OpVpkuwum : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56969 "powerpc.tcc"
				>
				{
				public:
					OpVpkuwum(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 56980 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 56984 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 56987 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 56991 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 56994 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57005 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57008 "powerpc.tcc"
				>
				class OpVpkuwus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57013 "powerpc.tcc"
				>
				{
				public:
					OpVpkuwus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57024 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57028 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57031 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57035 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57038 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57052 "powerpc.tcc"
				>
				class OpVrefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57057 "powerpc.tcc"
				>
				{
				public:
					OpVrefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57067 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57071 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57074 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57078 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57081 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57095 "powerpc.tcc"
				>
				class OpVrfim : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57100 "powerpc.tcc"
				>
				{
				public:
					OpVrfim(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57110 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57114 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57117 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57121 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57124 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57135 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57138 "powerpc.tcc"
				>
				class OpVrfin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57143 "powerpc.tcc"
				>
				{
				public:
					OpVrfin(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57153 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57157 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57160 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57164 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57167 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57181 "powerpc.tcc"
				>
				class OpVrfip : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57186 "powerpc.tcc"
				>
				{
				public:
					OpVrfip(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57196 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57200 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57203 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57207 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57210 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57224 "powerpc.tcc"
				>
				class OpVrfiz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57229 "powerpc.tcc"
				>
				{
				public:
					OpVrfiz(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57239 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57243 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57246 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57250 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57253 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57267 "powerpc.tcc"
				>
				class OpVrlb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57272 "powerpc.tcc"
				>
				{
				public:
					OpVrlb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57283 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57287 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57290 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57294 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57297 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57311 "powerpc.tcc"
				>
				class OpVrlh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57316 "powerpc.tcc"
				>
				{
				public:
					OpVrlh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57327 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57331 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57334 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57338 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57341 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57355 "powerpc.tcc"
				>
				class OpVrlw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57360 "powerpc.tcc"
				>
				{
				public:
					OpVrlw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57371 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57375 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57378 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57382 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57385 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57399 "powerpc.tcc"
				>
				class OpVrsqrtefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57404 "powerpc.tcc"
				>
				{
				public:
					OpVrsqrtefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57414 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57418 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57421 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57425 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57428 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57442 "powerpc.tcc"
				>
				class OpVsel : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57447 "powerpc.tcc"
				>
				{
				public:
					OpVsel(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 64 "ppc.isa"
					void
#line 57459 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57463 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57466 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57470 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57473 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57487 "powerpc.tcc"
				>
				class OpVsl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57492 "powerpc.tcc"
				>
				{
				public:
					OpVsl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57503 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57507 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57510 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57514 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57517 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57531 "powerpc.tcc"
				>
				class OpVslb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57536 "powerpc.tcc"
				>
				{
				public:
					OpVslb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57547 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57551 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57554 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57558 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57561 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57575 "powerpc.tcc"
				>
				class OpVsldoi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57580 "powerpc.tcc"
				>
				{
				public:
					OpVsldoi(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t sh;
					virtual
#line 64 "ppc.isa"
					void
#line 57592 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57596 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57599 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57603 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57606 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57620 "powerpc.tcc"
				>
				class OpVslh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57625 "powerpc.tcc"
				>
				{
				public:
					OpVslh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57636 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57640 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57643 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57647 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57650 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57664 "powerpc.tcc"
				>
				class OpVslo : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57669 "powerpc.tcc"
				>
				{
				public:
					OpVslo(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57680 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57684 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57687 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57691 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57694 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57708 "powerpc.tcc"
				>
				class OpVslw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57713 "powerpc.tcc"
				>
				{
				public:
					OpVslw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57724 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57728 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57731 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57735 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57738 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57752 "powerpc.tcc"
				>
				class OpVspltb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57757 "powerpc.tcc"
				>
				{
				public:
					OpVspltb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57768 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57772 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57775 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57779 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57782 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57796 "powerpc.tcc"
				>
				class OpVsplth : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57801 "powerpc.tcc"
				>
				{
				public:
					OpVsplth(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57812 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57816 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57819 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57823 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57826 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57840 "powerpc.tcc"
				>
				class OpVspltisb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57845 "powerpc.tcc"
				>
				{
				public:
					OpVspltisb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57856 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57860 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57863 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57867 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57870 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57884 "powerpc.tcc"
				>
				class OpVspltish : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57889 "powerpc.tcc"
				>
				{
				public:
					OpVspltish(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57900 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57904 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57907 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57911 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57914 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57925 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57928 "powerpc.tcc"
				>
				class OpVspltisw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57933 "powerpc.tcc"
				>
				{
				public:
					OpVspltisw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57944 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57948 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57951 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57955 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 57958 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 57969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57972 "powerpc.tcc"
				>
				class OpVspltw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57977 "powerpc.tcc"
				>
				{
				public:
					OpVspltw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 57988 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 57992 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 57995 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 57999 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58002 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58016 "powerpc.tcc"
				>
				class OpVsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58021 "powerpc.tcc"
				>
				{
				public:
					OpVsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58032 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58036 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58039 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58043 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58046 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58060 "powerpc.tcc"
				>
				class OpVsrab : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58065 "powerpc.tcc"
				>
				{
				public:
					OpVsrab(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58076 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58080 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58083 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58087 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58090 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58104 "powerpc.tcc"
				>
				class OpVsrah : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58109 "powerpc.tcc"
				>
				{
				public:
					OpVsrah(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58120 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58124 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58127 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58131 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58134 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58148 "powerpc.tcc"
				>
				class OpVsraw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58153 "powerpc.tcc"
				>
				{
				public:
					OpVsraw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58164 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58168 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58171 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58175 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58178 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58192 "powerpc.tcc"
				>
				class OpVsrb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58197 "powerpc.tcc"
				>
				{
				public:
					OpVsrb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58208 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58212 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58215 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58219 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58222 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58236 "powerpc.tcc"
				>
				class OpVsrh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58241 "powerpc.tcc"
				>
				{
				public:
					OpVsrh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58252 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58256 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58259 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58263 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58266 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58280 "powerpc.tcc"
				>
				class OpVsro : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58285 "powerpc.tcc"
				>
				{
				public:
					OpVsro(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58296 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58300 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58303 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58307 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58310 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58324 "powerpc.tcc"
				>
				class OpVsrw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58329 "powerpc.tcc"
				>
				{
				public:
					OpVsrw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58340 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58344 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58347 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58351 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58354 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58365 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58368 "powerpc.tcc"
				>
				class OpVsubcuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58373 "powerpc.tcc"
				>
				{
				public:
					OpVsubcuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58384 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58388 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58391 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58395 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58398 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58409 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58412 "powerpc.tcc"
				>
				class OpVsubfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58417 "powerpc.tcc"
				>
				{
				public:
					OpVsubfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58428 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58432 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58435 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58439 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58442 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58456 "powerpc.tcc"
				>
				class OpVsubsbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58461 "powerpc.tcc"
				>
				{
				public:
					OpVsubsbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58472 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58476 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58479 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58483 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58486 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58500 "powerpc.tcc"
				>
				class OpVsubshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58505 "powerpc.tcc"
				>
				{
				public:
					OpVsubshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58516 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58520 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58523 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58527 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58530 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58544 "powerpc.tcc"
				>
				class OpVsubsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58549 "powerpc.tcc"
				>
				{
				public:
					OpVsubsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58560 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58564 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58567 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58571 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58574 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58588 "powerpc.tcc"
				>
				class OpVsububm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58593 "powerpc.tcc"
				>
				{
				public:
					OpVsububm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58604 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58608 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58611 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58615 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58618 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58632 "powerpc.tcc"
				>
				class OpVsububs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58637 "powerpc.tcc"
				>
				{
				public:
					OpVsububs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58648 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58652 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58655 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58659 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58662 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58676 "powerpc.tcc"
				>
				class OpVsubuhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58681 "powerpc.tcc"
				>
				{
				public:
					OpVsubuhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58692 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58696 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58699 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58703 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58706 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58720 "powerpc.tcc"
				>
				class OpVsubuhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58725 "powerpc.tcc"
				>
				{
				public:
					OpVsubuhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58736 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58740 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58743 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58747 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58750 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58761 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58764 "powerpc.tcc"
				>
				class OpVsubuwm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58769 "powerpc.tcc"
				>
				{
				public:
					OpVsubuwm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58780 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58784 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58787 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58791 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58794 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58808 "powerpc.tcc"
				>
				class OpVsubuws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58813 "powerpc.tcc"
				>
				{
				public:
					OpVsubuws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58824 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58828 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58831 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58835 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58838 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58852 "powerpc.tcc"
				>
				class OpVsumsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58857 "powerpc.tcc"
				>
				{
				public:
					OpVsumsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58868 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58872 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58875 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58879 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58882 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58896 "powerpc.tcc"
				>
				class OpVsum2sws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58901 "powerpc.tcc"
				>
				{
				public:
					OpVsum2sws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58912 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58916 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58919 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58923 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58926 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58940 "powerpc.tcc"
				>
				class OpVsum4sbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58945 "powerpc.tcc"
				>
				{
				public:
					OpVsum4sbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 58956 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 58960 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 58963 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 58967 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 58970 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 58981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58984 "powerpc.tcc"
				>
				class OpVsum4shs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58989 "powerpc.tcc"
				>
				{
				public:
					OpVsum4shs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59000 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59004 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59007 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59011 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59014 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59028 "powerpc.tcc"
				>
				class OpVsum4ubs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59033 "powerpc.tcc"
				>
				{
				public:
					OpVsum4ubs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59044 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59048 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59051 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59055 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59058 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59072 "powerpc.tcc"
				>
				class OpVupkhpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59077 "powerpc.tcc"
				>
				{
				public:
					OpVupkhpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59087 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59091 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59094 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59098 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59101 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59115 "powerpc.tcc"
				>
				class OpVupkhsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59120 "powerpc.tcc"
				>
				{
				public:
					OpVupkhsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59130 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59134 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59137 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59141 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59144 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59158 "powerpc.tcc"
				>
				class OpVupkhsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59163 "powerpc.tcc"
				>
				{
				public:
					OpVupkhsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59173 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59177 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59180 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59184 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59187 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59201 "powerpc.tcc"
				>
				class OpVupklpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59206 "powerpc.tcc"
				>
				{
				public:
					OpVupklpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59216 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59220 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59223 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59227 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59230 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59244 "powerpc.tcc"
				>
				class OpVupklsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59249 "powerpc.tcc"
				>
				{
				public:
					OpVupklsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59259 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59263 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59266 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59270 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59273 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59284 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59287 "powerpc.tcc"
				>
				class OpVupklsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59292 "powerpc.tcc"
				>
				{
				public:
					OpVupklsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59302 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59306 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59309 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59313 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59316 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 59327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59330 "powerpc.tcc"
				>
				class OpVxor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59335 "powerpc.tcc"
				>
				{
				public:
					OpVxor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 64 "ppc.isa"
					void
#line 59346 "powerpc.tcc"
					disasm(
#line 64 "ppc.isa"
					typename CONFIG::STATE *
#line 59350 "powerpc.tcc"
#line 64 "ppc.isa"
					cpu
#line 59353 "powerpc.tcc"
					,
#line 64 "ppc.isa"
					ostream&
#line 59357 "powerpc.tcc"
#line 64 "ppc.isa"
					os
#line 59360 "powerpc.tcc"
					);
					virtual
					void
					initialize_unit();
				private:
				};

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 59404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59407 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 59411 "powerpc.tcc"
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59415 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 59419 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 59422 "powerpc.tcc"
				)
				{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t ca; // carry out
						uint8_t ov; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						Add32(result, ca, ov, a, b, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(oe || rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();
							if(unlikely(oe))
							{
								// Generate XER[OV] and XER[SO]
								xer = ov ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
								// Update XER
								cpu->SetXER(xer);
							}
							if(unlikely(rc))
							{
								// Read CR
								uint32_t cr = cpu->GetCR();

								// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
								cr = (cr & ~CONFIG::CR0_MASK) |
								((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
								(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

								// Update CR
								cpu->SetCR(cr);
							}
						}
					}
#line 59467 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59472 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59475 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 59479 "powerpc.tcc"
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59483 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 59487 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 59490 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 59494 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 59497 "powerpc.tcc"
				)
				{
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "add" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 59504 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59509 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59512 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59519 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 59524 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59532 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59539 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59549 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59557 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59564 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59574 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59582 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59589 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59599 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59607 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59614 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 59629 "powerpc.tcc"
				}
				/** Integer (FnIntBasic | FnIntBasicSerial | FnIntExtended) **/
				template <
#line 38 "ppc.isa"
				class
#line 59635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59638 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59645 "powerpc.tcc"
				>::initialize_function()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 59650 "powerpc.tcc"
				}
				/** Integer **/
				template <
#line 38 "ppc.isa"
				class
#line 59656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59659 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59666 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 123 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 59671 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59679 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 59686 "powerpc.tcc"
				>::initialize_operands()
				{
#line 465 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 59699 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 59705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59708 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59713 "powerpc.tcc"
				> *DecodeOpAdd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAdd<
#line 38 "ppc.isa"
					CONFIG
#line 59719 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 59726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59729 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 59733 "powerpc.tcc"
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59737 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 59741 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 59744 "powerpc.tcc"
				)
				{
#line 109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, a, b, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 59790 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59798 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 59802 "powerpc.tcc"
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59806 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 59810 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 59813 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 59817 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 59820 "powerpc.tcc"
				)
				{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addc" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 59827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59835 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59842 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 59847 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59855 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59862 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59872 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59880 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59887 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59897 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59905 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59912 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 59922 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59930 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59937 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 59952 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59960 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 59967 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 59985 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59993 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 60000 "powerpc.tcc"
				>::initialize_function()
				{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60005 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60010 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60013 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 60020 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 124 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60025 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60033 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 60040 "powerpc.tcc"
				>::initialize_operands()
				{
#line 476 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T, 2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 60054 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60063 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60068 "powerpc.tcc"
				> *DecodeOpAddc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddc<
#line 38 "ppc.isa"
					CONFIG
#line 60074 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60084 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 60088 "powerpc.tcc"
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60092 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 60096 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 60099 "powerpc.tcc"
				)
				{
#line 156 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();
						uint32_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, a, b, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 60146 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60151 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60154 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 60158 "powerpc.tcc"
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60162 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 60166 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 60169 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 60173 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 60176 "powerpc.tcc"
				)
				{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "adde" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 60183 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60191 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60198 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 60203 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60208 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60211 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60218 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 60225 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60233 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60240 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60250 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60255 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60258 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60265 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60275 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60283 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60290 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60299 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60307 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60314 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60324 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60332 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60339 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 60354 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60362 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60369 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 60387 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60395 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60402 "powerpc.tcc"
				>::initialize_function()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 60407 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60415 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60422 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 125 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60427 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60432 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60435 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 60442 "powerpc.tcc"
				>::initialize_operands()
				{
#line 488 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 60457 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60463 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60466 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60471 "powerpc.tcc"
				> *DecodeOpAdde(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAdde<
#line 38 "ppc.isa"
					CONFIG
#line 60477 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60487 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 60491 "powerpc.tcc"
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60495 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 60499 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 60502 "powerpc.tcc"
				)
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						uint32_t result = (ra != 0 ? a + simm : simm);

						// Write back the result
						cpu->SetGPR(rd, result);
					}
#line 60516 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60524 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 60528 "powerpc.tcc"
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60532 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 60536 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 60539 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 60543 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 60546 "powerpc.tcc"
				)
				{
#line 214 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(ra == 0)
						os << "li r" << rd << ", " << simm;
						else
						os << "addi r" << rd << ", r" << ra << ", " << simm;
					}
#line 60556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60564 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60571 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 60576 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60584 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60591 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60601 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60609 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60616 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60626 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60634 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60641 "powerpc.tcc"
				>::initialize_function()
				{
#line 197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60646 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60654 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60661 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60666 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60671 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60674 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 60681 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 60693 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60702 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60707 "powerpc.tcc"
				> *DecodeOpAddi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddi<
#line 38 "ppc.isa"
					CONFIG
#line 60713 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60723 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 60727 "powerpc.tcc"
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60731 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 60735 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 60738 "powerpc.tcc"
				)
				{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, a, simm, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						// Update XER
						cpu->SetXER(xer);
					}
#line 60763 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60771 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 60775 "powerpc.tcc"
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60779 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 60783 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 60786 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 60790 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 60793 "powerpc.tcc"
				)
				{
#line 243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addic r" << rd << ", r" << ra << ", " << simm;
					}
#line 60800 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60808 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60815 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 60820 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60825 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60828 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60835 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60845 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60853 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60860 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60870 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60878 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60885 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 424 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 60894 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60899 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60902 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60909 "powerpc.tcc"
				>::initialize_function()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60914 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60922 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60929 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60934 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 60951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60954 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 60961 "powerpc.tcc"
				>::initialize_operands()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 60971 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60980 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60985 "powerpc.tcc"
				> *DecodeOpAddic(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddic<
#line 38 "ppc.isa"
					CONFIG
#line 60991 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60998 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61001 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61005 "powerpc.tcc"
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61009 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61013 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61016 "powerpc.tcc"
				)
				{
#line 248 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, a, simm, 0) ;

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						// Update XER
						cpu->SetXER(xer);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 61052 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61060 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61064 "powerpc.tcc"
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61068 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61072 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61075 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61079 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61082 "powerpc.tcc"
				)
				{
#line 280 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addic. r" << rd << ", r" << ra << ", " << simm;
					}
#line 61089 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61094 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61097 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61104 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61109 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61117 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61124 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61142 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61149 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61159 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61167 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61174 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 424 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61183 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61191 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61198 "powerpc.tcc"
				>::initialize_function()
				{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61203 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61208 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61211 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61218 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 128 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61223 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61228 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61231 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 61238 "powerpc.tcc"
				>::initialize_operands()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
						OUTPUT(XER_T,2);

					}
#line 61249 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61255 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61258 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61263 "powerpc.tcc"
				> *DecodeOpAddic_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddic_<
#line 38 "ppc.isa"
					CONFIG
#line 61269 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61279 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61283 "powerpc.tcc"
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61287 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61291 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61294 "powerpc.tcc"
				)
				{
#line 285 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						uint32_t result = ra != 0 ? a + simm : simm;

						// Write back the result
						cpu->SetGPR(rd, result);
					}
#line 61308 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61316 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61320 "powerpc.tcc"
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61324 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61328 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61331 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61335 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61338 "powerpc.tcc"
				)
				{
#line 295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(ra == 0)
						os << "lis r" << rd << ", " << (simm >> 16);
						else
						os << "addis r" << rd << ", r" << ra << ", " << (simm >> 16);
					}
#line 61348 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61356 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61363 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61368 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61376 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61383 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61393 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61401 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61408 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61418 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61426 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61433 "powerpc.tcc"
				>::initialize_function()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61438 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61443 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61446 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61453 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61458 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61463 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61466 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 61473 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 61485 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61494 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61499 "powerpc.tcc"
				> *DecodeOpAddis(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddis<
#line 38 "ppc.isa"
					CONFIG
#line 61505 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61512 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61515 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61519 "powerpc.tcc"
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61523 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61527 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61530 "powerpc.tcc"
				)
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, 0xFFFFFFFF, a, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 61576 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61584 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61588 "powerpc.tcc"
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61592 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61596 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61599 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61603 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61606 "powerpc.tcc"
				)
				{
#line 345 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addme" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 61613 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61621 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61628 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61633 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61641 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61648 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 61655 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61663 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61670 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61680 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61688 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61695 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61704 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61712 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61719 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 61729 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61737 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61744 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 61762 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61770 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61777 "powerpc.tcc"
				>::initialize_function()
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 61782 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61790 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61797 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 130 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61802 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 61819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61822 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 61829 "powerpc.tcc"
				>::initialize_operands()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 61839 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61845 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61848 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61853 "powerpc.tcc"
				> *DecodeOpAddme(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddme<
#line 38 "ppc.isa"
					CONFIG
#line 61859 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61869 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 61873 "powerpc.tcc"
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 61877 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 61881 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 61884 "powerpc.tcc"
				)
				{
#line 350 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, a, carry_in, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 61930 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61938 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 61942 "powerpc.tcc"
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 61946 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 61950 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 61953 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 61957 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 61960 "powerpc.tcc"
				)
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addze" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 61967 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61975 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 61982 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 61987 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61995 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62002 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 62009 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62017 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62024 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62034 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62042 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62049 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62058 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62063 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62066 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62073 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62083 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62091 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62098 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62113 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62118 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62121 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62128 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62146 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62151 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62154 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62161 "powerpc.tcc"
				>::initialize_function()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 62166 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62171 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62174 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62181 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 62186 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62194 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 62201 "powerpc.tcc"
				>::initialize_operands()
				{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(XER_T, 2);
						INPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62215 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62224 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62229 "powerpc.tcc"
				> *DecodeOpAddze(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddze<
#line 38 "ppc.isa"
					CONFIG
#line 62235 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62245 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 62249 "powerpc.tcc"
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62253 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 62257 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 62260 "powerpc.tcc"
				)
				{
#line 398 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						if(unlikely((a == 0x80000000UL && b == 0xffffffffUL) || b == 0))
						{
							// Write back the result (zero)
							cpu->SetGPR(rd, 0);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();
								if(unlikely(oe))
								{
									// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
									xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: LT=0 GT=0 EQ=0 SO=XER[SO]
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0);

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
						else
						{
							// Read the input operands
							int32_t a = cpu->GetGPR(ra);
							int32_t b = cpu->GetGPR(rb);

							// Compute the result
							int32_t result = a / b;

							// Write back the result
							cpu->SetGPR(rd, result);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV]: XER[OV]=0
									xer = xer & ~CONFIG::XER_OV_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
					}
#line 62341 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62349 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 62353 "powerpc.tcc"
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62357 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 62361 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 62364 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 62368 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 62371 "powerpc.tcc"
				)
				{
#line 475 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "divw" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 62378 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62386 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62393 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 62398 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62406 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62413 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62423 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62431 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62438 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62448 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62456 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62463 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62473 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62481 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62488 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62503 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62511 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62518 "powerpc.tcc"
				>::initialize_function()
				{
#line 203 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 62523 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62531 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62538 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(35); }
#line 62543 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62548 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62551 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 62558 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62571 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62580 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62585 "powerpc.tcc"
				> *DecodeOpDivw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDivw<
#line 38 "ppc.isa"
					CONFIG
#line 62591 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62598 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62601 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 62605 "powerpc.tcc"
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62609 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 62613 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 62616 "powerpc.tcc"
				)
				{
#line 480 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						if(unlikely(b == 0))
						{
							// Write back the result (zero)
							cpu->SetGPR(rd, 0);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
									xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=0 CR0[GT]=0 CR0[EQ]=1
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									CONFIG::CR0_EQ_MASK;

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
						else
						{
							// Compute the result
							uint32_t result = a / b ;

							// Write back the result
							cpu->SetGPR(rd, result);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV]: XER[OV]=0
									xer = xer & ~CONFIG::XER_OV_MASK;

									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
					}
#line 62695 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62700 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62703 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 62707 "powerpc.tcc"
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62711 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 62715 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 62718 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 62722 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 62725 "powerpc.tcc"
				)
				{
#line 555 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "divwu" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 62732 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62740 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62747 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 62752 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62757 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62760 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62767 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62777 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62785 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62792 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62802 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62810 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62817 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 62827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62835 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62842 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 62857 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62865 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62872 "powerpc.tcc"
				>::initialize_function()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 62877 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62885 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62892 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 133 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(35); }
#line 62897 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62905 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 62912 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62925 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62934 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62939 "powerpc.tcc"
				> *DecodeOpDivwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDivwu<
#line 38 "ppc.isa"
					CONFIG
#line 62945 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62955 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 62959 "powerpc.tcc"
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 62963 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 62967 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 62970 "powerpc.tcc"
				)
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						int32_t b = cpu->GetGPR(rb);

						// Compute the result
						int64_t result64 = (int64_t) a * (int64_t) b;
						uint32_t result = (int32_t) (result64 >> 32);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 63003 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63008 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63011 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63015 "powerpc.tcc"
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63019 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63023 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63026 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63030 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63033 "powerpc.tcc"
				)
				{
#line 590 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulhw" << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 63040 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63045 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63048 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63055 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63060 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63065 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63068 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63075 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63085 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63093 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63100 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63110 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63118 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63125 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63135 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63140 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63143 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63150 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 63165 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63173 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63180 "powerpc.tcc"
				>::initialize_function()
				{
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63185 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63193 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63200 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(5); }
#line 63205 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63213 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 63220 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 63233 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63239 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63242 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63247 "powerpc.tcc"
				> *DecodeOpMulhw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulhw<
#line 38 "ppc.isa"
					CONFIG
#line 63253 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63263 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 63267 "powerpc.tcc"
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63271 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 63275 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 63278 "powerpc.tcc"
				)
				{
#line 595 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint64_t result64 = (uint64_t) a * (uint64_t) b;
						uint32_t result = (uint32_t) (result64 >> 32);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 63311 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63319 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63323 "powerpc.tcc"
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63327 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63331 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63334 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63338 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63341 "powerpc.tcc"
				)
				{
#line 624 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulhwu" << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 63348 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63356 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63363 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63368 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63376 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63383 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63393 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63401 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63408 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63418 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63426 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63433 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63443 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63451 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63458 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 63473 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63481 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63488 "powerpc.tcc"
				>::initialize_function()
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63493 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63501 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63508 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 135 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(5); }
#line 63513 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63521 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 63528 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 63541 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63550 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63555 "powerpc.tcc"
				> *DecodeOpMulhwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulhwu<
#line 38 "ppc.isa"
					CONFIG
#line 63561 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63571 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 63575 "powerpc.tcc"
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63579 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 63583 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 63586 "powerpc.tcc"
				)
				{
#line 629 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						int64_t result64 = (int64_t) a * (int64_t) simm;
						uint32_t result = (uint32_t) result64;

						// Write back the result
						cpu->SetGPR(rd, result);
					}
#line 63601 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63609 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63613 "powerpc.tcc"
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63617 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63621 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63624 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63628 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63631 "powerpc.tcc"
				)
				{
#line 640 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulli r" << rd << ", r" << ra << ", " << simm;
					}
#line 63638 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63646 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63653 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63658 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63666 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63673 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63683 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63691 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63698 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63708 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63713 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63716 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63723 "powerpc.tcc"
				>::initialize_function()
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 63728 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63733 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63736 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63743 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 63748 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63753 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63756 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 63763 "powerpc.tcc"
				>::initialize_operands()
				{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
					}
#line 63771 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63780 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63785 "powerpc.tcc"
				> *DecodeOpMulli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulli<
#line 38 "ppc.isa"
					CONFIG
#line 63791 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63801 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 63805 "powerpc.tcc"
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63809 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 63813 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 63816 "powerpc.tcc"
				)
				{
#line 645 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						int64_t result64 = (int64_t) a * (int64_t) b;
						uint32_t result = (uint32_t) result64;

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(oe || rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();

							if(oe && (0xFFFFFFFF00000000ULL & result64) != 0)
							{
								// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
								xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;

								// Update XER
								cpu->SetXER(xer);
							}
							if(unlikely(rc))
							{
								// Read CR
								uint32_t cr = cpu->GetCR();

								// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
								cr = (cr & ~CONFIG::CR0_MASK) |
								((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
								(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

								// Update CR
								cpu->SetCR(cr);
							}
						}
					}
#line 63860 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63868 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 63872 "powerpc.tcc"
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63876 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 63880 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 63883 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 63887 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 63890 "powerpc.tcc"
				)
				{
#line 685 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mullw r" << rd << ", r" << ra << ", r" << rb;
					}
#line 63897 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63905 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63912 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 63917 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63925 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63932 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63942 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63950 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63957 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63967 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63975 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 63982 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 63992 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63997 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64000 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64007 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 430 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 64022 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64027 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64030 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64037 "powerpc.tcc"
				>::initialize_function()
				{
#line 208 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 64042 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64050 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64057 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 137 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ if (oe) LAT(5); else LAT(4); }
#line 64062 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64067 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64070 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 64077 "powerpc.tcc"
				>::initialize_operands()
				{
#line 452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 64090 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64096 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64099 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64104 "powerpc.tcc"
				> *DecodeOpMullw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMullw<
#line 38 "ppc.isa"
					CONFIG
#line 64110 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64120 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64124 "powerpc.tcc"
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64128 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64132 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64135 "powerpc.tcc"
				)
				{
#line 690 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);

						if(a == 0x80000000UL)
						{
							// Write back the result
							cpu->SetGPR(rd, 0x80000000UL);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV] and XER[SO]: XER[OV]=1 XER[SO]=1
									xer = xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK;
									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=1 CR0[GT]=0 CR0[EQ]=0
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									CONFIG::CR0_LT_MASK;

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
						else
						{
							// Compute the result
							uint32_t result = -a; // 2's complement of a: (~a) + 1;

							// Write back the result
							cpu->SetGPR(rd, result);

							if(unlikely(oe || rc))
							{
								// Read XER
								uint32_t xer = cpu->GetXER();

								if(unlikely(oe))
								{
									// Generate XER[OV]: XER[OV]=0
									xer = xer & ~CONFIG::XER_OV_MASK;
									// Update XER
									cpu->SetXER(xer);
								}
								if(unlikely(rc))
								{
									// Read CR
									uint32_t cr = cpu->GetCR();

									// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
									cr = (cr & ~CONFIG::CR0_MASK) |
									((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
									(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

									// Update CR
									cpu->SetCR(cr);
								}
							}
						}
					}
#line 64211 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64219 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 64223 "powerpc.tcc"
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64227 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 64231 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 64234 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 64238 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 64241 "powerpc.tcc"
				)
				{
#line 762 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "neg" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 64248 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64256 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64263 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 64268 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64273 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64276 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64283 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64293 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64301 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64308 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64318 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64326 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64333 "powerpc.tcc"
				>::initialize_function()
				{
#line 209 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 64338 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64346 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64353 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 64358 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64363 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64366 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 64373 "powerpc.tcc"
				>::initialize_operands()
				{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
					}
#line 64381 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64390 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64395 "powerpc.tcc"
				> *DecodeOpNeg(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNeg<
#line 38 "ppc.isa"
					CONFIG
#line 64401 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64411 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64415 "powerpc.tcc"
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64419 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64423 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64426 "powerpc.tcc"
				)
				{
#line 767 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result;
						Add32(result, carry, overflow, ~a, b, 1);

						// Write back the result
						cpu->SetGPR(rd, result);

						if(unlikely(oe || rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();
							if(unlikely(oe))
							{
								// Generate XER[OV] and XER[SO]
								xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
								// Update XER
								cpu->SetXER(xer);
							}
							if(unlikely(rc))
							{
								// Read CR
								uint32_t cr = cpu->GetCR();

								// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
								cr = (cr & ~CONFIG::CR0_MASK) |
								((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
								(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

								// Update CR
								cpu->SetCR(cr);
							}
						}
					}
#line 64471 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64476 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64479 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 64483 "powerpc.tcc"
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64487 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 64491 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 64494 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 64498 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 64501 "powerpc.tcc"
				)
				{
#line 808 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subf" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 64508 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64513 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64516 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64523 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 64528 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64536 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64543 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64553 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64561 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64568 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64578 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64586 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64593 "powerpc.tcc"
				>::initialize_function()
				{
#line 210 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 64598 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64606 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64613 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 64618 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64623 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64626 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 64633 "powerpc.tcc"
				>::initialize_operands()
				{
#line 465 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 64646 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64655 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64660 "powerpc.tcc"
				> *DecodeOpSubf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubf<
#line 38 "ppc.isa"
					CONFIG
#line 64666 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64676 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64680 "powerpc.tcc"
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64684 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64688 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64691 "powerpc.tcc"
				)
				{
#line 813 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, ~a, b, 1);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 64736 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64744 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 64748 "powerpc.tcc"
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64752 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 64756 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 64759 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 64763 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 64766 "powerpc.tcc"
				)
				{
#line 854 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfc" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 64773 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64778 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64781 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64788 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 64793 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64801 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64808 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64818 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64826 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64833 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 64843 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64851 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64858 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 64876 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64884 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64891 "powerpc.tcc"
				>::initialize_function()
				{
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 64896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64904 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64911 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 140 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 64916 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64924 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 64931 "powerpc.tcc"
				>::initialize_operands()
				{
#line 476 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T, 2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 64945 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64954 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64959 "powerpc.tcc"
				> *DecodeOpSubfc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfc<
#line 38 "ppc.isa"
					CONFIG
#line 64965 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64975 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 64979 "powerpc.tcc"
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 64983 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 64987 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 64990 "powerpc.tcc"
				)
				{
#line 859 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, ~a, b, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 65037 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65045 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 65049 "powerpc.tcc"
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65053 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 65057 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 65060 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 65064 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 65067 "powerpc.tcc"
				)
				{
#line 902 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfe" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 65074 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65082 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65089 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 65094 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65102 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65109 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 65116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65124 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65131 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65141 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65149 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65156 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65165 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65173 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65180 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65190 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65198 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65205 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 65223 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65228 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65231 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65238 "powerpc.tcc"
				>::initialize_function()
				{
#line 212 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 65243 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65248 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65251 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65258 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65263 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65268 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65271 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 65278 "powerpc.tcc"
				>::initialize_operands()
				{
#line 488 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 65293 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65302 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65307 "powerpc.tcc"
				> *DecodeOpSubfe(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfe<
#line 38 "ppc.isa"
					CONFIG
#line 65313 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65323 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 65327 "powerpc.tcc"
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65331 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 65335 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 65338 "powerpc.tcc"
				)
				{
#line 907 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow = 0; // overflow
						uint32_t result;

						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						int32_t b = simm;
						uint32_t xer = cpu->GetXER();

						// Compute the result
						Add32(result, carry, overflow, -a, b, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = (carry || a == 0) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						// Update XER
						cpu->SetXER(xer);
					}
#line 65364 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65372 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 65376 "powerpc.tcc"
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65380 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 65384 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 65387 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 65391 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 65394 "powerpc.tcc"
				)
				{
#line 929 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfic r" << rd << ", r" << ra << ", " << simm;
					}
#line 65401 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65409 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65416 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 65421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65429 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65436 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65454 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65461 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65471 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65476 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65479 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65486 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 424 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65503 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65510 "powerpc.tcc"
				>::initialize_function()
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 65515 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65523 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65530 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 142 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65535 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 65552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65555 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 65562 "powerpc.tcc"
				>::initialize_operands()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 65572 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65581 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65586 "powerpc.tcc"
				> *DecodeOpSubfic(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfic<
#line 38 "ppc.isa"
					CONFIG
#line 65592 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65602 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 65606 "powerpc.tcc"
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65610 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 65614 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 65617 "powerpc.tcc"
				)
				{
#line 934 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, ~a, 0xFFFFFFFF, carry_in);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 65663 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65671 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 65675 "powerpc.tcc"
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65679 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 65683 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 65686 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 65690 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 65693 "powerpc.tcc"
				)
				{
#line 976 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfme" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 65700 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65708 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65715 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 65720 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65725 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65728 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65735 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 65742 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65750 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65757 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65767 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65775 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65782 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65791 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65796 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65799 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65806 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 65816 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65824 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65831 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 65849 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65857 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65864 "powerpc.tcc"
				>::initialize_function()
				{
#line 214 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 65869 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65877 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65884 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65889 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 65906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65909 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 65916 "powerpc.tcc"
				>::initialize_operands()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 65926 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65932 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65935 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65940 "powerpc.tcc"
				> *DecodeOpSubfme(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfme<
#line 38 "ppc.isa"
					CONFIG
#line 65946 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65956 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 65960 "powerpc.tcc"
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 65964 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 65968 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 65971 "powerpc.tcc"
				)
				{
#line 981 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry; // carry out
						uint8_t overflow; // overflow
						uint32_t result;

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t xer = cpu->GetXER();
						uint8_t carry_in = (xer >> CONFIG::XER_CA_OFFSET) & 1;

						// Compute the result
						Add32(result, carry, overflow, ~a, carry_in, 0);

						// Write back the result
						cpu->SetGPR(rd, result);

						// Generate XER[CA]
						xer = carry ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;

						if(unlikely(oe))
						{
							// Generate XER[OV] and XER[SO]
							xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 66017 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66022 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66025 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66029 "powerpc.tcc"
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66033 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66037 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66040 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66044 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66047 "powerpc.tcc"
				)
				{
#line 1023 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfze" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 66054 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66062 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66069 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66074 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66082 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66089 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 66096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66104 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66111 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66121 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66129 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66136 "powerpc.tcc"
				>::initialize_read_xer()
				{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66145 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66153 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66160 "powerpc.tcc"
				>::initialize_write_rd()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66170 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66175 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66178 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66185 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(oe)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
						else
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 66203 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66208 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66211 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66218 "powerpc.tcc"
				>::initialize_function()
				{
#line 215 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 66223 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66228 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66231 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66238 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66243 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66248 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66251 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 66258 "powerpc.tcc"
				>::initialize_operands()
				{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(XER_T, 2);
						INPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 66272 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66281 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66286 "powerpc.tcc"
				> *DecodeOpSubfze(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfze<
#line 38 "ppc.isa"
					CONFIG
#line 66292 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER COMPARE INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 66304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66307 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 66311 "powerpc.tcc"
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66315 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 66319 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 66322 "powerpc.tcc"
				)
				{
#line 1034 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						int32_t b = cpu->GetGPR(rb) ;
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < b) ? CONFIG::CR0_LT_MASK : (a > b) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 66340 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66348 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66352 "powerpc.tcc"
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66356 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66360 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66363 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66367 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66370 "powerpc.tcc"
				)
				{
#line 1048 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmp cr" << crfD << ", " << l << ", r" << ra << ", r" << rb;
					}
#line 66377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66385 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66392 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66397 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66405 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66412 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66430 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66437 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66447 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66455 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66462 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 466 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66471 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66476 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66479 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66486 "powerpc.tcc"
				>::initialize_function()
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 66491 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66499 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66506 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66511 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66519 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 66526 "powerpc.tcc"
				>::initialize_operands()
				{
#line 752 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 66537 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66546 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66551 "powerpc.tcc"
				> *DecodeOpCmp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmp<
#line 38 "ppc.isa"
					CONFIG
#line 66557 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66567 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 66571 "powerpc.tcc"
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66575 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 66579 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 66582 "powerpc.tcc"
				)
				{
#line 1053 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Raise an illegal instruction exception if l=1
						if(l) throw IllegalInstructionException<CONFIG>();

						// Read the input operands
						int32_t a = cpu->GetGPR(ra);
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < simm) ? CONFIG::CR0_LT_MASK : (a > simm) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 66602 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66607 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66610 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66614 "powerpc.tcc"
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66618 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66622 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66625 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66629 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66632 "powerpc.tcc"
				)
				{
#line 1069 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpi cr" << crfD << ", " << l << ", r" << ra << ", " << simm;
					}
#line 66639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66647 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66654 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66659 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66667 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66674 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66684 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66692 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66699 "powerpc.tcc"
				>::initialize_function()
				{
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 66704 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66712 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66719 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66724 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66729 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66732 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 66739 "powerpc.tcc"
				>::initialize_operands()
				{
#line 384 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 66749 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66758 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66763 "powerpc.tcc"
				> *DecodeOpCmpi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpi<
#line 38 "ppc.isa"
					CONFIG
#line 66769 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66779 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 66783 "powerpc.tcc"
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66787 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 66791 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 66794 "powerpc.tcc"
				)
				{
#line 1074 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Raise an illegal instruction exception if l=1
						if(l) throw IllegalInstructionException<CONFIG>();

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb) ;
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < b) ? CONFIG::CR0_LT_MASK : (a > b) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 66815 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66823 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 66827 "powerpc.tcc"
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66831 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 66835 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 66838 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 66842 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 66845 "powerpc.tcc"
				)
				{
#line 1091 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpl cr" << crfD << ", " << l << ", r" << ra << ", r" << rb;
					}
#line 66852 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66860 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66867 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 66872 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66880 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66887 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66897 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66905 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66912 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 66922 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66930 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66937 "powerpc.tcc"
				>::initialize_function()
				{
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 66942 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66950 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66957 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66962 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66970 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 66977 "powerpc.tcc"
				>::initialize_operands()
				{
#line 752 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 66988 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66994 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66997 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67002 "powerpc.tcc"
				> *DecodeOpCmpl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpl<
#line 38 "ppc.isa"
					CONFIG
#line 67008 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67018 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67022 "powerpc.tcc"
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67026 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67030 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67033 "powerpc.tcc"
				)
				{
#line 1096 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Raise an illegal instruction exception if l=1
						if(l) throw IllegalInstructionException<CONFIG>();

						// Read the input operands
						uint32_t a = cpu->GetGPR(ra);
						uint32_t cr = cpu->GetCR();
						uint32_t xer = cpu->GetXER();

						// Generate CR[crfD] bit field
						uint32_t c = ((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) | ((a < uimm) ? CONFIG::CR0_LT_MASK : (a > uimm) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK);
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c >> (4 * crfD));

						// Update CR
						cpu->SetCR(cr);
					}
#line 67053 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67061 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67065 "powerpc.tcc"
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67069 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67073 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67076 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67080 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67083 "powerpc.tcc"
				)
				{
#line 1112 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpli cr" << crfD << ", " << l << ", r" << ra << ", " << uimm;
					}
#line 67090 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67098 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67105 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67110 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67118 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67125 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67135 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67140 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67143 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67150 "powerpc.tcc"
				>::initialize_function()
				{
#line 219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67155 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67163 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67170 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 148 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67175 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67180 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67183 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 67190 "powerpc.tcc"
				>::initialize_operands()
				{
#line 384 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 67200 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67209 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67214 "powerpc.tcc"
				> *DecodeOpCmpli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpli<
#line 38 "ppc.isa"
					CONFIG
#line 67220 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER LOGICAL INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 67232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67235 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67239 "powerpc.tcc"
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67243 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67247 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67250 "powerpc.tcc"
				)
				{
#line 1123 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s & b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 67282 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67290 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67294 "powerpc.tcc"
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67298 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67302 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67305 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67309 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67312 "powerpc.tcc"
				)
				{
#line 1151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "and" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 67319 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67324 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67327 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67334 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67339 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67347 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67354 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67364 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67372 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67379 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67389 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67397 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67404 "powerpc.tcc"
				>::initialize_function()
				{
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67409 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67417 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67424 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 149 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67429 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67434 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67437 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 67444 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 67457 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67463 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67466 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67471 "powerpc.tcc"
				> *DecodeOpAnd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAnd<
#line 38 "ppc.isa"
					CONFIG
#line 67477 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67487 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67491 "powerpc.tcc"
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67495 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67499 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67502 "powerpc.tcc"
				)
				{
#line 1156 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s & ~b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 67534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67542 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67546 "powerpc.tcc"
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67550 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67554 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67557 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67561 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67564 "powerpc.tcc"
				)
				{
#line 1184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andc" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 67571 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67576 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67579 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67586 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67591 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67596 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67599 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67606 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67616 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67621 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67624 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67631 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67641 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67646 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67649 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67656 "powerpc.tcc"
				>::initialize_function()
				{
#line 221 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67661 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67669 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67676 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67681 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67689 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 67696 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 67709 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67718 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67723 "powerpc.tcc"
				> *DecodeOpAndc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndc<
#line 38 "ppc.isa"
					CONFIG
#line 67729 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67739 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67743 "powerpc.tcc"
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67747 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67751 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67754 "powerpc.tcc"
				)
				{
#line 1189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						uint32_t result = s & uimm;

						// Write back the result
						cpu->SetGPR(ra, result);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 67780 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67788 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 67792 "powerpc.tcc"
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67796 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 67800 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 67803 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 67807 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 67810 "powerpc.tcc"
				)
				{
#line 1211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andi. r" << ra << ", r" << rs << ", " << uimm;
					}
#line 67817 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67825 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67832 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 67837 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67845 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67852 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 67862 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67867 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67870 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67877 "powerpc.tcc"
				>::initialize_function()
				{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 67882 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67890 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67897 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 67902 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67907 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67910 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 67917 "powerpc.tcc"
				>::initialize_operands()
				{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
					}
#line 67926 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67932 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67935 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67940 "powerpc.tcc"
				> *DecodeOpAndi_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndi_<
#line 38 "ppc.isa"
					CONFIG
#line 67946 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67956 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 67960 "powerpc.tcc"
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 67964 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 67968 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 67971 "powerpc.tcc"
				)
				{
#line 1216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						uint32_t result = s & uimm;

						// Write back the result
						cpu->SetGPR(ra, result);

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
						cr = (cr & ~CONFIG::CR0_MASK) |
						((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
						(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

						// Update CR
						cpu->SetCR(cr);
					}
#line 67997 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68005 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68009 "powerpc.tcc"
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68013 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68017 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68020 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68024 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68027 "powerpc.tcc"
				)
				{
#line 1238 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andis. r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 68034 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68042 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68049 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68054 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68062 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68069 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68079 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68087 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68094 "powerpc.tcc"
				>::initialize_function()
				{
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68099 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68107 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68114 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 152 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68119 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68127 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 68134 "powerpc.tcc"
				>::initialize_operands()
				{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
					}
#line 68143 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68152 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68157 "powerpc.tcc"
				> *DecodeOpAndis_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndis_<
#line 38 "ppc.isa"
					CONFIG
#line 68163 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68173 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68177 "powerpc.tcc"
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68181 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68185 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68188 "powerpc.tcc"
				)
				{
#line 1243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						// 	uint32_t result = 0;
						// 	uint32_t m = 1 << 31;
						// 	while(result < 32)
						// 	{
							// 		if(s & m) break;
							// 		m >>= 1;
							// 		result++;
							// 	}

						uint32_t result = CountLeadingZeros(s);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// Read XER
							uint32_t xer = cpu->GetXER();
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68227 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68235 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68239 "powerpc.tcc"
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68243 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68247 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68250 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68254 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68257 "powerpc.tcc"
				)
				{
#line 1278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cntlzw" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 68264 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68272 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68279 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68292 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68299 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68309 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68314 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68317 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68324 "powerpc.tcc"
				>::initialize_function()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68329 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68334 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68337 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68344 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 153 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68349 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68357 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 68364 "powerpc.tcc"
				>::initialize_operands()
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 68376 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68385 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68390 "powerpc.tcc"
				> *DecodeOpCntlzw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCntlzw<
#line 38 "ppc.isa"
					CONFIG
#line 68396 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68406 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68410 "powerpc.tcc"
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68414 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68418 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68421 "powerpc.tcc"
				)
				{
#line 1283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = ~(s ^ b);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68453 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68461 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68465 "powerpc.tcc"
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68469 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68473 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68476 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68480 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68483 "powerpc.tcc"
				)
				{
#line 1311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "eqv" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 68490 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68498 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68505 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68518 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68525 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68535 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68543 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68550 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68560 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68568 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68575 "powerpc.tcc"
				>::initialize_function()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68580 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68588 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68595 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 154 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68600 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68608 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 68615 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 68628 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68637 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68642 "powerpc.tcc"
				> *DecodeOpEqv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEqv<
#line 38 "ppc.isa"
					CONFIG
#line 68648 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68658 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68662 "powerpc.tcc"
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68666 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68670 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68673 "powerpc.tcc"
				)
				{
#line 1316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = (uint32_t)(int32_t)(int8_t)(uint8_t) s;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68704 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68712 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68716 "powerpc.tcc"
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68720 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68724 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68727 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68731 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68734 "powerpc.tcc"
				)
				{
#line 1343 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "extsb" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 68741 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68746 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68749 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68756 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68761 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68769 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68776 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 68786 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68794 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68801 "powerpc.tcc"
				>::initialize_function()
				{
#line 226 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 68806 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68811 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68814 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68821 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 68826 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68831 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68834 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 68841 "powerpc.tcc"
				>::initialize_operands()
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 68853 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68862 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68867 "powerpc.tcc"
				> *DecodeOpExtsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpExtsb<
#line 38 "ppc.isa"
					CONFIG
#line 68873 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68883 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 68887 "powerpc.tcc"
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68891 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 68895 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 68898 "powerpc.tcc"
				)
				{
#line 1348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = (uint32_t)(int32_t)(int16_t)(uint16_t) s;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 68929 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68937 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 68941 "powerpc.tcc"
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68945 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 68949 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 68952 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 68956 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 68959 "powerpc.tcc"
				)
				{
#line 1375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "extsh" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 68966 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68974 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 68981 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 68986 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68994 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69001 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69019 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69026 "powerpc.tcc"
				>::initialize_function()
				{
#line 227 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69039 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69046 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 156 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69051 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69059 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 69066 "powerpc.tcc"
				>::initialize_operands()
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 69078 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69087 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69092 "powerpc.tcc"
				> *DecodeOpExtsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpExtsh<
#line 38 "ppc.isa"
					CONFIG
#line 69098 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69108 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69112 "powerpc.tcc"
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69116 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69120 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69123 "powerpc.tcc"
				)
				{
#line 1380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = ~(s & b);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69155 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69163 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69167 "powerpc.tcc"
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69171 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69175 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69178 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69182 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69185 "powerpc.tcc"
				)
				{
#line 1408 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "nand" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69192 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69200 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69207 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69212 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69220 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69227 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69237 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69245 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69252 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69270 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69277 "powerpc.tcc"
				>::initialize_function()
				{
#line 228 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69282 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69290 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69297 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69302 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69310 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 69317 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 69330 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69336 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69339 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69344 "powerpc.tcc"
				> *DecodeOpNand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNand<
#line 38 "ppc.isa"
					CONFIG
#line 69350 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69360 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69364 "powerpc.tcc"
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69368 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69372 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69375 "powerpc.tcc"
				)
				{
#line 1413 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = ~(s | b);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69407 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69415 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69419 "powerpc.tcc"
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69423 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69427 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69430 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69434 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69437 "powerpc.tcc"
				)
				{
#line 1441 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == rb)
						os << "not" << (rc ? "." : "") << " r" << ra << ", r" << rs;
						else
						os << "nor" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69447 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69455 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69462 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69467 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69472 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69475 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69482 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69492 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69500 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69507 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69517 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69525 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69532 "powerpc.tcc"
				>::initialize_function()
				{
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69537 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69545 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69552 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69557 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69562 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69565 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 69572 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 69585 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69594 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69599 "powerpc.tcc"
				> *DecodeOpNor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNor<
#line 38 "ppc.isa"
					CONFIG
#line 69605 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69615 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69619 "powerpc.tcc"
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69623 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69627 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69630 "powerpc.tcc"
				)
				{
#line 1449 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s | b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69662 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69670 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69674 "powerpc.tcc"
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69678 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69682 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69685 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69689 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69692 "powerpc.tcc"
				)
				{
#line 1477 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == rb)
						os << "mr" << (rc ? "." : "") << " r" << ra << ", r" << rs;
						else
						os << "or" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69702 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69710 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69717 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69722 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69730 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69737 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69747 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69755 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69762 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69772 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69780 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69787 "powerpc.tcc"
				>::initialize_function()
				{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 69792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69800 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69807 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 69812 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69817 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69820 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 69827 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 69840 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69849 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69854 "powerpc.tcc"
				> *DecodeOpOr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOr<
#line 38 "ppc.isa"
					CONFIG
#line 69860 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69867 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69870 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 69874 "powerpc.tcc"
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69878 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 69882 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 69885 "powerpc.tcc"
				)
				{
#line 1485 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s | ~b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 69917 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69925 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 69929 "powerpc.tcc"
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69933 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 69937 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 69940 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 69944 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 69947 "powerpc.tcc"
				)
				{
#line 1513 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "orc" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 69954 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69962 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69969 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 69974 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69982 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 69989 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 69999 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70007 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70014 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70032 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70039 "powerpc.tcc"
				>::initialize_function()
				{
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70044 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70052 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70059 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70064 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70072 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 70079 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 70092 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70101 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70106 "powerpc.tcc"
				> *DecodeOpOrc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOrc<
#line 38 "ppc.isa"
					CONFIG
#line 70112 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70122 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70126 "powerpc.tcc"
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70130 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70134 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70137 "powerpc.tcc"
				)
				{
#line 1518 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s | uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 70151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70159 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70163 "powerpc.tcc"
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70167 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70171 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70174 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70178 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70181 "powerpc.tcc"
				)
				{
#line 1528 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == 0 && ra == 0 && uimm == 0)
						os << "nop";
						else
						os << "ori r" << ra << ", r" << rs << ", " << uimm;
					}
#line 70191 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70199 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70206 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70211 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70219 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70226 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70236 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70244 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70251 "powerpc.tcc"
				>::initialize_function()
				{
#line 232 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70256 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70264 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70271 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 161 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70276 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 70282 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70285 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 70292 "powerpc.tcc"
				>::initialize_operands()
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 70300 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70309 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70314 "powerpc.tcc"
				> *DecodeOpOri(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOri<
#line 38 "ppc.isa"
					CONFIG
#line 70320 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70330 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70334 "powerpc.tcc"
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70338 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70342 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70345 "powerpc.tcc"
				)
				{
#line 1536 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s | uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 70359 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70367 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70371 "powerpc.tcc"
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70375 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70379 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70382 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70386 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70389 "powerpc.tcc"
				)
				{
#line 1546 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "oris r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 70396 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70404 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70411 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70416 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70424 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70431 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70449 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70456 "powerpc.tcc"
				>::initialize_function()
				{
#line 233 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70469 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70476 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70481 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 70487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70490 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 70497 "powerpc.tcc"
				>::initialize_operands()
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 70505 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70514 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70519 "powerpc.tcc"
				> *DecodeOpOris(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOris<
#line 38 "ppc.isa"
					CONFIG
#line 70525 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70532 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70535 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70539 "powerpc.tcc"
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70543 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70547 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70550 "powerpc.tcc"
				)
				{
#line 1551 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = s ^ b;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 70582 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70590 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70594 "powerpc.tcc"
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70598 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70602 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70605 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70609 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70612 "powerpc.tcc"
				)
				{
#line 1579 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xor" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 70619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70627 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70634 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70647 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70654 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70664 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70669 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70672 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70679 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70689 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70694 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70697 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70704 "powerpc.tcc"
				>::initialize_function()
				{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70709 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70717 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70724 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70729 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70737 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 70744 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 70757 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70766 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70771 "powerpc.tcc"
				> *DecodeOpXor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXor<
#line 38 "ppc.isa"
					CONFIG
#line 70777 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70787 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70791 "powerpc.tcc"
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70795 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 70799 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 70802 "powerpc.tcc"
				)
				{
#line 1584 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s ^ uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 70816 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70824 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 70828 "powerpc.tcc"
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70832 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 70836 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 70839 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 70843 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 70846 "powerpc.tcc"
				)
				{
#line 1594 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xori r" << ra << ", r" << rs << ", " << uimm;
					}
#line 70853 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70858 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70861 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70868 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 70873 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70881 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70888 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 70898 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70906 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70913 "powerpc.tcc"
				>::initialize_function()
				{
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 70918 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70926 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70933 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 164 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70938 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 70944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70947 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 70954 "powerpc.tcc"
				>::initialize_operands()
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 70962 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70971 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70976 "powerpc.tcc"
				> *DecodeOpXori(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXori<
#line 38 "ppc.isa"
					CONFIG
#line 70982 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70989 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70992 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 70996 "powerpc.tcc"
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71000 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71004 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71007 "powerpc.tcc"
				)
				{
#line 1599 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t result = s ^ uimm;

						// Write back the result
						cpu->SetGPR(ra, result);
					}
#line 71021 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71026 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71029 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71033 "powerpc.tcc"
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71037 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71041 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71044 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71048 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71051 "powerpc.tcc"
				)
				{
#line 1609 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xoris r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 71058 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71063 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71066 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71073 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71078 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71086 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71093 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71111 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71118 "powerpc.tcc"
				>::initialize_function()
				{
#line 236 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71123 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71131 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71138 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71143 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 71149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71152 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 71159 "powerpc.tcc"
				>::initialize_operands()
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 71167 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71176 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71181 "powerpc.tcc"
				> *DecodeOpXoris(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXoris<
#line 38 "ppc.isa"
					CONFIG
#line 71187 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER LOGICAL INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 71199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71202 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71206 "powerpc.tcc"
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71210 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71214 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71217 "powerpc.tcc"
				)
				{
#line 1620 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t a = cpu->GetGPR(ra);

						// Compute the result
						uint32_t r = RotateLeft(s, sh);
						uint32_t mask = Mask(mb, me);
						uint32_t result = (r & mask) | (a & ~mask);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71251 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71259 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71263 "powerpc.tcc"
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71267 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71271 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71274 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71278 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71281 "powerpc.tcc"
				)
				{
#line 1650 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwimi" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh << ", " << mb << ", " << me;
					}
#line 71288 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71293 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71296 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71303 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71308 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71316 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71323 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71333 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71338 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71341 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71348 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71358 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71363 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71366 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71373 "powerpc.tcc"
				>::initialize_function()
				{
#line 237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71378 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71386 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71393 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 166 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71398 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71406 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 71413 "powerpc.tcc"
				>::initialize_operands()
				{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 71426 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71432 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71435 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71440 "powerpc.tcc"
				> *DecodeOpRlwimi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwimi<
#line 38 "ppc.isa"
					CONFIG
#line 71446 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71456 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71460 "powerpc.tcc"
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71464 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71468 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71471 "powerpc.tcc"
				)
				{
#line 1655 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);

						// Compute the result
						uint32_t r = RotateLeft(s, sh);
						uint32_t mask = Mask(mb, me);
						uint32_t result = r & mask;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71504 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71509 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71512 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71516 "powerpc.tcc"
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71520 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71524 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71527 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71531 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71534 "powerpc.tcc"
				)
				{
#line 1684 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwinm" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh << ", " << mb << ", " << me;
					}
#line 71541 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71546 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71549 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71556 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71561 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71569 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71576 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71586 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71594 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71601 "powerpc.tcc"
				>::initialize_function()
				{
#line 238 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71606 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71614 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71621 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 167 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71626 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71634 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 71641 "powerpc.tcc"
				>::initialize_operands()
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 71653 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71662 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71667 "powerpc.tcc"
				> *DecodeOpRlwinm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwinm<
#line 38 "ppc.isa"
					CONFIG
#line 71673 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71683 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71687 "powerpc.tcc"
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71691 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71695 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71698 "powerpc.tcc"
				)
				{
#line 1689 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t r = RotateLeft(s, b);
						uint32_t mask = Mask(mb, me);
						uint32_t result = r & mask;

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71732 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71740 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 71744 "powerpc.tcc"
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71748 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 71752 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 71755 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 71759 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 71762 "powerpc.tcc"
				)
				{
#line 1719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwnm" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb << ", " << mb << ", " << me;
					}
#line 71769 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71777 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71784 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 71789 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71797 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71804 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71814 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71822 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71829 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 71839 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71847 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71854 "powerpc.tcc"
				>::initialize_function()
				{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 71859 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71867 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71874 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 168 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71879 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71887 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 71894 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 71907 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71916 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71921 "powerpc.tcc"
				> *DecodeOpRlwnm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwnm<
#line 38 "ppc.isa"
					CONFIG
#line 71927 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER SHIFT INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 71939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71942 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 71946 "powerpc.tcc"
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 71950 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 71954 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 71957 "powerpc.tcc"
				)
				{
#line 1730 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						uint32_t result = (b & 0x20) ? 0 : s << (b & 0x1f);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 71989 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71994 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71997 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72001 "powerpc.tcc"
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72005 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72009 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72012 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72016 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72019 "powerpc.tcc"
				)
				{
#line 1758 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "slw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 72026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72034 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72041 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72046 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72054 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72061 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72071 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72076 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72079 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72086 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72104 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72111 "powerpc.tcc"
				>::initialize_function()
				{
#line 240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72124 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72131 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72136 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72144 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 72151 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 72164 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72173 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72178 "powerpc.tcc"
				> *DecodeOpSlw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSlw<
#line 38 "ppc.isa"
					CONFIG
#line 72184 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72194 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 72198 "powerpc.tcc"
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72202 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 72206 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 72209 "powerpc.tcc"
				)
				{
#line 1763 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						int32_t result;

						if(b == 0)
						{
							result = s;
							// Generate XER[CA]: XER[CA]=1
							xer = xer & ~CONFIG::XER_CA_MASK;
						}
						else if(b & 0x20)
						{
							if(s < 0)
							{
								result = 0xffffffff;
								// Generate XER[CA]
								xer = (s & 0x7fffffff) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
							}
							else
							{
								result = 0;
								// Generate XER[CA]: XER[CA]=0
								xer = xer & ~CONFIG::XER_CA_MASK;
							}
						}
						else
						{
							b = b & 0x1f;
							result = (int32_t) s >> b;
							// Generate XER[CA]
							xer = (s < 0 && (s << (32 - b)) != 0) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
						}

						// Write back the result
						cpu->SetGPR(ra, result);

						// Update XER
						cpu->SetXER(xer);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72271 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72279 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72283 "powerpc.tcc"
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72287 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72291 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72294 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72298 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72301 "powerpc.tcc"
				)
				{
#line 1821 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "sraw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 72308 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72316 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72323 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72328 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72336 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72343 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72361 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72368 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72378 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72386 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72393 "powerpc.tcc"
				>::initialize_write_xer()
				{
#line 424 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72410 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72417 "powerpc.tcc"
				>::initialize_function()
				{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72430 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72437 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 170 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72442 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72450 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 72457 "powerpc.tcc"
				>::initialize_operands()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 72471 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72480 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72485 "powerpc.tcc"
				> *DecodeOpSraw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSraw<
#line 38 "ppc.isa"
					CONFIG
#line 72491 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72501 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 72505 "powerpc.tcc"
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72509 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 72513 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 72516 "powerpc.tcc"
				)
				{
#line 1826 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						int32_t s = cpu->GetGPR(rs);
						uint32_t xer = cpu->GetXER();

						// Compute the result
						int32_t result;

						if(sh == 0)
						{
							result = s;
							// Generate XER[CA]: XER[CA]=0
							xer = xer & ~CONFIG::XER_CA_MASK;
						}
						else
						{
							result = s >> sh;
							// Generate XER[CA]
							xer = (s < 0 && (s << (32 - sh)) != 0) ? xer | CONFIG::XER_CA_MASK : xer & ~CONFIG::XER_CA_MASK;
						}

						// Update XER
						cpu->SetXER(xer);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72561 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72569 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72573 "powerpc.tcc"
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72577 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72581 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72584 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72588 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72591 "powerpc.tcc"
				)
				{
#line 1867 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "srawi" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh;
					}
#line 72598 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72606 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72613 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72618 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72623 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72626 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72633 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72643 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72648 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72651 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72658 "powerpc.tcc"
				>::initialize_function()
				{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72663 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72671 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72678 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72683 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72691 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 72698 "powerpc.tcc"
				>::initialize_operands()
				{
#line 330 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 72711 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72720 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72725 "powerpc.tcc"
				> *DecodeOpSrawi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSrawi<
#line 38 "ppc.isa"
					CONFIG
#line 72731 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72741 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 72745 "powerpc.tcc"
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72749 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 72753 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 72756 "powerpc.tcc"
				)
				{
#line 1872 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t b = cpu->GetGPR(rb);

						// Compute the result
						unsigned int sh = b & 0x3f;
						uint32_t result = (sh & 0x20) ? 0 : s >> (sh & 0x1f);

						// Write back the result
						cpu->SetGPR(ra, result);

						if(unlikely(rc))
						{
							// read XER
							uint32_t xer = cpu->GetXER();

							// Read CR
							uint32_t cr = cpu->GetCR();

							// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
							cr = (cr & ~CONFIG::CR0_MASK) |
							((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
							(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));

							// Update CR
							cpu->SetCR(cr);
						}
					}
#line 72789 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72797 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 72801 "powerpc.tcc"
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72805 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 72809 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 72812 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 72816 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 72819 "powerpc.tcc"
				)
				{
#line 1901 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "srw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 72826 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72831 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72834 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72841 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 72846 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72854 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72861 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72879 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72886 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 72896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72904 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72911 "powerpc.tcc"
				>::initialize_function()
				{
#line 243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 72916 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72924 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72931 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72936 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72944 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 72951 "powerpc.tcc"
				>::initialize_operands()
				{
#line 392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 72964 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72973 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72978 "powerpc.tcc"
				> *DecodeOpSrw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSrw<
#line 38 "ppc.isa"
					CONFIG
#line 72984 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/***************************************************

				FLOATING-POINT ARITHMETIC INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 73029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73032 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 73036 "powerpc.tcc"
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73040 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 73044 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 73047 "powerpc.tcc"
				)
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result.plusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 73101 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73106 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73109 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 73113 "powerpc.tcc"
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73117 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 73121 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 73124 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 73128 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 73131 "powerpc.tcc"
				)
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 73138 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73143 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73146 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73153 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 73158 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73166 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73173 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73183 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73191 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73198 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73208 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73216 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73223 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73233 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73241 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73248 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73257 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73262 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73265 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73272 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 73284 "powerpc.tcc"
				}
				/** Floating (FnFpCommon |FnFpFPSCR | FnFpFPSCRSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 73290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73293 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73300 "powerpc.tcc"
				>::initialize_function()
				{
#line 252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 73305 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73313 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73320 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 86 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 73325 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73333 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 73340 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 73355 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 73361 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73364 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 73369 "powerpc.tcc"
				> *DecodeOpFadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFadd<
#line 38 "ppc.isa"
					CONFIG
#line 73375 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 73382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73385 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 73389 "powerpc.tcc"
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73393 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 73397 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 73400 "powerpc.tcc"
				)
				{
#line 310 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						// Compute the result
						result.plusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 73456 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73464 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 73468 "powerpc.tcc"
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73472 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 73476 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 73479 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 73483 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 73486 "powerpc.tcc"
				)
				{
#line 362 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 73493 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73501 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73508 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 73513 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73521 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73528 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73546 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73553 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73563 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73571 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73578 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73596 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73603 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73620 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73627 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 73639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73647 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73654 "powerpc.tcc"
				>::initialize_function()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 73659 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73667 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73674 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 73679 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73687 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 73694 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 73709 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 73715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73718 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 73723 "powerpc.tcc"
				> *DecodeOpFadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFadds<
#line 38 "ppc.isa"
					CONFIG
#line 73729 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 73736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73739 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 73743 "powerpc.tcc"
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73747 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 73751 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 73754 "powerpc.tcc"
				)
				{
#line 367 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result.divAssign(b, flags);

						// Generate OX, UX, ZX, VXSNAN, VXIDI, VXZDZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_ZX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIDI<CONFIG>(fpscr, flags);
						GenFPSCR_VXZDZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 73810 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73815 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73818 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 73822 "powerpc.tcc"
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73826 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 73830 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 73833 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 73837 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 73840 "powerpc.tcc"
				)
				{
#line 419 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fdiv" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 73847 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73855 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73862 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 73867 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73875 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73882 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73892 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73900 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73907 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73917 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73925 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73932 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73942 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73950 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73957 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 73966 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73974 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 73981 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 73993 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73998 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74001 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 74008 "powerpc.tcc"
				>::initialize_function()
				{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 74013 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74018 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74021 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 74028 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(31); }
#line 74033 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74041 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 74048 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 74063 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74072 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74077 "powerpc.tcc"
				> *DecodeOpFdiv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFdiv<
#line 38 "ppc.isa"
					CONFIG
#line 74083 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74093 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 74097 "powerpc.tcc"
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74101 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 74105 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 74108 "powerpc.tcc"
				)
				{
#line 424 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						// Compute the result
						result.divAssign(b, flags);

						// Generate OX, UX, ZX, VXSNAN, VXIDI, VXZDZ, FR, FI, FPRF, XX, FX, VX, FEX
						uint32_t old_fpscr = fpscr;
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_ZX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIDI<CONFIG>(fpscr, flags);
						GenFPSCR_VXZDZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 74165 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74173 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 74177 "powerpc.tcc"
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74181 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 74185 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 74188 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 74192 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 74195 "powerpc.tcc"
				)
				{
#line 477 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fdivs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 74202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74210 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74217 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74227 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74235 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74242 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74252 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74260 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74267 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74277 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74282 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74285 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74292 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74301 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74309 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74316 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 74328 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74336 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74343 "powerpc.tcc"
				>::initialize_function()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 74348 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74356 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74363 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 89 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(17); }
#line 74368 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74376 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 74383 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 74398 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74407 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74412 "powerpc.tcc"
				> *DecodeOpFdivs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFdivs<
#line 38 "ppc.isa"
					CONFIG
#line 74418 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74428 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 74432 "powerpc.tcc"
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74436 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 74440 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 74443 "powerpc.tcc"
				)
				{
#line 482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAssign(c, flags);

						// Generate OX, UX, VXSNAN, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 74497 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74505 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 74509 "powerpc.tcc"
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74513 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 74517 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 74520 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 74524 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 74527 "powerpc.tcc"
				)
				{
#line 532 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmul" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc;
					}
#line 74534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74542 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74549 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 74554 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74562 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74569 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74579 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74587 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74594 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74604 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74612 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74619 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74629 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74637 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74644 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74653 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74661 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74668 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 74680 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74688 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74695 "powerpc.tcc"
				>::initialize_function()
				{
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 74700 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74708 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74715 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 74720 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74725 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74728 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 74735 "powerpc.tcc"
				>::initialize_operands()
				{
#line 536 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fc);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 74750 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74759 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74764 "powerpc.tcc"
				> *DecodeOpFmul(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmul<
#line 38 "ppc.isa"
					CONFIG
#line 74770 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74780 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 74784 "powerpc.tcc"
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74788 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 74792 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 74795 "powerpc.tcc"
				)
				{
#line 537 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAssign(c, flags);

						// Generate OX, UX, VXSNAN, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 74851 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74856 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74859 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 74863 "powerpc.tcc"
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74867 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 74871 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 74874 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 74878 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 74881 "powerpc.tcc"
				)
				{
#line 589 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmuls" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc;
					}
#line 74888 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74896 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74903 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 74908 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74916 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74923 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74933 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74941 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74948 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74958 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74966 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74973 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 74983 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74991 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 74998 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75007 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75015 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75022 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 75034 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75042 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75049 "powerpc.tcc"
				>::initialize_function()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 75054 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75062 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75069 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 75074 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75082 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 75089 "powerpc.tcc"
				>::initialize_operands()
				{
#line 536 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fc);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 75104 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75113 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75118 "powerpc.tcc"
				> *DecodeOpFmuls(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmuls<
#line 38 "ppc.isa"
					CONFIG
#line 75124 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75131 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75134 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 75138 "powerpc.tcc"
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75142 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 75146 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 75149 "powerpc.tcc"
				)
				{
#line 594 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode(RN_NEAREST);
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						if(unlikely(b.isSNaN()))
						{
							// b = SNaN
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								// Write back result
								SoftFloat result(b.queryValue() | 0x400000UL);// QNaN (b with high order bit of mantissa set)
								cpu->SetFPR(fd, SoftDouble(result, flags));
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
							}
							// Generate VXSNAN
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}
						else if(unlikely(b.isQNaN()))
						{
							// b = QNaN
							// Write back result
							cpu->SetFPR(fd, SoftDouble(b, flags)); // QNaN (b)
							// Generate FPRF
							fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else if(unlikely(b.isZero()))
						{
							// Generate ZX
							fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;

							if(!(fpscr & CONFIG::FPSCR_ZE_MASK))
							{
								if(b.isNegative())
								{
									// b = -0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0xfff0000000000000ULL)); // -infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
								else
								{
									// b = +0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0x7ff0000000000000ULL)); // +infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
							}
						}
						else if(unlikely(b.isInfty()))
						{
							if(b.isNegative())
							{
								// b = -infinity
								cpu->SetFPR(fd, SoftDouble(0x8000000000000000ULL)); // -0
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
							}
							else
							{
								// b = +infinity
								cpu->SetFPR(fd, SoftDouble(0x0000000000000000ULL)); // +0
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
							}
						}
						else
						{
							SoftFloat result(0x3f800000ULL); // 1.0

							// Compute the result
							result.divAssign(b, flags);

							// Generate OX, UX, ZX, VXSNAN, FR, FI, FPRF
							GenFPSCR_OX<CONFIG>(fpscr, flags);
							GenFPSCR_UX<CONFIG>(fpscr, flags);
							GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);

							// Write back the result
							cpu->SetFPR(fd, SoftDouble(result, flags));
						}

						// Generate XX, FX, VX, FEX
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 75270 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75278 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 75282 "powerpc.tcc"
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75286 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 75290 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 75293 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 75297 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 75300 "powerpc.tcc"
				)
				{
#line 711 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fres" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 75307 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75315 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75322 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 75327 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75335 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75342 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75360 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75367 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75385 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75392 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75401 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75409 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75416 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 75428 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75436 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75443 "powerpc.tcc"
				>::initialize_function()
				{
#line 258 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 75448 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75456 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75463 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(10); }
#line 75468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75476 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 75483 "powerpc.tcc"
				>::initialize_operands()
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 75497 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75503 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75506 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75511 "powerpc.tcc"
				> *DecodeOpFres(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFres<
#line 38 "ppc.isa"
					CONFIG
#line 75517 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75527 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 75531 "powerpc.tcc"
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75535 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 75539 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 75542 "powerpc.tcc"
				)
				{
#line 716 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode(RN_NEAREST);
						const SoftDouble& b = cpu->GetFPR(fb);

						if(unlikely(b.isSNaN()))
						{
							// b = SNaN
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
								// Write back result
								cpu->SetFPR(fd, SoftDouble(b.queryValue() | 0x0008000000000000ULL)); // QNaN (b with high order bit of mantissa set)
							}
							// Generate VXSNAN
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}
						else if(unlikely(b.isQNaN()))
						{
							// b = QNaN
							// Generate FPRF
							fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
							// Write back result
							cpu->SetFPR(fd, b); // QNaN (b)
						}
						else if(unlikely(b.isZero()))
						{
							// Generate ZX
							fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;

							if(!(fpscr & CONFIG::FPSCR_ZE_MASK))
							{
								if(b.isNegative())
								{
									// b = -0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0xfff0000000000000ULL)); // -infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
								else
								{
									// b = +0
									// Write back result
									cpu->SetFPR(fd, SoftDouble(0x7ff0000000000000ULL)); // +infinity
									// Generate FPRF
									fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
								}
							}
						}
						else if(unlikely(b.isNegative()))
						{
							// -infinity <= b < 0
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								// Write back result
								cpu->SetFPR(fd, SoftDouble(0x7ff8000000000000ULL)); // Positive QNaN
								// Generate FPRF
								fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
							}
							// Generate VXSQRT
							fpscr = fpscr | CONFIG::FPSCR_VXSQRT_MASK;
						}
						else if(unlikely(b.isInfty()))
						{
							// b = +infinity
							cpu->SetFPR(fd, SoftDouble(0x0000000000000000ULL)); // +0
							// Generate FPRF
							fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
						}
						else
						{
							// 0 < b < infinity

							// First estimation of 1/sqrt(b), seed of Newton-Raphson algorithm
							// see http://www.mceniry.net/papers/Fast%20Inverse%20Square%20Root.pdf
							SoftDouble u((0xbfcdd6a18f6a6f55ULL - b.queryValue()) >> 1);

							// Newton-Raphson method
							SoftDouble half(0x3fe0000000000000ULL); // 0.5
							SoftDouble three(0x4008000000000000ULL); // 3.0

							unsigned int i;
							for(i = 0; i < 5; i++)
							{
								// Newton-Raphson iteration
								// w = b * u * u
								SoftDouble w(b);
								w.multAssign(u, flags);
								w.multAssign(u, flags);
								// v = 3.0 - w
								SoftDouble v(three);
								v.minusAssign(w, flags);
								// u = 0.5 * u * v
								u.multAssign(half, flags);
								u.multAssign(v, flags);
							}

							// Write back result
							cpu->SetFPR(fd, u);

							// Generate ZX, VXSNAN, FR, FI, FPRF
							GenFPSCR_ZX<CONFIG>(fpscr, flags);
							GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
							GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, u);
						}

						// Generate XX, FX, VX, FEX
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 75685 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75693 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 75697 "powerpc.tcc"
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75701 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 75705 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 75708 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 75712 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 75715 "powerpc.tcc"
				)
				{
#line 855 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "frsqrte" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 75722 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75730 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75737 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 75742 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75750 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75757 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75767 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75775 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75782 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75800 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75807 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 75816 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75824 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75831 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 75843 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75851 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75858 "powerpc.tcc"
				>::initialize_function()
				{
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 75863 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75871 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75878 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 75883 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75888 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75891 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 75898 "powerpc.tcc"
				>::initialize_operands()
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 75912 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75918 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75921 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75926 "powerpc.tcc"
				> *DecodeOpFrsqrte(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFrsqrte<
#line 38 "ppc.isa"
					CONFIG
#line 75932 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75942 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 75946 "powerpc.tcc"
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 75950 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 75954 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 75957 "powerpc.tcc"
				)
				{
#line 860 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result.minusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 76011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76019 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 76023 "powerpc.tcc"
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76027 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 76031 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 76034 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 76038 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 76041 "powerpc.tcc"
				)
				{
#line 910 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 76048 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76056 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76063 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 76068 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76073 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76076 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76083 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76093 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76101 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76108 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76118 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76126 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76133 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76143 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76151 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76158 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76167 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76172 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76175 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76182 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 76194 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76202 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76209 "powerpc.tcc"
				>::initialize_function()
				{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 76214 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76222 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76229 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76234 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76239 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76242 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 76249 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 76264 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76270 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76273 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76278 "powerpc.tcc"
				> *DecodeOpFsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsub<
#line 38 "ppc.isa"
					CONFIG
#line 76284 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76294 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 76298 "powerpc.tcc"
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76302 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 76306 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 76309 "powerpc.tcc"
				)
				{
#line 915 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();

						// Compute the result
						result.minusAssign(b, flags);

						// Generate OX, UX, VXSNAN, VXISI, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));

					}
#line 76366 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76374 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 76378 "powerpc.tcc"
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76382 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 76386 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 76389 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 76393 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 76396 "powerpc.tcc"
				)
				{
#line 968 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 76403 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76411 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76418 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 76423 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76431 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76438 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76448 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76456 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76463 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76473 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76481 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76488 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76498 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76503 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76506 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76513 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76522 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76530 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76537 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 76549 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76557 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76564 "powerpc.tcc"
				>::initialize_function()
				{
#line 261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 76569 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76577 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76584 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76589 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76597 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 76604 "powerpc.tcc"
				>::initialize_operands()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 76619 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76628 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76633 "powerpc.tcc"
				> *DecodeOpFsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsubs<
#line 38 "ppc.isa"
					CONFIG
#line 76639 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76646 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76649 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 76653 "powerpc.tcc"
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76657 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 76661 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 76664 "powerpc.tcc"
				)
				{
#line 973 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						const SoftDouble& a = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute and write the result
						cpu->SetFPR(fd, ((!a.isZero() && a.isNegative()) || a.isNaN()) ? b : c);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 76688 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76696 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 76700 "powerpc.tcc"
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76704 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 76708 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 76711 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 76715 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 76718 "powerpc.tcc"
				)
				{
#line 993 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsel" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 76725 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76733 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76740 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 76745 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76753 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76760 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76770 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76775 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76778 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76785 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76795 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76800 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76803 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76810 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76820 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76825 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76828 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76835 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76845 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76853 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76860 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 76869 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76877 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76884 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 76896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76904 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76911 "powerpc.tcc"
				>::initialize_function()
				{
#line 262 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 76916 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76924 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76931 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 112 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76936 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76944 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 76951 "powerpc.tcc"
				>::initialize_operands()
				{
#line 575 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 76965 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76974 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76979 "powerpc.tcc"
				> *DecodeOpFsel(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsel<
#line 38 "ppc.isa"
					CONFIG
#line 76985 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76995 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 76999 "powerpc.tcc"
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77003 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77007 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77010 "powerpc.tcc"
				)
				{
#line 998 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						/* this optional instruction is not implemented */
						throw IllegalInstructionException<CONFIG>();
					}
#line 77018 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77026 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77030 "powerpc.tcc"
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77034 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77038 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77041 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77045 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77048 "powerpc.tcc"
				)
				{
#line 1002 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsqrt" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 77055 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77063 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77070 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 77075 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77083 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77090 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77100 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77108 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77115 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77125 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77130 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77133 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77140 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77149 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77157 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77164 "powerpc.tcc"
				>::initialize_function()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 77169 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77177 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77184 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 113 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 77189 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77197 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 77204 "powerpc.tcc"
				>::initialize_operands()
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 77218 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77224 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77227 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77232 "powerpc.tcc"
				> *DecodeOpFsqrt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsqrt<
#line 38 "ppc.isa"
					CONFIG
#line 77238 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77248 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77252 "powerpc.tcc"
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77256 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77260 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77263 "powerpc.tcc"
				)
				{
#line 1007 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						/* this optional instruction is not implemented */
						throw IllegalInstructionException<CONFIG>();
					}
#line 77271 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77279 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77283 "powerpc.tcc"
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77287 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77291 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77294 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77298 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77301 "powerpc.tcc"
				)
				{
#line 1011 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsqrts" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 77308 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77316 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77323 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 77328 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77336 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77343 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77361 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77368 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77378 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77386 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77393 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77410 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77417 "powerpc.tcc"
				>::initialize_function()
				{
#line 264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 77422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77430 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77437 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 114 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 77442 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77450 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 77457 "powerpc.tcc"
				>::initialize_operands()
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 77471 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77480 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77485 "powerpc.tcc"
				> *DecodeOpFsqrts(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsqrts<
#line 38 "ppc.isa"
					CONFIG
#line 77491 "powerpc.tcc"
					>(code, addr);
				}

				/******************************************************

				FLOATING POINT MULTIPLY-ADD INSTRUCTIONS

				******************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 77503 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77506 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77510 "powerpc.tcc"
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77514 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77518 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77521 "powerpc.tcc"
				)
				{
#line 1022 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 77577 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77582 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77585 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77589 "powerpc.tcc"
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77593 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77597 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77600 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77604 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77607 "powerpc.tcc"
				)
				{
#line 1074 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 77614 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77622 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77629 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 77634 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77642 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77649 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77659 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77667 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77674 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77684 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77692 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77699 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77709 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77717 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77724 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77734 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77739 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77742 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77749 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 77758 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77766 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77773 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 77785 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77793 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77800 "powerpc.tcc"
				>::initialize_function()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 77805 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77813 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77820 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 98 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 77825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77833 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 77840 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 77856 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77865 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77870 "powerpc.tcc"
				> *DecodeOpFmadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmadd<
#line 38 "ppc.isa"
					CONFIG
#line 77876 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77883 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77886 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 77890 "powerpc.tcc"
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 77894 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 77898 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 77901 "powerpc.tcc"
				)
				{
#line 1079 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 77960 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77968 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 77972 "powerpc.tcc"
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 77976 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 77980 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 77983 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 77987 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 77990 "powerpc.tcc"
				)
				{
#line 1134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 77997 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78005 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78012 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 78017 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78022 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78025 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78032 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78042 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78050 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78057 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78075 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78082 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78092 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78100 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78107 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78117 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78122 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78125 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78132 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78141 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78149 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78156 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 78168 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78176 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78183 "powerpc.tcc"
				>::initialize_function()
				{
#line 266 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 78188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78196 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78203 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 78208 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78216 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 78223 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 78239 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 78245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78248 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 78253 "powerpc.tcc"
				> *DecodeOpFmadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmadds<
#line 38 "ppc.isa"
					CONFIG
#line 78259 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 78266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78269 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 78273 "powerpc.tcc"
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78277 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 78281 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 78284 "powerpc.tcc"
				)
				{
#line 1139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 78340 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78348 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 78352 "powerpc.tcc"
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78356 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 78360 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 78363 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 78367 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 78370 "powerpc.tcc"
				)
				{
#line 1191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 78377 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78385 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78392 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 78397 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78405 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78412 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78430 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78437 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78447 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78455 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78462 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78472 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78480 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78487 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78497 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78505 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78512 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78521 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78526 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78529 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78536 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 78548 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78556 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78563 "powerpc.tcc"
				>::initialize_function()
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 78568 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78576 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78583 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 78588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78596 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 78603 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 78619 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 78625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78628 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 78633 "powerpc.tcc"
				> *DecodeOpFmsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmsub<
#line 38 "ppc.isa"
					CONFIG
#line 78639 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 78646 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78649 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 78653 "powerpc.tcc"
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78657 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 78661 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 78664 "powerpc.tcc"
				)
				{
#line 1196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 78723 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78731 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 78735 "powerpc.tcc"
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78739 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 78743 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 78746 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 78750 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 78753 "powerpc.tcc"
				)
				{
#line 1251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 78760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78768 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78775 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 78780 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78788 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78795 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78805 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78813 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78820 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78830 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78835 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78838 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78845 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78855 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78860 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78863 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78870 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78880 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78888 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78895 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 78904 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78912 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78919 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 78931 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78939 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78946 "powerpc.tcc"
				>::initialize_function()
				{
#line 268 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 78951 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78959 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78966 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 78971 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78976 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78979 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 78986 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 79002 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79008 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79011 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79016 "powerpc.tcc"
				> *DecodeOpFmsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 79022 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79032 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 79036 "powerpc.tcc"
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79040 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 79044 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 79047 "powerpc.tcc"
				)
				{
#line 1256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 79106 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79114 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 79118 "powerpc.tcc"
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79122 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 79126 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 79129 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 79133 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 79136 "powerpc.tcc"
				)
				{
#line 1311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 79143 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79151 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79158 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 79163 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79168 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79171 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79178 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79196 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79203 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79213 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79218 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79221 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79228 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79238 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79246 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79253 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79263 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79268 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79271 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79278 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79287 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79295 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79302 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 79314 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79322 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79329 "powerpc.tcc"
				>::initialize_function()
				{
#line 269 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 79334 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79339 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79342 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79349 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 79354 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79362 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 79369 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 79385 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79391 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79394 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79399 "powerpc.tcc"
				> *DecodeOpFnmadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmadd<
#line 38 "ppc.isa"
					CONFIG
#line 79405 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79415 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 79419 "powerpc.tcc"
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79423 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 79427 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 79430 "powerpc.tcc"
				)
				{
#line 1316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						flags.clear();
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndAddAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 79492 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79500 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 79504 "powerpc.tcc"
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79508 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 79512 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 79515 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 79519 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 79522 "powerpc.tcc"
				)
				{
#line 1374 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 79529 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79534 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79537 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79544 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 79549 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79557 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79564 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79574 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79582 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79589 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79599 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79607 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79614 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79624 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79632 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79639 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79649 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79654 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79657 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79664 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79673 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79681 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79688 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 79700 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79708 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79715 "powerpc.tcc"
				>::initialize_function()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 79720 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79725 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79728 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79735 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 105 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 79740 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79748 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 79755 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 79771 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79780 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79785 "powerpc.tcc"
				> *DecodeOpFnmadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmadds<
#line 38 "ppc.isa"
					CONFIG
#line 79791 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79801 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 79805 "powerpc.tcc"
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79809 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 79813 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 79816 "powerpc.tcc"
				)
				{
#line 1379 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble result = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);
						const SoftDouble& c = cpu->GetFPR(fc);

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 79875 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79883 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 79887 "powerpc.tcc"
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79891 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 79895 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 79898 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 79902 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 79905 "powerpc.tcc"
				)
				{
#line 1434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 79912 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79920 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79927 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 79932 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79940 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79947 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79957 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79962 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79965 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79972 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 79982 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79987 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79990 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 79997 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80007 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80015 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80022 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80032 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80037 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80040 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80047 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80056 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80064 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80071 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 80083 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80091 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80098 "powerpc.tcc"
				>::initialize_function()
				{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 80103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80111 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80118 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 80123 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80131 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 80138 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 80154 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80163 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80168 "powerpc.tcc"
				> *DecodeOpFnmsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmsub<
#line 38 "ppc.isa"
					CONFIG
#line 80174 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 80181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80184 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 80188 "powerpc.tcc"
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80192 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 80196 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 80199 "powerpc.tcc"
				)
				{
#line 1439 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftFloat result(cpu->GetFPR(fa), flags);
						flags.clear();
						SoftFloat b(cpu->GetFPR(fb), flags);
						SoftFloat c(cpu->GetFPR(fc), flags);
						flags.clear();

						// Compute the result
						result.multAndSubAssign(c, b, flags);

						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);

						if(likely(!result.isQNaN())) result.opposite();

						// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXISI<CONFIG>(fpscr, flags);
						GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 80260 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80268 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 80272 "powerpc.tcc"
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80276 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 80280 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 80283 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 80287 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 80290 "powerpc.tcc"
				)
				{
#line 1496 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 80297 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80305 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80312 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 80317 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80325 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80332 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80342 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80347 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80350 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80357 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80375 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80382 "powerpc.tcc"
				>::initialize_read_fc()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80392 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80397 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80400 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80407 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80417 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80422 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80425 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80432 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80449 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80456 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 80468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80476 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80483 "powerpc.tcc"
				>::initialize_function()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 80488 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80496 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80503 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 107 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 80508 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80513 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80516 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 80523 "powerpc.tcc"
				>::initialize_operands()
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 80539 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80548 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80553 "powerpc.tcc"
				> *DecodeOpFnmsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 80559 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT COMPARE INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 80571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80574 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 80578 "powerpc.tcc"
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80582 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 80586 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 80589 "powerpc.tcc"
				)
				{
#line 1507 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						const SoftDouble& a = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Do the floating point comparison
						uint32_t c;
						switch(a.compare(b))
						{
							case SoftDouble::CRNaN: c = 1; break;
							case SoftDouble::CRLess: c = 8; break;
							case SoftDouble::CREqual: c = 2; break;
							case SoftDouble::CRGreater: c = 4; break;
						default:
							std::cerr << "Internal error" << std::endl;
							abort();
						}

						// Generate FPCC
						fpscr = (fpscr & ~CONFIG::FPSCR_FPCC_MASK) | ((c << CONFIG::FPSCR_FPCC_OFFSET) & CONFIG::FPSCR_FPCC_MASK);

						// Generate VXSNAN and VXVC
						if(unlikely(a.isSNaN() || b.isSNaN()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
							if(!(fpscr & CONFIG::FPSCR_VE_MASK))
							{
								fpscr = fpscr | CONFIG::FPSCR_VXVC_MASK;
							}
						}
						if(unlikely(a.isQNaN() || b.isQNaN()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXVC_MASK;
						}

						// Generate FX, VX, FEX
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// CR[crfD] <- c
						cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << ((7 - crfD) * 4)));
					}
#line 80657 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80665 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 80669 "powerpc.tcc"
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80673 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 80677 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 80680 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 80684 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 80687 "powerpc.tcc"
				)
				{
#line 1571 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fcmpo cr" << crfD << ", f" << fa << ", f" << fb;
					}
#line 80694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80702 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80709 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 80714 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80719 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80722 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80729 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80739 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80747 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80754 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80764 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80772 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80779 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80788 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80796 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80803 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 466 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 80812 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80817 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80820 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80827 "powerpc.tcc"
				>::initialize_function()
				{
#line 273 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 80832 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80840 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80847 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 80852 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80860 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 80867 "powerpc.tcc"
				>::initialize_operands()
				{
#line 761 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						//  OUTPUT(FPSCRF_T, crfD);
						//  OUTPUT(FPSCR_T, crfD);
						OUTPUT(FPSCR_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 80880 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80889 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80894 "powerpc.tcc"
				> *DecodeOpFcmpo(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFcmpo<
#line 38 "ppc.isa"
					CONFIG
#line 80900 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 80907 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80910 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 80914 "powerpc.tcc"
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 80918 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 80922 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 80925 "powerpc.tcc"
				)
				{
#line 1576 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						const SoftDouble& a = cpu->GetFPR(fa);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Do the floating point comparison
						uint32_t c;
						switch(a.compare(b))
						{
							case SoftDouble::CRNaN: c = 1; break;
							case SoftDouble::CRLess: c = 8; break;
							case SoftDouble::CREqual: c = 2; break;
							case SoftDouble::CRGreater: c = 4; break;
						default:
							std::cerr << "Internal error" << std::endl;
							abort();
						}

						// Generate FPCC
						fpscr = (fpscr & ~CONFIG::FPSCR_FPCC_MASK) | ((c << CONFIG::FPSCR_FPCC_OFFSET) & CONFIG::FPSCR_FPCC_MASK);

						// Generate VXSNAN
						if(unlikely(a.isSNaN() || b.isSNaN()))
						{
							fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
						}

						// Generate FX, VX, FEX
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// CR[crfD] <- c
						cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << ((7 - crfD) * 4)));
					}
#line 80985 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80993 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 80997 "powerpc.tcc"
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81001 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 81005 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 81008 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 81012 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 81015 "powerpc.tcc"
				)
				{
#line 1632 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fcmpu cr" << crfD << ", f" << fa << ", f" << fb;
					}
#line 81022 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81027 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81030 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81037 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 81042 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81050 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81057 "powerpc.tcc"
				>::initialize_read_fa()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81075 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81082 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81092 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81100 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81107 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81124 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81131 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 466 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81140 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81148 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81155 "powerpc.tcc"
				>::initialize_function()
				{
#line 274 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 81160 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81168 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81175 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 81180 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81185 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81188 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 81195 "powerpc.tcc"
				>::initialize_operands()
				{
#line 761 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						//  OUTPUT(FPSCRF_T, crfD);
						//  OUTPUT(FPSCR_T, crfD);
						OUTPUT(FPSCR_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 81208 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81217 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81222 "powerpc.tcc"
				> *DecodeOpFcmpu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFcmpu<
#line 38 "ppc.isa"
					CONFIG
#line 81228 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT ROUNDING-CONVERTING INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 81240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81243 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 81247 "powerpc.tcc"
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81251 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 81255 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 81258 "powerpc.tcc"
				)
				{
#line 1643 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						SoftDouble b = cpu->GetFPR(fb);

						// Compute the result
						SoftDouble::IntConversion icResult;
						uint32_t result32;
						uint64_t result64;
						flags.clearKeepSignalingConversion();
						b.retrieveInteger(icResult.setSigned(), flags);
						flags.setKeepSignalingConversion();
						result32 = (uint32_t) icResult.queryInt();
						result64 = 0xfff8000000000000ULL | result32;
						if(result32 == 0 && b.isNegative())
						result64 |= 0x0000000100000000ULL;

						SoftDouble result(result64);

						// Generate VXSNAN, VXCVI, FR, FI, XX, FX, VX, FEX
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXCVI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, b, flags);
						if(!flags.isOverflow()) GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception if FPSCR[FEX] is set
							throw FloatingPointException<CONFIG>();
						}

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 81327 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81335 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 81339 "powerpc.tcc"
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81343 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 81347 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 81350 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 81354 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 81357 "powerpc.tcc"
				)
				{
#line 1708 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fctiw" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 81364 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81372 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81379 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 81384 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81389 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81392 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81399 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81409 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81417 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81424 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81442 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81449 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81458 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81463 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81466 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81473 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 81485 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81493 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81500 "powerpc.tcc"
				>::initialize_function()
				{
#line 275 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 81505 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81513 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81520 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 81525 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81530 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81533 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 81540 "powerpc.tcc"
				>::initialize_operands()
				{
#line 593 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 81554 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81563 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81568 "powerpc.tcc"
				> *DecodeOpFctiw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFctiw<
#line 38 "ppc.isa"
					CONFIG
#line 81574 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 81581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81584 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 81588 "powerpc.tcc"
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81592 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 81596 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 81599 "powerpc.tcc"
				)
				{
#line 1714 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						SoftDouble b = cpu->GetFPR(fb);

						// Compute the result
						SoftDouble::IntConversion icResult;
						uint32_t result32;
						uint64_t result64;
						flags.setRoundingMode(RN_ZERO);
						flags.clearKeepSignalingConversion();
						b.retrieveInteger(icResult.setSigned(), flags);
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						flags.setKeepSignalingConversion();
						result32 = (uint32_t) icResult.queryInt();
						result64 = 0xfff8000000000000ULL | result32;
						if(result32 == 0 && b.isNegative())
						result64 |= 0x0000000100000000ULL;

						SoftDouble result(result64);

						// Generate VXSNAN, VXCVI, FR, FI, XX, FX, VX, FEX
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_VXCVI<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftDouble>(fpscr, b, flags);
						if(!flags.isOverflow()) GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception if FPSCR[FEX] is set
							throw FloatingPointException<CONFIG>();
						}

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 81669 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81677 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 81681 "powerpc.tcc"
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81685 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 81689 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 81692 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 81696 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 81699 "powerpc.tcc"
				)
				{
#line 1780 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fctiwz" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 81706 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81714 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81721 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 81726 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81734 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81741 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81759 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81766 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81776 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81781 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81784 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81791 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 81800 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81808 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81815 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 81827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81835 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81842 "powerpc.tcc"
				>::initialize_function()
				{
#line 276 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 81847 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81855 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81862 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 81867 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81875 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 81882 "powerpc.tcc"
				>::initialize_operands()
				{
#line 593 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 81896 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81905 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81910 "powerpc.tcc"
				> *DecodeOpFctiwz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFctiwz<
#line 38 "ppc.isa"
					CONFIG
#line 81916 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 81923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81926 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 81930 "powerpc.tcc"
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 81934 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 81938 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 81941 "powerpc.tcc"
				)
				{
#line 1785 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						uint32_t old_fpscr = fpscr;
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						flags.clearKeepSignalingConversion();
						flags.setUpApproximateInfty();
						SoftFloat result(b, flags);
						flags.clearUpApproximateInfty();
						flags.setKeepSignalingConversion();

						// Generate OX, UX, VXSNAN, FR, FI, FPRF, XX, FX, VX, FEX
						GenFPSCR_OX<CONFIG>(fpscr, flags);
						GenFPSCR_UX<CONFIG>(fpscr, flags);
						GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
						GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags);
						GenFPSCR_FI<CONFIG>(fpscr, flags);
						GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
						GenFPSCR_XX<CONFIG>(fpscr);
						GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						// Update FPSCR
						cpu->SetFPSCR(fpscr);

						// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
						if(unlikely(((CONFIG::HAS_MSR_FE0 && (msr & CONFIG::MSR_FE0_MASK)) |
						(CONFIG::HAS_MSR_FE1 && (msr & CONFIG::MSR_FE1_MASK))) &&
						(fpscr & CONFIG::FPSCR_FEX_MASK)))
						{
							// Raise a floating point exception
							throw FloatingPointException<CONFIG>();
						}

						// Write back the result
						cpu->SetFPR(fd, SoftDouble(result, flags));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 81997 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82005 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82009 "powerpc.tcc"
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82013 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82017 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82020 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82024 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82027 "powerpc.tcc"
				)
				{
#line 1837 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "frsp" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82034 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82042 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82049 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82054 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82062 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82069 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82079 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82087 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82094 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82104 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82109 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82112 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82119 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82128 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82133 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82136 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82143 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 82155 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82163 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82170 "powerpc.tcc"
				>::initialize_function()
				{
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 82175 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82180 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82183 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82190 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82195 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82200 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82203 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 82210 "powerpc.tcc"
				>::initialize_operands()
				{
#line 593 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 82224 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82233 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82238 "powerpc.tcc"
				> *DecodeOpFrsp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFrsp<
#line 38 "ppc.isa"
					CONFIG
#line 82244 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT MOVE INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 82256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82259 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 82263 "powerpc.tcc"
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82267 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 82271 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 82274 "powerpc.tcc"
				)
				{
#line 1848 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						SoftDouble result = cpu->GetFPR(fd);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result = b;
						if(result.isNegative())
						{
							result.opposite();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82304 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82312 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82316 "powerpc.tcc"
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82320 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82324 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82327 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82331 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82334 "powerpc.tcc"
				)
				{
#line 1874 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fabs" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82341 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82349 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82356 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82361 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82369 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82376 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82386 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82391 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82394 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82401 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82411 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82419 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82426 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82435 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82443 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82450 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 82462 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82467 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82470 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82477 "powerpc.tcc"
				>::initialize_function()
				{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 82482 "powerpc.tcc"
				}
				/** Floating **/
				template <
#line 38 "ppc.isa"
				class
#line 82488 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82491 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82498 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82503 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82511 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 82518 "powerpc.tcc"
				>::initialize_operands()
				{
#line 605 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 82530 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82536 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82539 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82544 "powerpc.tcc"
				> *DecodeOpFabs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFabs<
#line 38 "ppc.isa"
					CONFIG
#line 82550 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 82557 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82560 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 82564 "powerpc.tcc"
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82568 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 82572 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 82575 "powerpc.tcc"
				)
				{
#line 1879 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t fpscr = cpu->GetFPSCR();

						cpu->SetFPR(fd, cpu->GetFPR(fb));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82594 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82602 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82606 "powerpc.tcc"
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82610 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82614 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82617 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82621 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82624 "powerpc.tcc"
				)
				{
#line 1894 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmr" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82631 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82639 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82646 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82651 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82659 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82666 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82684 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82691 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82701 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82709 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82716 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82725 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82733 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82740 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 82752 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82757 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82760 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82767 "powerpc.tcc"
				>::initialize_function()
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 82772 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82780 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82787 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 95 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82800 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 82807 "powerpc.tcc"
				>::initialize_operands()
				{
#line 605 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 82819 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82825 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82828 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82833 "powerpc.tcc"
				> *DecodeOpFmr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmr<
#line 38 "ppc.isa"
					CONFIG
#line 82839 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 82846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82849 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 82853 "powerpc.tcc"
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82857 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 82861 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 82864 "powerpc.tcc"
				)
				{
#line 1899 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						SoftDouble result = cpu->GetFPR(fd);
						const SoftDouble& b = cpu->GetFPR(fb);

						// Compute the result
						result = b;
						if(result.isPositive())
						{
							result.opposite();
						}

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 82894 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82899 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82902 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 82906 "powerpc.tcc"
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82910 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 82914 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 82917 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 82921 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 82924 "powerpc.tcc"
				)
				{
#line 1925 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnabs" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 82931 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82939 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82946 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 82951 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82959 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82966 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 82976 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82984 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 82991 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83001 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83009 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83016 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83025 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83033 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83040 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 83052 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83060 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83067 "powerpc.tcc"
				>::initialize_function()
				{
#line 280 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 83072 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83080 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83087 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83092 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83100 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 83107 "powerpc.tcc"
				>::initialize_operands()
				{
#line 605 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 83119 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83128 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83133 "powerpc.tcc"
				> *DecodeOpFnabs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnabs<
#line 38 "ppc.isa"
					CONFIG
#line 83139 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83149 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83153 "powerpc.tcc"
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83157 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83161 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83164 "powerpc.tcc"
				)
				{
#line 1930 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();
						SoftDouble result = cpu->GetFPR(fb);

						// Compute the result
						result.opposite();

						// Write back the result
						cpu->SetFPR(fd, result);

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 83189 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83197 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 83201 "powerpc.tcc"
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83205 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 83209 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 83212 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 83216 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 83219 "powerpc.tcc"
				)
				{
#line 1951 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fneg" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 83226 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83234 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83241 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 83246 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83251 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83254 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83261 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83271 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83279 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83286 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83296 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83301 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83304 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83311 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83320 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83328 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83335 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 83347 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83355 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83362 "powerpc.tcc"
				>::initialize_function()
				{
#line 281 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 83367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83375 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83382 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83387 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83395 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 83402 "powerpc.tcc"
				>::initialize_operands()
				{
#line 605 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 83414 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83423 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83428 "powerpc.tcc"
				> *DecodeOpFneg(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFneg<
#line 38 "ppc.isa"
					CONFIG
#line 83434 "powerpc.tcc"
					>(code, addr);
				}

				/*****************************************************************

				FLOATING-POINT STATUS & CONTROL REGISTER INSTRUCTIONS

				*****************************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 83446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83449 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83453 "powerpc.tcc"
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83457 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83461 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83464 "powerpc.tcc"
				)
				{
#line 1962 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Read the input operands
						uint32_t fpscr = cpu->GetFPSCR();

						// Extract FPSCR source 4-bit field
						uint32_t c = (fpscr >> (4 * (7 - crfS))) & 0xf;
						// Copy it into CR 4-bit destination field
						cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << (4 * (7 - crfS))));
						if(unlikely(crfS == 0))
						cpu->SetFPSCR(fpscr & 0x9fffffffUL); // Don't clear FEX and VX bits
						else
						cpu->SetFPSCR(fpscr & ~(0xffUL << (4 * (7 - crfS)))); // clear bit field
					}
#line 83488 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83496 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 83500 "powerpc.tcc"
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83504 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 83508 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 83511 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 83515 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 83518 "powerpc.tcc"
				)
				{
#line 1982 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mcrfs cr" << crfD << ", cr" << crfS;
					}
#line 83525 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83530 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83533 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83540 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 83545 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83553 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83560 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 83567 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83575 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83582 "powerpc.tcc"
				>::initialize_function()
				{
#line 282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCRSerial; }
#line 83587 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83592 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83595 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83602 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83607 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83615 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 83622 "powerpc.tcc"
				>::initialize_operands()
				{
#line 808 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						//  INPUT(FPSCRF_T, crfS);
						OUTPUT(CR_T, crfD);
						//  INPUT(FPSCR_T, crfS);
						INPUT(FPSCR_T, 0);
					}
#line 83633 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83642 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83647 "powerpc.tcc"
				> *DecodeOpMcrfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrfs<
#line 38 "ppc.isa"
					CONFIG
#line 83653 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83663 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83667 "powerpc.tcc"
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83671 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83675 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83678 "powerpc.tcc"
				)
				{
#line 1987 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// Move FPSCR into destination FPR
						uint32_t fpscr = cpu->GetFPSCR();
						uint64_t _f;
						_f = (uint64_t) fpscr | 0xfff8000000000000ULL;
						cpu->SetFPR(fd, SoftDouble(_f));

						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 83699 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83704 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83707 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 83711 "powerpc.tcc"
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83715 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 83719 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 83722 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 83726 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 83729 "powerpc.tcc"
				)
				{
#line 2004 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mffs" << (rc ? "." : "") << " f" << fd;
					}
#line 83736 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83744 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83751 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 83756 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83761 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83764 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83771 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 83778 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83786 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83793 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83803 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83811 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83818 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 83827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83835 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83842 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 83854 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83862 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83869 "powerpc.tcc"
				>::initialize_function()
				{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCRSerial; }
#line 83874 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83882 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83889 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83894 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83899 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83902 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 83909 "powerpc.tcc"
				>::initialize_operands()
				{
#line 665 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPSCR_T,0);
						OUTPUT(FPR_T, fd);
						if (rc)
						{
							OUTPUT(CR_T,1);
						}
					}
#line 83921 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83930 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83935 "powerpc.tcc"
				> *DecodeOpMffs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMffs<
#line 38 "ppc.isa"
					CONFIG
#line 83941 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83948 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83951 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 83955 "powerpc.tcc"
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 83959 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 83963 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 83966 "powerpc.tcc"
				)
				{
#line 2009 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t fpscr = cpu->GetFPSCR();

						if(likely(crbD != 1 && crbD != 2))
						{
							fpscr = fpscr & (~(1 << (31 - crbD)));
						}

						// Generate VX, FEX
						GenFPSCR_VX<CONFIG>(fpscr);
						GenFPSCR_FEX<CONFIG>(fpscr);

						cpu->SetFPSCR(fpscr);


						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 83995 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84003 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84007 "powerpc.tcc"
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84011 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84015 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84018 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84022 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84025 "powerpc.tcc"
				)
				{
#line 2034 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsb0" << (rc ? "." : "") << " crb" << crbD;
					}
#line 84032 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84037 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84040 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84047 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84052 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84060 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84067 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84074 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84082 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84089 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 84101 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84106 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84109 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84116 "powerpc.tcc"
				>::initialize_function()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84121 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84129 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84136 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84141 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84149 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 84156 "powerpc.tcc"
				>::initialize_operands()
				{
#line 854 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  INPUT(CRB_T, crbD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 84169 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84175 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84178 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84183 "powerpc.tcc"
				> *DecodeOpMtfsb0(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsb0<
#line 38 "ppc.isa"
					CONFIG
#line 84189 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84199 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84203 "powerpc.tcc"
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84207 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84211 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84214 "powerpc.tcc"
				)
				{
#line 2039 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t fpscr = cpu->GetFPSCR();

						if(likely(crbD != 1 && crbD != 2))
						{
							fpscr = fpscr | (1 << (31 - crbD));
							cpu->SetFPSCR(fpscr);
						}
						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84236 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84244 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84248 "powerpc.tcc"
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84252 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84256 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84259 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84263 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84266 "powerpc.tcc"
				)
				{
#line 2057 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsb1" << (rc ? "." : "") << " cr" << crbD;
					}
#line 84273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84281 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84288 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84293 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84301 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84308 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84315 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84323 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84330 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 84342 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84347 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84350 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84357 "powerpc.tcc"
				>::initialize_function()
				{
#line 285 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84362 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84370 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84377 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 118 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84382 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84390 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 84397 "powerpc.tcc"
				>::initialize_operands()
				{
#line 854 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  INPUT(CRB_T, crbD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 84410 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84419 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84424 "powerpc.tcc"
				> *DecodeOpMtfsb1(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsb1<
#line 38 "ppc.isa"
					CONFIG
#line 84430 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84440 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84444 "powerpc.tcc"
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84448 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84452 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84455 "powerpc.tcc"
				)
				{
#line 2062 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t _m, fpscr, _fm, _rb,_c;
						int _i;
						_rb = cpu->GetFPR(fb).queryValue();
						fpscr = cpu->GetFPSCR();
						_fm = fm;

						if(_fm & 0x80)
						{
							_m = 0x60000000;
						}
						else
						{
							_m=0x0;
						}
						_c=0x1;
						for(_i=0;_i< 8;_i++)
						{
							if(_c & _fm)
							{
								_m= _m | (0xf<<(_i*4));
							}
							_c=_c<<1;
						}
						fpscr = _rb & _m;
						cpu->SetFPSCR(fpscr);
						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84503 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84507 "powerpc.tcc"
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84511 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84515 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84518 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84522 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84525 "powerpc.tcc"
				)
				{
#line 2098 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsf" << (rc ? "." : "") << " " << fm << ", f" << fb;
					}
#line 84532 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84540 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84547 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84552 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84557 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84560 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84567 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84574 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84582 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84589 "powerpc.tcc"
				>::initialize_read_fb()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 84599 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84607 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84614 "powerpc.tcc"
				>::initialize_function()
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84627 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84634 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 119 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84647 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 84654 "powerpc.tcc"
				>::initialize_operands()
				{
#line 772 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						OUTPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
					}
#line 84667 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84676 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84681 "powerpc.tcc"
				> *DecodeOpMtfsf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsf<
#line 38 "ppc.isa"
					CONFIG
#line 84687 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84694 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84697 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84701 "powerpc.tcc"
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84705 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84709 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84712 "powerpc.tcc"
				)
				{
#line 2103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						// Check if FPU is enabled
						uint32_t msr = cpu->GetMSR();
						if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t mask = crfD ? 0xf : 0x9;
						uint32_t fpscr = cpu->GetFPSCR();
						fpscr = (fpscr & (~(0xf << (4 * (7 - crfD))))) | ((imm & mask) << (4 * (7 - crfD)));
						cpu->SetFPSCR(fpscr);
						// Copy FX, FEX, VX, OX to CR1
						if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
					}
#line 84731 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84739 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 84743 "powerpc.tcc"
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84747 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 84751 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 84754 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 84758 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 84761 "powerpc.tcc"
				)
				{
#line 2118 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsfi" << (rc ? "." : "") << " cr" << crfD << ", " << imm;
					}
#line 84768 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84776 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84783 "powerpc.tcc"
				>::initialize_unit()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }
#line 84788 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84796 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84803 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 84810 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84815 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84818 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84825 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rc)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 84837 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84845 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84852 "powerpc.tcc"
				>::initialize_function()
				{
#line 287 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 84857 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84865 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84872 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84877 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84885 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 84892 "powerpc.tcc"
				>::initialize_operands()
				{
#line 796 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						//  OUTPUT(CR_T, crfD);
						OUTPUT(FPSCR_T, 0);
					}
#line 84906 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84912 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84915 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84920 "powerpc.tcc"
				> *DecodeOpMtfsfi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsfi<
#line 38 "ppc.isa"
					CONFIG
#line 84926 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 84966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84969 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 84973 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 84977 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 84981 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 84984 "powerpc.tcc"
				)
				{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = aa ? li : cpu->GetCIA() + li;
						cpu->SetNIA(target_addr);
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 84993 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84998 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85001 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 85005 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85009 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 85013 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 85016 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 85020 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 85023 "powerpc.tcc"
				)
				{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = (aa ? li : Operation<CONFIG>::GetAddr() + li);
						os << "b" << (lk ? "l" : "") << (aa ? "a" : "") << " ";
						os << "0x" << hex << target_addr << dec;
						if(cpu)
						{
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 85036 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85041 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85044 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85051 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 85056 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85064 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85071 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 400 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85083 "powerpc.tcc"
				}
				/** Branch (FnBranch | FnConditionalBranch | FnBranchCountReg | FnBranchLinkReg) **/
				template <
#line 38 "ppc.isa"
				class
#line 85089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85092 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85099 "powerpc.tcc"
				>::initialize_function()
				{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranch;
						//  registers_written = (lk ? RegLR : RegNone);
					}
#line 85107 "powerpc.tcc"
				}
				/** Branch **/
				template <
#line 38 "ppc.isa"
				class
#line 85113 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85116 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85123 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 85128 "powerpc.tcc"
				}
				/* Dependancies for Branch Instruction */
				template <
#line 38 "ppc.isa"
				class
#line 85134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85137 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85144 "powerpc.tcc"
				>::initialize_operands()
				{
#line 152 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 85154 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85159 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85162 "powerpc.tcc"
				>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85166 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85170 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85174 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 85177 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85181 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85184 "powerpc.tcc"
				)
				{
#line 44 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (aa ? li : cia + li);
					}
#line 85191 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85199 "powerpc.tcc"
				>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85203 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85207 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85211 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85214 "powerpc.tcc"
				)
				{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Unconditional branch is statically predicted taken
						return true;
					}
#line 85222 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85230 "powerpc.tcc"
				>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85234 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85238 "powerpc.tcc"
				>::branch_linked()
				{
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 85245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85253 "powerpc.tcc"
				>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85257 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 85261 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 124 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return false;
					}
#line 85268 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 85274 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85277 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 85282 "powerpc.tcc"
				> *DecodeOpB(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpB<
#line 38 "ppc.isa"
					CONFIG
#line 85288 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 85295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85298 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 85302 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85306 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 85310 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 85313 "powerpc.tcc"
				)
				{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						uint32_t ctr_ok, cond_ok, ok;

						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}

						if((bo & 4) == 0)
						{
							/* Decrement CTR */
							cpu->SetCTR(cpu->GetCTR() - 1);
							/* Test whether to branch if CTR is zero or not */
							if(bo & 2) {
								ctr_ok = cpu->GetCTR() == 0;
							}
							else {
								ctr_ok = cpu->GetCTR() != 0;
							}
						}
						else {
							ctr_ok = 1;
						}

						ok = ctr_ok && cond_ok;

						if(ok) {
							typename CONFIG::address_t target_addr = aa ? bd : cpu->GetCIA() + bd;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 85359 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85367 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 85371 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85375 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 85379 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 85382 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 85386 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 85389 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = aa ? bd : Operation<CONFIG>::GetAddr() + bd;
						switch(bo)
						{
							case 0: os << "bdnzf"; break;
							case 2: os << "bdzf"; break;
							case 4: os << "bf"; break;
							case 8: os << "bdnzt"; break;
							case 10: os << "bdzt"; break;
							case 12: os << "bt"; break;
							case 16: os << "bdnz"; break;
							case 18: os << "bdz"; break;
							default: os << "bc";
						}
						if(lk) os << "l";
						if(aa) os << "a";
						os << " ";
						switch(bo)
						{
							case 0: case 2: case 4: case 8: case 10: case 12: case 16: case 18: os << bi; break;
							default: os << bo << ", " << bi;
						}
						os << ", 0x" << hex << target_addr << dec;
						if(cpu)
						{
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 85421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85429 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85436 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 85441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85449 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85456 "powerpc.tcc"
				>::initialize_read_ctr()
				{
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85476 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85483 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 346 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 16) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85503 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85510 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 400 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85522 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85530 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85537 "powerpc.tcc"
				>::initialize_write_ctr()
				{
#line 409 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85549 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85557 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85564 "powerpc.tcc"
				>::initialize_function()
				{
#line 143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnConditionalBranch;
						//  registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
					}
#line 85572 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85580 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85587 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 69 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 85592 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85600 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85607 "powerpc.tcc"
				>::initialize_operands()
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						if( (bo & 16) == 0 )
						{
							INPUT(CR_T, bi/4);
						}
						if ( (bo & 4) == 0 )
						{
							INPUT(CTR_T,0);
							OUTPUT(CTR_T,0);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 85626 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85634 "powerpc.tcc"
				>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85638 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85642 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 85646 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 85649 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85653 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85656 "powerpc.tcc"
				)
				{
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (aa ? bd : cia + bd);
					}
#line 85663 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85671 "powerpc.tcc"
				>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85675 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85679 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 85683 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 85686 "powerpc.tcc"
				)
				{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// bd represent the displacement
						// bo represent the behavior of the branch
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04) || (bd < 0));
					}
#line 85696 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85701 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85704 "powerpc.tcc"
				>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85708 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85712 "powerpc.tcc"
				>::branch_linked()
				{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 85719 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85727 "powerpc.tcc"
				>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 85731 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 85735 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 128 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 85742 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 85748 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85751 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 85756 "powerpc.tcc"
				> *DecodeOpBc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBc<
#line 38 "ppc.isa"
					CONFIG
#line 85762 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 85769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85772 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 85776 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85780 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 85784 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 85787 "powerpc.tcc"
				)
				{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						if(bo & 8) throw IllegalInstructionException<CONFIG>();
						int cond_ok ;
						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}
						if(cond_ok) {
							typename CONFIG::address_t target_addr = cpu->GetCTR() & 0xfffffffc;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 85814 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85822 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 85826 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85830 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 85834 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 85837 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 85841 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 85844 "powerpc.tcc"
				)
				{
#line 170 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						switch(bo)
						{
							case 4: os << "bfctr"; break;
							case 12: os << "btctr"; break;
						case 20:
							if(bi == 0)
							{
								os << "bctr";
								break;
							}
							// no break if bi != 0
						default:
							os << "bcctr"; break;
						}
						if(lk) os << "l";
						switch(bo)
						{
							case 4: case 12: os << " " << bi; break;
							case 20: if(bi == 0) break;
							// no break if bi != 0
							default: os << " " << bo << ", " << bi;
						}
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t target_addr = cpu->GetCTR() & 0xfffffffc;
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 85877 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85885 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85892 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 85897 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85905 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85912 "powerpc.tcc"
				>::initialize_read_ctr()
				{
#line 331 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 85921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85929 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85936 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 346 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 16) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85948 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85956 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85963 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 400 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 85975 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85983 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 85990 "powerpc.tcc"
				>::initialize_function()
				{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranchCountReg;
						//  registers_written = (lk ? RegLR : RegNone);
					}
#line 85998 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86006 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86013 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 86018 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86026 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86033 "powerpc.tcc"
				>::initialize_operands()
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(CTR_T,0);
						if( (bo & 16) == 0)
						{
							INPUT(CR_T, bi/4);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 86048 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86056 "powerpc.tcc"
				>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86060 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86064 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86068 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 86071 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86075 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86078 "powerpc.tcc"
				)
				{
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (cpu->GetCTR() & 0xfffffffc);
					}
#line 86085 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86093 "powerpc.tcc"
				>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86097 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86101 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86105 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86108 "powerpc.tcc"
				)
				{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Check the prediction bit of bo field unless it is an always branch statement
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04));
					}
#line 86117 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86122 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86125 "powerpc.tcc"
				>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86129 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86133 "powerpc.tcc"
				>::branch_linked()
				{
#line 112 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 86140 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86148 "powerpc.tcc"
				>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86152 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 86156 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 86163 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86172 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86177 "powerpc.tcc"
				> *DecodeOpBcctr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBcctr<
#line 38 "ppc.isa"
					CONFIG
#line 86183 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 86190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86193 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 86197 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86201 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 86205 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 86208 "powerpc.tcc"
				)
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						int ctr_ok, cond_ok ;
						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}
						if((bo & 4) == 0)
						{
							/* Decrement CTR */
							cpu->SetCTR(cpu->GetCTR() - 1);
							/* Test whether to branch if CTR is zero or not */
							if(bo & 2) {
								ctr_ok = cpu->GetCTR() == 0;
							}
							else {
								ctr_ok = cpu->GetCTR() != 0;
							}
						}
						else {
							ctr_ok = 1;
						}

						if(ctr_ok && cond_ok) {
							typename CONFIG::address_t target_addr = cpu->GetLR() & 0xfffffffc;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 86250 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86255 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86258 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 86262 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86266 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 86270 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 86273 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 86277 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 86280 "powerpc.tcc"
				)
				{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						switch(bo)
						{
							case 0: os << "bdnzflr"; break;
							case 2: os << "bdzflr"; break;
							case 4: os << "bflr"; break;
							case 8: os << "bdnztlr"; break;
							case 10: os << "bdztlr"; break;
							case 12: os << "btlr"; break;
							case 16: os << "bdnzlr"; break;
							case 18: os << "bdzlr"; break;
							case 20: os << "blr"; break;
							default: os << "bclr"; break;
						}
						if(lk) os << "l";
						switch(bo)
						{
							case 0: case 2: case 4: case 8: case 10: case 12: os << " " << bi; break;
							case 16: case 18: case 20: break;
							default: os << " " << bo << ", " << bi;
						}
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t target_addr = cpu->GetLR() & 0xfffffffc;
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 86311 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86319 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86326 "powerpc.tcc"
				>::initialize_unit()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }
#line 86331 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86336 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86339 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86346 "powerpc.tcc"
				>::initialize_read_lr()
				{
#line 325 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86363 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86370 "powerpc.tcc"
				>::initialize_read_ctr()
				{
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86382 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86390 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86397 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 346 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 16) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86409 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86417 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86424 "powerpc.tcc"
				>::initialize_write_lr()
				{
#line 400 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(lk)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86436 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86441 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86444 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86451 "powerpc.tcc"
				>::initialize_write_ctr()
				{
#line 409 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if((bo & 4) == 0)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
							Operation<CONFIG>::num_insn_operands++;
						}
					}
#line 86463 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86471 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86478 "powerpc.tcc"
				>::initialize_function()
				{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranchLinkReg;
						//  registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
					}
#line 86486 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86494 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86501 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 71 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 86506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86514 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86521 "powerpc.tcc"
				>::initialize_operands()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(LR_T,0);
						if( (bo & 16) == 0)
						{
							INPUT(CR_T, bi/4);
						}
						if ( (bo & 4) == 0 )
						{
							INPUT(CTR_T,0);
							OUTPUT(CTR_T,0);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 86541 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86546 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86549 "powerpc.tcc"
				>
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86553 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86557 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 86561 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 86564 "powerpc.tcc"
				,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86568 "powerpc.tcc"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86571 "powerpc.tcc"
				)
				{
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (cpu->GetLR() & 0xfffffffc);
					}
#line 86578 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86586 "powerpc.tcc"
				>
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86590 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86594 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::STATE *
#line 86598 "powerpc.tcc"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 86601 "powerpc.tcc"
				)
				{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Check the prediction bit of bo field unless it is an always branch statement
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04));
					}
#line 86610 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86615 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86618 "powerpc.tcc"
				>
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86622 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86626 "powerpc.tcc"
				>::branch_linked()
				{
#line 116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 86633 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86641 "powerpc.tcc"
				>
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 86645 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 86649 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 86656 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86665 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86670 "powerpc.tcc"
				> *DecodeOpBclr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBclr<
#line 38 "ppc.isa"
					CONFIG
#line 86676 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 86716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86719 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 86723 "powerpc.tcc"
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86727 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 86731 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 86734 "powerpc.tcc"
				)
				{
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a & _b)<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 86747 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86755 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 86759 "powerpc.tcc"
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86763 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 86767 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 86770 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 86774 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 86777 "powerpc.tcc"
				)
				{
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crand cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 86784 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86792 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86799 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 86804 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86812 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86819 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 86826 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86831 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86834 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86841 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86850 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86858 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86865 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86874 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86882 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86889 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 86898 "powerpc.tcc"
				}
				/** Condition Register **/
				template <
#line 38 "ppc.isa"
				class
#line 86904 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86907 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86914 "powerpc.tcc"
				>::initialize_function()
				{
#line 180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 86919 "powerpc.tcc"
				}
				/** Condition **/
				template <
#line 38 "ppc.isa"
				class
#line 86925 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86928 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86935 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 74 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 86940 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86945 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86948 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 86955 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 86986 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86995 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87000 "powerpc.tcc"
				> *DecodeOpCrand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrand<
#line 38 "ppc.isa"
					CONFIG
#line 87006 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87016 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87020 "powerpc.tcc"
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87024 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87028 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87031 "powerpc.tcc"
				)
				{
#line 50 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a & (!_b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87044 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87052 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87056 "powerpc.tcc"
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87060 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87064 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87067 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87071 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87074 "powerpc.tcc"
				)
				{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crandc cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87081 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87089 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87096 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87101 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87106 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87109 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87116 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 87123 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87131 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87138 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87147 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87155 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87162 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87171 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87179 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87186 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87195 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87200 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87203 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87210 "powerpc.tcc"
				>::initialize_function()
				{
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 87215 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87223 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87230 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 87235 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87243 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 87250 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 87281 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87290 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87295 "powerpc.tcc"
				> *DecodeOpCrandc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrandc<
#line 38 "ppc.isa"
					CONFIG
#line 87301 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87311 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87315 "powerpc.tcc"
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87319 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87323 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87326 "powerpc.tcc"
				)
				{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a ^ _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87339 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87347 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87351 "powerpc.tcc"
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87355 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87359 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87362 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87366 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87369 "powerpc.tcc"
				)
				{
#line 73 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "creqv cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87376 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87381 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87384 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87391 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87396 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87404 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87411 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 87418 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87426 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87433 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87442 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87450 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87457 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87466 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87474 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87481 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87490 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87498 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87505 "powerpc.tcc"
				>::initialize_function()
				{
#line 182 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 87510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87518 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87525 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 87530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87538 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 87545 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 87576 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87582 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87585 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87590 "powerpc.tcc"
				> *DecodeOpCreqv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCreqv<
#line 38 "ppc.isa"
					CONFIG
#line 87596 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87606 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87610 "powerpc.tcc"
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87614 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87618 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87621 "powerpc.tcc"
				)
				{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a & _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87634 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87642 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87646 "powerpc.tcc"
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87650 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87654 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87657 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87661 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87664 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crnand cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87671 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87679 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87686 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87691 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87696 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87699 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87706 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 87713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87721 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87728 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87737 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87745 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87752 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87761 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87769 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87776 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 87785 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87793 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87800 "powerpc.tcc"
				>::initialize_function()
				{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 87805 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87813 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87820 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 87825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87833 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 87840 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 87871 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87880 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87885 "powerpc.tcc"
				> *DecodeOpCrnand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrnand<
#line 38 "ppc.isa"
					CONFIG
#line 87891 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87901 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 87905 "powerpc.tcc"
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87909 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 87913 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 87916 "powerpc.tcc"
				)
				{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a | _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 87929 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87937 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 87941 "powerpc.tcc"
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87945 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 87949 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 87952 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 87956 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 87959 "powerpc.tcc"
				)
				{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crnor cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 87966 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87974 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 87981 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 87986 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87994 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88001 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88008 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88016 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88023 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88032 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88037 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88040 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88047 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88056 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88064 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88071 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88080 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88088 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88095 "powerpc.tcc"
				>::initialize_function()
				{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88100 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88108 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88115 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88120 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88128 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 88135 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 88166 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88172 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88175 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88180 "powerpc.tcc"
				> *DecodeOpCrnor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrnor<
#line 38 "ppc.isa"
					CONFIG
#line 88186 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88196 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 88200 "powerpc.tcc"
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88204 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 88208 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 88211 "powerpc.tcc"
				)
				{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a | _b) << (31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 88224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88232 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 88236 "powerpc.tcc"
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88240 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 88244 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 88247 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 88251 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 88254 "powerpc.tcc"
				)
				{
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "cror cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 88261 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88269 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88276 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 88281 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88289 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88296 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88303 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88311 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88318 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88327 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88335 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88342 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88351 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88356 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88359 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88366 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88375 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88383 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88390 "powerpc.tcc"
				>::initialize_function()
				{
#line 185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88395 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88403 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88410 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88415 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88423 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 88430 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 88461 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88467 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88470 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88475 "powerpc.tcc"
				> *DecodeOpCror(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCror<
#line 38 "ppc.isa"
					CONFIG
#line 88481 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88488 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88491 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 88495 "powerpc.tcc"
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88499 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 88503 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 88506 "powerpc.tcc"
				)
				{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a | (!_b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 88519 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88527 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 88531 "powerpc.tcc"
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88535 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 88539 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 88542 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 88546 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 88549 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crorc cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 88556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88564 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88571 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 88576 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88584 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88591 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88598 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88606 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88613 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88622 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88627 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88630 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88637 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88646 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88654 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88661 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88670 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88675 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88678 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88685 "powerpc.tcc"
				>::initialize_function()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88690 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88698 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88705 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 88710 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88718 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 88725 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 88756 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88765 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88770 "powerpc.tcc"
				> *DecodeOpCrorc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrorc<
#line 38 "ppc.isa"
					CONFIG
#line 88776 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88786 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 88790 "powerpc.tcc"
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88794 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 88798 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 88801 "powerpc.tcc"
				)
				{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _e ;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a ^ _b)<<(31-crbD);
						_e = ~(1<<(31-crbD));
						cpu->SetCR((_c & _e) | _d );
					}
#line 88814 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88822 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 88826 "powerpc.tcc"
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88830 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 88834 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 88837 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 88841 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 88844 "powerpc.tcc"
				)
				{
#line 143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crxor cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 88851 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88856 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88859 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88866 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 88871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88879 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88886 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 88893 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88901 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88908 "powerpc.tcc"
				>::initialize_read_crba()
				{
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88917 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88925 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88932 "powerpc.tcc"
				>::initialize_read_crbb()
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88941 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88949 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88956 "powerpc.tcc"
				>::initialize_write_crbd()
				{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 88965 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88973 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 88980 "powerpc.tcc"
				>::initialize_function()
				{
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 88985 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88993 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 89000 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 81 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 89005 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89010 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89013 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 89020 "powerpc.tcc"
				>::initialize_operands()
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 89051 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89060 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89065 "powerpc.tcc"
				> *DecodeOpCrxor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrxor<
#line 38 "ppc.isa"
					CONFIG
#line 89071 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89081 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89085 "powerpc.tcc"
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89089 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89093 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89096 "powerpc.tcc"
				)
				{
#line 148 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						cpu->SetCR((cpu->GetCR() & (~(0xf << (4 * (7 - crfD))))) | (((cpu->GetCR() >> (4 * (7 - crfS))) & 0xf) << (4 * (7 - crfD))));
					}
#line 89103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89111 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89115 "powerpc.tcc"
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89119 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89123 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89126 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89130 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89133 "powerpc.tcc"
				)
				{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "mcrf cr" << crfD << ", cr" << crfS;
					}
#line 89140 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89148 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89155 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 89160 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89168 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89175 "powerpc.tcc"
				>::initialize_read_cr()
				{
#line 367 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89184 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89192 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89199 "powerpc.tcc"
				>::initialize_write_cr()
				{
#line 466 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89208 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89216 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89223 "powerpc.tcc"
				>::initialize_function()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 89228 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89236 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89243 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 82 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 89248 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89256 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 89263 "powerpc.tcc"
				>::initialize_operands()
				{
#line 817 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						//  INPUT(CRF_T, crfS);
						OUTPUT(CR_T, crfD);
						INPUT(CR_T, crfS);
					}
#line 89273 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89282 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89287 "powerpc.tcc"
				> *DecodeOpMcrf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrf<
#line 38 "ppc.isa"
					CONFIG
#line 89293 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/***************************

				INTEGER LOAD INSTRUCTIONS

				***************************/
				template <
#line 38 "ppc.isa"
				class
#line 89338 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89341 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89345 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89349 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89353 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89356 "powerpc.tcc"
				)
				{
#line 41 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int8Load(rd, ea);
					}
#line 89366 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89374 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89378 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89382 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89386 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89389 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89393 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89396 "powerpc.tcc"
				)
				{
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 89408 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89416 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89423 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 89428 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89436 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89443 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89453 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89461 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89468 "powerpc.tcc"
				>::initialize_function()
				{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 89473 "powerpc.tcc"
				}
				/** Load Store **/
				template <
#line 38 "ppc.isa"
				class
#line 89479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89482 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89489 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 89494 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89502 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89509 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 89521 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89526 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89529 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89533 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89537 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 89541 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 89544 "powerpc.tcc"
				)
				{
#line 71 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 89549 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89557 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89561 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 89565 "powerpc.tcc"
				>::memory_access_size()
				{
#line 152 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 89570 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89576 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89579 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89584 "powerpc.tcc"
				> *DecodeOpLbz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbz<
#line 38 "ppc.isa"
					CONFIG
#line 89590 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89600 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89604 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89608 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89612 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89615 "powerpc.tcc"
				)
				{
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int8Load(rd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 89628 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89633 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89636 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89640 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89644 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89648 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89651 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89655 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 89658 "powerpc.tcc"
				)
				{
#line 66 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 89670 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89675 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89678 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89685 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 89690 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89698 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89705 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89715 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89723 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89730 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 89740 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89748 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89755 "powerpc.tcc"
				>::initialize_function()
				{
#line 301 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 89760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89768 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89775 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 176 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 89780 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89788 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89795 "powerpc.tcc"
				>::initialize_operands()
				{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 89804 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89812 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89816 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89820 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 89824 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 89827 "powerpc.tcc"
				)
				{
#line 82 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 89832 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89840 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89844 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89848 "powerpc.tcc"
				>::memory_access_size()
				{
#line 153 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 89853 "powerpc.tcc"
				}
				// Integer LOADS with update
				template <
#line 38 "ppc.isa"
				class
#line 89859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89862 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 89866 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89870 "powerpc.tcc"
				>::is_splitted()
				{
#line 269 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 89877 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89885 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 89889 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 89893 "powerpc.tcc"
				>::split_into()
				{
#line 272 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbz_ctype=0;
						lbz_ctype = 34 << 26;
						lbz_ctype = lbz_ctype | (rd << 21);
						lbz_ctype = lbz_ctype | (ra << 16);
						lbz_ctype = lbz_ctype | (d & 0xffff);
						l.push_back( new OpLbz<CONFIG>(lbz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 89914 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89923 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89928 "powerpc.tcc"
				> *DecodeOpLbzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzu<
#line 38 "ppc.isa"
					CONFIG
#line 89934 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89944 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 89948 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 89952 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 89956 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 89959 "powerpc.tcc"
				)
				{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Load(rd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 89972 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89980 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 89984 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 89988 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 89992 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 89995 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 89999 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90002 "powerpc.tcc"
				)
				{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90014 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90019 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90022 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90029 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90034 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90042 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90049 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90059 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90067 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90074 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90084 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90092 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90099 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90109 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90117 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90124 "powerpc.tcc"
				>::initialize_function()
				{
#line 302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 90129 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90137 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90144 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90149 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90157 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90164 "powerpc.tcc"
				>::initialize_operands()
				{
#line 502 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 90173 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90181 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90185 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90189 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 90193 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 90196 "powerpc.tcc"
				)
				{
#line 83 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 90201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90209 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90213 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90217 "powerpc.tcc"
				>::memory_access_size()
				{
#line 154 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 90222 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90230 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 90234 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90238 "powerpc.tcc"
				>::is_splitted()
				{
#line 290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 90245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90253 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 90257 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 90261 "powerpc.tcc"
				>::split_into()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbzx_ctype=0;
						lbzx_ctype = 31 << 26;
						lbzx_ctype = lbzx_ctype | (rd << 21);
						lbzx_ctype = lbzx_ctype | (ra << 16);
						lbzx_ctype = lbzx_ctype | (rb << 11);
						lbzx_ctype = lbzx_ctype | (87 << 1);
						l.push_back( new OpLbzx<CONFIG>(lbzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 90284 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90293 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90298 "powerpc.tcc"
				> *DecodeOpLbzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzux<
#line 38 "ppc.isa"
					CONFIG
#line 90304 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90314 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 90318 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90322 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 90326 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 90329 "powerpc.tcc"
				)
				{
#line 95 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Load(rd, ea);
					}
#line 90339 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90347 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 90351 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90355 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90359 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90362 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90366 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90369 "powerpc.tcc"
				)
				{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90381 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90386 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90389 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90396 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90401 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90409 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90416 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90426 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90434 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90441 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90451 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90459 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90466 "powerpc.tcc"
				>::initialize_function()
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 90471 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90476 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90479 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90486 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 178 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90491 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 90498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90501 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90508 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 90517 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90525 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90529 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90533 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 90537 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 90540 "powerpc.tcc"
				)
				{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 90545 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90553 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90557 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 90561 "powerpc.tcc"
				>::memory_access_size()
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 90566 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90575 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90580 "powerpc.tcc"
				> *DecodeOpLbzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzx<
#line 38 "ppc.isa"
					CONFIG
#line 90586 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90596 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 90600 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90604 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 90608 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 90611 "powerpc.tcc"
				)
				{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
					}
#line 90621 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90629 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 90633 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90637 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90641 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90644 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90648 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90651 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lha r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90663 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90671 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90678 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90683 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90691 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90698 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90708 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90713 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90716 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90723 "powerpc.tcc"
				>::initialize_function()
				{
#line 304 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 90728 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90733 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90736 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90743 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90748 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90753 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90756 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90763 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 90775 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90783 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90787 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90791 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 90795 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 90798 "powerpc.tcc"
				)
				{
#line 73 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 90803 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90811 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90815 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90819 "powerpc.tcc"
				>::memory_access_size()
				{
#line 156 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 90824 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90832 "powerpc.tcc"
				>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 90836 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 90840 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 788 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 90845 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90854 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90859 "powerpc.tcc"
				> *DecodeOpLha(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLha<
#line 38 "ppc.isa"
					CONFIG
#line 90865 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90875 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 90879 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90883 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 90887 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 90890 "powerpc.tcc"
				)
				{
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 90903 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90908 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90911 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 90915 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90919 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 90923 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 90926 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 90930 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 90933 "powerpc.tcc"
				)
				{
#line 136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhau r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 90945 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90953 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90960 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 90965 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90973 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 90980 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 90990 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90995 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90998 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91005 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91015 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91020 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91023 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91030 "powerpc.tcc"
				>::initialize_function()
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91035 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91043 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91050 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91055 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91063 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91070 "powerpc.tcc"
				>::initialize_operands()
				{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 91079 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91087 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91091 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91095 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 91099 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 91102 "powerpc.tcc"
				)
				{
#line 84 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 91107 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91115 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91119 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91123 "powerpc.tcc"
				>::memory_access_size()
				{
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 91128 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91133 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91136 "powerpc.tcc"
				>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 91140 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 91144 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 789 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 91149 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91158 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91163 "powerpc.tcc"
				> *DecodeOpLhau(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhau<
#line 38 "ppc.isa"
					CONFIG
#line 91169 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91179 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 91183 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91187 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 91191 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 91194 "powerpc.tcc"
				)
				{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 91207 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91215 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 91219 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91223 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 91227 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 91230 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 91234 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 91237 "powerpc.tcc"
				)
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhaux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 91249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91257 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91264 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 91269 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91274 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91277 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91284 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91294 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91302 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91309 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91319 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91324 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91327 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91334 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91344 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91352 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91359 "powerpc.tcc"
				>::initialize_function()
				{
#line 306 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91364 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91372 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91379 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91384 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91389 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91392 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91399 "powerpc.tcc"
				>::initialize_operands()
				{
#line 502 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 91408 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91416 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91420 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91424 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 91428 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 91431 "powerpc.tcc"
				)
				{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 91436 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91441 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91444 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91448 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91452 "powerpc.tcc"
				>::memory_access_size()
				{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 91457 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91465 "powerpc.tcc"
				>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 91469 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 91473 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 790 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 91478 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91487 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91492 "powerpc.tcc"
				> *DecodeOpLhaux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhaux<
#line 38 "ppc.isa"
					CONFIG
#line 91498 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91508 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 91512 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91516 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 91520 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 91523 "powerpc.tcc"
				)
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
					}
#line 91533 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91538 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91541 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 91545 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91549 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 91553 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 91556 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 91560 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 91563 "powerpc.tcc"
				)
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhax r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 91575 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91583 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91590 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 91595 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91603 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91610 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91620 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91628 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91635 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91645 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91653 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91660 "powerpc.tcc"
				>::initialize_function()
				{
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91665 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91673 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91680 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 182 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91685 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 91692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91695 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91702 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 91711 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91719 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91723 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91727 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 91731 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 91734 "powerpc.tcc"
				)
				{
#line 74 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 91739 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91747 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 91751 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91755 "powerpc.tcc"
				>::memory_access_size()
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 91760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91768 "powerpc.tcc"
				>
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 91772 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 91776 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 791 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 91781 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91790 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91795 "powerpc.tcc"
				> *DecodeOpLhax(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhax<
#line 38 "ppc.isa"
					CONFIG
#line 91801 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91811 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 91815 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91819 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 91823 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 91826 "powerpc.tcc"
				)
				{
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
					}
#line 91836 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91844 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 91848 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91852 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 91856 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 91859 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 91863 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 91866 "powerpc.tcc"
				)
				{
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 91878 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91883 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91886 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91893 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 91898 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91906 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91913 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 91923 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91931 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91938 "powerpc.tcc"
				>::initialize_function()
				{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 91943 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91948 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91951 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91958 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91963 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91971 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 91978 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 91990 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91995 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91998 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92002 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 92006 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92010 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 92013 "powerpc.tcc"
				)
				{
#line 76 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 92018 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92026 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92030 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 92034 "powerpc.tcc"
				>::memory_access_size()
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 92039 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92045 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92048 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92053 "powerpc.tcc"
				> *DecodeOpLhz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhz<
#line 38 "ppc.isa"
					CONFIG
#line 92059 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92069 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 92073 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92077 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 92081 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 92084 "powerpc.tcc"
				)
				{
#line 197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 92097 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92105 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 92109 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92113 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 92117 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 92120 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 92124 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 92127 "powerpc.tcc"
				)
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 92139 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92147 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92154 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 92159 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92167 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92174 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92184 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92192 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92199 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92209 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92217 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92224 "powerpc.tcc"
				>::initialize_function()
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 92229 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92234 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92237 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92244 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92257 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92264 "powerpc.tcc"
				>::initialize_operands()
				{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 92273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92281 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92285 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92289 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92293 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 92296 "powerpc.tcc"
				)
				{
#line 86 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 92301 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92309 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92313 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92317 "powerpc.tcc"
				>::memory_access_size()
				{
#line 161 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 92322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92330 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 92334 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92338 "powerpc.tcc"
				>::is_splitted()
				{
#line 313 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 92345 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92353 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 92357 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 92361 "powerpc.tcc"
				>::split_into()
				{
#line 316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbz_ctype=0;
						lbz_ctype = 40 << 26;
						lbz_ctype = lbz_ctype | (rd << 21);
						lbz_ctype = lbz_ctype | (ra << 16);
						lbz_ctype = lbz_ctype | (d & 0xffff);
						l.push_back( new OpLbz<CONFIG>(lbz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 92382 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92391 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92396 "powerpc.tcc"
				> *DecodeOpLhzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzu<
#line 38 "ppc.isa"
					CONFIG
#line 92402 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92409 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92412 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 92416 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92420 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 92424 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 92427 "powerpc.tcc"
				)
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 92440 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92448 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 92452 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92456 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 92460 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 92463 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 92467 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 92470 "powerpc.tcc"
				)
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 92482 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92490 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92497 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 92502 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92507 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92510 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92517 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92527 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92532 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92535 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92542 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92552 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92557 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92560 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92567 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92577 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92582 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92585 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92592 "powerpc.tcc"
				>::initialize_function()
				{
#line 310 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 92597 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92605 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92612 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92617 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92622 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92625 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92632 "powerpc.tcc"
				>::initialize_operands()
				{
#line 502 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 92641 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92646 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92649 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92653 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92657 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 92661 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 92664 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 92669 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92677 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92681 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92685 "powerpc.tcc"
				>::memory_access_size()
				{
#line 162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 92690 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92698 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 92702 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92706 "powerpc.tcc"
				>::is_splitted()
				{
#line 334 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 92713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92721 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 92725 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 92729 "powerpc.tcc"
				>::split_into()
				{
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbzx_ctype=0;
						lbzx_ctype = 31 << 26;
						lbzx_ctype = lbzx_ctype | (rd << 21);
						lbzx_ctype = lbzx_ctype | (ra << 16);
						lbzx_ctype = lbzx_ctype | (rb << 11);
						lbzx_ctype = lbzx_ctype | (279 << 1);
						l.push_back( new OpLbzx<CONFIG>(lbzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 92752 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92761 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92766 "powerpc.tcc"
				> *DecodeOpLhzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzux<
#line 38 "ppc.isa"
					CONFIG
#line 92772 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92779 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92782 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 92786 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92790 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 92794 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 92797 "powerpc.tcc"
				)
				{
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
					}
#line 92807 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92812 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92815 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 92819 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92823 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 92827 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 92830 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 92834 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 92837 "powerpc.tcc"
				)
				{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 92849 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92857 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92864 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 92869 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92877 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92884 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92894 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92899 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92902 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92909 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 92919 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92924 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92927 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92934 "powerpc.tcc"
				>::initialize_function()
				{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 92939 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92947 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92954 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92959 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 92966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92969 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 92976 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 92985 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92993 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 92997 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 93001 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93005 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93008 "powerpc.tcc"
				)
				{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93013 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93018 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93021 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93025 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 93029 "powerpc.tcc"
				>::memory_access_size()
				{
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 93034 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93043 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93048 "powerpc.tcc"
				> *DecodeOpLhzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzx<
#line 38 "ppc.isa"
					CONFIG
#line 93054 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93064 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 93068 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93072 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 93076 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 93079 "powerpc.tcc"
				)
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
					}
#line 93089 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93094 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93097 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 93101 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93105 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 93109 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 93112 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 93116 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 93119 "powerpc.tcc"
				)
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 93131 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93139 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93146 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 93151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93159 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93166 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93184 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93191 "powerpc.tcc"
				>::initialize_function()
				{
#line 312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 93196 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93204 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93211 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 93216 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93224 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93231 "powerpc.tcc"
				>::initialize_operands()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 93243 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93248 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93251 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93255 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93259 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93263 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93266 "powerpc.tcc"
				)
				{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93271 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93279 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93283 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 93287 "powerpc.tcc"
				>::memory_access_size()
				{
#line 164 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 93292 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93301 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93306 "powerpc.tcc"
				> *DecodeOpLwz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwz<
#line 38 "ppc.isa"
					CONFIG
#line 93312 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93322 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 93326 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93330 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 93334 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 93337 "powerpc.tcc"
				)
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 93350 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93358 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 93362 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93366 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 93370 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 93373 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 93377 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 93380 "powerpc.tcc"
				)
				{
#line 276 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 93392 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93397 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93400 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93407 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 93412 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93417 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93420 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93427 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93437 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93442 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93445 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93452 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93462 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93467 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93470 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93477 "powerpc.tcc"
				>::initialize_function()
				{
#line 313 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 93482 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93490 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93497 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 93502 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93507 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93510 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93517 "powerpc.tcc"
				>::initialize_operands()
				{
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 93526 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93534 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93538 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93542 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93546 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93549 "powerpc.tcc"
				)
				{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93554 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93562 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93566 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93570 "powerpc.tcc"
				>::memory_access_size()
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 93575 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93583 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 93587 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93591 "powerpc.tcc"
				>::is_splitted()
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 93598 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93606 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 93610 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 93614 "powerpc.tcc"
				>::split_into()
				{
#line 360 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lwz_ctype=0;
						lwz_ctype = 32 << 26;
						lwz_ctype = lwz_ctype | (rd << 21);
						lwz_ctype = lwz_ctype | (ra << 16);
						lwz_ctype = lwz_ctype | (d & 0xffff);
						l.push_back( new OpLwz<CONFIG>(lwz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 93636 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93645 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93650 "powerpc.tcc"
				> *DecodeOpLwzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzu<
#line 38 "ppc.isa"
					CONFIG
#line 93656 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93666 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 93670 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93674 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 93678 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 93681 "powerpc.tcc"
				)
				{
#line 286 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 93694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93702 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 93706 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93710 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 93714 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 93717 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 93721 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 93724 "powerpc.tcc"
				)
				{
#line 295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 93736 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93744 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93751 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 93756 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93761 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93764 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93771 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93781 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93789 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93796 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93806 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93811 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93814 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93821 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 93831 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93839 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93846 "powerpc.tcc"
				>::initialize_function()
				{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 93851 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93856 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93859 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93866 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 93871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93879 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93886 "powerpc.tcc"
				>::initialize_operands()
				{
#line 502 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 93895 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93903 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93907 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93911 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 93915 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 93918 "powerpc.tcc"
				)
				{
#line 89 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 93923 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93931 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 93935 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93939 "powerpc.tcc"
				>::memory_access_size()
				{
#line 166 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 93944 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93949 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93952 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 93956 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93960 "powerpc.tcc"
				>::is_splitted()
				{
#line 379 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 93967 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 93972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93975 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 93979 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 93983 "powerpc.tcc"
				>::split_into()
				{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lwzx_ctype=0;
						lwzx_ctype = 31 << 26;
						lwzx_ctype = lwzx_ctype | (rd << 21);
						lwzx_ctype = lwzx_ctype | (ra << 16);
						lwzx_ctype = lwzx_ctype | (rb << 11);
						lwzx_ctype = lwzx_ctype | (23 << 1);
						l.push_back( new OpLwzx<CONFIG>(lwzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 94006 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94015 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94020 "powerpc.tcc"
				> *DecodeOpLwzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzux<
#line 38 "ppc.isa"
					CONFIG
#line 94026 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94036 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 94040 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94044 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 94048 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 94051 "powerpc.tcc"
				)
				{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
					}
#line 94061 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94069 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 94073 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94077 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 94081 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 94084 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 94088 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 94091 "powerpc.tcc"
				)
				{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 94103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94111 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94118 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 94123 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94131 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94138 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94148 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94156 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94163 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94173 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94181 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94188 "powerpc.tcc"
				>::initialize_function()
				{
#line 315 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 94193 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94201 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94208 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 94213 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 94220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94223 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94230 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 94239 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94244 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94247 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94251 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94255 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 94259 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 94262 "powerpc.tcc"
				)
				{
#line 81 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 94267 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94275 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94279 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 94283 "powerpc.tcc"
				>::memory_access_size()
				{
#line 167 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 94288 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94294 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94297 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94302 "powerpc.tcc"
				> *DecodeOpLwzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzx<
#line 38 "ppc.isa"
					CONFIG
#line 94308 "powerpc.tcc"
					>(code, addr);
				}

				/****************************

				INTEGER STORE INSTRUCTIONS

				****************************/
				template <
#line 38 "ppc.isa"
				class
#line 94320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94323 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 94327 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94331 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 94335 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 94338 "powerpc.tcc"
				)
				{
#line 326 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int8Store(rs, ea);
					}
#line 94348 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94356 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 94360 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94364 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 94368 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 94371 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 94375 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 94378 "powerpc.tcc"
				)
				{
#line 332 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stb r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 94390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94398 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94405 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 94410 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94418 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94425 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 94432 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94440 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94447 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94457 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94465 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94472 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94482 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94490 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94497 "powerpc.tcc"
				>::initialize_function()
				{
#line 316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 94502 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94507 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94510 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94517 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 94522 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94530 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94537 "powerpc.tcc"
				>::initialize_operands()
				{
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 94545 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94553 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94557 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94561 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 94565 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 94568 "powerpc.tcc"
				)
				{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 94573 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94581 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94585 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 94589 "powerpc.tcc"
				>::memory_access_size()
				{
#line 168 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 94594 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94603 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94608 "powerpc.tcc"
				> *DecodeOpStb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStb<
#line 38 "ppc.isa"
					CONFIG
#line 94614 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94621 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94624 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 94628 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94632 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 94636 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 94639 "powerpc.tcc"
				)
				{
#line 342 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int8Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 94652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94660 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 94664 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94668 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 94672 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 94675 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 94679 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 94682 "powerpc.tcc"
				)
				{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 94694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94702 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94709 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 94714 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94719 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94722 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94729 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 94736 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94744 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94751 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94761 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94769 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94776 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94786 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94794 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94801 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 94811 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94819 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94826 "powerpc.tcc"
				>::initialize_function()
				{
#line 317 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 94831 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94839 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94846 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 94851 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94856 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94859 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94866 "powerpc.tcc"
				>::initialize_operands()
				{
#line 354 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 94875 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94883 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94887 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94891 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 94895 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 94898 "powerpc.tcc"
				)
				{
#line 107 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 94903 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94908 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94911 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 94915 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94919 "powerpc.tcc"
				>::memory_access_size()
				{
#line 169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 94924 "powerpc.tcc"
				}
				// Integer STORES with update
				template <
#line 38 "ppc.isa"
				class
#line 94930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94933 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 94937 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94941 "powerpc.tcc"
				>::is_splitted()
				{
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 94948 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 94953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94956 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 94960 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 94964 "powerpc.tcc"
				>::split_into()
				{
#line 406 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stb_ctype=0;
						stb_ctype = 38 << 26;
						stb_ctype = stb_ctype | (rs << 21);
						stb_ctype = stb_ctype | (ra << 16);
						stb_ctype = stb_ctype | (d & 0xffff);
						l.push_back( new OpStb<CONFIG>(stb_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 94987 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94993 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94996 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95001 "powerpc.tcc"
				> *DecodeOpStbu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbu<
#line 38 "ppc.isa"
					CONFIG
#line 95007 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95017 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 95021 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95025 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 95029 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 95032 "powerpc.tcc"
				)
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 95045 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95053 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 95057 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95061 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 95065 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 95068 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 95072 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 95075 "powerpc.tcc"
				)
				{
#line 370 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 95087 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95095 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95102 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 95107 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95115 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95122 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 95129 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95137 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95144 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95154 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95159 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95162 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95169 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95179 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95184 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95187 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95194 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95212 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95219 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95229 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95234 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95237 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95244 "powerpc.tcc"
				>::initialize_function()
				{
#line 318 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 95249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95257 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95264 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 193 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 95269 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95274 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95277 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95284 "powerpc.tcc"
				>::initialize_operands()
				{
#line 422 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 95293 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95301 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95305 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95309 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 95313 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 95316 "powerpc.tcc"
				)
				{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 95321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95329 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95333 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95337 "powerpc.tcc"
				>::memory_access_size()
				{
#line 170 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 95342 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95347 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95350 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 95354 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95358 "powerpc.tcc"
				>::is_splitted()
				{
#line 426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 95365 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95373 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 95377 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 95381 "powerpc.tcc"
				>::split_into()
				{
#line 429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stbx_ctype=0;
						stbx_ctype = 31 << 26;
						stbx_ctype = stbx_ctype | (rs << 21);
						stbx_ctype = stbx_ctype | (ra << 16);
						stbx_ctype = stbx_ctype | (rb << 11);
						stbx_ctype = stbx_ctype | (215 << 1);
						l.push_back( new OpStb<CONFIG>(stbx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAddi<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 95406 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95415 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95420 "powerpc.tcc"
				> *DecodeOpStbux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbux<
#line 38 "ppc.isa"
					CONFIG
#line 95426 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95436 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 95440 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95444 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 95448 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 95451 "powerpc.tcc"
				)
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Store(rs, ea);
					}
#line 95461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95469 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 95473 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95477 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 95481 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 95484 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 95488 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 95491 "powerpc.tcc"
				)
				{
#line 386 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 95503 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95511 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95518 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 95523 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95531 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95538 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 95545 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95553 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95560 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95570 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95578 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95585 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95595 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95603 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95610 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95620 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95628 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95635 "powerpc.tcc"
				>::initialize_function()
				{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 95640 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95645 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95648 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95655 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 95660 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95665 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95668 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95675 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 95684 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95692 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95696 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95700 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 95704 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 95707 "powerpc.tcc"
				)
				{
#line 109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 95712 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95720 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95724 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 95728 "powerpc.tcc"
				>::memory_access_size()
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 95733 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95739 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95742 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95747 "powerpc.tcc"
				> *DecodeOpStbx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbx<
#line 38 "ppc.isa"
					CONFIG
#line 95753 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95763 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 95767 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95771 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 95775 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 95778 "powerpc.tcc"
				)
				{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int16Store(rs, ea);
					}
#line 95788 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95796 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 95800 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95804 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 95808 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 95811 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 95815 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 95818 "powerpc.tcc"
				)
				{
#line 402 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sth r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 95830 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95835 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95838 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95845 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 95850 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95858 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95865 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 95872 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95880 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95887 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95897 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95905 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95912 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 95922 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95930 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95937 "powerpc.tcc"
				>::initialize_function()
				{
#line 320 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 95942 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95950 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95957 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 95962 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95970 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 95977 "powerpc.tcc"
				>::initialize_operands()
				{
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 95985 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 95990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95993 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 95997 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 96001 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 96005 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 96008 "powerpc.tcc"
				)
				{
#line 110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 96013 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96018 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96021 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96025 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 96029 "powerpc.tcc"
				>::memory_access_size()
				{
#line 172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 96034 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96043 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96048 "powerpc.tcc"
				> *DecodeOpSth(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSth<
#line 38 "ppc.isa"
					CONFIG
#line 96054 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96064 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 96068 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96072 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 96076 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 96079 "powerpc.tcc"
				)
				{
#line 412 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int16Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 96092 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96100 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 96104 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96108 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 96112 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 96115 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 96119 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 96122 "powerpc.tcc"
				)
				{
#line 421 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 96134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96142 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96149 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 96154 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96159 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96162 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96169 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 96176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96184 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96191 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96209 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96216 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96226 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96234 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96241 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96251 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96259 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96266 "powerpc.tcc"
				>::initialize_function()
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 96271 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96279 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96286 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 96291 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96296 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96299 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96306 "powerpc.tcc"
				>::initialize_operands()
				{
#line 354 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 96315 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96323 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96327 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96331 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 96335 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 96338 "powerpc.tcc"
				)
				{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 96343 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96351 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96355 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96359 "powerpc.tcc"
				>::memory_access_size()
				{
#line 173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 96364 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96372 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 96376 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96380 "powerpc.tcc"
				>::is_splitted()
				{
#line 451 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 96387 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96395 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 96399 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 96403 "powerpc.tcc"
				>::split_into()
				{
#line 454 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stb_ctype=0;
						stb_ctype = 44 << 26;
						stb_ctype = stb_ctype | (rs << 21);
						stb_ctype = stb_ctype | (ra << 16);
						stb_ctype = stb_ctype | (d & 0xffff);
						l.push_back( new OpStb<CONFIG>(stb_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 96426 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96432 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96435 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96440 "powerpc.tcc"
				> *DecodeOpSthu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthu<
#line 38 "ppc.isa"
					CONFIG
#line 96446 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96456 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 96460 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96464 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 96468 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 96471 "powerpc.tcc"
				)
				{
#line 431 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 96484 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96492 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 96496 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96500 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 96504 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 96507 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 96511 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 96514 "powerpc.tcc"
				)
				{
#line 440 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 96526 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96534 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96541 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 96546 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96554 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96561 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96571 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96576 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96579 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96586 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96596 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96601 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96604 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96611 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96621 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96629 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96636 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96646 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96654 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96661 "powerpc.tcc"
				>::initialize_function()
				{
#line 322 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 96666 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96671 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96674 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96681 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 96686 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96694 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96701 "powerpc.tcc"
				>::initialize_operands()
				{
#line 422 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 96710 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96718 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96722 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96726 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 96730 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 96733 "powerpc.tcc"
				)
				{
#line 112 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 96738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96746 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 96750 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96754 "powerpc.tcc"
				>::memory_access_size()
				{
#line 174 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 96759 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96767 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 96771 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96775 "powerpc.tcc"
				>::is_splitted()
				{
#line 474 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 96782 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96790 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 96794 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 96798 "powerpc.tcc"
				>::split_into()
				{
#line 477 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType sthx_ctype=0;
						sthx_ctype = 31 << 26;
						sthx_ctype = sthx_ctype | (rs << 21);
						sthx_ctype = sthx_ctype | (ra << 16);
						sthx_ctype = sthx_ctype | (rb << 11);
						sthx_ctype = sthx_ctype | (407 << 1);
						l.push_back( new OpStb<CONFIG>(sthx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAddi<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 96823 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96832 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96837 "powerpc.tcc"
				> *DecodeOpSthux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthux<
#line 38 "ppc.isa"
					CONFIG
#line 96843 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96853 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 96857 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96861 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 96865 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 96868 "powerpc.tcc"
				)
				{
#line 450 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Store(rs, ea);
					}
#line 96878 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96883 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96886 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 96890 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96894 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 96898 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 96901 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 96905 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 96908 "powerpc.tcc"
				)
				{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 96920 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96925 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96928 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96935 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 96940 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96945 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96948 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96955 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96965 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96973 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 96980 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 96990 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 96995 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96998 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97005 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97015 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97020 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97023 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97030 "powerpc.tcc"
				>::initialize_function()
				{
#line 323 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 97035 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97043 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97050 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 97055 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97063 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97070 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 97079 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97087 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97091 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97095 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 97099 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 97102 "powerpc.tcc"
				)
				{
#line 113 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 97107 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97115 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97119 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 97123 "powerpc.tcc"
				>::memory_access_size()
				{
#line 175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 97128 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97134 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97137 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97142 "powerpc.tcc"
				> *DecodeOpSthx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthx<
#line 38 "ppc.isa"
					CONFIG
#line 97148 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97158 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 97162 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97166 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 97170 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 97173 "powerpc.tcc"
				)
				{
#line 466 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int32Store(rs, ea);
					}
#line 97183 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97191 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 97195 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97199 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 97203 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 97206 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 97210 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 97213 "powerpc.tcc"
				)
				{
#line 472 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stw r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 97225 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97233 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97240 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 97245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97253 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97260 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 97267 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97275 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97282 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97292 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97297 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97300 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97307 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97317 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97325 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97332 "powerpc.tcc"
				>::initialize_function()
				{
#line 324 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 97337 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97342 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97345 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97352 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 97357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97365 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97372 "powerpc.tcc"
				>::initialize_operands()
				{
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 97380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97388 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97392 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97396 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 97400 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 97403 "powerpc.tcc"
				)
				{
#line 114 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 97408 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97416 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97420 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 97424 "powerpc.tcc"
				>::memory_access_size()
				{
#line 176 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 97429 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97438 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97443 "powerpc.tcc"
				> *DecodeOpStw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStw<
#line 38 "ppc.isa"
					CONFIG
#line 97449 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97459 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 97463 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97467 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 97471 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 97474 "powerpc.tcc"
				)
				{
#line 482 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int32Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 97487 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97492 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97495 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 97499 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97503 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 97507 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 97510 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 97514 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 97517 "powerpc.tcc"
				)
				{
#line 491 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 97529 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97534 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97537 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97544 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 97549 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97557 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97564 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 97571 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97576 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97579 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97586 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97596 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97601 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97604 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97611 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97621 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97629 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97636 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97646 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97654 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97661 "powerpc.tcc"
				>::initialize_function()
				{
#line 325 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 97666 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97671 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97674 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97681 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 97686 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97694 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97701 "powerpc.tcc"
				>::initialize_operands()
				{
#line 354 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 97710 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97718 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97722 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97726 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 97730 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 97733 "powerpc.tcc"
				)
				{
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 97738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97746 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 97750 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97754 "powerpc.tcc"
				>::memory_access_size()
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 97759 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97767 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 97771 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97775 "powerpc.tcc"
				>::is_splitted()
				{
#line 500 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 97782 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97790 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 97794 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 97798 "powerpc.tcc"
				>::split_into()
				{
#line 503 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stw_ctype=0;
						stw_ctype = 36 << 26;
						stw_ctype = stw_ctype | (rs << 21);
						stw_ctype = stw_ctype | (ra << 16);
						stw_ctype = stw_ctype | (d & 0xffff);
						l.push_back( new OpStw<CONFIG>(stw_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 97821 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97827 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97830 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97835 "powerpc.tcc"
				> *DecodeOpStwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwu<
#line 38 "ppc.isa"
					CONFIG
#line 97841 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97851 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 97855 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97859 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 97863 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 97866 "powerpc.tcc"
				)
				{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 97879 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97887 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 97891 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97895 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 97899 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 97902 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 97906 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 97909 "powerpc.tcc"
				)
				{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 97921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97929 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97936 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 97941 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97949 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97956 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 97963 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97971 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 97978 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 97988 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 97993 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97996 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98003 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98013 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98018 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98021 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98028 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98038 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98043 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98046 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98053 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98063 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98071 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98078 "powerpc.tcc"
				>::initialize_function()
				{
#line 326 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 98083 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98091 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98098 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 98103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98111 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98118 "powerpc.tcc"
				>::initialize_operands()
				{
#line 422 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 98127 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98135 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98139 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98143 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 98147 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 98150 "powerpc.tcc"
				)
				{
#line 116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 98155 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98163 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98167 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98171 "powerpc.tcc"
				>::memory_access_size()
				{
#line 178 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 98176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98184 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 98188 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98192 "powerpc.tcc"
				>::is_splitted()
				{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 98199 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98204 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98207 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 98211 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 98215 "powerpc.tcc"
				>::split_into()
				{
#line 526 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stwx_ctype=0;
						stwx_ctype = 31 << 26;
						stwx_ctype = stwx_ctype | (rs << 21);
						stwx_ctype = stwx_ctype | (ra << 16);
						stwx_ctype = stwx_ctype | (rb << 11);
						stwx_ctype = stwx_ctype | (151 << 1);
						l.push_back( new OpStwx<CONFIG>(stwx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 98239 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98248 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98253 "powerpc.tcc"
				> *DecodeOpStwux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwux<
#line 38 "ppc.isa"
					CONFIG
#line 98259 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98269 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 98273 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98277 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 98281 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 98284 "powerpc.tcc"
				)
				{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Store(rs, ea);
					}
#line 98294 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98302 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 98306 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98310 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 98314 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 98317 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 98321 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 98324 "powerpc.tcc"
				)
				{
#line 526 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 98336 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98341 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98344 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98351 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 98356 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98361 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98364 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98371 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 98378 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98386 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98393 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98403 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98408 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98411 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98418 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98428 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98436 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98443 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98453 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98461 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98468 "powerpc.tcc"
				>::initialize_function()
				{
#line 327 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 98473 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98481 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98488 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 98493 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98501 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98508 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 98517 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98525 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98529 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98533 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 98537 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 98540 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 98545 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98553 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98557 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 98561 "powerpc.tcc"
				>::memory_access_size()
				{
#line 179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 98566 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98575 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98580 "powerpc.tcc"
				> *DecodeOpStwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwx<
#line 38 "ppc.isa"
					CONFIG
#line 98586 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				INTEGER LOAD STORE w BYTE REVERSE INSTRUCTIONS

				***************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 98598 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98601 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 98605 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98609 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 98613 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 98616 "powerpc.tcc"
				)
				{
#line 542 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16LoadByteReverse(rd, ea); // 16-bit load/byte reverse/no signe extend
					}
#line 98626 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98634 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 98638 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98642 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 98646 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 98649 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 98653 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 98656 "powerpc.tcc"
				)
				{
#line 548 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhbrx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 98668 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98676 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98683 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 98688 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98696 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98703 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98721 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98728 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98746 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98753 "powerpc.tcc"
				>::initialize_function()
				{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadByteReversed; }
#line 98758 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98766 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98773 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 203 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 98778 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 98785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98788 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98795 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 98804 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98812 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98816 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98820 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 98824 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 98827 "powerpc.tcc"
				)
				{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 98832 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98840 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 98844 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98848 "powerpc.tcc"
				>::memory_access_size()
				{
#line 180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 98853 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98862 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98867 "powerpc.tcc"
				> *DecodeOpLhbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhbrx<
#line 38 "ppc.isa"
					CONFIG
#line 98873 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98880 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98883 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 98887 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98891 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 98895 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 98898 "powerpc.tcc"
				)
				{
#line 558 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32LoadByteReverse(rd, ea); // 32-bit load/byte reverse/no signe extend
					}
#line 98908 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98916 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 98920 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98924 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 98928 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 98931 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 98935 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 98938 "powerpc.tcc"
				)
				{
#line 564 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwbrx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 98950 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98958 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98965 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 98970 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 98975 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98978 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 98985 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 98995 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99003 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99010 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99020 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99028 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99035 "powerpc.tcc"
				>::initialize_function()
				{
#line 329 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadByteReversed; }
#line 99040 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99045 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99048 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99055 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 99060 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 99067 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99070 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99077 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 99086 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99091 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99094 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99098 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99102 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 99106 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 99109 "powerpc.tcc"
				)
				{
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 99114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99122 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99126 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99130 "powerpc.tcc"
				>::memory_access_size()
				{
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 99135 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99144 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99149 "powerpc.tcc"
				> *DecodeOpLwbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 99155 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99162 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99165 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 99169 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99173 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 99177 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 99180 "powerpc.tcc"
				)
				{
#line 574 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16StoreByteReverse(rs, ea); // 16-bit load/byte reverse
					}
#line 99190 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99198 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 99202 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99206 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 99210 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 99213 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 99217 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 99220 "powerpc.tcc"
				)
				{
#line 580 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthbrx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 99232 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99237 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99240 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99247 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 99252 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99260 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99267 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 99274 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99282 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99289 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99299 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99307 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99314 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99324 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99332 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99339 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99349 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99357 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99364 "powerpc.tcc"
				>::initialize_function()
				{
#line 330 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreByteReversed; }
#line 99369 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99377 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99384 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 99389 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99397 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99404 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 99413 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99421 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99425 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99429 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 99433 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 99436 "powerpc.tcc"
				)
				{
#line 118 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 99441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99449 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99453 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99457 "powerpc.tcc"
				>::memory_access_size()
				{
#line 182 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 99462 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99471 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99476 "powerpc.tcc"
				> *DecodeOpSthbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthbrx<
#line 38 "ppc.isa"
					CONFIG
#line 99482 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99492 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 99496 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99500 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 99504 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 99507 "powerpc.tcc"
				)
				{
#line 590 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32StoreByteReverse(rs, ea); // 32-bit load/byte reverse
					}
#line 99517 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99525 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 99529 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99533 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 99537 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 99540 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 99544 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 99547 "powerpc.tcc"
				)
				{
#line 596 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwbrx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 99559 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99567 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99574 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 99579 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99587 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99594 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 99601 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99609 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99616 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99626 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99634 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99641 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99651 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99659 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99666 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99684 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99691 "powerpc.tcc"
				>::initialize_function()
				{
#line 331 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreByteReversed; }
#line 99696 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99701 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99704 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99711 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 99716 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99724 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99731 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 99740 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99748 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99752 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99756 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 99760 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 99763 "powerpc.tcc"
				)
				{
#line 119 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 99768 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99776 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 99780 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 99784 "powerpc.tcc"
				>::memory_access_size()
				{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 99789 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99798 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99803 "powerpc.tcc"
				> *DecodeOpStwbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 99809 "powerpc.tcc"
					>(code, addr);
				}

				/*******************************************

				INTEGER LOAD STORE STRING INSTRUCTIONS

				*******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 99821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99824 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 99828 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99832 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 99836 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 99839 "powerpc.tcc"
				)
				{
#line 612 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;

						if(cpu->GetMSR_LE())
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						uint8_t n = nb ? nb : 32;
						unsigned int r = rd;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntLoadMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 99863 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99871 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 99875 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99879 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 99883 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 99886 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 99890 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 99893 "powerpc.tcc"
				)
				{
#line 632 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lswi r" << rd << ", r" << ra << ", " << nb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 99905 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99913 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99920 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 99925 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99930 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99933 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99940 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 99950 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 99955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99958 "powerpc.tcc"
				>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 99962 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 99966 "powerpc.tcc"
				>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 99970 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 99973 "powerpc.tcc"
				,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 99977 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 99980 "powerpc.tcc"
				)
				{
#line 509 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = ((nb ? nb : 32) + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;
					}
#line 100001 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100009 "powerpc.tcc"
				>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100013 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100017 "powerpc.tcc"
				>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100021 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100024 "powerpc.tcc"
				,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100028 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100031 "powerpc.tcc"
				)
				{
#line 596 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) : 0) + (uop_num * 4);

						if(cpu->GetMSR_LE())
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						uint8_t n = (nb ? nb : 32) - (uop_num * 4);
						unsigned int r = (rd + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntLoadMSBFirst(r, ea, sz);
					}
#line 100049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100057 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100064 "powerpc.tcc"
				>::initialize_function()
				{
#line 333 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadStringImm; }
#line 100069 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100077 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100084 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 100089 "powerpc.tcc"
				}
				// --- Load & Store string ----------------------------------------------------
				/*

				lswi.initialize_operands = {
					uint8_t n = nb ? nb : 32;
					uint8_t r = rd;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				stswi.initialize_operands = {
					uint8_t n = nb ? nb : 32;
					uint8_t r = rs;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				lswx.initialize_operands = {
					uint8_t n = cpu->GetXER_BYTE_COUNT();
					uint8_t r = rd;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				stswx.initialize_operands = {
					uint8_t n = cpu->GetXER_BYTE_COUNT();
					uint8_t r = rs;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				*/
				template <
#line 38 "ppc.isa"
				class
#line 100142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100145 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100152 "powerpc.tcc"
				>::initialize_operands()
				{
#line 924 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra); // target address
						INPUT(GPR_T, rd);
						INPUT(IMM_T, nb);
					}
#line 100161 "powerpc.tcc"
				}
				//Load string
				template <
#line 38 "ppc.isa"
				class
#line 100167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100170 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100174 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100178 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100182 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100185 "powerpc.tcc"
				)
				{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 100190 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100198 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100202 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100206 "powerpc.tcc"
				>::memory_access_size()
				{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 100211 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100219 "powerpc.tcc"
				>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100223 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 100227 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100231 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100234 "powerpc.tcc"
				)
				{
#line 238 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return nb ? nb : 32; }
#line 100239 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100248 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100253 "powerpc.tcc"
				> *DecodeOpLswi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLswi<
#line 38 "ppc.isa"
					CONFIG
#line 100259 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100269 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 100273 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100277 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 100281 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 100284 "powerpc.tcc"
				)
				{
#line 642 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(rd == ra ||
						rd == rb ||
						(rd == 0 && ra == 0)) throw IllegalInstructionException<CONFIG>();

						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						unsigned int r = rd;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntLoadMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 100310 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100315 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100318 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 100322 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100326 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 100330 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 100333 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 100337 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 100340 "powerpc.tcc"
				)
				{
#line 664 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lswx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 100352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100360 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100367 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 100372 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100380 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100387 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 100397 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100405 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100412 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 100422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100430 "powerpc.tcc"
				>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100434 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100438 "powerpc.tcc"
				>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100442 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100445 "powerpc.tcc"
				,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100449 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100452 "powerpc.tcc"
				)
				{
#line 527 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						Operation<CONFIG>::num_uops = (n + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = rb;

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;

					}
#line 100480 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100488 "powerpc.tcc"
				>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100492 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100496 "powerpc.tcc"
				>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100500 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100503 "powerpc.tcc"
				,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100507 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100510 "powerpc.tcc"
				)
				{
#line 611 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(rd == ra ||
						rd == rb ||
						(rd == 0 && ra == 0)) throw IllegalInstructionException<CONFIG>();

						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb)) + (uop_num * 4);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = ((xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET) - (uop_num * 4);
						unsigned int r = (rd + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntLoadMSBFirst(r, ea, sz);
					}
#line 100530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100538 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100545 "powerpc.tcc"
				>::initialize_function()
				{
#line 334 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadString; }
#line 100550 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100558 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100565 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 208 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 100570 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100578 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100585 "powerpc.tcc"
				>::initialize_operands()
				{
#line 936 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 100594 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100602 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100606 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100610 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100614 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100617 "powerpc.tcc"
				)
				{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 100622 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100627 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100630 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100634 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100638 "powerpc.tcc"
				>::memory_access_size()
				{
#line 185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 100643 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100648 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100651 "powerpc.tcc"
				>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 100655 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 100659 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 100663 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 100666 "powerpc.tcc"
				)
				{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetXER(); }
#line 100671 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100677 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100680 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100685 "powerpc.tcc"
				> *DecodeOpLswx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLswx<
#line 38 "ppc.isa"
					CONFIG
#line 100691 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100701 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 100705 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100709 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 100713 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 100716 "powerpc.tcc"
				)
				{
#line 674 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = nb ? nb : 32;
						unsigned int r = rs;
						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntStoreMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 100736 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100744 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 100748 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100752 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 100756 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 100759 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 100763 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 100766 "powerpc.tcc"
				)
				{
#line 690 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stswi r" << rs << ", r" << ra << ", " << nb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 100778 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100786 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100793 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 100798 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100803 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100806 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100813 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 100820 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100825 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100828 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100835 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 100845 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100853 "powerpc.tcc"
				>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100857 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100861 "powerpc.tcc"
				>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100865 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100868 "powerpc.tcc"
				,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100872 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100875 "powerpc.tcc"
				)
				{
#line 552 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = ((nb ? nb : 32) + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;

					}
#line 100897 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100905 "powerpc.tcc"
				>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 100909 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100913 "powerpc.tcc"
				>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 100917 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 100920 "powerpc.tcc"
				,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 100924 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 100927 "powerpc.tcc"
				)
				{
#line 628 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) : 0) + (uop_num * 4);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = (nb ? nb : 32) - (uop_num * 4);
						unsigned int r = (rs + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntStoreMSBFirst(r, ea, sz);
					}
#line 100942 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100950 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100957 "powerpc.tcc"
				>::initialize_function()
				{
#line 335 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreStringImm; }
#line 100962 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100970 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100977 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 209 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 100982 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 100987 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100990 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 100997 "powerpc.tcc"
				>::initialize_operands()
				{
#line 930 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(IMM_T, nb);
					}
#line 101006 "powerpc.tcc"
				}
				//Store string
				template <
#line 38 "ppc.isa"
				class
#line 101012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101015 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101019 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101023 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101027 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101030 "powerpc.tcc"
				)
				{
#line 123 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 101035 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101043 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101047 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101051 "powerpc.tcc"
				>::memory_access_size()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 101056 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101064 "powerpc.tcc"
				>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101068 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 101072 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101076 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101079 "powerpc.tcc"
				)
				{
#line 240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return nb ? nb : 32; }
#line 101084 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101090 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101093 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101098 "powerpc.tcc"
				> *DecodeOpStswi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStswi<
#line 38 "ppc.isa"
					CONFIG
#line 101104 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101114 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 101118 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101122 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 101126 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 101129 "powerpc.tcc"
				)
				{
#line 700 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						unsigned int r = rs;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntStoreMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 101151 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101159 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 101163 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101167 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 101171 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 101174 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 101178 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 101181 "powerpc.tcc"
				)
				{
#line 718 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stswx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 101193 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101201 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101208 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 101213 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101218 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101221 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101228 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 101235 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101243 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101250 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 101260 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101268 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101275 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 101285 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101293 "powerpc.tcc"
				>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101297 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101301 "powerpc.tcc"
				>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101305 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101308 "powerpc.tcc"
				,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101312 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101315 "powerpc.tcc"
				)
				{
#line 571 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t xer = cpu->GetXER();
						uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
						Operation<CONFIG>::num_uops = (n + 3) / 4;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = rb;

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;

					}
#line 101343 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101351 "powerpc.tcc"
				>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101355 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101359 "powerpc.tcc"
				>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101363 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101366 "powerpc.tcc"
				,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101370 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101373 "powerpc.tcc"
				)
				{
#line 640 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb)) + (uop_num * 4);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t xer = cpu->GetXER();
						uint8_t n = ((xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET) - (uop_num * 4);
						unsigned int r = (rs + uop_num) & 31;

						uint32_t sz = (n > 4) ? 4 : n;
						cpu->IntStoreMSBFirst(r, ea, sz);
					}
#line 101389 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101397 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101404 "powerpc.tcc"
				>::initialize_function()
				{
#line 336 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreString; }
#line 101409 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101417 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101424 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 210 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 101429 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101434 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101437 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101444 "powerpc.tcc"
				>::initialize_operands()
				{
#line 942 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 101453 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101461 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101465 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101469 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101473 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101476 "powerpc.tcc"
				)
				{
#line 124 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 101481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101489 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101493 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101497 "powerpc.tcc"
				>::memory_access_size()
				{
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 101502 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101507 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101510 "powerpc.tcc"
				>
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101514 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 101518 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101522 "powerpc.tcc"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101525 "powerpc.tcc"
				)
				{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetXER(); }
#line 101530 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101536 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101539 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101544 "powerpc.tcc"
				> *DecodeOpStswx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStswx<
#line 38 "ppc.isa"
					CONFIG
#line 101550 "powerpc.tcc"
					>(code, addr);
				}

				/*******************************************

				INTEGER LOAD STORE MULTIPLE INSTRUCTIONS

				*******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 101562 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101565 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 101569 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101573 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 101577 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 101580 "powerpc.tcc"
				)
				{
#line 734 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra >= rd) throw IllegalInstructionException<CONFIG>();
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r;
						for(r = rd; r < 32; r++)
						{
							cpu->Int32Load(r, ea);
							ea = ea + 4;
						}
					}
#line 101597 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101605 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 101609 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101613 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 101617 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 101620 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 101624 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 101627 "powerpc.tcc"
				)
				{
#line 747 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lmw r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 101639 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101647 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101654 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 101659 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101667 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101674 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 101684 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101692 "powerpc.tcc"
				>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101696 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101700 "powerpc.tcc"
				>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101704 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101707 "powerpc.tcc"
				,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101711 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101714 "powerpc.tcc"
				)
				{
#line 472 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = 32 - rd;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;

					}
#line 101736 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101744 "powerpc.tcc"
				>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 101748 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101752 "powerpc.tcc"
				>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 101756 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 101759 "powerpc.tcc"
				,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 101763 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 101766 "powerpc.tcc"
				)
				{
#line 653 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						if(ra >= rd) throw IllegalInstructionException<CONFIG>();
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d) + (uop_num * 4);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r = rd + uop_num;
						cpu->Int32Load(r, ea);
					}
#line 101779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101787 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101794 "powerpc.tcc"
				>::initialize_function()
				{
#line 332 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadMultiple; }
#line 101799 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101807 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101814 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 101819 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101827 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101834 "powerpc.tcc"
				>::initialize_operands()
				{
#line 208 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						for(int i=rd; i<32; i++)
						{ OUTPUT(GPR_T, i);
						}
					}
#line 101844 "powerpc.tcc"
				}
				//Load multiple
				template <
#line 38 "ppc.isa"
				class
#line 101850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101853 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101857 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101861 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 101865 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 101868 "powerpc.tcc"
				)
				{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 101873 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101881 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 101885 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 101889 "powerpc.tcc"
				>::memory_access_size()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 101894 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101903 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101908 "powerpc.tcc"
				> *DecodeOpLmw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLmw<
#line 38 "ppc.isa"
					CONFIG
#line 101914 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101924 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 101928 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 101932 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 101936 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 101939 "powerpc.tcc"
				)
				{
#line 757 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r;

						for(r = rs; r < 32; r++)
						{
							cpu->Int32Store(r, ea);
							ea = ea + 4;
						}
					}
#line 101956 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 101961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101964 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 101968 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 101972 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 101976 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 101979 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 101983 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 101986 "powerpc.tcc"
				)
				{
#line 770 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stmw r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 101998 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102006 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102013 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 102018 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102026 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102033 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 102040 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102045 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102048 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102055 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102065 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102070 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102073 "powerpc.tcc"
				>
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 102077 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102081 "powerpc.tcc"
				>::resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 102085 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 102088 "powerpc.tcc"
				,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 102092 "powerpc.tcc"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 102095 "powerpc.tcc"
				)
				{
#line 491 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::num_uops = 32 - rs;
						assert(uop_num < Operation<CONFIG>::num_uops);

						Operation<CONFIG>::num_insn_operands = 0;

						if(ra)
						{
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
							Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
						}

						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;
					}
#line 102116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102124 "powerpc.tcc"
				>
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				void
#line 102128 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102132 "powerpc.tcc"
				>::uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				typename CONFIG::STATE *
#line 102136 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				cpu
#line 102139 "powerpc.tcc"
				,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				unsigned int
#line 102143 "powerpc.tcc"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
				uop_num
#line 102146 "powerpc.tcc"
				)
				{
#line 663 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d) + (uop_num * 4);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r = rs + uop_num;
						cpu->Int32Store(r, ea);
					}
#line 102158 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102166 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102173 "powerpc.tcc"
				>::initialize_function()
				{
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreMultiple; }
#line 102178 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102186 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102193 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 212 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 102198 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102203 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102206 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102213 "powerpc.tcc"
				>::initialize_operands()
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						for(int i=rs; i<32; i++)
						{ INPUT(GPR_T, i);
						}
					}
#line 102223 "powerpc.tcc"
				}
				//Store multiple
				template <
#line 38 "ppc.isa"
				class
#line 102229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102232 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102236 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102240 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 102244 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 102247 "powerpc.tcc"
				)
				{
#line 121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 102252 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102260 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102264 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 102268 "powerpc.tcc"
				>::memory_access_size()
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 102273 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102282 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102287 "powerpc.tcc"
				> *DecodeOpStmw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStmw<
#line 38 "ppc.isa"
					CONFIG
#line 102293 "powerpc.tcc"
					>(code, addr);
				}

				/**********************************

				FLOATING POINT LOAD INSTRUCTIONS

				**********************************/
				template <
#line 38 "ppc.isa"
				class
#line 102305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102308 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 102312 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102316 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 102320 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 102323 "powerpc.tcc"
				)
				{
#line 786 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// check if FPU is available
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
					}
#line 102345 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102353 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 102357 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102361 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 102365 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 102368 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 102372 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 102375 "powerpc.tcc"
				)
				{
#line 804 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfd f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 102387 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102395 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102402 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 102407 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102415 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102422 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102432 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102440 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102447 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102457 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102465 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102472 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102489 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102496 "powerpc.tcc"
				>::initialize_function()
				{
#line 338 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 102501 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102509 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102516 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 102521 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102526 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102529 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102536 "powerpc.tcc"
				>::initialize_operands()
				{
#line 290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 102544 "powerpc.tcc"
				}
				//Load float
				template <
#line 38 "ppc.isa"
				class
#line 102550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102553 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102557 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102561 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 102565 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 102568 "powerpc.tcc"
				)
				{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 102573 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102581 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102585 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 102589 "powerpc.tcc"
				>::memory_access_size()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 102594 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102603 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102608 "powerpc.tcc"
				> *DecodeOpLfd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfd<
#line 38 "ppc.isa"
					CONFIG
#line 102614 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102621 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102624 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 102628 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102632 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 102636 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 102639 "powerpc.tcc"
				)
				{
#line 814 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 102663 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102671 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 102675 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102679 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 102683 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 102686 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 102690 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 102693 "powerpc.tcc"
				)
				{
#line 834 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdu f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 102705 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102713 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102720 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 102725 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102733 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102740 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102750 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102758 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102765 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102775 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102783 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102790 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102800 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102808 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102815 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 102824 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102832 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102839 "powerpc.tcc"
				>::initialize_function()
				{
#line 339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 102844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102852 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102859 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 214 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 102864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102872 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102879 "powerpc.tcc"
				>::initialize_operands()
				{
#line 296 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 102887 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102895 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102899 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102903 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 102907 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 102910 "powerpc.tcc"
				)
				{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 102915 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102923 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 102927 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102931 "powerpc.tcc"
				>::memory_access_size()
				{
#line 191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 102936 "powerpc.tcc"
				}
				// Floating point LOADS with update
				template <
#line 38 "ppc.isa"
				class
#line 102942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102945 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 102949 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102953 "powerpc.tcc"
				>::is_splitted()
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 102960 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 102965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102968 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 102972 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 102976 "powerpc.tcc"
				>::split_into()
				{
#line 552 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfd_ctype=0;
						lfd_ctype = 50 << 26;
						lfd_ctype = lfd_ctype | (fd << 21);
						lfd_ctype = lfd_ctype | (ra << 16);
						lfd_ctype = lfd_ctype | (d & 0xffff);
						l.push_back( new OpLfd<CONFIG>(lfd_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 102997 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 103003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103006 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103011 "powerpc.tcc"
				> *DecodeOpLfdu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdu<
#line 38 "ppc.isa"
					CONFIG
#line 103017 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103027 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 103031 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103035 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 103039 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 103042 "powerpc.tcc"
				)
				{
#line 844 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 103065 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103070 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103073 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 103077 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103081 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 103085 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 103088 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 103092 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 103095 "powerpc.tcc"
				)
				{
#line 863 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdux f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 103107 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103115 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103122 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 103127 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103135 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103142 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103152 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103157 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103160 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103167 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103177 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103182 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103185 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103192 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103210 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103217 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103227 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103235 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103242 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103251 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103259 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103266 "powerpc.tcc"
				>::initialize_function()
				{
#line 340 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 103271 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103279 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103286 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 215 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 103291 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103296 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103299 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103306 "powerpc.tcc"
				>::initialize_operands()
				{
#line 516 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 103315 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103323 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103327 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103331 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 103335 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 103338 "powerpc.tcc"
				)
				{
#line 98 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 103343 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103351 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103355 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103359 "powerpc.tcc"
				>::memory_access_size()
				{
#line 192 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 103364 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103372 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 103376 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103380 "powerpc.tcc"
				>::is_splitted()
				{
#line 570 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 103387 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103395 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 103399 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 103403 "powerpc.tcc"
				>::split_into()
				{
#line 573 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfdx_ctype=0;
						lfdx_ctype = 50 << 26;
						lfdx_ctype = lfdx_ctype | (fd << 21);
						lfdx_ctype = lfdx_ctype | (ra << 16);
						lfdx_ctype = lfdx_ctype | (rb << 11);
						lfdx_ctype = lfdx_ctype | (599 << 1);
						l.push_back( new OpLfdx<CONFIG>(lfdx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 103426 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 103432 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103435 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103440 "powerpc.tcc"
				> *DecodeOpLfdux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdux<
#line 38 "ppc.isa"
					CONFIG
#line 103446 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103456 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 103460 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103464 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 103468 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 103471 "powerpc.tcc"
				)
				{
#line 873 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
					}
#line 103493 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103501 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 103505 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103509 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 103513 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 103516 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 103520 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 103523 "powerpc.tcc"
				)
				{
#line 891 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdx f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 103535 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103543 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103550 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 103555 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103563 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103570 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103580 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103588 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103595 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103605 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103613 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103620 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103630 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103638 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103645 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103654 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103662 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103669 "powerpc.tcc"
				>::initialize_function()
				{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 103674 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103682 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103689 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 103694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103702 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103709 "powerpc.tcc"
				>::initialize_operands()
				{
#line 509 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 103718 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103726 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103730 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103734 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 103738 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 103741 "powerpc.tcc"
				)
				{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 103746 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103751 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103754 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 103758 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 103762 "powerpc.tcc"
				>::memory_access_size()
				{
#line 193 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 103767 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 103773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103776 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103781 "powerpc.tcc"
				> *DecodeOpLfdx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdx<
#line 38 "ppc.isa"
					CONFIG
#line 103787 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103797 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 103801 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103805 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 103809 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 103812 "powerpc.tcc"
				)
				{
#line 901 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
					}
#line 103834 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103842 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 103846 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103850 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 103854 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 103857 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 103861 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 103864 "powerpc.tcc"
				)
				{
#line 919 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfs f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 103876 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103884 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103891 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 103896 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103904 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103911 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103929 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103936 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103946 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103951 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103954 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103961 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 103970 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103975 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103978 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 103985 "powerpc.tcc"
				>::initialize_function()
				{
#line 342 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 103990 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 103995 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103998 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104005 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 104010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104018 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104025 "powerpc.tcc"
				>::initialize_operands()
				{
#line 290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 104033 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104041 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104045 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104049 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 104053 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 104056 "powerpc.tcc"
				)
				{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 104061 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104069 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104073 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104077 "powerpc.tcc"
				>::memory_access_size()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 104082 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104087 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104090 "powerpc.tcc"
				>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104094 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 104098 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 775 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 104103 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 104109 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104112 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104117 "powerpc.tcc"
				> *DecodeOpLfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfs<
#line 38 "ppc.isa"
					CONFIG
#line 104123 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104130 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104133 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 104137 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104141 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 104145 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 104148 "powerpc.tcc"
				)
				{
#line 929 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}
						// do the memory access
						cpu->Fp32Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 104172 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104177 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104180 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 104184 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104188 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 104192 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 104195 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 104199 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 104202 "powerpc.tcc"
				)
				{
#line 949 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsu f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 104214 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104222 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104229 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 104234 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104239 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104242 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104249 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104259 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104267 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104274 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104292 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104299 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104309 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104314 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104317 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104324 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104333 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104338 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104341 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104348 "powerpc.tcc"
				>::initialize_function()
				{
#line 343 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 104353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104361 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104368 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 104373 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104378 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104381 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104388 "powerpc.tcc"
				>::initialize_operands()
				{
#line 296 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 104396 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104404 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104408 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104412 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 104416 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 104419 "powerpc.tcc"
				)
				{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 104424 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104429 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104432 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104436 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104440 "powerpc.tcc"
				>::memory_access_size()
				{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 104445 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104453 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104457 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104461 "powerpc.tcc"
				>::is_splitted()
				{
#line 593 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 104468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104476 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 104480 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104484 "powerpc.tcc"
				>::split_into()
				{
#line 596 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfs_ctype=0;
						lfs_ctype = 50 << 26;
						lfs_ctype = lfs_ctype | (fd << 21);
						lfs_ctype = lfs_ctype | (ra << 16);
						lfs_ctype = lfs_ctype | (d & 0xffff);
						l.push_back( new OpLfs<CONFIG>(lfs_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 104505 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104513 "powerpc.tcc"
				>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104517 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 104521 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 776 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 104526 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 104532 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104535 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104540 "powerpc.tcc"
				> *DecodeOpLfsu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsu<
#line 38 "ppc.isa"
					CONFIG
#line 104546 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104556 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 104560 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104564 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 104568 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 104571 "powerpc.tcc"
				)
				{
#line 959 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 104595 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104603 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 104607 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104611 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 104615 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 104618 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 104622 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 104625 "powerpc.tcc"
				)
				{
#line 979 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsux f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 104637 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104645 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104652 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 104657 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104665 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104672 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104682 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104690 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104697 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104707 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104715 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104722 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104732 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104740 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104747 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104757 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104765 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104772 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 104781 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104789 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104796 "powerpc.tcc"
				>::initialize_function()
				{
#line 344 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 104801 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104809 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104816 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 104821 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104829 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104833 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104837 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 104841 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 104844 "powerpc.tcc"
				)
				{
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 104849 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104857 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 104861 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104865 "powerpc.tcc"
				>::memory_access_size()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 104870 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104878 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104882 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104886 "powerpc.tcc"
				>::is_splitted()
				{
#line 614 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 104893 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104901 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 104905 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104909 "powerpc.tcc"
				>::split_into()
				{
#line 617 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfsx_ctype=0;
						lfsx_ctype = 50 << 26;
						lfsx_ctype = lfsx_ctype | (fd << 21);
						lfsx_ctype = lfsx_ctype | (ra << 16);
						lfsx_ctype = lfsx_ctype | (rb << 11);
						lfsx_ctype = lfsx_ctype | (535 << 1);
						l.push_back( new OpLfsx<CONFIG>(lfsx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 104932 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 104937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104940 "powerpc.tcc"
				>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 104944 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 104948 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 777 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 104953 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 104959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104962 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104967 "powerpc.tcc"
				> *DecodeOpLfsux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsux<
#line 38 "ppc.isa"
					CONFIG
#line 104973 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104983 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 104987 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 104991 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 104995 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 104998 "powerpc.tcc"
				)
				{
#line 989 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
					}
#line 105020 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105028 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 105032 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105036 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 105040 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 105043 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 105047 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 105050 "powerpc.tcc"
				)
				{
#line 1007 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsx f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 105062 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105067 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105070 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105077 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 105082 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105087 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105090 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105097 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105107 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105115 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105122 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105132 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105137 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105140 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105147 "powerpc.tcc"
				>::initialize_write_fd()
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105157 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105162 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105165 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105172 "powerpc.tcc"
				>::initialize_write_fpscr()
				{
#line 394 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105181 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105189 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105196 "powerpc.tcc"
				>::initialize_function()
				{
#line 345 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 105201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105209 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105216 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 105221 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105229 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105236 "powerpc.tcc"
				>::initialize_operands()
				{
#line 509 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 105245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105253 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105257 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105261 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 105265 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 105268 "powerpc.tcc"
				)
				{
#line 103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 105273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105281 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105285 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105289 "powerpc.tcc"
				>::memory_access_size()
				{
#line 197 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 105294 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105302 "powerpc.tcc"
				>
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 105306 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105310 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 778 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 105315 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 105321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105324 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105329 "powerpc.tcc"
				> *DecodeOpLfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsx<
#line 38 "ppc.isa"
					CONFIG
#line 105335 "powerpc.tcc"
					>(code, addr);
				}

				/***********************************

				FLOATING POINT STORE INSTRUCTIONS

				***********************************/
				template <
#line 38 "ppc.isa"
				class
#line 105347 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105350 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 105354 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105358 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 105362 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 105365 "powerpc.tcc"
				)
				{
#line 1023 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
					}
#line 105386 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105391 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105394 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 105398 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105402 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 105406 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 105409 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 105413 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 105416 "powerpc.tcc"
				)
				{
#line 1040 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfd f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 105428 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105436 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105443 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 105448 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105456 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105463 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 105470 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105478 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105485 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105503 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105510 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105520 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105528 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105535 "powerpc.tcc"
				>::initialize_function()
				{
#line 346 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 105540 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105548 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105555 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 221 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 105560 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105565 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105568 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105575 "powerpc.tcc"
				>::initialize_operands()
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 105583 "powerpc.tcc"
				}
				//Store float
				template <
#line 38 "ppc.isa"
				class
#line 105589 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105592 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105596 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105600 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 105604 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 105607 "powerpc.tcc"
				)
				{
#line 126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 105612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105620 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105624 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105628 "powerpc.tcc"
				>::memory_access_size()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 105633 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 105639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105642 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105647 "powerpc.tcc"
				> *DecodeOpStfd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfd<
#line 38 "ppc.isa"
					CONFIG
#line 105653 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105660 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105663 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 105667 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105671 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 105675 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 105678 "powerpc.tcc"
				)
				{
#line 1050 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 105702 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105710 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 105714 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105718 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 105722 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 105725 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 105729 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 105732 "powerpc.tcc"
				)
				{
#line 1070 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdu f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 105744 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105752 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105759 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 105764 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105772 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105779 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 105786 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105794 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105801 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105811 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105819 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105826 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105836 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105844 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105851 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 105861 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105869 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105876 "powerpc.tcc"
				>::initialize_function()
				{
#line 347 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 105881 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105889 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105896 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 105901 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105909 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105916 "powerpc.tcc"
				>::initialize_operands()
				{
#line 367 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 105924 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105929 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105932 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105936 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105940 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 105944 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 105947 "powerpc.tcc"
				)
				{
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 105952 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 105957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105960 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 105964 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105968 "powerpc.tcc"
				>::memory_access_size()
				{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 105973 "powerpc.tcc"
				}
				// Floating point stores with update
				template <
#line 38 "ppc.isa"
				class
#line 105979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105982 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 105986 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105990 "powerpc.tcc"
				>::is_splitted()
				{
#line 638 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 105997 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106005 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 106009 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 106013 "powerpc.tcc"
				>::split_into()
				{
#line 641 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfd_ctype=0;
						stfd_ctype = 54 << 26;
						stfd_ctype = stfd_ctype | (fs << 21);
						stfd_ctype = stfd_ctype | (ra << 16);
						stfd_ctype = stfd_ctype | (d & 0xffff);
						l.push_back( new OpStfd<CONFIG>(stfd_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 106034 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 106040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106043 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106048 "powerpc.tcc"
				> *DecodeOpStfdu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdu<
#line 38 "ppc.isa"
					CONFIG
#line 106054 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106064 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 106068 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106072 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 106076 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 106079 "powerpc.tcc"
				)
				{
#line 1080 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 106103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106111 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 106115 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106119 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 106123 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 106126 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 106130 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 106133 "powerpc.tcc"
				)
				{
#line 1100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdux f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 106145 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106153 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106160 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 106165 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106173 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106180 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 106187 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106195 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106202 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106212 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106220 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106227 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106237 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106245 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106252 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106270 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106277 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106287 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106295 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106302 "powerpc.tcc"
				>::initialize_function()
				{
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 106307 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106315 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106322 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 106327 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106332 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106335 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106342 "powerpc.tcc"
				>::initialize_operands()
				{
#line 436 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 106351 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106356 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106359 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106363 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106367 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 106371 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 106374 "powerpc.tcc"
				)
				{
#line 128 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 106379 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106387 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106391 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106395 "powerpc.tcc"
				>::memory_access_size()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 106400 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106408 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 106412 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106416 "powerpc.tcc"
				>::is_splitted()
				{
#line 659 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 106423 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106431 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 106435 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 106439 "powerpc.tcc"
				>::split_into()
				{
#line 662 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfdx_ctype=0;
						stfdx_ctype = 31 << 26;
						stfdx_ctype = stfdx_ctype | (fs << 21);
						stfdx_ctype = stfdx_ctype | (ra << 16);
						stfdx_ctype = stfdx_ctype | (rb << 11);
						stfdx_ctype = stfdx_ctype | (727 << 1);
						l.push_back( new OpStfdx<CONFIG>(stfdx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 106462 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 106468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106471 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106476 "powerpc.tcc"
				> *DecodeOpStfdux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdux<
#line 38 "ppc.isa"
					CONFIG
#line 106482 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106492 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 106496 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106500 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 106504 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 106507 "powerpc.tcc"
				)
				{
#line 1110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
					}
#line 106527 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106532 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106535 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 106539 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106543 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 106547 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 106550 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 106554 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 106557 "powerpc.tcc"
				)
				{
#line 1126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 106569 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106577 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106584 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 106589 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106597 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106604 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 106611 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106619 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106626 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106636 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106641 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106644 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106651 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106661 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106669 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106676 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106686 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106694 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106701 "powerpc.tcc"
				>::initialize_function()
				{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 106706 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106714 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106721 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 106726 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106734 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106741 "powerpc.tcc"
				>::initialize_operands()
				{
#line 429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 106750 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106758 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106762 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106766 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 106770 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 106773 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 106778 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106786 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 106790 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 106794 "powerpc.tcc"
				>::memory_access_size()
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 106799 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 106805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106808 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106813 "powerpc.tcc"
				> *DecodeOpStfdx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdx<
#line 38 "ppc.isa"
					CONFIG
#line 106819 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106829 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 106833 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106837 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 106841 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 106844 "powerpc.tcc"
				)
				{
#line 1136 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->FpStoreLSW(fs, ea);
					}
#line 106864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106872 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 106876 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106880 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 106884 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 106887 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 106891 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 106894 "powerpc.tcc"
				)
				{
#line 1152 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfiwx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 106906 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106914 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106921 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 106926 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106934 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106941 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 106948 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106956 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106963 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106973 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 106978 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106981 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 106988 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 106998 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107006 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107013 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107023 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107028 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107031 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107038 "powerpc.tcc"
				>::initialize_function()
				{
#line 350 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 107043 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107051 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107058 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 107063 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107071 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107078 "powerpc.tcc"
				>::initialize_operands()
				{
#line 429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 107087 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107095 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107099 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107103 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107107 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107110 "powerpc.tcc"
				)
				{
#line 130 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 107115 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107120 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107123 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107127 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 107131 "powerpc.tcc"
				>::memory_access_size()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 107136 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 107142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107145 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107150 "powerpc.tcc"
				> *DecodeOpStfiwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfiwx<
#line 38 "ppc.isa"
					CONFIG
#line 107156 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107166 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 107170 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107174 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 107178 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 107181 "powerpc.tcc"
				)
				{
#line 1162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
					}
#line 107200 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107208 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 107212 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107216 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 107220 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 107223 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 107227 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 107230 "powerpc.tcc"
				)
				{
#line 1177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfs f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 107242 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107250 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107257 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 107262 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107270 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107277 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 107284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107292 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107299 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107309 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107314 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107317 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107324 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107334 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107339 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107342 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107349 "powerpc.tcc"
				>::initialize_function()
				{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 107354 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107362 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107369 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 226 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 107374 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107382 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107389 "powerpc.tcc"
				>::initialize_operands()
				{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 107397 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107405 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107409 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107413 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107417 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107420 "powerpc.tcc"
				)
				{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 107425 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107430 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107433 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107437 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107441 "powerpc.tcc"
				>::memory_access_size()
				{
#line 203 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 107446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107454 "powerpc.tcc"
				>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 107458 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107462 "powerpc.tcc"
				>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107466 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107469 "powerpc.tcc"
				)
				{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 107479 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107487 "powerpc.tcc"
				>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 107491 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 107495 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 763 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 107500 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 107506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107509 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107514 "powerpc.tcc"
				> *DecodeOpStfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfs<
#line 38 "ppc.isa"
					CONFIG
#line 107520 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107530 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 107534 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107538 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 107542 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 107545 "powerpc.tcc"
				)
				{
#line 1187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 107568 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107576 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 107580 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107584 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 107588 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 107591 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 107595 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 107598 "powerpc.tcc"
				)
				{
#line 1206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsu f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 107610 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107615 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107618 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107625 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 107630 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107638 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107645 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 107652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107660 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107667 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107677 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107685 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107692 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107702 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107710 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107717 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 107727 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107735 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107742 "powerpc.tcc"
				>::initialize_function()
				{
#line 352 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 107747 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107755 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107762 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 227 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 107767 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107775 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107782 "powerpc.tcc"
				>::initialize_operands()
				{
#line 367 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 107790 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107798 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107802 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107806 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107810 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107813 "powerpc.tcc"
				)
				{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 107818 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107826 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 107830 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107834 "powerpc.tcc"
				>::memory_access_size()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 107839 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107847 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 107851 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107855 "powerpc.tcc"
				>::is_splitted()
				{
#line 682 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 107862 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107867 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107870 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 107874 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107878 "powerpc.tcc"
				>::split_into()
				{
#line 685 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfs_ctype=0;
						stfs_ctype = 52 << 26;
						stfs_ctype = stfs_ctype | (fs << 21);
						stfs_ctype = stfs_ctype | (ra << 16);
						stfs_ctype = stfs_ctype | (d & 0xffff);
						l.push_back( new OpStfs<CONFIG>(stfs_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 107899 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107904 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107907 "powerpc.tcc"
				>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 107911 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107915 "powerpc.tcc"
				>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 107919 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 107922 "powerpc.tcc"
				)
				{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 107932 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 107937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107940 "powerpc.tcc"
				>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 107944 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 107948 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 764 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 107953 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 107959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107962 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107967 "powerpc.tcc"
				> *DecodeOpStfsu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsu<
#line 38 "ppc.isa"
					CONFIG
#line 107973 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107983 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 107987 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 107991 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 107995 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 107998 "powerpc.tcc"
				)
				{
#line 1216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 108021 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108026 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108029 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 108033 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108037 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 108041 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 108044 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 108048 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 108051 "powerpc.tcc"
				)
				{
#line 1235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsux f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 108063 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108071 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108078 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 108083 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108091 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108098 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 108105 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108113 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108120 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108130 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108135 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108138 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108145 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108155 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108163 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108170 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108180 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108185 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108188 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108195 "powerpc.tcc"
				>::initialize_write_ra()
				{
#line 380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108205 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108213 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108220 "powerpc.tcc"
				>::initialize_function()
				{
#line 353 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 108225 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108233 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108240 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 228 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 108245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108253 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108260 "powerpc.tcc"
				>::initialize_operands()
				{
#line 436 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 108269 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108274 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108277 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108281 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108285 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108289 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108292 "powerpc.tcc"
				)
				{
#line 133 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 108297 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108305 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108309 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108313 "powerpc.tcc"
				>::memory_access_size()
				{
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 108318 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108326 "powerpc.tcc"
				>
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 108330 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108334 "powerpc.tcc"
				>::is_splitted()
				{
#line 703 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 108341 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108349 "powerpc.tcc"
				>
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 108353 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108357 "powerpc.tcc"
				>::split_into()
				{
#line 706 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfsx_ctype=0;
						stfsx_ctype = 31 << 26;
						stfsx_ctype = stfsx_ctype | (fs << 21);
						stfsx_ctype = stfsx_ctype | (ra << 16);
						stfsx_ctype = stfsx_ctype | (rb << 11);
						stfsx_ctype = stfsx_ctype | (663 << 1);
						l.push_back( new OpStfsx<CONFIG>(stfsx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 108380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108388 "powerpc.tcc"
				>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 108392 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108396 "powerpc.tcc"
				>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108400 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108403 "powerpc.tcc"
				)
				{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 108413 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108421 "powerpc.tcc"
				>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 108425 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 108429 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 765 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 108434 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 108440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108443 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108448 "powerpc.tcc"
				> *DecodeOpStfsux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsux<
#line 38 "ppc.isa"
					CONFIG
#line 108454 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108464 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 108468 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108472 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 108476 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 108479 "powerpc.tcc"
				)
				{
#line 1245 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
					}
#line 108499 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108504 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108507 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 108511 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108515 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 108519 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 108522 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 108526 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 108529 "powerpc.tcc"
				)
				{
#line 1261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 108541 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108546 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108549 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108556 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 108561 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108569 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108576 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 108583 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108588 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108591 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108598 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108608 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108616 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108623 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108633 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108641 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108648 "powerpc.tcc"
				>::initialize_read_fs()
				{
#line 312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108658 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108666 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108673 "powerpc.tcc"
				>::initialize_function()
				{
#line 354 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 108678 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108683 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108686 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108693 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 108698 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108706 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108713 "powerpc.tcc"
				>::initialize_operands()
				{
#line 429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 108722 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108730 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108734 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108738 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108742 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108745 "powerpc.tcc"
				)
				{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 108750 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108758 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 108762 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108766 "powerpc.tcc"
				>::memory_access_size()
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 108771 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108779 "powerpc.tcc"
				>
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 108783 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108787 "powerpc.tcc"
				>::get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 108791 "powerpc.tcc"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 108794 "powerpc.tcc"
				)
				{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						uint32_t fpscr = cpu->GetFPSCR();
						Flags flags;
						flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
						return SoftFloat(cpu->GetFPR(fs), flags).queryValue();
					}
#line 108804 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108812 "powerpc.tcc"
				>
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 108816 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 108820 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 766 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 108825 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 108831 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108834 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108839 "powerpc.tcc"
				> *DecodeOpStfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsx<
#line 38 "ppc.isa"
					CONFIG
#line 108845 "powerpc.tcc"
					>(code, addr);
				}

				/*********************************

				CACHE MANAGEMENT INSTRUCTIONS

				*********************************/
				template <
#line 38 "ppc.isa"
				class
#line 108857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108860 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 108864 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108868 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 108872 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 108875 "powerpc.tcc"
				)
				{
#line 1277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcba(ea);
					}
#line 108884 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108892 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 108896 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108900 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 108904 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 108907 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 108911 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 108914 "powerpc.tcc"
				)
				{
#line 1282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcba r" << ra << ", r" << rb;
					}
#line 108921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108929 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108936 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 108941 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108949 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108956 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 108963 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108971 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 108978 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 108988 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 108993 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108996 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109003 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109013 "powerpc.tcc"
				}
				/** Load Store (FnLoad | FnLoadFloat | FnLoadMultiple | FnLoadSerial | FnStore | FnStoreFloat | FnStoreMultiple | FnStoreSerial | FnCache | FnCacheSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 109019 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109022 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109029 "powerpc.tcc"
				>::initialize_function()
				{
#line 290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBA; }
#line 109034 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109042 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109049 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 109054 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109062 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109069 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109077 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109085 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109089 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 109093 "powerpc.tcc"
				>::memory_access_size()
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109098 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109107 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109112 "powerpc.tcc"
				> *DecodeOpDcba(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcba<
#line 38 "ppc.isa"
					CONFIG
#line 109118 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109128 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109132 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109136 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109140 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109143 "powerpc.tcc"
				)
				{
#line 1288 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbf(ea);
					}
#line 109152 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109157 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109160 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109164 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109168 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109172 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109175 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109179 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109182 "powerpc.tcc"
				)
				{
#line 1293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbf r" << ra << ", r" << rb;
					}
#line 109189 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109197 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109204 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109209 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109217 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109224 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 109231 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109239 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109246 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109256 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109264 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109271 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109281 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109289 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109296 "powerpc.tcc"
				>::initialize_function()
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBF; }
#line 109301 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109309 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109316 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(8); }
#line 109321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109329 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109336 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109344 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109352 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109356 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 109360 "powerpc.tcc"
				>::memory_access_size()
				{
#line 208 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109365 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109374 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109379 "powerpc.tcc"
				> *DecodeOpDcbf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbf<
#line 38 "ppc.isa"
					CONFIG
#line 109385 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109395 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109399 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109403 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109407 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109410 "powerpc.tcc"
				)
				{
#line 1298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						cpu->Dcbi(ea);
					}
#line 109418 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109423 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109426 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109430 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109434 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109438 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109441 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109445 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109448 "powerpc.tcc"
				)
				{
#line 1302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbi r" << ra << ", r" << rb;
					}
#line 109455 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109463 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109470 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109475 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109483 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109490 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109500 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109508 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109515 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109525 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109530 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109533 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109540 "powerpc.tcc"
				>::initialize_function()
				{
#line 292 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBI; }
#line 109545 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109550 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109553 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109560 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 232 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(6); }
#line 109565 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109573 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109580 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109588 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109596 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109600 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 109604 "powerpc.tcc"
				>::memory_access_size()
				{
#line 209 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109609 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109615 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109618 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109623 "powerpc.tcc"
				> *DecodeOpDcbi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbi<
#line 38 "ppc.isa"
					CONFIG
#line 109629 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109639 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109643 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109647 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109651 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109654 "powerpc.tcc"
				)
				{
#line 1307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbst(ea);
					}
#line 109663 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109668 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109671 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109675 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109679 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109683 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109686 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109690 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109693 "powerpc.tcc"
				)
				{
#line 1312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbst r" << ra << ", r" << rb;
					}
#line 109700 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109708 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109715 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109720 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109725 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109728 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109735 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 109742 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109750 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109757 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109767 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109775 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109782 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 109792 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109800 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109807 "powerpc.tcc"
				>::initialize_function()
				{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 109812 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109817 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109820 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109827 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 233 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 109832 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109840 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109847 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 109855 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109860 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109863 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 109867 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 109871 "powerpc.tcc"
				>::memory_access_size()
				{
#line 210 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 109876 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 109882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109885 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109890 "powerpc.tcc"
				> *DecodeOpDcbst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbst<
#line 38 "ppc.isa"
					CONFIG
#line 109896 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109906 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 109910 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109914 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 109918 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 109921 "powerpc.tcc"
				)
				{
#line 1317 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* this instruction has no architectural effect (software prefetching) */
					}
#line 109928 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109936 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 109940 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109944 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 109948 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 109951 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 109955 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 109958 "powerpc.tcc"
				)
				{
#line 1320 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbt r" << ra << ", r" << rb;
					}
#line 109965 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109973 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 109980 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 109985 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 109990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109993 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110000 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110010 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110018 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110025 "powerpc.tcc"
				>::initialize_function()
				{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCache; }
#line 110030 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110035 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110038 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110045 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110050 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110055 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110058 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110065 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110073 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110078 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110081 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110085 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 110089 "powerpc.tcc"
				>::memory_access_size()
				{
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110094 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110100 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110103 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110108 "powerpc.tcc"
				> *DecodeOpDcbt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbt<
#line 38 "ppc.isa"
					CONFIG
#line 110114 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110124 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110128 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110132 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110136 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110139 "powerpc.tcc"
				)
				{
#line 1325 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* this instruction has no architectural effect (software prefetching) */
					}
#line 110146 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110151 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110154 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110158 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110162 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110166 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110169 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110173 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110176 "powerpc.tcc"
				)
				{
#line 1328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbtst r" << ra << ", r" << rb;
					}
#line 110183 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110191 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110198 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110203 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110208 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110211 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110218 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110228 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110236 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110243 "powerpc.tcc"
				>::initialize_function()
				{
#line 295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCache; }
#line 110248 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110256 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110263 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110268 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110273 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110276 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110283 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110291 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110296 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110299 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110303 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 110307 "powerpc.tcc"
				>::memory_access_size()
				{
#line 212 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110312 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110318 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110321 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110326 "powerpc.tcc"
				> *DecodeOpDcbtst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbtst<
#line 38 "ppc.isa"
					CONFIG
#line 110332 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110339 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110342 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110346 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110350 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110354 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110357 "powerpc.tcc"
				)
				{
#line 1333 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbz(ea);
					}
#line 110367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110375 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110379 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110383 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110387 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110390 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110394 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110397 "powerpc.tcc"
				)
				{
#line 1339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbz r" << ra << ", r" << rb;
					}
#line 110404 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110409 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110412 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110419 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110424 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110429 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110432 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110439 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 110446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110454 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110461 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110471 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110476 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110479 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110486 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110496 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110501 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110504 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110511 "powerpc.tcc"
				>::initialize_function()
				{
#line 296 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 110516 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110524 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110531 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 236 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110536 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110544 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110551 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110559 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110567 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110571 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 110575 "powerpc.tcc"
				>::memory_access_size()
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110580 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110589 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110594 "powerpc.tcc"
				> *DecodeOpDcbz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbz<
#line 38 "ppc.isa"
					CONFIG
#line 110600 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110607 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110610 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110614 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110618 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110622 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110625 "powerpc.tcc"
				)
				{
#line 1344 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Icbi(ea);
					}
#line 110634 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110642 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110646 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110650 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110654 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110657 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110661 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110664 "powerpc.tcc"
				)
				{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "icbi r" << ra << ", r" << rb;
					}
#line 110671 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110679 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110686 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110691 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110696 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110699 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110706 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 110713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110721 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110728 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110746 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110753 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 110763 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110768 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110771 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110778 "powerpc.tcc"
				>::initialize_function()
				{
#line 299 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 110783 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110788 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110791 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110798 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110803 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110811 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110818 "powerpc.tcc"
				>::initialize_operands()
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 110826 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110831 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110834 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 110838 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 110842 "powerpc.tcc"
				>::memory_access_size()
				{
#line 214 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 110847 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 110853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110856 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110861 "powerpc.tcc"
				> *DecodeOpIcbi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpIcbi<
#line 38 "ppc.isa"
					CONFIG
#line 110867 "powerpc.tcc"
					>(code, addr);
				}

				/*********************************************

				LOOKASIDE BUFFER MANAGEMENT INSTRUCTIONS

				*********************************************/
				template <
#line 38 "ppc.isa"
				class
#line 110879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110882 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 110886 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110890 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 110894 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 110897 "powerpc.tcc"
				)
				{
#line 1360 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						cpu->Tlbia();
					}
#line 110904 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110912 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 110916 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110920 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 110924 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 110927 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 110931 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 110934 "powerpc.tcc"
				)
				{
#line 1363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "tlbia"; }
#line 110939 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110947 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110954 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 110959 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110964 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110967 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110974 "powerpc.tcc"
				>::initialize_function()
				{
#line 176 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 110979 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 110984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110987 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 110994 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 238 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 110999 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111007 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 111014 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 111026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111034 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 111038 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 111042 "powerpc.tcc"
				>::memory_access_size()
				{
#line 215 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 111047 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111056 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111061 "powerpc.tcc"
				> *DecodeOpTlbia(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbia<
#line 38 "ppc.isa"
					CONFIG
#line 111067 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111077 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111081 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111085 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111089 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111092 "powerpc.tcc"
				)
				{
#line 1366 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbie(ea);
					}
#line 111100 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111108 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111112 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111116 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111120 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111123 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111127 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111130 "powerpc.tcc"
				)
				{
#line 1370 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbie r" << rb;
					}
#line 111137 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111145 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111152 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111157 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111162 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111165 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111172 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 111179 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111184 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111187 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111194 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111212 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111219 "powerpc.tcc"
				>::initialize_function()
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 111224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111232 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111239 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 111244 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111252 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111259 "powerpc.tcc"
				>::initialize_operands()
				{
#line 865 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rb);
					}
#line 111266 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111274 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 111278 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 111282 "powerpc.tcc"
				>::memory_access_size()
				{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 111287 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111293 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111296 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111301 "powerpc.tcc"
				> *DecodeOpTlbie(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbie<
#line 38 "ppc.isa"
					CONFIG
#line 111307 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111314 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111317 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111321 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111325 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111329 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111332 "powerpc.tcc"
				)
				{
#line 1375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ /* nothing to do */ }
#line 111337 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111342 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111345 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111349 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111353 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111357 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111360 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111364 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111367 "powerpc.tcc"
				)
				{
#line 1376 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "tlbsync"; }
#line 111372 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111380 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111387 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111392 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111397 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111400 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111407 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 111414 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111419 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111422 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111429 "powerpc.tcc"
				>::initialize_function()
				{
#line 175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 111434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111442 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111449 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 111454 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111462 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111469 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 111481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111489 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 111493 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 111497 "powerpc.tcc"
				>::memory_access_size()
				{
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 111502 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111511 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111516 "powerpc.tcc"
				> *DecodeOpTlbsync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbsync<
#line 38 "ppc.isa"
					CONFIG
#line 111522 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111532 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111536 "powerpc.tcc"
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111540 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111544 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111547 "powerpc.tcc"
				)
				{
#line 1379 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbld(ea);
					}
#line 111555 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111563 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111567 "powerpc.tcc"
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111571 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111575 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111578 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111582 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111585 "powerpc.tcc"
				)
				{
#line 1383 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbld r" << rb;
					}
#line 111592 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111600 "powerpc.tcc"
				>

				void
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111607 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111620 "powerpc.tcc"
				>

				void
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111627 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 111634 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111642 "powerpc.tcc"
				>

				void
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 111649 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111659 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111665 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111668 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111673 "powerpc.tcc"
				> *DecodeOpTlbld(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbld<
#line 38 "ppc.isa"
					CONFIG
#line 111679 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 111686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111689 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111693 "powerpc.tcc"
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111697 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111701 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111704 "powerpc.tcc"
				)
				{
#line 1388 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbli(ea);
					}
#line 111712 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111720 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111724 "powerpc.tcc"
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111728 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111732 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111735 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111739 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111742 "powerpc.tcc"
				)
				{
#line 1392 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbli r" << rb;
					}
#line 111749 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111757 "powerpc.tcc"
				>

				void
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111764 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111769 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111777 "powerpc.tcc"
				>

				void
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111784 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 111791 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111796 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111799 "powerpc.tcc"
				>

				void
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 111806 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111816 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 111822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111825 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 111830 "powerpc.tcc"
				> *DecodeOpTlbli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbli<
#line 38 "ppc.isa"
					CONFIG
#line 111836 "powerpc.tcc"
					>(code, addr);
				}

				/********************************

				EXTERNAL CONTROL INSTRUCTIONS

				********************************/
				template <
#line 38 "ppc.isa"
				class
#line 111848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111851 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 111855 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111859 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 111863 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 111866 "powerpc.tcc"
				)
				{
#line 1403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						throw IllegalInstructionException<CONFIG>();
					}
#line 111873 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111881 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 111885 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111889 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 111893 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 111896 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 111900 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 111903 "powerpc.tcc"
				)
				{
#line 1406 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "eciwx r" << rd << ", r" << ra << ", r" << rb;
					}
#line 111910 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111918 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111925 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 111930 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111938 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111945 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 111955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111963 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111970 "powerpc.tcc"
				>::initialize_function()
				{
#line 297 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 111975 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 111980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 111983 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 111990 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 111995 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 112002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112005 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112012 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 112021 "powerpc.tcc"
				}
				//Load & Load byte reversed
				template <
#line 38 "ppc.isa"
				class
#line 112027 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112030 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112034 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112038 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 112042 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 112045 "powerpc.tcc"
				)
				{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 112050 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112055 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112058 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112062 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 112066 "powerpc.tcc"
				>::memory_access_size()
				{
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112071 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112080 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112085 "powerpc.tcc"
				> *DecodeOpEciwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEciwx<
#line 38 "ppc.isa"
					CONFIG
#line 112091 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 112098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112101 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112105 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112109 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112113 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112116 "powerpc.tcc"
				)
				{
#line 1411 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						throw IllegalInstructionException<CONFIG>();
					}
#line 112123 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112131 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112135 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112139 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112143 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112146 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112150 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112153 "powerpc.tcc"
				)
				{
#line 1414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "ecowx r" << rs << ", r" << ra << ", r" << rb;
					}
#line 112160 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112168 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112175 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 112180 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112185 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112188 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112195 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 112205 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112213 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112220 "powerpc.tcc"
				>::initialize_function()
				{
#line 298 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 112225 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112233 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112240 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112245 "powerpc.tcc"
				}
				//Store & Store byte reversed
				template <
#line 38 "ppc.isa"
				class
#line 112251 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112254 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112258 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112262 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 112266 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 112269 "powerpc.tcc"
				)
				{
#line 105 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 112274 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112282 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112286 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 112290 "powerpc.tcc"
				>::memory_access_size()
				{
#line 219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112295 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112301 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112304 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112309 "powerpc.tcc"
				> *DecodeOpEcowx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEcowx<
#line 38 "ppc.isa"
					CONFIG
#line 112315 "powerpc.tcc"
					>(code, addr);
				}

				/***************************************

				MEMORY SYNCHRONIZATION INSTRUCTIONS

				***************************************/
				template <
#line 38 "ppc.isa"
				class
#line 112327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112330 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112334 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112338 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112342 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112345 "powerpc.tcc"
				)
				{
#line 1425 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ /* order is always enforced in functional simulation */ }
#line 112350 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112358 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112362 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112366 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112370 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112373 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112377 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112380 "powerpc.tcc"
				)
				{
#line 1426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "eieio"; }
#line 112385 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112393 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112400 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 112405 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112413 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112420 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 112427 "powerpc.tcc"
				}
				/** System Register (FnSysRegister | FnSysRegisterSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 112433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112436 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112443 "powerpc.tcc"
				>::initialize_function()
				{
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 112448 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112456 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112463 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112476 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112483 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 112495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112503 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112507 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 112511 "powerpc.tcc"
				>::memory_access_size()
				{
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112516 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112525 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112530 "powerpc.tcc"
				> *DecodeOpEieio(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEieio<
#line 38 "ppc.isa"
					CONFIG
#line 112536 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 112543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112546 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112550 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112554 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112558 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112561 "powerpc.tcc"
				)
				{
#line 1429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* order is always enforced in functional simulation */
						/* but we still must flush subsequent instruction in the prefetch buffer, forcing refetch */
						cpu->FlushSubsequentInstructions();
					}
#line 112570 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112578 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112582 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112586 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112590 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112593 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112597 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112600 "powerpc.tcc"
				)
				{
#line 1434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "isync"; }
#line 112605 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112613 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112620 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::REFETCH_SERIALIZATION;
					}
#line 112627 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112635 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112642 "powerpc.tcc"
				>::initialize_function()
				{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 112647 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112655 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112662 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 244 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 112667 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112675 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112682 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 112694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112702 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112706 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 112710 "powerpc.tcc"
				>::memory_access_size()
				{
#line 221 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 112715 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 112721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112724 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 112729 "powerpc.tcc"
				> *DecodeOpIsync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpIsync<
#line 38 "ppc.isa"
					CONFIG
#line 112735 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 112742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112745 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 112749 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112753 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 112757 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 112760 "powerpc.tcc"
				)
				{
#line 1437 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Lwarx(rd, ea);
					}
#line 112769 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112777 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 112781 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112785 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 112789 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 112792 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 112796 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 112799 "powerpc.tcc"
				)
				{
#line 1442 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwarx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 112811 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112819 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112826 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 112831 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112839 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112846 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 112853 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112858 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112861 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112868 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 112878 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112883 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112886 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112893 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 112903 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112908 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112911 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112918 "powerpc.tcc"
				>::initialize_function()
				{
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 112923 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112931 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112938 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 245 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 112943 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 112950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112953 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112960 "powerpc.tcc"
				>::initialize_operands()
				{
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 112969 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 112974 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 112977 "powerpc.tcc"
				>
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 112981 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 112985 "powerpc.tcc"
				>::loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				typename CONFIG::STATE *
#line 112989 "powerpc.tcc"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 112992 "powerpc.tcc"
				)
				{
#line 78 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 112997 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113005 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113009 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 113013 "powerpc.tcc"
				>::memory_access_size()
				{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 113018 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113027 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113032 "powerpc.tcc"
				> *DecodeOpLwarx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwarx<
#line 38 "ppc.isa"
					CONFIG
#line 113038 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 113045 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113048 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113052 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113056 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113060 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113063 "powerpc.tcc"
				)
				{
#line 1452 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Stwcx(rs, ea);
					}
#line 113072 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113080 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113084 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113088 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113092 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113095 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113099 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113102 "powerpc.tcc"
				)
				{
#line 1458 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwcx. r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 113114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113122 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113129 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 113134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113142 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113149 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 113156 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113164 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113171 "powerpc.tcc"
				>::initialize_read_ra()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 113181 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113189 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113196 "powerpc.tcc"
				>::initialize_read_rb()
				{
#line 270 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 113206 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113214 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113221 "powerpc.tcc"
				>::initialize_read_rs()
				{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
						Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
						Operation<CONFIG>::num_insn_operands++;
					}
#line 113231 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113239 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113246 "powerpc.tcc"
				>::initialize_function()
				{
#line 356 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreSerial; }
#line 113251 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113259 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113266 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 246 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(16); }
#line 113271 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113279 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113286 "powerpc.tcc"
				>::initialize_operands()
				{
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 113295 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113303 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113307 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 113311 "powerpc.tcc"
				>::memory_access_size()
				{
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 113316 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113325 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113330 "powerpc.tcc"
				> *DecodeOpStwcx_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwcx_<
#line 38 "ppc.isa"
					CONFIG
#line 113336 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 113343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113346 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113350 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113354 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113358 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113361 "powerpc.tcc"
				)
				{
#line 1468 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ cpu->Synchronize(); }
#line 113366 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113374 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113378 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113382 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113386 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113389 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113393 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113396 "powerpc.tcc"
				)
				{
#line 1469 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "sync"; }
#line 113401 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113409 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113416 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 113421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113429 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113436 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 247 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = (typename CONFIG::serialization_t)(CONFIG::EXECUTION_SERIALIZATION | CONFIG::STORE_SERIALIZATION);
					}
#line 113443 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113451 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113458 "powerpc.tcc"
				>::initialize_function()
				{
#line 174 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 113463 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113471 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113478 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 247 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 113483 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113488 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113491 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113498 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 113510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113518 "powerpc.tcc"
				>
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 113522 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 113526 "powerpc.tcc"
				>::memory_access_size()
				{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 113531 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113540 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113545 "powerpc.tcc"
				> *DecodeOpSync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSync<
#line 38 "ppc.isa"
					CONFIG
#line 113551 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/*************************************

				SYSTEM LINKAGE INSTRUCTIONS

				*************************************/
				template <
#line 38 "ppc.isa"
				class
#line 113596 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113599 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113603 "powerpc.tcc"
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113607 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113611 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113614 "powerpc.tcc"
				)
				{
#line 42 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						cpu->FlushSubsequentInstructions();
						throw SystemCallException<CONFIG>();
					}
#line 113622 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113627 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113630 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113634 "powerpc.tcc"
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113638 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113642 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113645 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113649 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113652 "powerpc.tcc"
				)
				{
#line 46 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "sc";
					}
#line 113659 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113667 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113674 "powerpc.tcc"
				>::initialize_function()
				{
#line 173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 113679 "powerpc.tcc"
				}
				/** Misc **/
				template <
#line 38 "ppc.isa"
				class
#line 113685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113688 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113695 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 250 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 113700 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113708 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 113715 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 113727 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113733 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113736 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113741 "powerpc.tcc"
				> *DecodeOpSc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSc<
#line 38 "ppc.isa"
					CONFIG
#line 113747 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 113754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113757 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113761 "powerpc.tcc"
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113765 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113769 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113772 "powerpc.tcc"
				)
				{
#line 51 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						cpu->FlushSubsequentInstructions();
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetNIA(cpu->GetSRR0() & 0xfffffffcUL);
						cpu->SetMSR((msr & 0xffff008cUL) | (cpu->GetSRR1() & 0x0000ff73UL));
					}
#line 113784 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113792 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113796 "powerpc.tcc"
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113800 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113804 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113807 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113811 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113814 "powerpc.tcc"
				)
				{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "rfi" << endl;
					}
#line 113821 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113829 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113836 "powerpc.tcc"
				>::initialize_function()
				{
#line 172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 113841 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113849 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113856 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 113861 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113869 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 113876 "powerpc.tcc"
				>::initialize_operands()
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 113888 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 113894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113897 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 113902 "powerpc.tcc"
				> *DecodeOpRfi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRfi<
#line 38 "ppc.isa"
					CONFIG
#line 113908 "powerpc.tcc"
					>(code, addr);
				}

				/***************************

				TRAP INSTRUCTIONS

				***************************/
				template <
#line 38 "ppc.isa"
				class
#line 113920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113923 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 113927 "powerpc.tcc"
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 113931 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 113935 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 113938 "powerpc.tcc"
				)
				{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						int32_t a, b;
						int trap;
						a = cpu->GetGPR(ra);
						b = cpu->GetGPR(rb);
						trap = 0;
						if(a < b && (to & 16)) trap = 1;
						if(a > b && (to & 8)) trap = 1;
						if(a == b && (to & 4)) trap = 1;
						if((uint32_t) a < (uint32_t) b && (to & 2)) trap = 1;
						if((uint32_t) a > (uint32_t) b && (to & 1)) trap = 1;
						if(trap) throw TrapException<CONFIG>();
					}
#line 113955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 113963 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 113967 "powerpc.tcc"
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 113971 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 113975 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 113978 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 113982 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 113985 "powerpc.tcc"
				)
				{
#line 83 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "tw " << to << ", r" << ra << ", r" << rb;
					}
#line 113992 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 113997 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114000 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114007 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 114012 "powerpc.tcc"
				}
				/*
				tw.initialize_function =      { Operation<CONFIG>::function = FnIntBasicSerial; }
				twi.initialize_function =     { Operation<CONFIG>::function = FnIntBasicSerial; }
				*/
				template <
#line 38 "ppc.isa"
				class
#line 114021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114024 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114031 "powerpc.tcc"
				>::initialize_function()
				{
#line 248 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 114036 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114041 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114044 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114051 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 114056 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114064 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 114071 "powerpc.tcc"
				>::initialize_operands()
				{
#line 378 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 114079 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114088 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114093 "powerpc.tcc"
				> *DecodeOpTw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTw<
#line 38 "ppc.isa"
					CONFIG
#line 114099 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114106 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114109 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114113 "powerpc.tcc"
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114117 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114121 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114124 "powerpc.tcc"
				)
				{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						int32_t a;
						int trap;
						a = (int32_t) cpu->GetGPR(ra);
						trap = 0;
						if(a < simm && (to & 16)) trap = 1;
						if(a > simm && (to & 8)) trap = 1;
						if(a == simm && (to & 4)) trap = 1;
						if((uint32_t) a < (uint32_t) simm && (to & 2)) trap = 1;
						if((uint32_t) a > (uint32_t) simm && (to & 1)) trap = 1;
						if(trap) throw TrapException<CONFIG>();
					}
#line 114140 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114148 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114152 "powerpc.tcc"
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114156 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114160 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114163 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114167 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114170 "powerpc.tcc"
				)
				{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "twi " << to << ", r" << ra << ", " << simm;
					}
#line 114177 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114182 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114185 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114192 "powerpc.tcc"
				>::initialize_unit()
				{
#line 186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }
#line 114197 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114202 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114205 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114212 "powerpc.tcc"
				>::initialize_function()
				{
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 114217 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114222 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114225 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114232 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 114237 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114245 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 114252 "powerpc.tcc"
				>::initialize_operands()
				{
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
					}
#line 114259 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114268 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114273 "powerpc.tcc"
				> *DecodeOpTwi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTwi<
#line 38 "ppc.isa"
					CONFIG
#line 114279 "powerpc.tcc"
					>(code, addr);
				}

				/******************************************

				PROCESSOR CONTROL INSTRUCTIONS

				******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 114291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114294 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114298 "powerpc.tcc"
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114302 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114306 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114309 "powerpc.tcc"
				)
				{
#line 110 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						// Read XER
						uint32_t xer = cpu->GetXER();

						// Read CR
						uint32_t cr = cpu->GetCR();

						// Generate CR[crfD]: CR[crfD]=XER[0-3]
						cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | ((xer & 0xf0000000UL) >> (4 * crfD));

						// Reset XER[0-3]
						xer = xer & 0x0fffffffUL;

						// Update CR
						cpu->SetCR(cr);

						// Update XER
						cpu->SetXER(xer);
					}
#line 114332 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114340 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114344 "powerpc.tcc"
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114348 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114352 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114355 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114359 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114362 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mcrxr cr" << crfD;
					}
#line 114369 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114377 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114384 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114389 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114397 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114404 "powerpc.tcc"
				>::initialize_function()
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 114409 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114417 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114424 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 114429 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114434 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114437 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 114444 "powerpc.tcc"
				>::initialize_operands()
				{
#line 789 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						INPUT(XER_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 114453 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114462 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114467 "powerpc.tcc"
				> *DecodeOpMcrxr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrxr<
#line 38 "ppc.isa"
					CONFIG
#line 114473 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114483 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114487 "powerpc.tcc"
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114491 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114495 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114498 "powerpc.tcc"
				)
				{
#line 134 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						// Move CR to destination GPR
						cpu->SetGPR(rd, cpu->GetCR());
					}
#line 114506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114514 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114518 "powerpc.tcc"
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114522 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114526 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114529 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114533 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114536 "powerpc.tcc"
				)
				{
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfcr r" << rd;
					}
#line 114543 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114548 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114551 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114558 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114563 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114571 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114578 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 114585 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114593 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114600 "powerpc.tcc"
				>::initialize_function()
				{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 114605 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114613 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114620 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 114625 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114630 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114633 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 114640 "powerpc.tcc"
				>::initialize_operands()
				{
#line 620 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);
						OUTPUT(GPR_T, rd);
					}
#line 114655 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114664 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114669 "powerpc.tcc"
				> *DecodeOpMfcr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfcr<
#line 38 "ppc.isa"
					CONFIG
#line 114675 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114685 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114689 "powerpc.tcc"
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114693 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114697 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114700 "powerpc.tcc"
				)
				{
#line 143 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						// Move MSR to destination GPR
						cpu->SetGPR(rd, msr);
					}
#line 114711 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114719 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114723 "powerpc.tcc"
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114727 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114731 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114734 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114738 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114741 "powerpc.tcc"
				)
				{
#line 150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfmsr r" << rd;
					}
#line 114748 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114753 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114756 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114763 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114768 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114776 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114783 "powerpc.tcc"
				>::initialize_function()
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 114788 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114796 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114803 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 114808 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114813 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114816 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 114823 "powerpc.tcc"
				>::initialize_operands()
				{
#line 615 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
					}
#line 114830 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 114836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114839 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114844 "powerpc.tcc"
				> *DecodeOpMfmsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfmsr<
#line 38 "ppc.isa"
					CONFIG
#line 114850 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 114857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114860 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 114864 "powerpc.tcc"
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 114868 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 114872 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 114875 "powerpc.tcc"
				)
				{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						uint32_t result = cpu->GetSPR(n);
						cpu->SetGPR(rd, result);
					}
#line 114884 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114892 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 114896 "powerpc.tcc"
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 114900 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 114904 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 114907 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 114911 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 114914 "powerpc.tcc"
				)
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: os << "mfxer r" << rd;
							case 8: os << "mflr r" << rd; return;
							case 9: os << "mfctr r" << rd; return;
							case 22: os << "mfdec r" << rd; return;
							case 528: os << "mfibatu r" << rd << ", 0"; return;
							case 529: os << "mfibatl r" << rd << ", 0"; return;
							case 530: os << "mfibatu r" << rd << ", 1"; return;
							case 531: os << "mfibatl r" << rd << ", 1"; return;
							case 532: os << "mfibatu r" << rd << ", 2"; return;
							case 533: os << "mfibatl r" << rd << ", 2"; return;
							case 534: os << "mfibatu r" << rd << ", 3"; return;
							case 535: os << "mfibatl r" << rd << ", 3"; return;
							case 536: os << "mfdbatu r" << rd << ", 0"; return;
							case 537: os << "mfdbatl r" << rd << ", 0"; return;
							case 538: os << "mfdbatu r" << rd << ", 1"; return;
							case 539: os << "mfdbatl r" << rd << ", 1"; return;
							case 540: os << "mfdbatu r" << rd << ", 2"; return;
							case 541: os << "mfdbatl r" << rd << ", 2"; return;
							case 542: os << "mfdbatu r" << rd << ", 3"; return;
							case 543: os << "mfdbatl r" << rd << ", 3"; return;
							case 560: os << "mfibatu r" << rd << ", 4"; return;
							case 561: os << "mfibatl r" << rd << ", 4"; return;
							case 562: os << "mfibatu r" << rd << ", 5"; return;
							case 563: os << "mfibatl r" << rd << ", 5"; return;
							case 564: os << "mfibatu r" << rd << ", 6"; return;
							case 565: os << "mfibatl r" << rd << ", 6"; return;
							case 566: os << "mfibatu r" << rd << ", 7"; return;
							case 567: os << "mfibatl r" << rd << ", 7"; return;
							case 568: os << "mfdbatu r" << rd << ", 4"; return;
							case 569: os << "mfdbatl r" << rd << ", 4"; return;
							case 570: os << "mfdbatu r" << rd << ", 5"; return;
							case 571: os << "mfdbatl r" << rd << ", 5"; return;
							case 572: os << "mfdbatu r" << rd << ", 6"; return;
							case 573: os << "mfdbatl r" << rd << ", 6"; return;
							case 574: os << "mfdbatu r" << rd << ", 7"; return;
							case 575: os << "mfdbatl r" << rd << ", 7"; return;
						}

						os << "mfspr r" << rd << ", " << n;
					}
#line 114962 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114970 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 114977 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 114982 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 114987 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114990 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 114997 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 528: // IBAT0U
							case 529: // IBAT0L
							case 530: // IBAT1U
							case 531: // IBAT1L
							case 532: // IBAT2U
							case 533: // IBAT2L
							case 534: // IBAT3U
							case 535: // IBAT3L
							case 560: // IBAT4U
							case 561: // IBAT4L
							case 562: // IBAT5U
							case 563: // IBAT5L
							case 564: // IBAT6U
							case 565: // IBAT6L
							case 566: // IBAT7U
							case 567: // IBAT7L
							Operation<CONFIG>::serialization = CONFIG::NO_SERIALIZATION;
							return;
							case 256: // VRSAVE
							Operation<CONFIG>::serialization = CONFIG::NO_SERIALIZATION;
							return;
						}

						// mtspr (DBAT, MSS, Time Base, other)
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 115031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115039 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115046 "powerpc.tcc"
				>::initialize_function()
				{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 115051 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115059 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115066 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 115071 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115076 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115079 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 115086 "powerpc.tcc"
				>::initialize_operands()
				{
#line 633 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(d)
						{
						case 1:
							INPUT(XER_T,0);
							INPUT(XER_T,1);
							INPUT(XER_T,2);
							INPUT(XER_T,3);
							break;
						case 8:
							INPUT(LR_T,0);
							break;
						case 9:
							INPUT(CTR_T,0);
							/*
							INPUT(CR_T,1);
							INPUT(CR_T,2);
							INPUT(CR_T,3);
							INPUT(CR_T,4);
							INPUT(CR_T,5);
							INPUT(CR_T,6);
							INPUT(CR_T,7);
							*/
							break;
						default:
							break;
						}
						OUTPUT(GPR_T, rd);
					}
#line 115120 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115129 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115134 "powerpc.tcc"
				> *DecodeOpMfspr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfspr<
#line 38 "ppc.isa"
					CONFIG
#line 115140 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115150 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115154 "powerpc.tcc"
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115158 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115162 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115165 "powerpc.tcc"
				)
				{
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						uint32_t result = cpu->GetGPR(rs);
						cpu->SetSPR(n, result);
					}
#line 115174 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115179 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115182 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115186 "powerpc.tcc"
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115190 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115194 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115197 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115201 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115204 "powerpc.tcc"
				)
				{
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: os << "mtxer r" << rs; return;
							case 8: os << "mtlr r" << rs; return;
							case 9: os << "mtctr r" << rs; return;
							case 22: os << "mtdec r" << rs; return;
							case 528: os << "mtibatu 0, r" << rs; return;
							case 529: os << "mtibatl 0, r" << rs; return;
							case 530: os << "mtibatu 1, r" << rs; return;
							case 531: os << "mtibatl 1, r" << rs; return;
							case 532: os << "mtibatu 2, r" << rs; return;
							case 533: os << "mtibatl 2, r" << rs; return;
							case 534: os << "mtibatu 3, r" << rs; return;
							case 535: os << "mtibatl 3, r" << rs; return;
							case 536: os << "mtdbatu 0, r" << rs; return;
							case 537: os << "mtdbatl 0, r" << rs; return;
							case 538: os << "mtdbatu 1, r" << rs; return;
							case 539: os << "mtdbatl 1, r" << rs; return;
							case 540: os << "mtdbatu 2, r" << rs; return;
							case 541: os << "mtdbatl 2, r" << rs; return;
							case 542: os << "mtdbatu 3, r" << rs; return;
							case 543: os << "mtdbatl 3, r" << rs; return;
							case 560: os << "mtibatu 4, r" << rs; return;
							case 561: os << "mtibatl 4, r" << rs; return;
							case 562: os << "mtibatu 5, r" << rs; return;
							case 563: os << "mtibatl 5, r" << rs; return;
							case 564: os << "mtibatu 6, r" << rs; return;
							case 565: os << "mtibatl 6, r" << rs; return;
							case 566: os << "mtibatu 7, r" << rs; return;
							case 567: os << "mtibatl 7, r" << rs; return;
							case 568: os << "mtdbatu 4, r" << rs; return;
							case 569: os << "mtdbatl 4, r" << rs; return;
							case 570: os << "mtdbatu 5, r" << rs; return;
							case 571: os << "mtdbatl 5, r" << rs; return;
							case 572: os << "mtdbatu 6, r" << rs; return;
							case 573: os << "mtdbatl 6, r" << rs; return;
							case 574: os << "mtdbatu 7, r" << rs; return;
							case 575: os << "mtdbatl 7, r" << rs; return;
						}

						os << "mtspr " << n << ", r" << rs;
					}
#line 115252 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115260 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115267 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115272 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115280 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115287 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: // XER
							Operation<CONFIG>::serialization = (typename CONFIG::serialization_t)(CONFIG::EXECUTION_SERIALIZATION | CONFIG::REFETCH_SERIALIZATION);
							return;
						}
						// mtspr (DBATs, IBATs, MSS, other)
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 115302 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115310 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115317 "powerpc.tcc"
				>::initialize_function()
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnSysRegisterSerial;
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						//	registers_written = ((d == 8) ? RegLR : RegNone) | ((d == 9) ? RegCTR : RegNone);
					}
#line 115326 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115334 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115341 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 115346 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115354 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 115361 "powerpc.tcc"
				>::initialize_operands()
				{
#line 702 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(d)
						{
						case 1:
							OUTPUT(XER_T,0);
							OUTPUT(XER_T,1);
							OUTPUT(XER_T,2);
							OUTPUT(XER_T,3);
							break;
						case 8:
							OUTPUT(LR_T,0);
							break;
						case 9:
							OUTPUT(CTR_T,0);
							/*
							OUTPUT(CR_T,1);
							OUTPUT(CR_T,2);
							OUTPUT(CR_T,3);
							OUTPUT(CR_T,4);
							OUTPUT(CR_T,5);
							OUTPUT(CR_T,6);
							OUTPUT(CR_T,7);
							*/
							break;
						default:
							break;
						}
					}
#line 115395 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115404 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115409 "powerpc.tcc"
				> *DecodeOpMtspr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtspr<
#line 38 "ppc.isa"
					CONFIG
#line 115415 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115422 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115425 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115429 "powerpc.tcc"
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115433 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115437 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115440 "powerpc.tcc"
				)
				{
#line 257 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t d;
						d = ((tbr & 0x1F) << 5) + ((tbr >> 5) & 0x1F);
						switch(d)
						{
							case 268: cpu->SetGPR(rd, cpu->GetTBL()); break;
							case 269: cpu->SetGPR(rd, cpu->GetTBU()); break;
						default:
							/* illegal instruction */
							throw IllegalInstructionException<CONFIG>();
						}
					}
#line 115456 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115464 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115468 "powerpc.tcc"
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115472 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115476 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115479 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115483 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115486 "powerpc.tcc"
				)
				{
#line 269 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mftb r" << rd << ", " << tbr;
					}
#line 115493 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115501 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115508 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115513 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115521 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115528 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 115535 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115543 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115550 "powerpc.tcc"
				>::initialize_function()
				{
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 115555 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115563 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115570 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 258 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 115575 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115583 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 115590 "powerpc.tcc"
				>::initialize_operands()
				{
#line 615 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
					}
#line 115597 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115606 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115611 "powerpc.tcc"
				> *DecodeOpMftb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMftb<
#line 38 "ppc.isa"
					CONFIG
#line 115617 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115627 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115631 "powerpc.tcc"
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115635 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115639 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115642 "powerpc.tcc"
				)
				{
#line 274 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						// Read the input operands
						uint32_t s = cpu->GetGPR(rs);
						uint32_t cr = cpu->GetCR();

						// Generate a bit mask of bits to move from source GPR to CR
						uint32_t m = 128;
						uint32_t mask = 0;
						unsigned int i = 8; // Hope compiler will unroll the loop !
						do
						{
							mask = (crm & m) ? (mask << 4) | 0xf : mask << 4;
						} while(m >>= 1, --i);

						// Apply the bit mask
						cr = (cr & ~mask) | (s & mask);

						// Update CR
						cpu->SetCR(cr);
					}
#line 115666 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115671 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115674 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115678 "powerpc.tcc"
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115682 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115686 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115689 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115693 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115696 "powerpc.tcc"
				)
				{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						if(crm == 0xff)
						os << "mtcr r" << rs;
						else
						os << "mtcrf " << crm << ", r" << rs;
					}
#line 115706 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115714 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115721 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115726 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115734 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115741 "powerpc.tcc"
				>::initialize_function()
				{
#line 191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 115746 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115751 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115754 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115761 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 115766 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115771 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115774 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 115781 "powerpc.tcc"
				>::initialize_operands()
				{
#line 680 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 115805 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115811 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115814 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115819 "powerpc.tcc"
				> *DecodeOpMtcrf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtcrf<
#line 38 "ppc.isa"
					CONFIG
#line 115825 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 115832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115835 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 115839 "powerpc.tcc"
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115843 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 115847 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 115850 "powerpc.tcc"
				)
				{
#line 302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetMSR(cpu->GetGPR(rs));
					}
#line 115860 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115868 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 115872 "powerpc.tcc"
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115876 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 115880 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 115883 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 115887 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 115890 "powerpc.tcc"
				)
				{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtmsr r" << rs;
					}
#line 115897 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115905 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115912 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 115917 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115925 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115932 "powerpc.tcc"
				>::initialize_function()
				{
#line 164 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 115937 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115945 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115952 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 115957 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 115962 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115965 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 115972 "powerpc.tcc"
				>::initialize_operands()
				{
#line 675 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
					}
#line 115979 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 115985 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 115988 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 115993 "powerpc.tcc"
				> *DecodeOpMtmsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtmsr<
#line 38 "ppc.isa"
					CONFIG
#line 115999 "powerpc.tcc"
					>(code, addr);
				}

				/**********************************************

				SEGMENT REGISTER MANIPULATION INSTRUCTIONS

				**********************************************/
				template <
#line 38 "ppc.isa"
				class
#line 116011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116014 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116018 "powerpc.tcc"
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116022 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116026 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116029 "powerpc.tcc"
				)
				{
#line 318 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetGPR(rd, cpu->GetSR(sr));
					}
#line 116039 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116047 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116051 "powerpc.tcc"
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116055 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116059 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116062 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116066 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116069 "powerpc.tcc"
				)
				{
#line 324 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfsr r" << rd << ", " << sr;
					}
#line 116076 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116084 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116091 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116104 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116111 "powerpc.tcc"
				>::initialize_function()
				{
#line 161 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 116116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116124 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116131 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 262 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 116136 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116144 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 116151 "powerpc.tcc"
				>::initialize_operands()
				{
#line 740 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(SR_T, sr);
					}
#line 116159 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116168 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116173 "powerpc.tcc"
				> *DecodeOpMfsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfsr<
#line 38 "ppc.isa"
					CONFIG
#line 116179 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116189 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116193 "powerpc.tcc"
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116197 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116201 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116204 "powerpc.tcc"
				)
				{
#line 329 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetGPR(rd, cpu->GetSR((cpu->GetGPR(rb) >> 28) & 0xf));
					}
#line 116214 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116222 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116226 "powerpc.tcc"
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116230 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116234 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116237 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116241 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116244 "powerpc.tcc"
				)
				{
#line 335 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfsrin r" << rd << ", r" << rb;
					}
#line 116251 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116259 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116266 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116271 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116279 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116286 "powerpc.tcc"
				>::initialize_function()
				{
#line 162 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 116291 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116296 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116299 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116306 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 116311 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116319 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116326 "powerpc.tcc"
				>::initialize_operands()
				{
#line 587 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, rb);
					}
#line 116334 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116343 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116348 "powerpc.tcc"
				> *DecodeOpMfsrin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfsrin<
#line 38 "ppc.isa"
					CONFIG
#line 116354 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116361 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116364 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116368 "powerpc.tcc"
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116372 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116376 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116379 "powerpc.tcc"
				)
				{
#line 340 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetSR(sr, cpu->GetGPR(rs));
					}
#line 116389 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116397 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116401 "powerpc.tcc"
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116405 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116409 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116412 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116416 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116419 "powerpc.tcc"
				)
				{
#line 346 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtsr " << sr << ", r" << rs;
					}
#line 116426 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116434 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116441 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116454 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116461 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 116468 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116476 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116483 "powerpc.tcc"
				>::initialize_function()
				{
#line 170 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 116488 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116496 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116503 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 116508 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116513 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116516 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 116523 "powerpc.tcc"
				>::initialize_operands()
				{
#line 734 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(SR_T, sr);
					}
#line 116531 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116540 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116545 "powerpc.tcc"
				> *DecodeOpMtsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtsr<
#line 38 "ppc.isa"
					CONFIG
#line 116551 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116561 "powerpc.tcc"
				>
#line 60 "ppc.isa"
				void
#line 116565 "powerpc.tcc"
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116569 "powerpc.tcc"
				>::execute(
#line 60 "ppc.isa"
				typename CONFIG::STATE *
#line 116573 "powerpc.tcc"
#line 60 "ppc.isa"
				cpu
#line 116576 "powerpc.tcc"
				)
				{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t msr = cpu->GetMSR();
						if(msr & CONFIG::MSR_PR_MASK) throw PrivilegeViolationException<CONFIG>();

						cpu->SetSR((cpu->GetGPR(rb) >> 28) & 0xf, cpu->GetGPR(rs));
					}
#line 116586 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116594 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116598 "powerpc.tcc"
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116602 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116606 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116609 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116613 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116616 "powerpc.tcc"
				)
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtsrin r" << rs << ", r" << rb;
					}
#line 116623 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116631 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116638 "powerpc.tcc"
				>::initialize_unit()
				{
#line 188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }
#line 116643 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116648 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116651 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116658 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 116665 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116673 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116680 "powerpc.tcc"
				>::initialize_function()
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 116685 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116693 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116700 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 116705 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116713 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 116720 "powerpc.tcc"
				>::initialize_operands()
				{
#line 746 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
					}
#line 116728 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116737 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116742 "powerpc.tcc"
				> *DecodeOpMtsrin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtsrin<
#line 38 "ppc.isa"
					CONFIG
#line 116748 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116758 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116762 "powerpc.tcc"
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 116766 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116770 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116773 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116777 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116780 "powerpc.tcc"
				)
				{
#line 3 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dss " << strm << ", 0";
					}
#line 116787 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116795 "powerpc.tcc"
				>

				void
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 116802 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 116807 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116813 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116816 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116821 "powerpc.tcc"
				> *DecodeOpDss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDss<
#line 38 "ppc.isa"
					CONFIG
#line 116827 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116837 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116841 "powerpc.tcc"
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 116845 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116849 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116852 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116856 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116859 "powerpc.tcc"
				)
				{
#line 9 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dssall " << strm;
					}
#line 116866 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116871 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116874 "powerpc.tcc"
				>

				void
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 116881 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 116886 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116895 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116900 "powerpc.tcc"
				> *DecodeOpDssall(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDssall<
#line 38 "ppc.isa"
					CONFIG
#line 116906 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116916 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116920 "powerpc.tcc"
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 116924 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 116928 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 116931 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 116935 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 116938 "powerpc.tcc"
				)
				{
#line 15 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dst r" << ra << ", r" << rb << ", " << strm;
					}
#line 116945 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 116950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116953 "powerpc.tcc"
				>

				void
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 116960 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 116965 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 116971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116974 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 116979 "powerpc.tcc"
				> *DecodeOpDst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDst<
#line 38 "ppc.isa"
					CONFIG
#line 116985 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 116992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 116995 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 116999 "powerpc.tcc"
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 117003 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117007 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117010 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117014 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117017 "powerpc.tcc"
				)
				{
#line 21 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstst r" << ra << ", r" << rb << ", " << strm;
					}
#line 117024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117032 "powerpc.tcc"
				>

				void
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 117039 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117044 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117053 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117058 "powerpc.tcc"
				> *DecodeOpDstst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDstst<
#line 38 "ppc.isa"
					CONFIG
#line 117064 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117071 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117074 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117078 "powerpc.tcc"
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 117082 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117086 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117089 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117093 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117096 "powerpc.tcc"
				)
				{
#line 27 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstt r" << ra << ", r" << rb << ", " << strm;
					}
#line 117103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117111 "powerpc.tcc"
				>

				void
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 117118 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117123 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117129 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117132 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117137 "powerpc.tcc"
				> *DecodeOpDststt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDststt<
#line 38 "ppc.isa"
					CONFIG
#line 117143 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117153 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117157 "powerpc.tcc"
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 117161 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117165 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117168 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117172 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117175 "powerpc.tcc"
				)
				{
#line 33 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstt r" << ra << ", r" << rb << ", " << strm;
					}
#line 117182 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117190 "powerpc.tcc"
				>

				void
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 117197 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117202 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117208 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117211 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117216 "powerpc.tcc"
				> *DecodeOpDstt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDstt<
#line 38 "ppc.isa"
					CONFIG
#line 117222 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117232 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117236 "powerpc.tcc"
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 117240 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117244 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117247 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117251 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117254 "powerpc.tcc"
				)
				{
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvebx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117261 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117269 "powerpc.tcc"
				>

				void
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 117276 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117281 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117290 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117295 "powerpc.tcc"
				> *DecodeOpLvebx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvebx<
#line 38 "ppc.isa"
					CONFIG
#line 117301 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117311 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117315 "powerpc.tcc"
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 117319 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117323 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117326 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117330 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117333 "powerpc.tcc"
				)
				{
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvehx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117340 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117348 "powerpc.tcc"
				>

				void
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 117355 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117360 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117369 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117374 "powerpc.tcc"
				> *DecodeOpLvehx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvehx<
#line 38 "ppc.isa"
					CONFIG
#line 117380 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117390 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117394 "powerpc.tcc"
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 117398 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117402 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117405 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117409 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117412 "powerpc.tcc"
				)
				{
#line 51 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvewx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117419 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117424 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117427 "powerpc.tcc"
				>

				void
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 117434 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117439 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117448 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117453 "powerpc.tcc"
				> *DecodeOpLvewx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvewx<
#line 38 "ppc.isa"
					CONFIG
#line 117459 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117469 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117473 "powerpc.tcc"
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 117477 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117481 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117484 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117488 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117491 "powerpc.tcc"
				)
				{
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvsl v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117498 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117503 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117506 "powerpc.tcc"
				>

				void
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 117513 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117518 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117527 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117532 "powerpc.tcc"
				> *DecodeOpLvsl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvsl<
#line 38 "ppc.isa"
					CONFIG
#line 117538 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117548 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117552 "powerpc.tcc"
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 117556 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117560 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117563 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117567 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117570 "powerpc.tcc"
				)
				{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvsr v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117577 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117582 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117585 "powerpc.tcc"
				>

				void
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 117592 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117597 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117606 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117611 "powerpc.tcc"
				> *DecodeOpLvsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvsr<
#line 38 "ppc.isa"
					CONFIG
#line 117617 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117627 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117631 "powerpc.tcc"
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 117635 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117639 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117642 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117646 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117649 "powerpc.tcc"
				)
				{
#line 69 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117664 "powerpc.tcc"
				>

				void
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 117671 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117676 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117685 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117690 "powerpc.tcc"
				> *DecodeOpLvx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvx<
#line 38 "ppc.isa"
					CONFIG
#line 117696 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117706 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117710 "powerpc.tcc"
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 117714 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117718 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117721 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117725 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117728 "powerpc.tcc"
				)
				{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvxl v" << vd << ", r" << ra << ", r" << rb;
					}
#line 117735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117743 "powerpc.tcc"
				>

				void
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 117750 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 117755 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117761 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117764 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117769 "powerpc.tcc"
				> *DecodeOpLvxl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvxl<
#line 38 "ppc.isa"
					CONFIG
#line 117775 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117785 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117789 "powerpc.tcc"
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117793 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117797 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117800 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117804 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117807 "powerpc.tcc"
				)
				{
#line 81 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "mfvscr v" << vd;
					}
#line 117814 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117822 "powerpc.tcc"
				>

				void
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117829 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 117834 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117842 "powerpc.tcc"
				>

				void
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117849 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 117856 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117865 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117870 "powerpc.tcc"
				> *DecodeOpMfvscr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfvscr<
#line 38 "ppc.isa"
					CONFIG
#line 117876 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117883 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117886 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117890 "powerpc.tcc"
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117894 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117898 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 117901 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 117905 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 117908 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "mtvscr v" << vb;
					}
#line 117915 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117923 "powerpc.tcc"
				>

				void
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117930 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 117935 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 117940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117943 "powerpc.tcc"
				>

				void
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 117950 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 251 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
					}
#line 117957 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 117963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117966 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 117971 "powerpc.tcc"
				> *DecodeOpMtvscr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtvscr<
#line 38 "ppc.isa"
					CONFIG
#line 117977 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 117984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 117987 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 117991 "powerpc.tcc"
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 117995 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 117999 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118002 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118006 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118009 "powerpc.tcc"
				)
				{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvebx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118016 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118024 "powerpc.tcc"
				>

				void
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 118031 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118036 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118041 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118044 "powerpc.tcc"
				>

				void
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 118051 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118058 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118067 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118072 "powerpc.tcc"
				> *DecodeOpStvebx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvebx<
#line 38 "ppc.isa"
					CONFIG
#line 118078 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118088 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118092 "powerpc.tcc"
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 118096 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118100 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118103 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118107 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118110 "powerpc.tcc"
				)
				{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvehx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118117 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118122 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118125 "powerpc.tcc"
				>

				void
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 118132 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118137 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118145 "powerpc.tcc"
				>

				void
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 118152 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118159 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118168 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118173 "powerpc.tcc"
				> *DecodeOpStvehx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvehx<
#line 38 "ppc.isa"
					CONFIG
#line 118179 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118189 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118193 "powerpc.tcc"
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 118197 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118201 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118204 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118208 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118211 "powerpc.tcc"
				)
				{
#line 105 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvewx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118218 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118226 "powerpc.tcc"
				>

				void
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 118233 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118238 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118246 "powerpc.tcc"
				>

				void
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 118253 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118260 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118269 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118274 "powerpc.tcc"
				> *DecodeOpStvewx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvewx<
#line 38 "ppc.isa"
					CONFIG
#line 118280 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118290 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118294 "powerpc.tcc"
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 118298 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118302 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118305 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118309 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118312 "powerpc.tcc"
				)
				{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118319 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118324 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118327 "powerpc.tcc"
				>

				void
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 118334 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118339 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118347 "powerpc.tcc"
				>

				void
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 118354 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118361 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118370 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118375 "powerpc.tcc"
				> *DecodeOpStvx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvx<
#line 38 "ppc.isa"
					CONFIG
#line 118381 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118391 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118395 "powerpc.tcc"
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 118399 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118403 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118406 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118410 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118413 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvxl v" << vs << ", r" << ra << ", r" << rb;
					}
#line 118420 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118428 "powerpc.tcc"
				>

				void
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 118435 "powerpc.tcc"
				>::initialize_unit()
				{
#line 194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }
#line 118440 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118448 "powerpc.tcc"
				>

				void
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 118455 "powerpc.tcc"
				>::initialize_serialization()
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{
						Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
					}
#line 118462 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118471 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118476 "powerpc.tcc"
				> *DecodeOpStvxl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvxl<
#line 38 "ppc.isa"
					CONFIG
#line 118482 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118492 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118496 "powerpc.tcc"
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 118500 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118504 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118507 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118511 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118514 "powerpc.tcc"
				)
				{
#line 123 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddcuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 118521 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118526 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118529 "powerpc.tcc"
				>

				void
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 118536 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118541 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118550 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118555 "powerpc.tcc"
				> *DecodeOpVaddcuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddcuw<
#line 38 "ppc.isa"
					CONFIG
#line 118561 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118571 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118575 "powerpc.tcc"
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 118579 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118583 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118586 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118590 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118593 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 118600 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118608 "powerpc.tcc"
				>

				void
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 118615 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 118620 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118629 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118634 "powerpc.tcc"
				> *DecodeOpVaddfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 118640 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118650 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118654 "powerpc.tcc"
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 118658 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118662 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118665 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118669 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118672 "powerpc.tcc"
				)
				{
#line 135 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddsbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 118679 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118687 "powerpc.tcc"
				>

				void
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 118694 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118699 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118708 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118713 "powerpc.tcc"
				> *DecodeOpVaddsbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddsbs<
#line 38 "ppc.isa"
					CONFIG
#line 118719 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118729 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118733 "powerpc.tcc"
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 118737 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118741 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118744 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118748 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118751 "powerpc.tcc"
				)
				{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddshs v" << vd << ", v" << va << ", v" << vb;
					}
#line 118758 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118766 "powerpc.tcc"
				>

				void
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 118773 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118778 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118787 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118792 "powerpc.tcc"
				> *DecodeOpVaddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 118798 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118808 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118812 "powerpc.tcc"
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 118816 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118820 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118823 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118827 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118830 "powerpc.tcc"
				)
				{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 118837 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118845 "powerpc.tcc"
				>

				void
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 118852 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118857 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118866 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118871 "powerpc.tcc"
				> *DecodeOpVaddsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddsws<
#line 38 "ppc.isa"
					CONFIG
#line 118877 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118887 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118891 "powerpc.tcc"
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 118895 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118899 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118902 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118906 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118909 "powerpc.tcc"
				)
				{
#line 153 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddubm v" << vd << ", v" << va << ", v" << vb;
					}
#line 118916 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 118921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118924 "powerpc.tcc"
				>

				void
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 118931 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 118936 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 118942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118945 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 118950 "powerpc.tcc"
				> *DecodeOpVaddubm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddubm<
#line 38 "ppc.isa"
					CONFIG
#line 118956 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 118963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 118966 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 118970 "powerpc.tcc"
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 118974 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 118978 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 118981 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 118985 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 118988 "powerpc.tcc"
				)
				{
#line 159 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddubs v" << vd << ", v" << va << ", v" << vb;
					}
#line 118995 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119003 "powerpc.tcc"
				>

				void
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 119010 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119015 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119024 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119029 "powerpc.tcc"
				> *DecodeOpVaddubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddubs<
#line 38 "ppc.isa"
					CONFIG
#line 119035 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119045 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119049 "powerpc.tcc"
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 119053 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119057 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119060 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119064 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119067 "powerpc.tcc"
				)
				{
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduhm v" << vd << ", v" << va << ", v" << vb;
					}
#line 119074 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119082 "powerpc.tcc"
				>

				void
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 119089 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119094 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119100 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119103 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119108 "powerpc.tcc"
				> *DecodeOpVadduhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduhm<
#line 38 "ppc.isa"
					CONFIG
#line 119114 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119124 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119128 "powerpc.tcc"
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 119132 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119136 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119139 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119143 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119146 "powerpc.tcc"
				)
				{
#line 171 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduhs v" << vd << ", v" << va << ", v" << vb;
					}
#line 119153 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119161 "powerpc.tcc"
				>

				void
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 119168 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119173 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119179 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119182 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119187 "powerpc.tcc"
				> *DecodeOpVadduhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduhs<
#line 38 "ppc.isa"
					CONFIG
#line 119193 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119200 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119203 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119207 "powerpc.tcc"
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 119211 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119215 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119218 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119222 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119225 "powerpc.tcc"
				)
				{
#line 177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduwm v" << vd << ", v" << va << ", v" << vb;
					}
#line 119232 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119237 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119240 "powerpc.tcc"
				>

				void
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 119247 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119252 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119261 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119266 "powerpc.tcc"
				> *DecodeOpVadduwm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduwm<
#line 38 "ppc.isa"
					CONFIG
#line 119272 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119282 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119286 "powerpc.tcc"
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 119290 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119294 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119297 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119301 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119304 "powerpc.tcc"
				)
				{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduws v" << vd << ", v" << va << ", v" << vb;
					}
#line 119311 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119319 "powerpc.tcc"
				>

				void
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 119326 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119331 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119340 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119345 "powerpc.tcc"
				> *DecodeOpVadduws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduws<
#line 38 "ppc.isa"
					CONFIG
#line 119351 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119361 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119365 "powerpc.tcc"
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 119369 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119373 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119376 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119380 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119383 "powerpc.tcc"
				)
				{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vand v" << vd << ", v" << va << ", v" << vb;
					}
#line 119390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119398 "powerpc.tcc"
				>

				void
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 119405 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119410 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119419 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119424 "powerpc.tcc"
				> *DecodeOpVand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVand<
#line 38 "ppc.isa"
					CONFIG
#line 119430 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119440 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119444 "powerpc.tcc"
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 119448 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119452 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119455 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119459 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119462 "powerpc.tcc"
				)
				{
#line 195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vandc v" << vd << ", v" << va << ", v" << vb;
					}
#line 119469 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119477 "powerpc.tcc"
				>

				void
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 119484 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119489 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119498 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119503 "powerpc.tcc"
				> *DecodeOpVandc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVandc<
#line 38 "ppc.isa"
					CONFIG
#line 119509 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119519 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119523 "powerpc.tcc"
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 119527 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119531 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119534 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119538 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119541 "powerpc.tcc"
				)
				{
#line 201 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 119548 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119556 "powerpc.tcc"
				>

				void
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 119563 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119568 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119577 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119582 "powerpc.tcc"
				> *DecodeOpVavgsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsb<
#line 38 "ppc.isa"
					CONFIG
#line 119588 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119595 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119598 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119602 "powerpc.tcc"
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 119606 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119610 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119613 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119617 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119620 "powerpc.tcc"
				)
				{
#line 207 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 119627 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119635 "powerpc.tcc"
				>

				void
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 119642 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119647 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119656 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119661 "powerpc.tcc"
				> *DecodeOpVavgsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsh<
#line 38 "ppc.isa"
					CONFIG
#line 119667 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119677 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119681 "powerpc.tcc"
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 119685 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119689 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119692 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119696 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119699 "powerpc.tcc"
				)
				{
#line 213 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 119706 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119714 "powerpc.tcc"
				>

				void
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 119721 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119726 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119735 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119740 "powerpc.tcc"
				> *DecodeOpVavgsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsw<
#line 38 "ppc.isa"
					CONFIG
#line 119746 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119753 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119756 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119760 "powerpc.tcc"
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 119764 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119768 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119771 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119775 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119778 "powerpc.tcc"
				)
				{
#line 219 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgub v" << vd << ", v" << va << ", v" << vb;
					}
#line 119785 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119793 "powerpc.tcc"
				>

				void
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 119800 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119805 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119811 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119814 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119819 "powerpc.tcc"
				> *DecodeOpVavgub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgub<
#line 38 "ppc.isa"
					CONFIG
#line 119825 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119835 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119839 "powerpc.tcc"
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 119843 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119847 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119850 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119854 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119857 "powerpc.tcc"
				)
				{
#line 225 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavguh v" << vd << ", v" << va << ", v" << vb;
					}
#line 119864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119872 "powerpc.tcc"
				>

				void
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 119879 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119884 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119893 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119898 "powerpc.tcc"
				> *DecodeOpVavguh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavguh<
#line 38 "ppc.isa"
					CONFIG
#line 119904 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119914 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119918 "powerpc.tcc"
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 119922 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 119926 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 119929 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 119933 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 119936 "powerpc.tcc"
				)
				{
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavguw v" << vd << ", v" << va << ", v" << vb;
					}
#line 119943 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 119948 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119951 "powerpc.tcc"
				>

				void
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 119958 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 119963 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 119969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119972 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 119977 "powerpc.tcc"
				> *DecodeOpVavguw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavguw<
#line 38 "ppc.isa"
					CONFIG
#line 119983 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 119990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 119993 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 119997 "powerpc.tcc"
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 120001 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120005 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120008 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120012 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120015 "powerpc.tcc"
				)
				{
#line 237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcfsx v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 120022 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120027 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120030 "powerpc.tcc"
				>

				void
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 120037 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120042 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120051 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120056 "powerpc.tcc"
				> *DecodeOpVcfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcfsx<
#line 38 "ppc.isa"
					CONFIG
#line 120062 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120072 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120076 "powerpc.tcc"
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 120080 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120084 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120087 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120091 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120094 "powerpc.tcc"
				)
				{
#line 243 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcfux v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 120101 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120106 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120109 "powerpc.tcc"
				>

				void
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 120116 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120121 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120127 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120130 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120135 "powerpc.tcc"
				> *DecodeOpVcfux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcfux<
#line 38 "ppc.isa"
					CONFIG
#line 120141 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120151 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120155 "powerpc.tcc"
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 120159 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120163 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120166 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120170 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120173 "powerpc.tcc"
				)
				{
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpbfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120180 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120185 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120188 "powerpc.tcc"
				>

				void
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 120195 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120200 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120209 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120214 "powerpc.tcc"
				> *DecodeOpVcmpbfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpbfp<
#line 38 "ppc.isa"
					CONFIG
#line 120220 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120230 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120234 "powerpc.tcc"
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 120238 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120242 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120245 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120249 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120252 "powerpc.tcc"
				)
				{
#line 255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpeqfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120259 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120267 "powerpc.tcc"
				>

				void
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 120274 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120279 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120288 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120293 "powerpc.tcc"
				> *DecodeOpVcmpeqfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpeqfp<
#line 38 "ppc.isa"
					CONFIG
#line 120299 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120309 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120313 "powerpc.tcc"
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 120317 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120321 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120324 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120328 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120331 "powerpc.tcc"
				)
				{
#line 261 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequb" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120338 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120346 "powerpc.tcc"
				>

				void
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 120353 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120358 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120367 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120372 "powerpc.tcc"
				> *DecodeOpVcmpequb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequb<
#line 38 "ppc.isa"
					CONFIG
#line 120378 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120388 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120392 "powerpc.tcc"
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 120396 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120400 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120403 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120407 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120410 "powerpc.tcc"
				)
				{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120417 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120422 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120425 "powerpc.tcc"
				>

				void
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 120432 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120437 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120443 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120446 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120451 "powerpc.tcc"
				> *DecodeOpVcmpequh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequh<
#line 38 "ppc.isa"
					CONFIG
#line 120457 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120467 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120471 "powerpc.tcc"
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 120475 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120479 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120482 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120486 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120489 "powerpc.tcc"
				)
				{
#line 273 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120496 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120501 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120504 "powerpc.tcc"
				>

				void
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 120511 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120516 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120525 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120530 "powerpc.tcc"
				> *DecodeOpVcmpequw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequw<
#line 38 "ppc.isa"
					CONFIG
#line 120536 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120546 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120550 "powerpc.tcc"
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 120554 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120558 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120561 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120565 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120568 "powerpc.tcc"
				)
				{
#line 279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgefp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120575 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120583 "powerpc.tcc"
				>

				void
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 120590 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120595 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120601 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120604 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120609 "powerpc.tcc"
				> *DecodeOpVcmpgefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgefp<
#line 38 "ppc.isa"
					CONFIG
#line 120615 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120622 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120625 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120629 "powerpc.tcc"
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 120633 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120637 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120640 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120644 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120647 "powerpc.tcc"
				)
				{
#line 285 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120654 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120662 "powerpc.tcc"
				>

				void
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 120669 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 120674 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120683 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120688 "powerpc.tcc"
				> *DecodeOpVcmpgtfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtfp<
#line 38 "ppc.isa"
					CONFIG
#line 120694 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120701 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120704 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120708 "powerpc.tcc"
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 120712 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120716 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120719 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120723 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120726 "powerpc.tcc"
				)
				{
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsb" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120733 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120741 "powerpc.tcc"
				>

				void
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 120748 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120753 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120762 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120767 "powerpc.tcc"
				> *DecodeOpVcmpgtsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsb<
#line 38 "ppc.isa"
					CONFIG
#line 120773 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120783 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120787 "powerpc.tcc"
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 120791 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120795 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120798 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120802 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120805 "powerpc.tcc"
				)
				{
#line 297 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120812 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120817 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120820 "powerpc.tcc"
				>

				void
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 120827 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120832 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120841 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120846 "powerpc.tcc"
				> *DecodeOpVcmpgtsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsh<
#line 38 "ppc.isa"
					CONFIG
#line 120852 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120862 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120866 "powerpc.tcc"
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 120870 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120874 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120877 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120881 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120884 "powerpc.tcc"
				)
				{
#line 303 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120891 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120899 "powerpc.tcc"
				>

				void
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 120906 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120911 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120920 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 120925 "powerpc.tcc"
				> *DecodeOpVcmpgtsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsw<
#line 38 "ppc.isa"
					CONFIG
#line 120931 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 120938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120941 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 120945 "powerpc.tcc"
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 120949 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 120953 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 120956 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 120960 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 120963 "powerpc.tcc"
				)
				{
#line 309 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtub" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 120970 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 120975 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120978 "powerpc.tcc"
				>

				void
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 120985 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 120990 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 120996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 120999 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121004 "powerpc.tcc"
				> *DecodeOpVcmpgtub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtub<
#line 38 "ppc.isa"
					CONFIG
#line 121010 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121017 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121020 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121024 "powerpc.tcc"
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 121028 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121032 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121035 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121039 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121042 "powerpc.tcc"
				)
				{
#line 315 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtuh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 121049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121057 "powerpc.tcc"
				>

				void
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 121064 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121069 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121075 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121078 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121083 "powerpc.tcc"
				> *DecodeOpVcmpgtuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtuh<
#line 38 "ppc.isa"
					CONFIG
#line 121089 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121096 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121099 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121103 "powerpc.tcc"
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 121107 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121111 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121114 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121118 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121121 "powerpc.tcc"
				)
				{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtuw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 121128 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121133 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121136 "powerpc.tcc"
				>

				void
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 121143 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121148 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121157 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121162 "powerpc.tcc"
				> *DecodeOpVcmpgtuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtuw<
#line 38 "ppc.isa"
					CONFIG
#line 121168 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121175 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121178 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121182 "powerpc.tcc"
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 121186 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121190 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121193 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121197 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121200 "powerpc.tcc"
				)
				{
#line 327 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vctsxs v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 121207 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121215 "powerpc.tcc"
				>

				void
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 121222 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121227 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121236 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121241 "powerpc.tcc"
				> *DecodeOpVctsxs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVctsxs<
#line 38 "ppc.isa"
					CONFIG
#line 121247 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121257 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121261 "powerpc.tcc"
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 121265 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121269 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121272 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121276 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121279 "powerpc.tcc"
				)
				{
#line 333 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vctuxs v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 121286 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121294 "powerpc.tcc"
				>

				void
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 121301 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121306 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121315 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121320 "powerpc.tcc"
				> *DecodeOpVctuxs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVctuxs<
#line 38 "ppc.isa"
					CONFIG
#line 121326 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121336 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121340 "powerpc.tcc"
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 121344 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121348 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121351 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121355 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121358 "powerpc.tcc"
				)
				{
#line 339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vexptefp v" << vd << ", v" << vb;
					}
#line 121365 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121373 "powerpc.tcc"
				>

				void
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 121380 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121385 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121391 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121394 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121399 "powerpc.tcc"
				> *DecodeOpVexptefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVexptefp<
#line 38 "ppc.isa"
					CONFIG
#line 121405 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121415 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121419 "powerpc.tcc"
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 121423 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121427 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121430 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121434 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121437 "powerpc.tcc"
				)
				{
#line 345 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vlogefp v" << vd << ", v" << vb;
					}
#line 121444 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121449 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121452 "powerpc.tcc"
				>

				void
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 121459 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121464 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121470 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121473 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121478 "powerpc.tcc"
				> *DecodeOpVlogefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVlogefp<
#line 38 "ppc.isa"
					CONFIG
#line 121484 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121494 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121498 "powerpc.tcc"
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 121502 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121506 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121509 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121513 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121516 "powerpc.tcc"
				)
				{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaddfp v" << vd << ", v" << va << ", v" << vc << ", v" << vb;
					}
#line 121523 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121531 "powerpc.tcc"
				>

				void
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 121538 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121543 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121549 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121552 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121557 "powerpc.tcc"
				> *DecodeOpVmaddfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 121563 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121573 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121577 "powerpc.tcc"
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 121581 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121585 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121588 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121592 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121595 "powerpc.tcc"
				)
				{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 121602 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121607 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121610 "powerpc.tcc"
				>

				void
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 121617 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 121622 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121631 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121636 "powerpc.tcc"
				> *DecodeOpVmaxfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxfp<
#line 38 "ppc.isa"
					CONFIG
#line 121642 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121652 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121656 "powerpc.tcc"
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 121660 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121664 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121667 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121671 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121674 "powerpc.tcc"
				)
				{
#line 363 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 121681 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121689 "powerpc.tcc"
				>

				void
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 121696 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121701 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121710 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121715 "powerpc.tcc"
				> *DecodeOpVmaxsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsb<
#line 38 "ppc.isa"
					CONFIG
#line 121721 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121731 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121735 "powerpc.tcc"
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 121739 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121743 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121746 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121750 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121753 "powerpc.tcc"
				)
				{
#line 369 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 121760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121768 "powerpc.tcc"
				>

				void
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 121775 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121780 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121789 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121794 "powerpc.tcc"
				> *DecodeOpVmaxsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsh<
#line 38 "ppc.isa"
					CONFIG
#line 121800 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121810 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121814 "powerpc.tcc"
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 121818 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121822 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121825 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121829 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121832 "powerpc.tcc"
				)
				{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 121839 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121847 "powerpc.tcc"
				>

				void
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 121854 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121859 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121868 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121873 "powerpc.tcc"
				> *DecodeOpVmaxsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsw<
#line 38 "ppc.isa"
					CONFIG
#line 121879 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121889 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121893 "powerpc.tcc"
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 121897 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121901 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121904 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121908 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121911 "powerpc.tcc"
				)
				{
#line 381 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxub v" << vd << ", v" << va << ", v" << vb;
					}
#line 121918 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 121923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121926 "powerpc.tcc"
				>

				void
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 121933 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 121938 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 121944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121947 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 121952 "powerpc.tcc"
				> *DecodeOpVmaxub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxub<
#line 38 "ppc.isa"
					CONFIG
#line 121958 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 121965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 121968 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 121972 "powerpc.tcc"
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 121976 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 121980 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 121983 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 121987 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 121990 "powerpc.tcc"
				)
				{
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 121997 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122005 "powerpc.tcc"
				>

				void
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 122012 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122017 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122026 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122031 "powerpc.tcc"
				> *DecodeOpVmaxuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxuh<
#line 38 "ppc.isa"
					CONFIG
#line 122037 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122047 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122051 "powerpc.tcc"
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 122055 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122059 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122062 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122066 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122069 "powerpc.tcc"
				)
				{
#line 393 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 122076 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122084 "powerpc.tcc"
				>

				void
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 122091 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122096 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122105 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122110 "powerpc.tcc"
				> *DecodeOpVmaxuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxuw<
#line 38 "ppc.isa"
					CONFIG
#line 122116 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122126 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122130 "powerpc.tcc"
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122134 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122138 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122141 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122145 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122148 "powerpc.tcc"
				)
				{
#line 399 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmhaddshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 122155 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122163 "powerpc.tcc"
				>

				void
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122170 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 122175 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122184 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122189 "powerpc.tcc"
				> *DecodeOpVmhaddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmhaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 122195 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122202 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122205 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122209 "powerpc.tcc"
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122213 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122217 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122220 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122224 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122227 "powerpc.tcc"
				)
				{
#line 405 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmhraddshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 122234 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122239 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122242 "powerpc.tcc"
				>

				void
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 122249 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 122254 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122263 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122268 "powerpc.tcc"
				> *DecodeOpVmhraddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmhraddshs<
#line 38 "ppc.isa"
					CONFIG
#line 122274 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122281 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122284 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122288 "powerpc.tcc"
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 122292 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122296 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122299 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122303 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122306 "powerpc.tcc"
				)
				{
#line 411 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 122313 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122318 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122321 "powerpc.tcc"
				>

				void
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 122328 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 122333 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122339 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122342 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122347 "powerpc.tcc"
				> *DecodeOpVminfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminfp<
#line 38 "ppc.isa"
					CONFIG
#line 122353 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122363 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122367 "powerpc.tcc"
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 122371 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122375 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122378 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122382 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122385 "powerpc.tcc"
				)
				{
#line 417 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 122392 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122397 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122400 "powerpc.tcc"
				>

				void
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 122407 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122412 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122421 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122426 "powerpc.tcc"
				> *DecodeOpVminsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsb<
#line 38 "ppc.isa"
					CONFIG
#line 122432 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122442 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122446 "powerpc.tcc"
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 122450 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122454 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122457 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122461 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122464 "powerpc.tcc"
				)
				{
#line 423 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 122471 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122476 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122479 "powerpc.tcc"
				>

				void
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 122486 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122491 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122500 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122505 "powerpc.tcc"
				> *DecodeOpVminsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsh<
#line 38 "ppc.isa"
					CONFIG
#line 122511 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122521 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122525 "powerpc.tcc"
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 122529 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122533 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122536 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122540 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122543 "powerpc.tcc"
				)
				{
#line 429 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 122550 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122558 "powerpc.tcc"
				>

				void
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 122565 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122570 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122576 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122579 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122584 "powerpc.tcc"
				> *DecodeOpVminsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsw<
#line 38 "ppc.isa"
					CONFIG
#line 122590 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122600 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122604 "powerpc.tcc"
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 122608 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122612 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122615 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122619 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122622 "powerpc.tcc"
				)
				{
#line 435 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminub v" << vd << ", v" << va << ", v" << vb;
					}
#line 122629 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122637 "powerpc.tcc"
				>

				void
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 122644 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122649 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122658 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122663 "powerpc.tcc"
				> *DecodeOpVminub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminub<
#line 38 "ppc.isa"
					CONFIG
#line 122669 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122679 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122683 "powerpc.tcc"
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 122687 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122691 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122694 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122698 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122701 "powerpc.tcc"
				)
				{
#line 441 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 122708 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122713 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122716 "powerpc.tcc"
				>

				void
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 122723 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122728 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122737 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122742 "powerpc.tcc"
				> *DecodeOpVminuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminuh<
#line 38 "ppc.isa"
					CONFIG
#line 122748 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122758 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122762 "powerpc.tcc"
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 122766 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122770 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122773 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122777 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122780 "powerpc.tcc"
				)
				{
#line 447 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 122787 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122795 "powerpc.tcc"
				>

				void
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 122802 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 122807 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122813 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122816 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122821 "powerpc.tcc"
				> *DecodeOpVminuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminuw<
#line 38 "ppc.isa"
					CONFIG
#line 122827 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122837 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122841 "powerpc.tcc"
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 122845 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122849 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122852 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122856 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122859 "powerpc.tcc"
				)
				{
#line 453 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmladduhm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 122866 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122871 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122874 "powerpc.tcc"
				>

				void
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 122881 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 122886 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122895 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122900 "powerpc.tcc"
				> *DecodeOpVmladduhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmladduhm<
#line 38 "ppc.isa"
					CONFIG
#line 122906 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122916 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122920 "powerpc.tcc"
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 122924 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 122928 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 122931 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 122935 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 122938 "powerpc.tcc"
				)
				{
#line 459 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghb v" << vd << ", v" << va << ", v" << vb;
					}
#line 122945 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 122950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122953 "powerpc.tcc"
				>

				void
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 122960 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 122965 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 122971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122974 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 122979 "powerpc.tcc"
				> *DecodeOpVmrghb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghb<
#line 38 "ppc.isa"
					CONFIG
#line 122985 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 122992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 122995 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 122999 "powerpc.tcc"
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 123003 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123007 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123010 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123014 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123017 "powerpc.tcc"
				)
				{
#line 465 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghh v" << vd << ", v" << va << ", v" << vb;
					}
#line 123024 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123032 "powerpc.tcc"
				>

				void
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 123039 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123044 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123053 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123058 "powerpc.tcc"
				> *DecodeOpVmrghh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghh<
#line 38 "ppc.isa"
					CONFIG
#line 123064 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123071 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123074 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123078 "powerpc.tcc"
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 123082 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123086 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123089 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123093 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123096 "powerpc.tcc"
				)
				{
#line 471 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghw v" << vd << ", v" << va << ", v" << vb;
					}
#line 123103 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123108 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123111 "powerpc.tcc"
				>

				void
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 123118 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123123 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123129 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123132 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123137 "powerpc.tcc"
				> *DecodeOpVmrghw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghw<
#line 38 "ppc.isa"
					CONFIG
#line 123143 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123153 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123157 "powerpc.tcc"
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 123161 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123165 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123168 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123172 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123175 "powerpc.tcc"
				)
				{
#line 477 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglb v" << vd << ", v" << va << ", v" << vb;
					}
#line 123182 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123190 "powerpc.tcc"
				>

				void
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 123197 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123202 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123208 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123211 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123216 "powerpc.tcc"
				> *DecodeOpVmrglb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglb<
#line 38 "ppc.isa"
					CONFIG
#line 123222 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123232 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123236 "powerpc.tcc"
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 123240 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123244 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123247 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123251 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123254 "powerpc.tcc"
				)
				{
#line 483 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglh v" << vd << ", v" << va << ", v" << vb;
					}
#line 123261 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123269 "powerpc.tcc"
				>

				void
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 123276 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123281 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123290 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123295 "powerpc.tcc"
				> *DecodeOpVmrglh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglh<
#line 38 "ppc.isa"
					CONFIG
#line 123301 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123308 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123311 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123315 "powerpc.tcc"
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 123319 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123323 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123326 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123330 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123333 "powerpc.tcc"
				)
				{
#line 489 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglw v" << vd << ", v" << va << ", v" << vb;
					}
#line 123340 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123345 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123348 "powerpc.tcc"
				>

				void
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 123355 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 123360 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123369 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123374 "powerpc.tcc"
				> *DecodeOpVmrglw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglw<
#line 38 "ppc.isa"
					CONFIG
#line 123380 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123390 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123394 "powerpc.tcc"
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 123398 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123402 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123405 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123409 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123412 "powerpc.tcc"
				)
				{
#line 495 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsummbm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123419 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123424 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123427 "powerpc.tcc"
				>

				void
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 123434 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123439 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123448 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123453 "powerpc.tcc"
				> *DecodeOpVmsummbm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsummbm<
#line 38 "ppc.isa"
					CONFIG
#line 123459 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123469 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123473 "powerpc.tcc"
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 123477 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123481 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123484 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123488 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123491 "powerpc.tcc"
				)
				{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumshm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123498 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123503 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123506 "powerpc.tcc"
				>

				void
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 123513 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123518 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123527 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123532 "powerpc.tcc"
				> *DecodeOpVmsumshm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumshm<
#line 38 "ppc.isa"
					CONFIG
#line 123538 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123548 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123552 "powerpc.tcc"
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 123556 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123560 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123563 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123567 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123570 "powerpc.tcc"
				)
				{
#line 507 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123577 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123582 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123585 "powerpc.tcc"
				>

				void
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 123592 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123597 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123606 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123611 "powerpc.tcc"
				> *DecodeOpVmsumshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumshs<
#line 38 "ppc.isa"
					CONFIG
#line 123617 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123627 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123631 "powerpc.tcc"
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 123635 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123639 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123642 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123646 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123649 "powerpc.tcc"
				)
				{
#line 513 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumubm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123664 "powerpc.tcc"
				>

				void
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 123671 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123676 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123685 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123690 "powerpc.tcc"
				> *DecodeOpVmsumubm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumubm<
#line 38 "ppc.isa"
					CONFIG
#line 123696 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123706 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123710 "powerpc.tcc"
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 123714 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123718 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123721 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123725 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123728 "powerpc.tcc"
				)
				{
#line 519 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumuhm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123743 "powerpc.tcc"
				>

				void
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 123750 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123755 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123761 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123764 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123769 "powerpc.tcc"
				> *DecodeOpVmsumuhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumuhm<
#line 38 "ppc.isa"
					CONFIG
#line 123775 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123785 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123789 "powerpc.tcc"
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 123793 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123797 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123800 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123804 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123807 "powerpc.tcc"
				)
				{
#line 525 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumuhs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 123814 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123822 "powerpc.tcc"
				>

				void
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 123829 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123834 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123840 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123843 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123848 "powerpc.tcc"
				> *DecodeOpVmsumuhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumuhs<
#line 38 "ppc.isa"
					CONFIG
#line 123854 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123864 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123868 "powerpc.tcc"
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 123872 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123876 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123879 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123883 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123886 "powerpc.tcc"
				)
				{
#line 531 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulesb v" << vd << ", v" << va << ", v" << vb;
					}
#line 123893 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123901 "powerpc.tcc"
				>

				void
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 123908 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123913 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123922 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 123927 "powerpc.tcc"
				> *DecodeOpVmulesb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulesb<
#line 38 "ppc.isa"
					CONFIG
#line 123933 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 123940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123943 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 123947 "powerpc.tcc"
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 123951 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 123955 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 123958 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 123962 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 123965 "powerpc.tcc"
				)
				{
#line 537 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulesh v" << vd << ", v" << va << ", v" << vb;
					}
#line 123972 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 123977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 123980 "powerpc.tcc"
				>

				void
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 123987 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 123992 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 123998 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124001 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124006 "powerpc.tcc"
				> *DecodeOpVmulesh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulesh<
#line 38 "ppc.isa"
					CONFIG
#line 124012 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124019 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124022 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124026 "powerpc.tcc"
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 124030 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124034 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124037 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124041 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124044 "powerpc.tcc"
				)
				{
#line 543 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuleub v" << vd << ", v" << va << ", v" << vb;
					}
#line 124051 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124059 "powerpc.tcc"
				>

				void
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 124066 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124071 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124080 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124085 "powerpc.tcc"
				> *DecodeOpVmuleub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuleub<
#line 38 "ppc.isa"
					CONFIG
#line 124091 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124101 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124105 "powerpc.tcc"
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 124109 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124113 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124116 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124120 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124123 "powerpc.tcc"
				)
				{
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuleuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124130 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124135 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124138 "powerpc.tcc"
				>

				void
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 124145 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124150 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124159 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124164 "powerpc.tcc"
				> *DecodeOpVmuleuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuleuh<
#line 38 "ppc.isa"
					CONFIG
#line 124170 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124177 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124180 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124184 "powerpc.tcc"
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 124188 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124192 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124195 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124199 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124202 "powerpc.tcc"
				)
				{
#line 555 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulosb v" << vd << ", v" << va << ", v" << vb;
					}
#line 124209 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124217 "powerpc.tcc"
				>

				void
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 124224 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124229 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124235 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124238 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124243 "powerpc.tcc"
				> *DecodeOpVmulosb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulosb<
#line 38 "ppc.isa"
					CONFIG
#line 124249 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124259 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124263 "powerpc.tcc"
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 124267 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124271 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124274 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124278 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124281 "powerpc.tcc"
				)
				{
#line 561 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulosh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124288 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124293 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124296 "powerpc.tcc"
				>

				void
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 124303 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124308 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124314 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124317 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124322 "powerpc.tcc"
				> *DecodeOpVmulosh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulosh<
#line 38 "ppc.isa"
					CONFIG
#line 124328 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124335 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124338 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124342 "powerpc.tcc"
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 124346 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124350 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124353 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124357 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124360 "powerpc.tcc"
				)
				{
#line 567 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuloub v" << vd << ", v" << va << ", v" << vb;
					}
#line 124367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124375 "powerpc.tcc"
				>

				void
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 124382 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124387 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124393 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124396 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124401 "powerpc.tcc"
				> *DecodeOpVmuloub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuloub<
#line 38 "ppc.isa"
					CONFIG
#line 124407 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124417 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124421 "powerpc.tcc"
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 124425 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124429 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124432 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124436 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124439 "powerpc.tcc"
				)
				{
#line 573 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulouh v" << vd << ", v" << va << ", v" << vb;
					}
#line 124446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124454 "powerpc.tcc"
				>

				void
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 124461 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 124466 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124472 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124475 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124480 "powerpc.tcc"
				> *DecodeOpVmulouh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulouh<
#line 38 "ppc.isa"
					CONFIG
#line 124486 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124496 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124500 "powerpc.tcc"
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 124504 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124508 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124511 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124515 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124518 "powerpc.tcc"
				)
				{
#line 579 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vnmsubfp v" << vd << ", v" << va << ", v" << vc << ", v" << vb;
					}
#line 124525 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124530 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124533 "powerpc.tcc"
				>

				void
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 124540 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 124545 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124554 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124559 "powerpc.tcc"
				> *DecodeOpVnmsubfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVnmsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 124565 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124575 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124579 "powerpc.tcc"
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 124583 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124587 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124590 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124594 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124597 "powerpc.tcc"
				)
				{
#line 585 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vnor v" << vd << ", v" << va << ", v" << vb;
					}
#line 124604 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124612 "powerpc.tcc"
				>

				void
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 124619 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 124624 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124630 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124633 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124638 "powerpc.tcc"
				> *DecodeOpVnor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVnor<
#line 38 "ppc.isa"
					CONFIG
#line 124644 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124654 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124658 "powerpc.tcc"
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 124662 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124666 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124669 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124673 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124676 "powerpc.tcc"
				)
				{
#line 591 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vor v" << vd << ", v" << va << ", v" << vb;
					}
#line 124683 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124691 "powerpc.tcc"
				>

				void
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 124698 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 124703 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124712 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124717 "powerpc.tcc"
				> *DecodeOpVor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVor<
#line 38 "ppc.isa"
					CONFIG
#line 124723 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124733 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124737 "powerpc.tcc"
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 124741 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124745 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124748 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124752 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124755 "powerpc.tcc"
				)
				{
#line 597 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vperm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 124762 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124770 "powerpc.tcc"
				>

				void
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 124777 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 124782 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124788 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124791 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124796 "powerpc.tcc"
				> *DecodeOpVperm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVperm<
#line 38 "ppc.isa"
					CONFIG
#line 124802 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124812 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124816 "powerpc.tcc"
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 124820 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124824 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124827 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124831 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124834 "powerpc.tcc"
				)
				{
#line 603 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkpx v" << vd << ", v" << va << ", v" << vb;
					}
#line 124841 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124849 "powerpc.tcc"
				>

				void
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 124856 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 124861 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124867 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124870 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124875 "powerpc.tcc"
				> *DecodeOpVpkpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkpx<
#line 38 "ppc.isa"
					CONFIG
#line 124881 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124888 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124891 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124895 "powerpc.tcc"
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 124899 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124903 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124906 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124910 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124913 "powerpc.tcc"
				)
				{
#line 609 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkshss v" << vd << ", v" << va << ", v" << vb;
					}
#line 124920 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 124925 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124928 "powerpc.tcc"
				>

				void
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 124935 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 124940 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 124946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124949 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 124954 "powerpc.tcc"
				> *DecodeOpVpkshss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkshss<
#line 38 "ppc.isa"
					CONFIG
#line 124960 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 124967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 124970 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 124974 "powerpc.tcc"
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 124978 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 124982 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 124985 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 124989 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 124992 "powerpc.tcc"
				)
				{
#line 615 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkshus v" << vd << ", v" << va << ", v" << vb;
					}
#line 124999 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125007 "powerpc.tcc"
				>

				void
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 125014 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125019 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125028 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125033 "powerpc.tcc"
				> *DecodeOpVpkshus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkshus<
#line 38 "ppc.isa"
					CONFIG
#line 125039 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125049 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125053 "powerpc.tcc"
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 125057 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125061 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125064 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125068 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125071 "powerpc.tcc"
				)
				{
#line 621 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkswss v" << vd << ", v" << va << ", v" << vb;
					}
#line 125078 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125086 "powerpc.tcc"
				>

				void
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 125093 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125098 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125107 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125112 "powerpc.tcc"
				> *DecodeOpVpkswss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkswss<
#line 38 "ppc.isa"
					CONFIG
#line 125118 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125128 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125132 "powerpc.tcc"
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 125136 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125140 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125143 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125147 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125150 "powerpc.tcc"
				)
				{
#line 627 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkswus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125157 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125162 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125165 "powerpc.tcc"
				>

				void
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 125172 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125177 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125186 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125191 "powerpc.tcc"
				> *DecodeOpVpkswus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkswus<
#line 38 "ppc.isa"
					CONFIG
#line 125197 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125204 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125207 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125211 "powerpc.tcc"
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 125215 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125219 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125222 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125226 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125229 "powerpc.tcc"
				)
				{
#line 633 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuhum v" << vd << ", v" << va << ", v" << vb;
					}
#line 125236 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125244 "powerpc.tcc"
				>

				void
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 125251 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125256 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125262 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125265 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125270 "powerpc.tcc"
				> *DecodeOpVpkuhum(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuhum<
#line 38 "ppc.isa"
					CONFIG
#line 125276 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125286 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125290 "powerpc.tcc"
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 125294 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125298 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125301 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125305 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125308 "powerpc.tcc"
				)
				{
#line 639 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuhus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125315 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125323 "powerpc.tcc"
				>

				void
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 125330 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125335 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125341 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125344 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125349 "powerpc.tcc"
				> *DecodeOpVpkuhus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuhus<
#line 38 "ppc.isa"
					CONFIG
#line 125355 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125365 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125369 "powerpc.tcc"
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 125373 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125377 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125380 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125384 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125387 "powerpc.tcc"
				)
				{
#line 645 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuwum v" << vd << ", v" << va << ", v" << vb;
					}
#line 125394 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125399 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125402 "powerpc.tcc"
				>

				void
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 125409 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125414 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125423 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125428 "powerpc.tcc"
				> *DecodeOpVpkuwum(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuwum<
#line 38 "ppc.isa"
					CONFIG
#line 125434 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125441 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125444 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125448 "powerpc.tcc"
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 125452 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125456 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125459 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125463 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125466 "powerpc.tcc"
				)
				{
#line 651 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuwus v" << vd << ", v" << va << ", v" << vb;
					}
#line 125473 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125481 "powerpc.tcc"
				>

				void
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 125488 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 125493 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125502 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125507 "powerpc.tcc"
				> *DecodeOpVpkuwus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuwus<
#line 38 "ppc.isa"
					CONFIG
#line 125513 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125523 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125527 "powerpc.tcc"
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 125531 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125535 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125538 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125542 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125545 "powerpc.tcc"
				)
				{
#line 657 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrefp v" << vd << ", v" << vb;
					}
#line 125552 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125557 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125560 "powerpc.tcc"
				>

				void
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 125567 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125572 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125581 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125586 "powerpc.tcc"
				> *DecodeOpVrefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrefp<
#line 38 "ppc.isa"
					CONFIG
#line 125592 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125602 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125606 "powerpc.tcc"
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 125610 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125614 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125617 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125621 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125624 "powerpc.tcc"
				)
				{
#line 663 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfim v" << vd << ", v" << vb;
					}
#line 125631 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125639 "powerpc.tcc"
				>

				void
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 125646 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125651 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125660 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125665 "powerpc.tcc"
				> *DecodeOpVrfim(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfim<
#line 38 "ppc.isa"
					CONFIG
#line 125671 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125681 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125685 "powerpc.tcc"
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 125689 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125693 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125696 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125700 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125703 "powerpc.tcc"
				)
				{
#line 669 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfin v" << vd << ", v" << vb;
					}
#line 125710 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125718 "powerpc.tcc"
				>

				void
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 125725 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125730 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125739 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125744 "powerpc.tcc"
				> *DecodeOpVrfin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfin<
#line 38 "ppc.isa"
					CONFIG
#line 125750 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125757 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125760 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125764 "powerpc.tcc"
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 125768 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125772 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125775 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125779 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125782 "powerpc.tcc"
				)
				{
#line 675 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfip v" << vd << ", v" << vb;
					}
#line 125789 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125797 "powerpc.tcc"
				>

				void
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 125804 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125809 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125815 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125818 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125823 "powerpc.tcc"
				> *DecodeOpVrfip(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfip<
#line 38 "ppc.isa"
					CONFIG
#line 125829 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125839 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125843 "powerpc.tcc"
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 125847 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125851 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125854 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125858 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125861 "powerpc.tcc"
				)
				{
#line 681 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfiz v" << vd << ", v" << vb;
					}
#line 125868 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125876 "powerpc.tcc"
				>

				void
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 125883 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 125888 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125897 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125902 "powerpc.tcc"
				> *DecodeOpVrfiz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfiz<
#line 38 "ppc.isa"
					CONFIG
#line 125908 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125918 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 125922 "powerpc.tcc"
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 125926 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 125930 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 125933 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 125937 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 125940 "powerpc.tcc"
				)
				{
#line 687 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlb v" << vd << ", v" << va << ", v" << vb;
					}
#line 125947 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 125952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125955 "powerpc.tcc"
				>

				void
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 125962 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 125967 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 125973 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125976 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 125981 "powerpc.tcc"
				> *DecodeOpVrlb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlb<
#line 38 "ppc.isa"
					CONFIG
#line 125987 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 125994 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 125997 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126001 "powerpc.tcc"
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 126005 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126009 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126012 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126016 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126019 "powerpc.tcc"
				)
				{
#line 693 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlh v" << vd << ", v" << va << ", v" << vb;
					}
#line 126026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126034 "powerpc.tcc"
				>

				void
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 126041 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126046 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126055 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126060 "powerpc.tcc"
				> *DecodeOpVrlh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlh<
#line 38 "ppc.isa"
					CONFIG
#line 126066 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126073 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126076 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126080 "powerpc.tcc"
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 126084 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126088 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126091 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126095 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126098 "powerpc.tcc"
				)
				{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlw v" << vd << ", v" << va << ", v" << vb;
					}
#line 126105 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126113 "powerpc.tcc"
				>

				void
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 126120 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126125 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126131 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126134 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126139 "powerpc.tcc"
				> *DecodeOpVrlw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlw<
#line 38 "ppc.isa"
					CONFIG
#line 126145 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126155 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126159 "powerpc.tcc"
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 126163 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126167 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126170 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126174 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126177 "powerpc.tcc"
				)
				{
#line 705 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrsqrtefp v" << vd << ", v" << vb;
					}
#line 126184 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126192 "powerpc.tcc"
				>

				void
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 126199 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 126204 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126213 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126218 "powerpc.tcc"
				> *DecodeOpVrsqrtefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrsqrtefp<
#line 38 "ppc.isa"
					CONFIG
#line 126224 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126234 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126238 "powerpc.tcc"
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 126242 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126246 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126249 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126253 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126256 "powerpc.tcc"
				)
				{
#line 711 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsel v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 126263 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126268 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126271 "powerpc.tcc"
				>

				void
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 126278 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126283 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126292 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126297 "powerpc.tcc"
				> *DecodeOpVsel(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsel<
#line 38 "ppc.isa"
					CONFIG
#line 126303 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126313 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126317 "powerpc.tcc"
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 126321 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126325 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126328 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126332 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126335 "powerpc.tcc"
				)
				{
#line 717 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsl v" << vd << ", v" << va << ", v" << vb;
					}
#line 126342 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126347 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126350 "powerpc.tcc"
				>

				void
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 126357 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126362 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126368 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126371 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126376 "powerpc.tcc"
				> *DecodeOpVsl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsl<
#line 38 "ppc.isa"
					CONFIG
#line 126382 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126389 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126392 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126396 "powerpc.tcc"
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 126400 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126404 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126407 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126411 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126414 "powerpc.tcc"
				)
				{
#line 723 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslb v" << vd << ", v" << va << ", v" << vb;
					}
#line 126421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126429 "powerpc.tcc"
				>

				void
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 126436 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126441 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126450 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126455 "powerpc.tcc"
				> *DecodeOpVslb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslb<
#line 38 "ppc.isa"
					CONFIG
#line 126461 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126471 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126475 "powerpc.tcc"
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 126479 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126483 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126486 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126490 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126493 "powerpc.tcc"
				)
				{
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsldoi v" << vd << ", v" << va << ", v" << vb;
					}
#line 126500 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126508 "powerpc.tcc"
				>

				void
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 126515 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126520 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126526 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126529 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126534 "powerpc.tcc"
				> *DecodeOpVsldoi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsldoi<
#line 38 "ppc.isa"
					CONFIG
#line 126540 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126550 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126554 "powerpc.tcc"
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 126558 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126562 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126565 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126569 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126572 "powerpc.tcc"
				)
				{
#line 735 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslh v" << vd << ", v" << va << ", v" << vb;
					}
#line 126579 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126587 "powerpc.tcc"
				>

				void
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 126594 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126599 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126608 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126613 "powerpc.tcc"
				> *DecodeOpVslh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslh<
#line 38 "ppc.isa"
					CONFIG
#line 126619 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126629 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126633 "powerpc.tcc"
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 126637 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126641 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126644 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126648 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126651 "powerpc.tcc"
				)
				{
#line 741 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslo v" << vd << ", v" << va << ", v" << vb;
					}
#line 126658 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126666 "powerpc.tcc"
				>

				void
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 126673 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126678 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126687 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126692 "powerpc.tcc"
				> *DecodeOpVslo(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslo<
#line 38 "ppc.isa"
					CONFIG
#line 126698 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126708 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126712 "powerpc.tcc"
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 126716 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126720 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126723 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126727 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126730 "powerpc.tcc"
				)
				{
#line 747 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslw v" << vd << ", v" << va << ", v" << vb;
					}
#line 126737 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126745 "powerpc.tcc"
				>

				void
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 126752 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 126757 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126766 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126771 "powerpc.tcc"
				> *DecodeOpVslw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslw<
#line 38 "ppc.isa"
					CONFIG
#line 126777 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126787 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126791 "powerpc.tcc"
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 126795 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126799 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126802 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126806 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126809 "powerpc.tcc"
				)
				{
#line 753 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltb v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 126816 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126824 "powerpc.tcc"
				>

				void
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 126831 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126836 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126845 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126850 "powerpc.tcc"
				> *DecodeOpVspltb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltb<
#line 38 "ppc.isa"
					CONFIG
#line 126856 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126866 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126870 "powerpc.tcc"
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 126874 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126878 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126881 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126885 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126888 "powerpc.tcc"
				)
				{
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsplth v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 126895 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126903 "powerpc.tcc"
				>

				void
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 126910 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126915 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 126921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126924 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 126929 "powerpc.tcc"
				> *DecodeOpVsplth(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsplth<
#line 38 "ppc.isa"
					CONFIG
#line 126935 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 126942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126945 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 126949 "powerpc.tcc"
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 126953 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 126957 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 126960 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 126964 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 126967 "powerpc.tcc"
				)
				{
#line 765 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltisb v" << vd << ", v" << vb << ", " << (int) simm;
					}
#line 126974 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 126979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 126982 "powerpc.tcc"
				>

				void
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 126989 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 126994 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127003 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127008 "powerpc.tcc"
				> *DecodeOpVspltisb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltisb<
#line 38 "ppc.isa"
					CONFIG
#line 127014 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127024 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127028 "powerpc.tcc"
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 127032 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127036 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127039 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127043 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127046 "powerpc.tcc"
				)
				{
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltish v" << vd << ", v" << vb << ", " << simm;
					}
#line 127053 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127061 "powerpc.tcc"
				>

				void
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 127068 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127073 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127082 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127087 "powerpc.tcc"
				> *DecodeOpVspltish(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltish<
#line 38 "ppc.isa"
					CONFIG
#line 127093 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127100 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127103 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127107 "powerpc.tcc"
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 127111 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127115 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127118 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127122 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127125 "powerpc.tcc"
				)
				{
#line 777 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltisw v" << vd << ", v" << vb << ", " << simm;
					}
#line 127132 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127137 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127140 "powerpc.tcc"
				>

				void
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 127147 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127152 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127161 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127166 "powerpc.tcc"
				> *DecodeOpVspltisw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltisw<
#line 38 "ppc.isa"
					CONFIG
#line 127172 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127179 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127182 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127186 "powerpc.tcc"
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 127190 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127194 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127197 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127201 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127204 "powerpc.tcc"
				)
				{
#line 783 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltiw v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 127211 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127219 "powerpc.tcc"
				>

				void
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 127226 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127231 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127237 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127240 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127245 "powerpc.tcc"
				> *DecodeOpVspltw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltw<
#line 38 "ppc.isa"
					CONFIG
#line 127251 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127261 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127265 "powerpc.tcc"
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 127269 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127273 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127276 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127280 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127283 "powerpc.tcc"
				)
				{
#line 789 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsr v" << vd << ", v" << va << ", v" << vb;
					}
#line 127290 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127298 "powerpc.tcc"
				>

				void
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 127305 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127310 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127319 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127324 "powerpc.tcc"
				> *DecodeOpVsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsr<
#line 38 "ppc.isa"
					CONFIG
#line 127330 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127340 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127344 "powerpc.tcc"
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 127348 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127352 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127355 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127359 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127362 "powerpc.tcc"
				)
				{
#line 795 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrab v" << vd << ", v" << va << ", v" << vb;
					}
#line 127369 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127377 "powerpc.tcc"
				>

				void
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 127384 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127389 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127398 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127403 "powerpc.tcc"
				> *DecodeOpVsrab(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrab<
#line 38 "ppc.isa"
					CONFIG
#line 127409 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127419 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127423 "powerpc.tcc"
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 127427 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127431 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127434 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127438 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127441 "powerpc.tcc"
				)
				{
#line 801 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrah v" << vd << ", v" << va << ", v" << vb;
					}
#line 127448 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127456 "powerpc.tcc"
				>

				void
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 127463 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127468 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127477 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127482 "powerpc.tcc"
				> *DecodeOpVsrah(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrah<
#line 38 "ppc.isa"
					CONFIG
#line 127488 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127498 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127502 "powerpc.tcc"
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 127506 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127510 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127513 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127517 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127520 "powerpc.tcc"
				)
				{
#line 807 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsraw v" << vd << ", v" << va << ", v" << vb;
					}
#line 127527 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127532 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127535 "powerpc.tcc"
				>

				void
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 127542 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127547 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127556 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127561 "powerpc.tcc"
				> *DecodeOpVsraw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsraw<
#line 38 "ppc.isa"
					CONFIG
#line 127567 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127577 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127581 "powerpc.tcc"
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 127585 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127589 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127592 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127596 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127599 "powerpc.tcc"
				)
				{
#line 813 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrb v" << vd << ", v" << va << ", v" << vb;
					}
#line 127606 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127614 "powerpc.tcc"
				>

				void
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 127621 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127626 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127635 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127640 "powerpc.tcc"
				> *DecodeOpVsrb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrb<
#line 38 "ppc.isa"
					CONFIG
#line 127646 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127656 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127660 "powerpc.tcc"
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 127664 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127668 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127671 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127675 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127678 "powerpc.tcc"
				)
				{
#line 819 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrh v" << vd << ", v" << va << ", v" << vb;
					}
#line 127685 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127693 "powerpc.tcc"
				>

				void
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 127700 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127705 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127714 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127719 "powerpc.tcc"
				> *DecodeOpVsrh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrh<
#line 38 "ppc.isa"
					CONFIG
#line 127725 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127735 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127739 "powerpc.tcc"
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 127743 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127747 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127750 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127754 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127757 "powerpc.tcc"
				)
				{
#line 825 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsro v" << vd << ", v" << va << ", v" << vb;
					}
#line 127764 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127769 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127772 "powerpc.tcc"
				>

				void
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 127779 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 127784 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127790 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127793 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127798 "powerpc.tcc"
				> *DecodeOpVsro(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsro<
#line 38 "ppc.isa"
					CONFIG
#line 127804 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127811 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127814 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127818 "powerpc.tcc"
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 127822 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127826 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127829 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127833 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127836 "powerpc.tcc"
				)
				{
#line 831 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrw v" << vd << ", v" << va << ", v" << vb;
					}
#line 127843 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127851 "powerpc.tcc"
				>

				void
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 127858 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127863 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127872 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127877 "powerpc.tcc"
				> *DecodeOpVsrw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrw<
#line 38 "ppc.isa"
					CONFIG
#line 127883 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127893 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127897 "powerpc.tcc"
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 127901 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127905 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127908 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127912 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127915 "powerpc.tcc"
				)
				{
#line 837 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubcuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 127922 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 127927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127930 "powerpc.tcc"
				>

				void
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 127937 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 127942 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 127948 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127951 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 127956 "powerpc.tcc"
				> *DecodeOpVsubcuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubcuw<
#line 38 "ppc.isa"
					CONFIG
#line 127962 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 127969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 127972 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 127976 "powerpc.tcc"
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 127980 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 127984 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 127987 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 127991 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 127994 "powerpc.tcc"
				)
				{
#line 843 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 128001 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128009 "powerpc.tcc"
				>

				void
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 128016 "powerpc.tcc"
				>::initialize_unit()
				{
#line 196 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }
#line 128021 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128027 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128030 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128035 "powerpc.tcc"
				> *DecodeOpVsubfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 128041 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128051 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128055 "powerpc.tcc"
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 128059 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128063 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128066 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128070 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128073 "powerpc.tcc"
				)
				{
#line 849 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubsbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128080 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128088 "powerpc.tcc"
				>

				void
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 128095 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128100 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128106 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128109 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128114 "powerpc.tcc"
				> *DecodeOpVsubsbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubsbs<
#line 38 "ppc.isa"
					CONFIG
#line 128120 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128127 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128130 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128134 "powerpc.tcc"
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 128138 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128142 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128145 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128149 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128152 "powerpc.tcc"
				)
				{
#line 855 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubshs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128159 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128167 "powerpc.tcc"
				>

				void
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 128174 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128179 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128185 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128188 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128193 "powerpc.tcc"
				> *DecodeOpVsubshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubshs<
#line 38 "ppc.isa"
					CONFIG
#line 128199 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128209 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128213 "powerpc.tcc"
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 128217 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128221 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128224 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128228 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128231 "powerpc.tcc"
				)
				{
#line 861 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128238 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128246 "powerpc.tcc"
				>

				void
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 128253 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128258 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128267 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128272 "powerpc.tcc"
				> *DecodeOpVsubsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubsws<
#line 38 "ppc.isa"
					CONFIG
#line 128278 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128288 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128292 "powerpc.tcc"
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 128296 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128300 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128303 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128307 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128310 "powerpc.tcc"
				)
				{
#line 867 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsububm v" << vd << ", v" << va << ", v" << vb;
					}
#line 128317 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128325 "powerpc.tcc"
				>

				void
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 128332 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128337 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128346 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128351 "powerpc.tcc"
				> *DecodeOpVsububm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsububm<
#line 38 "ppc.isa"
					CONFIG
#line 128357 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128367 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128371 "powerpc.tcc"
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 128375 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128379 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128382 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128386 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128389 "powerpc.tcc"
				)
				{
#line 873 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsububs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128396 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128404 "powerpc.tcc"
				>

				void
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 128411 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128416 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128422 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128425 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128430 "powerpc.tcc"
				> *DecodeOpVsububs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsububs<
#line 38 "ppc.isa"
					CONFIG
#line 128436 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128443 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128446 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128450 "powerpc.tcc"
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 128454 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128458 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128461 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128465 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128468 "powerpc.tcc"
				)
				{
#line 879 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuhm v" << vd << ", v" << va << ", v" << vb;
					}
#line 128475 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128483 "powerpc.tcc"
				>

				void
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 128490 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128495 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128501 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128504 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128509 "powerpc.tcc"
				> *DecodeOpVsubuhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuhm<
#line 38 "ppc.isa"
					CONFIG
#line 128515 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128525 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128529 "powerpc.tcc"
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 128533 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128537 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128540 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128544 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128547 "powerpc.tcc"
				)
				{
#line 885 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuhs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128554 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128562 "powerpc.tcc"
				>

				void
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 128569 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128574 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128583 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128588 "powerpc.tcc"
				> *DecodeOpVsubuhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuhs<
#line 38 "ppc.isa"
					CONFIG
#line 128594 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128601 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128604 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128608 "powerpc.tcc"
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 128612 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128616 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128619 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128623 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128626 "powerpc.tcc"
				)
				{
#line 891 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuwm v" << vd << ", v" << va << ", v" << vb;
					}
#line 128633 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128641 "powerpc.tcc"
				>

				void
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 128648 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128653 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128662 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128667 "powerpc.tcc"
				> *DecodeOpVsubuwm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuwm<
#line 38 "ppc.isa"
					CONFIG
#line 128673 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128680 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128683 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128687 "powerpc.tcc"
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 128691 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128695 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128698 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128702 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128705 "powerpc.tcc"
				)
				{
#line 897 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128712 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128720 "powerpc.tcc"
				>

				void
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 128727 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 128732 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128741 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128746 "powerpc.tcc"
				> *DecodeOpVsubuws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuws<
#line 38 "ppc.isa"
					CONFIG
#line 128752 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128762 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128766 "powerpc.tcc"
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 128770 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128774 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128777 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128781 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128784 "powerpc.tcc"
				)
				{
#line 903 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsumsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128791 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128796 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128799 "powerpc.tcc"
				>

				void
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 128806 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 128811 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128817 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128820 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128825 "powerpc.tcc"
				> *DecodeOpVsumsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsumsws<
#line 38 "ppc.isa"
					CONFIG
#line 128831 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128841 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128845 "powerpc.tcc"
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 128849 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128853 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128856 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128860 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128863 "powerpc.tcc"
				)
				{
#line 909 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum2sws v" << vd << ", v" << va << ", v" << vb;
					}
#line 128870 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128878 "powerpc.tcc"
				>

				void
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 128885 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 128890 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128899 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128904 "powerpc.tcc"
				> *DecodeOpVsum2sws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum2sws<
#line 38 "ppc.isa"
					CONFIG
#line 128910 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128920 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 128924 "powerpc.tcc"
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 128928 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 128932 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 128935 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 128939 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 128942 "powerpc.tcc"
				)
				{
#line 915 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4sbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 128949 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 128954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128957 "powerpc.tcc"
				>

				void
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 128964 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 128969 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 128975 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128978 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 128983 "powerpc.tcc"
				> *DecodeOpVsum4sbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4sbs<
#line 38 "ppc.isa"
					CONFIG
#line 128989 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 128996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 128999 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129003 "powerpc.tcc"
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 129007 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129011 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129014 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129018 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129021 "powerpc.tcc"
				)
				{
#line 921 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4shs v" << vd << ", v" << va << ", v" << vb;
					}
#line 129028 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129036 "powerpc.tcc"
				>

				void
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 129043 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 129048 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129057 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129062 "powerpc.tcc"
				> *DecodeOpVsum4shs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4shs<
#line 38 "ppc.isa"
					CONFIG
#line 129068 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129075 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129078 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129082 "powerpc.tcc"
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 129086 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129090 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129093 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129097 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129100 "powerpc.tcc"
				)
				{
#line 927 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4ubs v" << vd << ", v" << va << ", v" << vb;
					}
#line 129107 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129115 "powerpc.tcc"
				>

				void
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 129122 "powerpc.tcc"
				>::initialize_unit()
				{
#line 202 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }
#line 129127 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129133 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129136 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129141 "powerpc.tcc"
				> *DecodeOpVsum4ubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4ubs<
#line 38 "ppc.isa"
					CONFIG
#line 129147 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129157 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129161 "powerpc.tcc"
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 129165 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129169 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129172 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129176 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129179 "powerpc.tcc"
				)
				{
#line 933 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhpx v" << vd << ", v" << vb;
					}
#line 129186 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129194 "powerpc.tcc"
				>

				void
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 129201 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129206 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129215 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129220 "powerpc.tcc"
				> *DecodeOpVupkhpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhpx<
#line 38 "ppc.isa"
					CONFIG
#line 129226 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129236 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129240 "powerpc.tcc"
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 129244 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129248 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129251 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129255 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129258 "powerpc.tcc"
				)
				{
#line 939 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhsb v" << vd << ", v" << vb;
					}
#line 129265 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129270 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129273 "powerpc.tcc"
				>

				void
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 129280 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129285 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129294 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129299 "powerpc.tcc"
				> *DecodeOpVupkhsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhsb<
#line 38 "ppc.isa"
					CONFIG
#line 129305 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129315 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129319 "powerpc.tcc"
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 129323 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129327 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129330 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129334 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129337 "powerpc.tcc"
				)
				{
#line 945 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhsh v" << vd << ", v" << vb;
					}
#line 129344 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129352 "powerpc.tcc"
				>

				void
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 129359 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129364 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129373 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129378 "powerpc.tcc"
				> *DecodeOpVupkhsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhsh<
#line 38 "ppc.isa"
					CONFIG
#line 129384 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129391 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129394 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129398 "powerpc.tcc"
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 129402 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129406 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129409 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129413 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129416 "powerpc.tcc"
				)
				{
#line 951 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklpx v" << vd << ", v" << vb;
					}
#line 129423 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129431 "powerpc.tcc"
				>

				void
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 129438 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129443 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129449 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129452 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129457 "powerpc.tcc"
				> *DecodeOpVupklpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklpx<
#line 38 "ppc.isa"
					CONFIG
#line 129463 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129470 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129473 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129477 "powerpc.tcc"
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 129481 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129485 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129488 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129492 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129495 "powerpc.tcc"
				)
				{
#line 957 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklsb v" << vd << ", v" << vb;
					}
#line 129502 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129507 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129510 "powerpc.tcc"
				>

				void
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 129517 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129522 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129531 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129536 "powerpc.tcc"
				> *DecodeOpVupklsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklsb<
#line 38 "ppc.isa"
					CONFIG
#line 129542 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129549 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129552 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129556 "powerpc.tcc"
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 129560 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129564 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129567 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129571 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129574 "powerpc.tcc"
				)
				{
#line 963 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklsh v" << vd << ", v" << vb;
					}
#line 129581 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129589 "powerpc.tcc"
				>

				void
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 129596 "powerpc.tcc"
				>::initialize_unit()
				{
#line 198 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }
#line 129601 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129607 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129610 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129615 "powerpc.tcc"
				> *DecodeOpVupklsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklsh<
#line 38 "ppc.isa"
					CONFIG
#line 129621 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129631 "powerpc.tcc"
				>
#line 64 "ppc.isa"
				void
#line 129635 "powerpc.tcc"
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 129639 "powerpc.tcc"
				>::disasm(
#line 64 "ppc.isa"
				typename CONFIG::STATE *
#line 129643 "powerpc.tcc"
#line 64 "ppc.isa"
				cpu
#line 129646 "powerpc.tcc"
				,
#line 64 "ppc.isa"
				ostream&
#line 129650 "powerpc.tcc"
#line 64 "ppc.isa"
				os
#line 129653 "powerpc.tcc"
				)
				{
#line 969 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vxor v" << vd << ", v" << va << ", v" << vb;
					}
#line 129660 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 129665 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129668 "powerpc.tcc"
				>

				void
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 129675 "powerpc.tcc"
				>::initialize_unit()
				{
#line 200 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
					{ Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }
#line 129680 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 129686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129689 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129694 "powerpc.tcc"
				> *DecodeOpVxor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVxor<
#line 38 "ppc.isa"
					CONFIG
#line 129700 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129710 "powerpc.tcc"
				>
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 129715 "powerpc.tcc"
				>::OpAdd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129719 "powerpc.tcc"
				>(code, addr, "add")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129735 "powerpc.tcc"
				>
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 129740 "powerpc.tcc"
				>::OpAddc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129744 "powerpc.tcc"
				>(code, addr, "addc")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129757 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129760 "powerpc.tcc"
				>
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 129765 "powerpc.tcc"
				>::OpAdde(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129769 "powerpc.tcc"
				>(code, addr, "adde")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129785 "powerpc.tcc"
				>
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 129790 "powerpc.tcc"
				>::OpAddi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129794 "powerpc.tcc"
				>(code, addr, "addi")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129808 "powerpc.tcc"
				>
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 129813 "powerpc.tcc"
				>::OpAddic(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129817 "powerpc.tcc"
				>(code, addr, "addic")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129831 "powerpc.tcc"
				>
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 129836 "powerpc.tcc"
				>::OpAddic_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129840 "powerpc.tcc"
				>(code, addr, "addic_")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129854 "powerpc.tcc"
				>
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 129859 "powerpc.tcc"
				>::OpAddis(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129863 "powerpc.tcc"
				>(code, addr, "addis")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 129874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129877 "powerpc.tcc"
				>
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 129882 "powerpc.tcc"
				>::OpAddme(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129886 "powerpc.tcc"
				>(code, addr, "addme")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129901 "powerpc.tcc"
				>
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 129906 "powerpc.tcc"
				>::OpAddze(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129910 "powerpc.tcc"
				>(code, addr, "addze")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129925 "powerpc.tcc"
				>
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 129930 "powerpc.tcc"
				>::OpDivw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129934 "powerpc.tcc"
				>(code, addr, "divw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129950 "powerpc.tcc"
				>
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 129955 "powerpc.tcc"
				>::OpDivwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129959 "powerpc.tcc"
				>(code, addr, "divwu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129972 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129975 "powerpc.tcc"
				>
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 129980 "powerpc.tcc"
				>::OpMulhw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 129984 "powerpc.tcc"
				>(code, addr, "mulhw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 129996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 129999 "powerpc.tcc"
				>
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 130004 "powerpc.tcc"
				>::OpMulhwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130008 "powerpc.tcc"
				>(code, addr, "mulhwu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130020 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130023 "powerpc.tcc"
				>
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 130028 "powerpc.tcc"
				>::OpMulli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130032 "powerpc.tcc"
				>(code, addr, "mulli")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130043 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130046 "powerpc.tcc"
				>
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 130051 "powerpc.tcc"
				>::OpMullw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130055 "powerpc.tcc"
				>(code, addr, "mullw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130071 "powerpc.tcc"
				>
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 130076 "powerpc.tcc"
				>::OpNeg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130080 "powerpc.tcc"
				>(code, addr, "neg")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130095 "powerpc.tcc"
				>
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 130100 "powerpc.tcc"
				>::OpSubf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130104 "powerpc.tcc"
				>(code, addr, "subf")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130120 "powerpc.tcc"
				>
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 130125 "powerpc.tcc"
				>::OpSubfc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130129 "powerpc.tcc"
				>(code, addr, "subfc")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130145 "powerpc.tcc"
				>
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 130150 "powerpc.tcc"
				>::OpSubfe(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130154 "powerpc.tcc"
				>(code, addr, "subfe")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130170 "powerpc.tcc"
				>
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 130175 "powerpc.tcc"
				>::OpSubfic(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130179 "powerpc.tcc"
				>(code, addr, "subfic")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130193 "powerpc.tcc"
				>
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 130198 "powerpc.tcc"
				>::OpSubfme(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130202 "powerpc.tcc"
				>(code, addr, "subfme")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130217 "powerpc.tcc"
				>
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 130222 "powerpc.tcc"
				>::OpSubfze(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130226 "powerpc.tcc"
				>(code, addr, "subfze")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130241 "powerpc.tcc"
				>
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 130246 "powerpc.tcc"
				>::OpCmp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130250 "powerpc.tcc"
				>(code, addr, "cmp")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130262 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130265 "powerpc.tcc"
				>
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 130270 "powerpc.tcc"
				>::OpCmpi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130274 "powerpc.tcc"
				>(code, addr, "cmpi")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130289 "powerpc.tcc"
				>
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 130294 "powerpc.tcc"
				>::OpCmpl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130298 "powerpc.tcc"
				>(code, addr, "cmpl")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130313 "powerpc.tcc"
				>
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 130318 "powerpc.tcc"
				>::OpCmpli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130322 "powerpc.tcc"
				>(code, addr, "cmpli")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130334 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130337 "powerpc.tcc"
				>
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 130342 "powerpc.tcc"
				>::OpAnd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130346 "powerpc.tcc"
				>(code, addr, "and")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130361 "powerpc.tcc"
				>
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 130366 "powerpc.tcc"
				>::OpAndc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130370 "powerpc.tcc"
				>(code, addr, "andc")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130385 "powerpc.tcc"
				>
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 130390 "powerpc.tcc"
				>::OpAndi_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130394 "powerpc.tcc"
				>(code, addr, "andi_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130408 "powerpc.tcc"
				>
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 130413 "powerpc.tcc"
				>::OpAndis_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130417 "powerpc.tcc"
				>(code, addr, "andis_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 130428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130431 "powerpc.tcc"
				>
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 130436 "powerpc.tcc"
				>::OpCntlzw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130440 "powerpc.tcc"
				>(code, addr, "cntlzw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130454 "powerpc.tcc"
				>
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 130459 "powerpc.tcc"
				>::OpEqv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130463 "powerpc.tcc"
				>(code, addr, "eqv")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130478 "powerpc.tcc"
				>
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 130483 "powerpc.tcc"
				>::OpExtsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130487 "powerpc.tcc"
				>(code, addr, "extsb")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130501 "powerpc.tcc"
				>
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 130506 "powerpc.tcc"
				>::OpExtsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130510 "powerpc.tcc"
				>(code, addr, "extsh")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130524 "powerpc.tcc"
				>
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 130529 "powerpc.tcc"
				>::OpNand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130533 "powerpc.tcc"
				>(code, addr, "nand")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130548 "powerpc.tcc"
				>
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 130553 "powerpc.tcc"
				>::OpNor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130557 "powerpc.tcc"
				>(code, addr, "nor")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130569 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130572 "powerpc.tcc"
				>
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 130577 "powerpc.tcc"
				>::OpOr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130581 "powerpc.tcc"
				>(code, addr, "or")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130596 "powerpc.tcc"
				>
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 130601 "powerpc.tcc"
				>::OpOrc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130605 "powerpc.tcc"
				>(code, addr, "orc")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130620 "powerpc.tcc"
				>
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 130625 "powerpc.tcc"
				>::OpOri(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130629 "powerpc.tcc"
				>(code, addr, "ori")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130640 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130643 "powerpc.tcc"
				>
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 130648 "powerpc.tcc"
				>::OpOris(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130652 "powerpc.tcc"
				>(code, addr, "oris")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 130663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130666 "powerpc.tcc"
				>
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 130671 "powerpc.tcc"
				>::OpXor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130675 "powerpc.tcc"
				>(code, addr, "xor")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130690 "powerpc.tcc"
				>
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 130695 "powerpc.tcc"
				>::OpXori(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130699 "powerpc.tcc"
				>(code, addr, "xori")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130713 "powerpc.tcc"
				>
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 130718 "powerpc.tcc"
				>::OpXoris(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130722 "powerpc.tcc"
				>(code, addr, "xoris")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 130733 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130736 "powerpc.tcc"
				>
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 130741 "powerpc.tcc"
				>::OpRlwimi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130745 "powerpc.tcc"
				>(code, addr, "rlwimi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130762 "powerpc.tcc"
				>
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 130767 "powerpc.tcc"
				>::OpRlwinm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130771 "powerpc.tcc"
				>(code, addr, "rlwinm")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130788 "powerpc.tcc"
				>
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 130793 "powerpc.tcc"
				>::OpRlwnm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130797 "powerpc.tcc"
				>(code, addr, "rlwnm")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130811 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130814 "powerpc.tcc"
				>
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 130819 "powerpc.tcc"
				>::OpSlw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130823 "powerpc.tcc"
				>(code, addr, "slw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130835 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130838 "powerpc.tcc"
				>
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 130843 "powerpc.tcc"
				>::OpSraw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130847 "powerpc.tcc"
				>(code, addr, "sraw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130862 "powerpc.tcc"
				>
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 130867 "powerpc.tcc"
				>::OpSrawi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130871 "powerpc.tcc"
				>(code, addr, "srawi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130883 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130886 "powerpc.tcc"
				>
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 130891 "powerpc.tcc"
				>::OpSrw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130895 "powerpc.tcc"
				>(code, addr, "srw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130907 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130910 "powerpc.tcc"
				>
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 130915 "powerpc.tcc"
				>::OpFadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130919 "powerpc.tcc"
				>(code, addr, "fadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130934 "powerpc.tcc"
				>
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 130939 "powerpc.tcc"
				>::OpFadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130943 "powerpc.tcc"
				>(code, addr, "fadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130958 "powerpc.tcc"
				>
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 130963 "powerpc.tcc"
				>::OpFdiv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130967 "powerpc.tcc"
				>(code, addr, "fdiv")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 130979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 130982 "powerpc.tcc"
				>
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 130987 "powerpc.tcc"
				>::OpFdivs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 130991 "powerpc.tcc"
				>(code, addr, "fdivs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131006 "powerpc.tcc"
				>
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 131011 "powerpc.tcc"
				>::OpFmul(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131015 "powerpc.tcc"
				>(code, addr, "fmul")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131027 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131030 "powerpc.tcc"
				>
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 131035 "powerpc.tcc"
				>::OpFmuls(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131039 "powerpc.tcc"
				>(code, addr, "fmuls")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131054 "powerpc.tcc"
				>
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 131059 "powerpc.tcc"
				>::OpFres(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131063 "powerpc.tcc"
				>(code, addr, "fres")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131077 "powerpc.tcc"
				>
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 131082 "powerpc.tcc"
				>::OpFrsqrte(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131086 "powerpc.tcc"
				>(code, addr, "frsqrte")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131100 "powerpc.tcc"
				>
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 131105 "powerpc.tcc"
				>::OpFsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131109 "powerpc.tcc"
				>(code, addr, "fsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131124 "powerpc.tcc"
				>
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 131129 "powerpc.tcc"
				>::OpFsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131133 "powerpc.tcc"
				>(code, addr, "fsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131148 "powerpc.tcc"
				>
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 131153 "powerpc.tcc"
				>::OpFsel(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131157 "powerpc.tcc"
				>(code, addr, "fsel")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131173 "powerpc.tcc"
				>
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 131178 "powerpc.tcc"
				>::OpFsqrt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131182 "powerpc.tcc"
				>(code, addr, "fsqrt")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131196 "powerpc.tcc"
				>
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 131201 "powerpc.tcc"
				>::OpFsqrts(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131205 "powerpc.tcc"
				>(code, addr, "fsqrts")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131219 "powerpc.tcc"
				>
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 131224 "powerpc.tcc"
				>::OpFmadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131228 "powerpc.tcc"
				>(code, addr, "fmadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131244 "powerpc.tcc"
				>
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 131249 "powerpc.tcc"
				>::OpFmadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131253 "powerpc.tcc"
				>(code, addr, "fmadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131269 "powerpc.tcc"
				>
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 131274 "powerpc.tcc"
				>::OpFmsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131278 "powerpc.tcc"
				>(code, addr, "fmsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131294 "powerpc.tcc"
				>
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 131299 "powerpc.tcc"
				>::OpFmsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131303 "powerpc.tcc"
				>(code, addr, "fmsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131319 "powerpc.tcc"
				>
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 131324 "powerpc.tcc"
				>::OpFnmadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131328 "powerpc.tcc"
				>(code, addr, "fnmadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131341 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131344 "powerpc.tcc"
				>
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 131349 "powerpc.tcc"
				>::OpFnmadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131353 "powerpc.tcc"
				>(code, addr, "fnmadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131369 "powerpc.tcc"
				>
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 131374 "powerpc.tcc"
				>::OpFnmsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131378 "powerpc.tcc"
				>(code, addr, "fnmsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131391 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131394 "powerpc.tcc"
				>
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 131399 "powerpc.tcc"
				>::OpFnmsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131403 "powerpc.tcc"
				>(code, addr, "fnmsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131419 "powerpc.tcc"
				>
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 131424 "powerpc.tcc"
				>::OpFcmpo(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131428 "powerpc.tcc"
				>(code, addr, "fcmpo")
				{
					crfD = ((code >> 23) & 0x7);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131442 "powerpc.tcc"
				>
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 131447 "powerpc.tcc"
				>::OpFcmpu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131451 "powerpc.tcc"
				>(code, addr, "fcmpu")
				{
					crfD = ((code >> 23) & 0x7);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131465 "powerpc.tcc"
				>
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 131470 "powerpc.tcc"
				>::OpFctiw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131474 "powerpc.tcc"
				>(code, addr, "fctiw")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131488 "powerpc.tcc"
				>
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 131493 "powerpc.tcc"
				>::OpFctiwz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131497 "powerpc.tcc"
				>(code, addr, "fctiwz")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131511 "powerpc.tcc"
				>
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 131516 "powerpc.tcc"
				>::OpFrsp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131520 "powerpc.tcc"
				>(code, addr, "frsp")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131534 "powerpc.tcc"
				>
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 131539 "powerpc.tcc"
				>::OpFabs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131543 "powerpc.tcc"
				>(code, addr, "fabs")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131557 "powerpc.tcc"
				>
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 131562 "powerpc.tcc"
				>::OpFmr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131566 "powerpc.tcc"
				>(code, addr, "fmr")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131580 "powerpc.tcc"
				>
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 131585 "powerpc.tcc"
				>::OpFnabs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131589 "powerpc.tcc"
				>(code, addr, "fnabs")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131603 "powerpc.tcc"
				>
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 131608 "powerpc.tcc"
				>::OpFneg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131612 "powerpc.tcc"
				>(code, addr, "fneg")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131623 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131626 "powerpc.tcc"
				>
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 131631 "powerpc.tcc"
				>::OpMcrfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131635 "powerpc.tcc"
				>(code, addr, "mcrfs")
				{
					crfD = ((code >> 23) & 0x7);
					crfS = ((code >> 18) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131645 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131648 "powerpc.tcc"
				>
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 131653 "powerpc.tcc"
				>::OpMffs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131657 "powerpc.tcc"
				>(code, addr, "mffs")
				{
					fd = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131670 "powerpc.tcc"
				>
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 131675 "powerpc.tcc"
				>::OpMtfsb0(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131679 "powerpc.tcc"
				>(code, addr, "mtfsb0")
				{
					crbD = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131692 "powerpc.tcc"
				>
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 131697 "powerpc.tcc"
				>::OpMtfsb1(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131701 "powerpc.tcc"
				>(code, addr, "mtfsb1")
				{
					crbD = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131714 "powerpc.tcc"
				>
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 131719 "powerpc.tcc"
				>::OpMtfsf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131723 "powerpc.tcc"
				>(code, addr, "mtfsf")
				{
					fm = ((code >> 17) & 0xff);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131737 "powerpc.tcc"
				>
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 131742 "powerpc.tcc"
				>::OpMtfsfi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131746 "powerpc.tcc"
				>(code, addr, "mtfsfi")
				{
					crfD = ((code >> 23) & 0x7);
					imm = ((code >> 12) & 0xf);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131757 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131760 "powerpc.tcc"
				>
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 131765 "powerpc.tcc"
				>::OpB(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131769 "powerpc.tcc"
				>(code, addr, "b")
				{
					li = (((((int32_t)(code >> 2)) & 0xffffff) << 8) >> 8) << 2;
					aa = ((code >> 1) & 0x1);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131783 "powerpc.tcc"
				>
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 131788 "powerpc.tcc"
				>::OpBc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131792 "powerpc.tcc"
				>(code, addr, "bc")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					bd = (((((int32_t)(code >> 2)) & 0x3fff) << 18) >> 18) << 2;
					aa = ((code >> 1) & 0x1);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131808 "powerpc.tcc"
				>
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 131813 "powerpc.tcc"
				>::OpBcctr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131817 "powerpc.tcc"
				>(code, addr, "bcctr")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131831 "powerpc.tcc"
				>
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 131836 "powerpc.tcc"
				>::OpBclr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131840 "powerpc.tcc"
				>(code, addr, "bclr")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131854 "powerpc.tcc"
				>
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 131859 "powerpc.tcc"
				>::OpCrand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131863 "powerpc.tcc"
				>(code, addr, "crand")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131877 "powerpc.tcc"
				>
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 131882 "powerpc.tcc"
				>::OpCrandc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131886 "powerpc.tcc"
				>(code, addr, "crandc")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131900 "powerpc.tcc"
				>
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 131905 "powerpc.tcc"
				>::OpCreqv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131909 "powerpc.tcc"
				>(code, addr, "creqv")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131923 "powerpc.tcc"
				>
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 131928 "powerpc.tcc"
				>::OpCrnand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131932 "powerpc.tcc"
				>(code, addr, "crnand")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131943 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131946 "powerpc.tcc"
				>
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 131951 "powerpc.tcc"
				>::OpCrnor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131955 "powerpc.tcc"
				>(code, addr, "crnor")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131969 "powerpc.tcc"
				>
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 131974 "powerpc.tcc"
				>::OpCror(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 131978 "powerpc.tcc"
				>(code, addr, "cror")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 131989 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 131992 "powerpc.tcc"
				>
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 131997 "powerpc.tcc"
				>::OpCrorc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132001 "powerpc.tcc"
				>(code, addr, "crorc")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132015 "powerpc.tcc"
				>
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 132020 "powerpc.tcc"
				>::OpCrxor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132024 "powerpc.tcc"
				>(code, addr, "crxor")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132035 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132038 "powerpc.tcc"
				>
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 132043 "powerpc.tcc"
				>::OpMcrf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132047 "powerpc.tcc"
				>(code, addr, "mcrf")
				{
					crfD = ((code >> 23) & 0x7);
					crfS = ((code >> 18) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132060 "powerpc.tcc"
				>
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 132065 "powerpc.tcc"
				>::OpLbz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132069 "powerpc.tcc"
				>(code, addr, "lbz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132083 "powerpc.tcc"
				>
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 132088 "powerpc.tcc"
				>::OpLbzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132092 "powerpc.tcc"
				>(code, addr, "lbzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132103 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132106 "powerpc.tcc"
				>
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 132111 "powerpc.tcc"
				>::OpLbzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132115 "powerpc.tcc"
				>(code, addr, "lbzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132129 "powerpc.tcc"
				>
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 132134 "powerpc.tcc"
				>::OpLbzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132138 "powerpc.tcc"
				>(code, addr, "lbzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132152 "powerpc.tcc"
				>
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 132157 "powerpc.tcc"
				>::OpLha(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132161 "powerpc.tcc"
				>(code, addr, "lha")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132172 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132175 "powerpc.tcc"
				>
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 132180 "powerpc.tcc"
				>::OpLhau(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132184 "powerpc.tcc"
				>(code, addr, "lhau")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132198 "powerpc.tcc"
				>
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 132203 "powerpc.tcc"
				>::OpLhaux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132207 "powerpc.tcc"
				>(code, addr, "lhaux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132218 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132221 "powerpc.tcc"
				>
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 132226 "powerpc.tcc"
				>::OpLhax(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132230 "powerpc.tcc"
				>(code, addr, "lhax")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132244 "powerpc.tcc"
				>
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 132249 "powerpc.tcc"
				>::OpLhz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132253 "powerpc.tcc"
				>(code, addr, "lhz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132267 "powerpc.tcc"
				>
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 132272 "powerpc.tcc"
				>::OpLhzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132276 "powerpc.tcc"
				>(code, addr, "lhzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132287 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132290 "powerpc.tcc"
				>
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 132295 "powerpc.tcc"
				>::OpLhzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132299 "powerpc.tcc"
				>(code, addr, "lhzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132313 "powerpc.tcc"
				>
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 132318 "powerpc.tcc"
				>::OpLhzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132322 "powerpc.tcc"
				>(code, addr, "lhzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132336 "powerpc.tcc"
				>
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 132341 "powerpc.tcc"
				>::OpLwz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132345 "powerpc.tcc"
				>(code, addr, "lwz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132356 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132359 "powerpc.tcc"
				>
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 132364 "powerpc.tcc"
				>::OpLwzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132368 "powerpc.tcc"
				>(code, addr, "lwzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132382 "powerpc.tcc"
				>
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 132387 "powerpc.tcc"
				>::OpLwzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132391 "powerpc.tcc"
				>(code, addr, "lwzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132405 "powerpc.tcc"
				>
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 132410 "powerpc.tcc"
				>::OpLwzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132414 "powerpc.tcc"
				>(code, addr, "lwzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132428 "powerpc.tcc"
				>
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 132433 "powerpc.tcc"
				>::OpStb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132437 "powerpc.tcc"
				>(code, addr, "stb")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132451 "powerpc.tcc"
				>
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 132456 "powerpc.tcc"
				>::OpStbu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132460 "powerpc.tcc"
				>(code, addr, "stbu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132474 "powerpc.tcc"
				>
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 132479 "powerpc.tcc"
				>::OpStbux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132483 "powerpc.tcc"
				>(code, addr, "stbux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132494 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132497 "powerpc.tcc"
				>
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 132502 "powerpc.tcc"
				>::OpStbx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132506 "powerpc.tcc"
				>(code, addr, "stbx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132520 "powerpc.tcc"
				>
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 132525 "powerpc.tcc"
				>::OpSth(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132529 "powerpc.tcc"
				>(code, addr, "sth")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132543 "powerpc.tcc"
				>
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 132548 "powerpc.tcc"
				>::OpSthu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132552 "powerpc.tcc"
				>(code, addr, "sthu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132566 "powerpc.tcc"
				>
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 132571 "powerpc.tcc"
				>::OpSthux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132575 "powerpc.tcc"
				>(code, addr, "sthux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132589 "powerpc.tcc"
				>
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 132594 "powerpc.tcc"
				>::OpSthx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132598 "powerpc.tcc"
				>(code, addr, "sthx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132609 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132612 "powerpc.tcc"
				>
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 132617 "powerpc.tcc"
				>::OpStw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132621 "powerpc.tcc"
				>(code, addr, "stw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132635 "powerpc.tcc"
				>
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 132640 "powerpc.tcc"
				>::OpStwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132644 "powerpc.tcc"
				>(code, addr, "stwu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132658 "powerpc.tcc"
				>
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 132663 "powerpc.tcc"
				>::OpStwux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132667 "powerpc.tcc"
				>(code, addr, "stwux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132681 "powerpc.tcc"
				>
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 132686 "powerpc.tcc"
				>::OpStwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132690 "powerpc.tcc"
				>(code, addr, "stwx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132701 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132704 "powerpc.tcc"
				>
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132709 "powerpc.tcc"
				>::OpLhbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132713 "powerpc.tcc"
				>(code, addr, "lhbrx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132727 "powerpc.tcc"
				>
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132732 "powerpc.tcc"
				>::OpLwbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132736 "powerpc.tcc"
				>(code, addr, "lwbrx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132750 "powerpc.tcc"
				>
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132755 "powerpc.tcc"
				>::OpSthbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132759 "powerpc.tcc"
				>(code, addr, "sthbrx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132773 "powerpc.tcc"
				>
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 132778 "powerpc.tcc"
				>::OpStwbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132782 "powerpc.tcc"
				>(code, addr, "stwbrx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132796 "powerpc.tcc"
				>
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 132801 "powerpc.tcc"
				>::OpLswi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132805 "powerpc.tcc"
				>(code, addr, "lswi")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					nb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132819 "powerpc.tcc"
				>
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 132824 "powerpc.tcc"
				>::OpLswx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132828 "powerpc.tcc"
				>(code, addr, "lswx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132842 "powerpc.tcc"
				>
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 132847 "powerpc.tcc"
				>::OpStswi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132851 "powerpc.tcc"
				>(code, addr, "stswi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					nb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132865 "powerpc.tcc"
				>
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 132870 "powerpc.tcc"
				>::OpStswx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132874 "powerpc.tcc"
				>(code, addr, "stswx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132888 "powerpc.tcc"
				>
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 132893 "powerpc.tcc"
				>::OpLmw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132897 "powerpc.tcc"
				>(code, addr, "lmw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132908 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132911 "powerpc.tcc"
				>
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 132916 "powerpc.tcc"
				>::OpStmw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132920 "powerpc.tcc"
				>(code, addr, "stmw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132931 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132934 "powerpc.tcc"
				>
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 132939 "powerpc.tcc"
				>::OpLfd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132943 "powerpc.tcc"
				>(code, addr, "lfd")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132957 "powerpc.tcc"
				>
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 132962 "powerpc.tcc"
				>::OpLfdu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132966 "powerpc.tcc"
				>(code, addr, "lfdu")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 132977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 132980 "powerpc.tcc"
				>
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 132985 "powerpc.tcc"
				>::OpLfdux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 132989 "powerpc.tcc"
				>(code, addr, "lfdux")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133003 "powerpc.tcc"
				>
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 133008 "powerpc.tcc"
				>::OpLfdx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133012 "powerpc.tcc"
				>(code, addr, "lfdx")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133026 "powerpc.tcc"
				>
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 133031 "powerpc.tcc"
				>::OpLfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133035 "powerpc.tcc"
				>(code, addr, "lfs")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133049 "powerpc.tcc"
				>
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 133054 "powerpc.tcc"
				>::OpLfsu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133058 "powerpc.tcc"
				>(code, addr, "lfsu")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133072 "powerpc.tcc"
				>
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 133077 "powerpc.tcc"
				>::OpLfsux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133081 "powerpc.tcc"
				>(code, addr, "lfsux")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133095 "powerpc.tcc"
				>
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 133100 "powerpc.tcc"
				>::OpLfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133104 "powerpc.tcc"
				>(code, addr, "lfsx")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133118 "powerpc.tcc"
				>
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 133123 "powerpc.tcc"
				>::OpStfd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133127 "powerpc.tcc"
				>(code, addr, "stfd")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133138 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133141 "powerpc.tcc"
				>
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 133146 "powerpc.tcc"
				>::OpStfdu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133150 "powerpc.tcc"
				>(code, addr, "stfdu")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133164 "powerpc.tcc"
				>
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 133169 "powerpc.tcc"
				>::OpStfdux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133173 "powerpc.tcc"
				>(code, addr, "stfdux")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133184 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133187 "powerpc.tcc"
				>
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 133192 "powerpc.tcc"
				>::OpStfdx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133196 "powerpc.tcc"
				>(code, addr, "stfdx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133210 "powerpc.tcc"
				>
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 133215 "powerpc.tcc"
				>::OpStfiwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133219 "powerpc.tcc"
				>(code, addr, "stfiwx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133233 "powerpc.tcc"
				>
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 133238 "powerpc.tcc"
				>::OpStfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133242 "powerpc.tcc"
				>(code, addr, "stfs")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133256 "powerpc.tcc"
				>
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 133261 "powerpc.tcc"
				>::OpStfsu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133265 "powerpc.tcc"
				>(code, addr, "stfsu")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133279 "powerpc.tcc"
				>
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 133284 "powerpc.tcc"
				>::OpStfsux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133288 "powerpc.tcc"
				>(code, addr, "stfsux")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133302 "powerpc.tcc"
				>
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 133307 "powerpc.tcc"
				>::OpStfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133311 "powerpc.tcc"
				>(code, addr, "stfsx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133325 "powerpc.tcc"
				>
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 133330 "powerpc.tcc"
				>::OpDcba(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133334 "powerpc.tcc"
				>(code, addr, "dcba")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133347 "powerpc.tcc"
				>
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 133352 "powerpc.tcc"
				>::OpDcbf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133356 "powerpc.tcc"
				>(code, addr, "dcbf")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133369 "powerpc.tcc"
				>
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 133374 "powerpc.tcc"
				>::OpDcbi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133378 "powerpc.tcc"
				>(code, addr, "dcbi")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133391 "powerpc.tcc"
				>
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 133396 "powerpc.tcc"
				>::OpDcbst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133400 "powerpc.tcc"
				>(code, addr, "dcbst")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133413 "powerpc.tcc"
				>
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 133418 "powerpc.tcc"
				>::OpDcbt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133422 "powerpc.tcc"
				>(code, addr, "dcbt")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133432 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133435 "powerpc.tcc"
				>
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 133440 "powerpc.tcc"
				>::OpDcbtst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133444 "powerpc.tcc"
				>(code, addr, "dcbtst")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133454 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133457 "powerpc.tcc"
				>
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 133462 "powerpc.tcc"
				>::OpDcbz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133466 "powerpc.tcc"
				>(code, addr, "dcbz")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133476 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133479 "powerpc.tcc"
				>
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 133484 "powerpc.tcc"
				>::OpIcbi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133488 "powerpc.tcc"
				>(code, addr, "icbi")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133501 "powerpc.tcc"
				>
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 133506 "powerpc.tcc"
				>::OpTlbia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133510 "powerpc.tcc"
				>(code, addr, "tlbia")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133521 "powerpc.tcc"
				>
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 133526 "powerpc.tcc"
				>::OpTlbie(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133530 "powerpc.tcc"
				>(code, addr, "tlbie")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133542 "powerpc.tcc"
				>
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 133547 "powerpc.tcc"
				>::OpTlbsync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133551 "powerpc.tcc"
				>(code, addr, "tlbsync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133562 "powerpc.tcc"
				>
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 133567 "powerpc.tcc"
				>::OpTlbld(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133571 "powerpc.tcc"
				>(code, addr, "tlbld")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133583 "powerpc.tcc"
				>
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 133588 "powerpc.tcc"
				>::OpTlbli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133592 "powerpc.tcc"
				>(code, addr, "tlbli")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133601 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133604 "powerpc.tcc"
				>
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 133609 "powerpc.tcc"
				>::OpEciwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133613 "powerpc.tcc"
				>(code, addr, "eciwx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133627 "powerpc.tcc"
				>
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 133632 "powerpc.tcc"
				>::OpEcowx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133636 "powerpc.tcc"
				>(code, addr, "ecowx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133650 "powerpc.tcc"
				>
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 133655 "powerpc.tcc"
				>::OpEieio(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133659 "powerpc.tcc"
				>(code, addr, "eieio")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133670 "powerpc.tcc"
				>
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 133675 "powerpc.tcc"
				>::OpIsync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133679 "powerpc.tcc"
				>(code, addr, "isync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133690 "powerpc.tcc"
				>
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 133695 "powerpc.tcc"
				>::OpLwarx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133699 "powerpc.tcc"
				>(code, addr, "lwarx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133713 "powerpc.tcc"
				>
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 133718 "powerpc.tcc"
				>::OpStwcx_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133722 "powerpc.tcc"
				>(code, addr, "stwcx_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133733 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133736 "powerpc.tcc"
				>
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 133741 "powerpc.tcc"
				>::OpSync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133745 "powerpc.tcc"
				>(code, addr, "sync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133753 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133756 "powerpc.tcc"
				>
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 133761 "powerpc.tcc"
				>::OpSc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133765 "powerpc.tcc"
				>(code, addr, "sc")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133776 "powerpc.tcc"
				>
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 133781 "powerpc.tcc"
				>::OpRfi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133785 "powerpc.tcc"
				>(code, addr, "rfi")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 133793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133796 "powerpc.tcc"
				>
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 133801 "powerpc.tcc"
				>::OpTw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133805 "powerpc.tcc"
				>(code, addr, "tw")
				{
					to = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133819 "powerpc.tcc"
				>
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 133824 "powerpc.tcc"
				>::OpTwi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133828 "powerpc.tcc"
				>(code, addr, "twi")
				{
					to = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133842 "powerpc.tcc"
				>
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 133847 "powerpc.tcc"
				>::OpMcrxr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133851 "powerpc.tcc"
				>(code, addr, "mcrxr")
				{
					crfD = ((code >> 23) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133860 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133863 "powerpc.tcc"
				>
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 133868 "powerpc.tcc"
				>::OpMfcr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133872 "powerpc.tcc"
				>(code, addr, "mfcr")
				{
					rd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133884 "powerpc.tcc"
				>
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 133889 "powerpc.tcc"
				>::OpMfmsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133893 "powerpc.tcc"
				>(code, addr, "mfmsr")
				{
					rd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133905 "powerpc.tcc"
				>
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 133910 "powerpc.tcc"
				>::OpMfspr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133914 "powerpc.tcc"
				>(code, addr, "mfspr")
				{
					rd = ((code >> 21) & 0x1f);
					spr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133924 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133927 "powerpc.tcc"
				>
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 133932 "powerpc.tcc"
				>::OpMtspr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133936 "powerpc.tcc"
				>(code, addr, "mtspr")
				{
					rs = ((code >> 21) & 0x1f);
					spr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133949 "powerpc.tcc"
				>
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 133954 "powerpc.tcc"
				>::OpMftb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133958 "powerpc.tcc"
				>(code, addr, "mftb")
				{
					rd = ((code >> 21) & 0x1f);
					tbr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133971 "powerpc.tcc"
				>
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 133976 "powerpc.tcc"
				>::OpMtcrf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 133980 "powerpc.tcc"
				>(code, addr, "mtcrf")
				{
					rs = ((code >> 21) & 0x1f);
					crm = ((code >> 12) & 0xff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 133990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 133993 "powerpc.tcc"
				>
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 133998 "powerpc.tcc"
				>::OpMtmsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134002 "powerpc.tcc"
				>(code, addr, "mtmsr")
				{
					rs = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134014 "powerpc.tcc"
				>
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 134019 "powerpc.tcc"
				>::OpMfsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134023 "powerpc.tcc"
				>(code, addr, "mfsr")
				{
					rd = ((code >> 21) & 0x1f);
					sr = ((code >> 16) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134036 "powerpc.tcc"
				>
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 134041 "powerpc.tcc"
				>::OpMfsrin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134045 "powerpc.tcc"
				>(code, addr, "mfsrin")
				{
					rd = ((code >> 21) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134055 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134058 "powerpc.tcc"
				>
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 134063 "powerpc.tcc"
				>::OpMtsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134067 "powerpc.tcc"
				>(code, addr, "mtsr")
				{
					rs = ((code >> 21) & 0x1f);
					sr = ((code >> 16) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134080 "powerpc.tcc"
				>
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 134085 "powerpc.tcc"
				>::OpMtsrin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134089 "powerpc.tcc"
				>(code, addr, "mtsrin")
				{
					rs = ((code >> 21) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134102 "powerpc.tcc"
				>
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 134107 "powerpc.tcc"
				>::OpDss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134111 "powerpc.tcc"
				>(code, addr, "dss")
				{
					strm = ((code >> 21) & 0x3);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134120 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134123 "powerpc.tcc"
				>
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 134128 "powerpc.tcc"
				>::OpDssall(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134132 "powerpc.tcc"
				>(code, addr, "dssall")
				{
					strm = ((code >> 21) & 0x3);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134144 "powerpc.tcc"
				>
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 134149 "powerpc.tcc"
				>::OpDst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134153 "powerpc.tcc"
				>(code, addr, "dst")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134167 "powerpc.tcc"
				>
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 134172 "powerpc.tcc"
				>::OpDstst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134176 "powerpc.tcc"
				>(code, addr, "dstst")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134190 "powerpc.tcc"
				>
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 134195 "powerpc.tcc"
				>::OpDststt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134199 "powerpc.tcc"
				>(code, addr, "dststt")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134213 "powerpc.tcc"
				>
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 134218 "powerpc.tcc"
				>::OpDstt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134222 "powerpc.tcc"
				>(code, addr, "dstt")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134236 "powerpc.tcc"
				>
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 134241 "powerpc.tcc"
				>::OpLvebx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134245 "powerpc.tcc"
				>(code, addr, "lvebx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134259 "powerpc.tcc"
				>
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 134264 "powerpc.tcc"
				>::OpLvehx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134268 "powerpc.tcc"
				>(code, addr, "lvehx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134282 "powerpc.tcc"
				>
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 134287 "powerpc.tcc"
				>::OpLvewx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134291 "powerpc.tcc"
				>(code, addr, "lvewx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134305 "powerpc.tcc"
				>
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 134310 "powerpc.tcc"
				>::OpLvsl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134314 "powerpc.tcc"
				>(code, addr, "lvsl")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134328 "powerpc.tcc"
				>
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 134333 "powerpc.tcc"
				>::OpLvsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134337 "powerpc.tcc"
				>(code, addr, "lvsr")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134351 "powerpc.tcc"
				>
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 134356 "powerpc.tcc"
				>::OpLvx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134360 "powerpc.tcc"
				>(code, addr, "lvx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134374 "powerpc.tcc"
				>
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 134379 "powerpc.tcc"
				>::OpLvxl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134383 "powerpc.tcc"
				>(code, addr, "lvxl")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134397 "powerpc.tcc"
				>
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 134402 "powerpc.tcc"
				>::OpMfvscr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134406 "powerpc.tcc"
				>(code, addr, "mfvscr")
				{
					vd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134418 "powerpc.tcc"
				>
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 134423 "powerpc.tcc"
				>::OpMtvscr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134427 "powerpc.tcc"
				>(code, addr, "mtvscr")
				{
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134436 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134439 "powerpc.tcc"
				>
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 134444 "powerpc.tcc"
				>::OpStvebx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134448 "powerpc.tcc"
				>(code, addr, "stvebx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134462 "powerpc.tcc"
				>
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 134467 "powerpc.tcc"
				>::OpStvehx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134471 "powerpc.tcc"
				>(code, addr, "stvehx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134482 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134485 "powerpc.tcc"
				>
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 134490 "powerpc.tcc"
				>::OpStvewx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134494 "powerpc.tcc"
				>(code, addr, "stvewx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134508 "powerpc.tcc"
				>
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 134513 "powerpc.tcc"
				>::OpStvx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134517 "powerpc.tcc"
				>(code, addr, "stvx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134531 "powerpc.tcc"
				>
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 134536 "powerpc.tcc"
				>::OpStvxl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134540 "powerpc.tcc"
				>(code, addr, "stvxl")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134554 "powerpc.tcc"
				>
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 134559 "powerpc.tcc"
				>::OpVaddcuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134563 "powerpc.tcc"
				>(code, addr, "vaddcuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134577 "powerpc.tcc"
				>
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 134582 "powerpc.tcc"
				>::OpVaddfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134586 "powerpc.tcc"
				>(code, addr, "vaddfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134600 "powerpc.tcc"
				>
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 134605 "powerpc.tcc"
				>::OpVaddsbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134609 "powerpc.tcc"
				>(code, addr, "vaddsbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134623 "powerpc.tcc"
				>
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 134628 "powerpc.tcc"
				>::OpVaddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134632 "powerpc.tcc"
				>(code, addr, "vaddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134646 "powerpc.tcc"
				>
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 134651 "powerpc.tcc"
				>::OpVaddsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134655 "powerpc.tcc"
				>(code, addr, "vaddsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134669 "powerpc.tcc"
				>
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 134674 "powerpc.tcc"
				>::OpVaddubm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134678 "powerpc.tcc"
				>(code, addr, "vaddubm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134692 "powerpc.tcc"
				>
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 134697 "powerpc.tcc"
				>::OpVaddubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134701 "powerpc.tcc"
				>(code, addr, "vaddubs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134715 "powerpc.tcc"
				>
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 134720 "powerpc.tcc"
				>::OpVadduhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134724 "powerpc.tcc"
				>(code, addr, "vadduhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134735 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134738 "powerpc.tcc"
				>
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 134743 "powerpc.tcc"
				>::OpVadduhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134747 "powerpc.tcc"
				>(code, addr, "vadduhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134758 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134761 "powerpc.tcc"
				>
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 134766 "powerpc.tcc"
				>::OpVadduwm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134770 "powerpc.tcc"
				>(code, addr, "vadduwm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134781 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134784 "powerpc.tcc"
				>
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 134789 "powerpc.tcc"
				>::OpVadduws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134793 "powerpc.tcc"
				>(code, addr, "vadduws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134807 "powerpc.tcc"
				>
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 134812 "powerpc.tcc"
				>::OpVand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134816 "powerpc.tcc"
				>(code, addr, "vand")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134827 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134830 "powerpc.tcc"
				>
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 134835 "powerpc.tcc"
				>::OpVandc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134839 "powerpc.tcc"
				>(code, addr, "vandc")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134853 "powerpc.tcc"
				>
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 134858 "powerpc.tcc"
				>::OpVavgsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134862 "powerpc.tcc"
				>(code, addr, "vavgsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134873 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134876 "powerpc.tcc"
				>
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 134881 "powerpc.tcc"
				>::OpVavgsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134885 "powerpc.tcc"
				>(code, addr, "vavgsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134899 "powerpc.tcc"
				>
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 134904 "powerpc.tcc"
				>::OpVavgsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134908 "powerpc.tcc"
				>(code, addr, "vavgsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134922 "powerpc.tcc"
				>
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 134927 "powerpc.tcc"
				>::OpVavgub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134931 "powerpc.tcc"
				>(code, addr, "vavgub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134942 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134945 "powerpc.tcc"
				>
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 134950 "powerpc.tcc"
				>::OpVavguh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134954 "powerpc.tcc"
				>(code, addr, "vavguh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134968 "powerpc.tcc"
				>
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 134973 "powerpc.tcc"
				>::OpVavguw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 134977 "powerpc.tcc"
				>(code, addr, "vavguw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 134988 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 134991 "powerpc.tcc"
				>
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 134996 "powerpc.tcc"
				>::OpVcfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135000 "powerpc.tcc"
				>(code, addr, "vcfsx")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135014 "powerpc.tcc"
				>
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 135019 "powerpc.tcc"
				>::OpVcfux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135023 "powerpc.tcc"
				>(code, addr, "vcfux")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135037 "powerpc.tcc"
				>
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 135042 "powerpc.tcc"
				>::OpVcmpbfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135046 "powerpc.tcc"
				>(code, addr, "vcmpbfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135061 "powerpc.tcc"
				>
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 135066 "powerpc.tcc"
				>::OpVcmpeqfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135070 "powerpc.tcc"
				>(code, addr, "vcmpeqfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135085 "powerpc.tcc"
				>
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 135090 "powerpc.tcc"
				>::OpVcmpequb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135094 "powerpc.tcc"
				>(code, addr, "vcmpequb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135106 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135109 "powerpc.tcc"
				>
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 135114 "powerpc.tcc"
				>::OpVcmpequh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135118 "powerpc.tcc"
				>(code, addr, "vcmpequh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135130 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135133 "powerpc.tcc"
				>
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 135138 "powerpc.tcc"
				>::OpVcmpequw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135142 "powerpc.tcc"
				>(code, addr, "vcmpequw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135157 "powerpc.tcc"
				>
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 135162 "powerpc.tcc"
				>::OpVcmpgefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135166 "powerpc.tcc"
				>(code, addr, "vcmpgefp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135181 "powerpc.tcc"
				>
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 135186 "powerpc.tcc"
				>::OpVcmpgtfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135190 "powerpc.tcc"
				>(code, addr, "vcmpgtfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135202 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135205 "powerpc.tcc"
				>
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 135210 "powerpc.tcc"
				>::OpVcmpgtsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135214 "powerpc.tcc"
				>(code, addr, "vcmpgtsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135229 "powerpc.tcc"
				>
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 135234 "powerpc.tcc"
				>::OpVcmpgtsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135238 "powerpc.tcc"
				>(code, addr, "vcmpgtsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135253 "powerpc.tcc"
				>
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 135258 "powerpc.tcc"
				>::OpVcmpgtsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135262 "powerpc.tcc"
				>(code, addr, "vcmpgtsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135274 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135277 "powerpc.tcc"
				>
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 135282 "powerpc.tcc"
				>::OpVcmpgtub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135286 "powerpc.tcc"
				>(code, addr, "vcmpgtub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135301 "powerpc.tcc"
				>
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 135306 "powerpc.tcc"
				>::OpVcmpgtuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135310 "powerpc.tcc"
				>(code, addr, "vcmpgtuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135325 "powerpc.tcc"
				>
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 135330 "powerpc.tcc"
				>::OpVcmpgtuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135334 "powerpc.tcc"
				>(code, addr, "vcmpgtuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135349 "powerpc.tcc"
				>
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 135354 "powerpc.tcc"
				>::OpVctsxs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135358 "powerpc.tcc"
				>(code, addr, "vctsxs")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135372 "powerpc.tcc"
				>
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 135377 "powerpc.tcc"
				>::OpVctuxs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135381 "powerpc.tcc"
				>(code, addr, "vctuxs")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135395 "powerpc.tcc"
				>
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 135400 "powerpc.tcc"
				>::OpVexptefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135404 "powerpc.tcc"
				>(code, addr, "vexptefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135417 "powerpc.tcc"
				>
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 135422 "powerpc.tcc"
				>::OpVlogefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135426 "powerpc.tcc"
				>(code, addr, "vlogefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135436 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135439 "powerpc.tcc"
				>
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 135444 "powerpc.tcc"
				>::OpVmaddfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135448 "powerpc.tcc"
				>(code, addr, "vmaddfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135463 "powerpc.tcc"
				>
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 135468 "powerpc.tcc"
				>::OpVmaxfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135472 "powerpc.tcc"
				>(code, addr, "vmaxfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135483 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135486 "powerpc.tcc"
				>
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 135491 "powerpc.tcc"
				>::OpVmaxsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135495 "powerpc.tcc"
				>(code, addr, "vmaxsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135509 "powerpc.tcc"
				>
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 135514 "powerpc.tcc"
				>::OpVmaxsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135518 "powerpc.tcc"
				>(code, addr, "vmaxsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135532 "powerpc.tcc"
				>
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 135537 "powerpc.tcc"
				>::OpVmaxsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135541 "powerpc.tcc"
				>(code, addr, "vmaxsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135555 "powerpc.tcc"
				>
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 135560 "powerpc.tcc"
				>::OpVmaxub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135564 "powerpc.tcc"
				>(code, addr, "vmaxub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135578 "powerpc.tcc"
				>
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 135583 "powerpc.tcc"
				>::OpVmaxuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135587 "powerpc.tcc"
				>(code, addr, "vmaxuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135598 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135601 "powerpc.tcc"
				>
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 135606 "powerpc.tcc"
				>::OpVmaxuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135610 "powerpc.tcc"
				>(code, addr, "vmaxuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135621 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135624 "powerpc.tcc"
				>
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 135629 "powerpc.tcc"
				>::OpVmhaddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135633 "powerpc.tcc"
				>(code, addr, "vmhaddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135645 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135648 "powerpc.tcc"
				>
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 135653 "powerpc.tcc"
				>::OpVmhraddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135657 "powerpc.tcc"
				>(code, addr, "vmhraddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135669 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135672 "powerpc.tcc"
				>
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 135677 "powerpc.tcc"
				>::OpVminfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135681 "powerpc.tcc"
				>(code, addr, "vminfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135695 "powerpc.tcc"
				>
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 135700 "powerpc.tcc"
				>::OpVminsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135704 "powerpc.tcc"
				>(code, addr, "vminsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135718 "powerpc.tcc"
				>
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 135723 "powerpc.tcc"
				>::OpVminsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135727 "powerpc.tcc"
				>(code, addr, "vminsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135741 "powerpc.tcc"
				>
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 135746 "powerpc.tcc"
				>::OpVminsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135750 "powerpc.tcc"
				>(code, addr, "vminsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135761 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135764 "powerpc.tcc"
				>
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 135769 "powerpc.tcc"
				>::OpVminub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135773 "powerpc.tcc"
				>(code, addr, "vminub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135787 "powerpc.tcc"
				>
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 135792 "powerpc.tcc"
				>::OpVminuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135796 "powerpc.tcc"
				>(code, addr, "vminuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135810 "powerpc.tcc"
				>
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 135815 "powerpc.tcc"
				>::OpVminuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135819 "powerpc.tcc"
				>(code, addr, "vminuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135833 "powerpc.tcc"
				>
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 135838 "powerpc.tcc"
				>::OpVmladduhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135842 "powerpc.tcc"
				>(code, addr, "vmladduhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135857 "powerpc.tcc"
				>
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 135862 "powerpc.tcc"
				>::OpVmrghb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135866 "powerpc.tcc"
				>(code, addr, "vmrghb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135880 "powerpc.tcc"
				>
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 135885 "powerpc.tcc"
				>::OpVmrghh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135889 "powerpc.tcc"
				>(code, addr, "vmrghh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135903 "powerpc.tcc"
				>
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 135908 "powerpc.tcc"
				>::OpVmrghw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135912 "powerpc.tcc"
				>(code, addr, "vmrghw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135926 "powerpc.tcc"
				>
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 135931 "powerpc.tcc"
				>::OpVmrglb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135935 "powerpc.tcc"
				>(code, addr, "vmrglb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135949 "powerpc.tcc"
				>
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 135954 "powerpc.tcc"
				>::OpVmrglh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135958 "powerpc.tcc"
				>(code, addr, "vmrglh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135972 "powerpc.tcc"
				>
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 135977 "powerpc.tcc"
				>::OpVmrglw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 135981 "powerpc.tcc"
				>(code, addr, "vmrglw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 135992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 135995 "powerpc.tcc"
				>
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 136000 "powerpc.tcc"
				>::OpVmsummbm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136004 "powerpc.tcc"
				>(code, addr, "vmsummbm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136019 "powerpc.tcc"
				>
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 136024 "powerpc.tcc"
				>::OpVmsumshm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136028 "powerpc.tcc"
				>(code, addr, "vmsumshm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136040 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136043 "powerpc.tcc"
				>
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 136048 "powerpc.tcc"
				>::OpVmsumshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136052 "powerpc.tcc"
				>(code, addr, "vmsumshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136067 "powerpc.tcc"
				>
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 136072 "powerpc.tcc"
				>::OpVmsumubm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136076 "powerpc.tcc"
				>(code, addr, "vmsumubm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136091 "powerpc.tcc"
				>
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 136096 "powerpc.tcc"
				>::OpVmsumuhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136100 "powerpc.tcc"
				>(code, addr, "vmsumuhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136115 "powerpc.tcc"
				>
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 136120 "powerpc.tcc"
				>::OpVmsumuhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136124 "powerpc.tcc"
				>(code, addr, "vmsumuhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136139 "powerpc.tcc"
				>
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 136144 "powerpc.tcc"
				>::OpVmulesb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136148 "powerpc.tcc"
				>(code, addr, "vmulesb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136159 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136162 "powerpc.tcc"
				>
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 136167 "powerpc.tcc"
				>::OpVmulesh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136171 "powerpc.tcc"
				>(code, addr, "vmulesh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136182 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136185 "powerpc.tcc"
				>
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 136190 "powerpc.tcc"
				>::OpVmuleub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136194 "powerpc.tcc"
				>(code, addr, "vmuleub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136208 "powerpc.tcc"
				>
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 136213 "powerpc.tcc"
				>::OpVmuleuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136217 "powerpc.tcc"
				>(code, addr, "vmuleuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136228 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136231 "powerpc.tcc"
				>
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 136236 "powerpc.tcc"
				>::OpVmulosb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136240 "powerpc.tcc"
				>(code, addr, "vmulosb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136251 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136254 "powerpc.tcc"
				>
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 136259 "powerpc.tcc"
				>::OpVmulosh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136263 "powerpc.tcc"
				>(code, addr, "vmulosh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136274 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136277 "powerpc.tcc"
				>
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 136282 "powerpc.tcc"
				>::OpVmuloub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136286 "powerpc.tcc"
				>(code, addr, "vmuloub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136297 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136300 "powerpc.tcc"
				>
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 136305 "powerpc.tcc"
				>::OpVmulouh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136309 "powerpc.tcc"
				>(code, addr, "vmulouh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136323 "powerpc.tcc"
				>
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 136328 "powerpc.tcc"
				>::OpVnmsubfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136332 "powerpc.tcc"
				>(code, addr, "vnmsubfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136347 "powerpc.tcc"
				>
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 136352 "powerpc.tcc"
				>::OpVnor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136356 "powerpc.tcc"
				>(code, addr, "vnor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136370 "powerpc.tcc"
				>
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 136375 "powerpc.tcc"
				>::OpVor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136379 "powerpc.tcc"
				>(code, addr, "vor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136393 "powerpc.tcc"
				>
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 136398 "powerpc.tcc"
				>::OpVperm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136402 "powerpc.tcc"
				>(code, addr, "vperm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136417 "powerpc.tcc"
				>
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 136422 "powerpc.tcc"
				>::OpVpkpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136426 "powerpc.tcc"
				>(code, addr, "vpkpx")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136440 "powerpc.tcc"
				>
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 136445 "powerpc.tcc"
				>::OpVpkshss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136449 "powerpc.tcc"
				>(code, addr, "vpkshss")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136463 "powerpc.tcc"
				>
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 136468 "powerpc.tcc"
				>::OpVpkshus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136472 "powerpc.tcc"
				>(code, addr, "vpkshus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136483 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136486 "powerpc.tcc"
				>
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 136491 "powerpc.tcc"
				>::OpVpkswss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136495 "powerpc.tcc"
				>(code, addr, "vpkswss")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136506 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136509 "powerpc.tcc"
				>
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 136514 "powerpc.tcc"
				>::OpVpkswus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136518 "powerpc.tcc"
				>(code, addr, "vpkswus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136532 "powerpc.tcc"
				>
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 136537 "powerpc.tcc"
				>::OpVpkuhum(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136541 "powerpc.tcc"
				>(code, addr, "vpkuhum")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136555 "powerpc.tcc"
				>
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 136560 "powerpc.tcc"
				>::OpVpkuhus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136564 "powerpc.tcc"
				>(code, addr, "vpkuhus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136578 "powerpc.tcc"
				>
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 136583 "powerpc.tcc"
				>::OpVpkuwum(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136587 "powerpc.tcc"
				>(code, addr, "vpkuwum")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136598 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136601 "powerpc.tcc"
				>
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 136606 "powerpc.tcc"
				>::OpVpkuwus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136610 "powerpc.tcc"
				>(code, addr, "vpkuwus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136621 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136624 "powerpc.tcc"
				>
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 136629 "powerpc.tcc"
				>::OpVrefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136633 "powerpc.tcc"
				>(code, addr, "vrefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136646 "powerpc.tcc"
				>
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 136651 "powerpc.tcc"
				>::OpVrfim(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136655 "powerpc.tcc"
				>(code, addr, "vrfim")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136665 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136668 "powerpc.tcc"
				>
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 136673 "powerpc.tcc"
				>::OpVrfin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136677 "powerpc.tcc"
				>(code, addr, "vrfin")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136687 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136690 "powerpc.tcc"
				>
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 136695 "powerpc.tcc"
				>::OpVrfip(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136699 "powerpc.tcc"
				>(code, addr, "vrfip")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136709 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136712 "powerpc.tcc"
				>
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 136717 "powerpc.tcc"
				>::OpVrfiz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136721 "powerpc.tcc"
				>(code, addr, "vrfiz")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136734 "powerpc.tcc"
				>
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 136739 "powerpc.tcc"
				>::OpVrlb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136743 "powerpc.tcc"
				>(code, addr, "vrlb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136757 "powerpc.tcc"
				>
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 136762 "powerpc.tcc"
				>::OpVrlh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136766 "powerpc.tcc"
				>(code, addr, "vrlh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136780 "powerpc.tcc"
				>
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 136785 "powerpc.tcc"
				>::OpVrlw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136789 "powerpc.tcc"
				>(code, addr, "vrlw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136800 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136803 "powerpc.tcc"
				>
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 136808 "powerpc.tcc"
				>::OpVrsqrtefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136812 "powerpc.tcc"
				>(code, addr, "vrsqrtefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136825 "powerpc.tcc"
				>
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 136830 "powerpc.tcc"
				>::OpVsel(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136834 "powerpc.tcc"
				>(code, addr, "vsel")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136849 "powerpc.tcc"
				>
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 136854 "powerpc.tcc"
				>::OpVsl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136858 "powerpc.tcc"
				>(code, addr, "vsl")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136872 "powerpc.tcc"
				>
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 136877 "powerpc.tcc"
				>::OpVslb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136881 "powerpc.tcc"
				>(code, addr, "vslb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136895 "powerpc.tcc"
				>
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 136900 "powerpc.tcc"
				>::OpVsldoi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136904 "powerpc.tcc"
				>(code, addr, "vsldoi")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					sh = ((code >> 6) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136919 "powerpc.tcc"
				>
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 136924 "powerpc.tcc"
				>::OpVslh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136928 "powerpc.tcc"
				>(code, addr, "vslh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136939 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136942 "powerpc.tcc"
				>
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 136947 "powerpc.tcc"
				>::OpVslo(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136951 "powerpc.tcc"
				>(code, addr, "vslo")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136962 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136965 "powerpc.tcc"
				>
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 136970 "powerpc.tcc"
				>::OpVslw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136974 "powerpc.tcc"
				>(code, addr, "vslw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 136985 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 136988 "powerpc.tcc"
				>
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 136993 "powerpc.tcc"
				>::OpVspltb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 136997 "powerpc.tcc"
				>(code, addr, "vspltb")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137008 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137011 "powerpc.tcc"
				>
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 137016 "powerpc.tcc"
				>::OpVsplth(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137020 "powerpc.tcc"
				>(code, addr, "vsplth")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137034 "powerpc.tcc"
				>
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 137039 "powerpc.tcc"
				>::OpVspltisb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137043 "powerpc.tcc"
				>(code, addr, "vspltisb")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137057 "powerpc.tcc"
				>
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 137062 "powerpc.tcc"
				>::OpVspltish(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137066 "powerpc.tcc"
				>(code, addr, "vspltish")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137080 "powerpc.tcc"
				>
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 137085 "powerpc.tcc"
				>::OpVspltisw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137089 "powerpc.tcc"
				>(code, addr, "vspltisw")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137100 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137103 "powerpc.tcc"
				>
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 137108 "powerpc.tcc"
				>::OpVspltw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137112 "powerpc.tcc"
				>(code, addr, "vspltw")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137123 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137126 "powerpc.tcc"
				>
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 137131 "powerpc.tcc"
				>::OpVsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137135 "powerpc.tcc"
				>(code, addr, "vsr")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137149 "powerpc.tcc"
				>
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 137154 "powerpc.tcc"
				>::OpVsrab(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137158 "powerpc.tcc"
				>(code, addr, "vsrab")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137172 "powerpc.tcc"
				>
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 137177 "powerpc.tcc"
				>::OpVsrah(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137181 "powerpc.tcc"
				>(code, addr, "vsrah")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137195 "powerpc.tcc"
				>
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 137200 "powerpc.tcc"
				>::OpVsraw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137204 "powerpc.tcc"
				>(code, addr, "vsraw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137215 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137218 "powerpc.tcc"
				>
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 137223 "powerpc.tcc"
				>::OpVsrb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137227 "powerpc.tcc"
				>(code, addr, "vsrb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137238 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137241 "powerpc.tcc"
				>
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 137246 "powerpc.tcc"
				>::OpVsrh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137250 "powerpc.tcc"
				>(code, addr, "vsrh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137261 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137264 "powerpc.tcc"
				>
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 137269 "powerpc.tcc"
				>::OpVsro(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137273 "powerpc.tcc"
				>(code, addr, "vsro")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137284 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137287 "powerpc.tcc"
				>
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 137292 "powerpc.tcc"
				>::OpVsrw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137296 "powerpc.tcc"
				>(code, addr, "vsrw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137310 "powerpc.tcc"
				>
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 137315 "powerpc.tcc"
				>::OpVsubcuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137319 "powerpc.tcc"
				>(code, addr, "vsubcuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137333 "powerpc.tcc"
				>
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 137338 "powerpc.tcc"
				>::OpVsubfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137342 "powerpc.tcc"
				>(code, addr, "vsubfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137356 "powerpc.tcc"
				>
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 137361 "powerpc.tcc"
				>::OpVsubsbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137365 "powerpc.tcc"
				>(code, addr, "vsubsbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137376 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137379 "powerpc.tcc"
				>
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 137384 "powerpc.tcc"
				>::OpVsubshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137388 "powerpc.tcc"
				>(code, addr, "vsubshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137399 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137402 "powerpc.tcc"
				>
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 137407 "powerpc.tcc"
				>::OpVsubsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137411 "powerpc.tcc"
				>(code, addr, "vsubsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137422 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137425 "powerpc.tcc"
				>
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 137430 "powerpc.tcc"
				>::OpVsububm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137434 "powerpc.tcc"
				>(code, addr, "vsububm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137448 "powerpc.tcc"
				>
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 137453 "powerpc.tcc"
				>::OpVsububs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137457 "powerpc.tcc"
				>(code, addr, "vsububs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137471 "powerpc.tcc"
				>
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 137476 "powerpc.tcc"
				>::OpVsubuhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137480 "powerpc.tcc"
				>(code, addr, "vsubuhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137494 "powerpc.tcc"
				>
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 137499 "powerpc.tcc"
				>::OpVsubuhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137503 "powerpc.tcc"
				>(code, addr, "vsubuhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137514 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137517 "powerpc.tcc"
				>
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 137522 "powerpc.tcc"
				>::OpVsubuwm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137526 "powerpc.tcc"
				>(code, addr, "vsubuwm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137540 "powerpc.tcc"
				>
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 137545 "powerpc.tcc"
				>::OpVsubuws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137549 "powerpc.tcc"
				>(code, addr, "vsubuws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137563 "powerpc.tcc"
				>
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 137568 "powerpc.tcc"
				>::OpVsumsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137572 "powerpc.tcc"
				>(code, addr, "vsumsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137586 "powerpc.tcc"
				>
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 137591 "powerpc.tcc"
				>::OpVsum2sws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137595 "powerpc.tcc"
				>(code, addr, "vsum2sws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137609 "powerpc.tcc"
				>
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 137614 "powerpc.tcc"
				>::OpVsum4sbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137618 "powerpc.tcc"
				>(code, addr, "vsum4sbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137632 "powerpc.tcc"
				>
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 137637 "powerpc.tcc"
				>::OpVsum4shs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137641 "powerpc.tcc"
				>(code, addr, "vsum4shs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137655 "powerpc.tcc"
				>
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 137660 "powerpc.tcc"
				>::OpVsum4ubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137664 "powerpc.tcc"
				>(code, addr, "vsum4ubs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137675 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137678 "powerpc.tcc"
				>
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 137683 "powerpc.tcc"
				>::OpVupkhpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137687 "powerpc.tcc"
				>(code, addr, "vupkhpx")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137700 "powerpc.tcc"
				>
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 137705 "powerpc.tcc"
				>::OpVupkhsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137709 "powerpc.tcc"
				>(code, addr, "vupkhsb")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137719 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137722 "powerpc.tcc"
				>
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 137727 "powerpc.tcc"
				>::OpVupkhsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137731 "powerpc.tcc"
				>(code, addr, "vupkhsh")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137744 "powerpc.tcc"
				>
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 137749 "powerpc.tcc"
				>::OpVupklpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137753 "powerpc.tcc"
				>(code, addr, "vupklpx")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137766 "powerpc.tcc"
				>
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 137771 "powerpc.tcc"
				>::OpVupklsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137775 "powerpc.tcc"
				>(code, addr, "vupklsb")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137788 "powerpc.tcc"
				>
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 137793 "powerpc.tcc"
				>::OpVupklsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137797 "powerpc.tcc"
				>(code, addr, "vupklsh")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137810 "powerpc.tcc"
				>
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 137815 "powerpc.tcc"
				>::OpVxor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137819 "powerpc.tcc"
				>(code, addr, "vxor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 137830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137833 "powerpc.tcc"
				>
				DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 137838 "powerpc.tcc"
				>::DecodeMapPage(typename CONFIG::address_t key)
				{
					this->key = key;
					memset(operation, 0, sizeof(operation));
					next = 0;
				}

				template <
#line 38 "ppc.isa"
				class
#line 137849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137852 "powerpc.tcc"
				>
				DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 137857 "powerpc.tcc"
				>::~DecodeMapPage()
				{
					unsigned int idx;
					for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
					delete operation[idx];
				}

				template <
#line 38 "ppc.isa"
				class
#line 137868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137871 "powerpc.tcc"
				>
				DecodeTableEntry<
#line 38 "ppc.isa"
				CONFIG
#line 137876 "powerpc.tcc"
				>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 38 "ppc.isa"
				CONFIG
#line 137880 "powerpc.tcc"
				> *(*decode)(CodeType, typename CONFIG::address_t))
				{
					this->opcode = opcode;
					this->opcode_mask = opcode_mask;
					this->decode = decode;
				}

				template <
#line 38 "ppc.isa"
				class
#line 137891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 137894 "powerpc.tcc"
				>
				Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 137899 "powerpc.tcc"
				>::Decoder()
				: is_little_endian( false ), mru_page( 0 )
				{
					memset(decode_hash_table, 0, sizeof(decode_hash_table));
					if(
#line 967 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137907 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137911 "powerpc.tcc"
					>(0x100004c4UL, 0xfc0007ffUL, DecodeOpVxor<
#line 38 "ppc.isa"
					CONFIG
#line 137915 "powerpc.tcc"
					>));
					if(
#line 961 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137920 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137924 "powerpc.tcc"
					>(0x100002ceUL, 0xfc1f07ffUL, DecodeOpVupklsh<
#line 38 "ppc.isa"
					CONFIG
#line 137928 "powerpc.tcc"
					>));
					if(
#line 955 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137933 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137937 "powerpc.tcc"
					>(0x1000028eUL, 0xfc1f07ffUL, DecodeOpVupklsb<
#line 38 "ppc.isa"
					CONFIG
#line 137941 "powerpc.tcc"
					>));
					if(
#line 949 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137946 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137950 "powerpc.tcc"
					>(0x100003ceUL, 0xfc1f07ffUL, DecodeOpVupklpx<
#line 38 "ppc.isa"
					CONFIG
#line 137954 "powerpc.tcc"
					>));
					if(
#line 943 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137959 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137963 "powerpc.tcc"
					>(0x1000024eUL, 0xfc1f07ffUL, DecodeOpVupkhsh<
#line 38 "ppc.isa"
					CONFIG
#line 137967 "powerpc.tcc"
					>));
					if(
#line 937 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137972 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137976 "powerpc.tcc"
					>(0x1000020eUL, 0xfc1f07ffUL, DecodeOpVupkhsb<
#line 38 "ppc.isa"
					CONFIG
#line 137980 "powerpc.tcc"
					>));
					if(
#line 931 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137985 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 137989 "powerpc.tcc"
					>(0x1000034eUL, 0xfc1f07ffUL, DecodeOpVupkhpx<
#line 38 "ppc.isa"
					CONFIG
#line 137993 "powerpc.tcc"
					>));
					if(
#line 925 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 137998 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138002 "powerpc.tcc"
					>(0x10000608UL, 0xfc0007ffUL, DecodeOpVsum4ubs<
#line 38 "ppc.isa"
					CONFIG
#line 138006 "powerpc.tcc"
					>));
					if(
#line 919 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138011 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138015 "powerpc.tcc"
					>(0x10000648UL, 0xfc0007ffUL, DecodeOpVsum4shs<
#line 38 "ppc.isa"
					CONFIG
#line 138019 "powerpc.tcc"
					>));
					if(
#line 913 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138024 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138028 "powerpc.tcc"
					>(0x10000708UL, 0xfc0007ffUL, DecodeOpVsum4sbs<
#line 38 "ppc.isa"
					CONFIG
#line 138032 "powerpc.tcc"
					>));
					if(
#line 907 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138037 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138041 "powerpc.tcc"
					>(0x10000688UL, 0xfc0007ffUL, DecodeOpVsum2sws<
#line 38 "ppc.isa"
					CONFIG
#line 138045 "powerpc.tcc"
					>));
					if(
#line 901 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138050 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138054 "powerpc.tcc"
					>(0x10000788UL, 0xfc0007ffUL, DecodeOpVsumsws<
#line 38 "ppc.isa"
					CONFIG
#line 138058 "powerpc.tcc"
					>));
					if(
#line 895 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138063 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138067 "powerpc.tcc"
					>(0x10000680UL, 0xfc0007ffUL, DecodeOpVsubuws<
#line 38 "ppc.isa"
					CONFIG
#line 138071 "powerpc.tcc"
					>));
					if(
#line 889 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138076 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138080 "powerpc.tcc"
					>(0x10000480UL, 0xfc0007ffUL, DecodeOpVsubuwm<
#line 38 "ppc.isa"
					CONFIG
#line 138084 "powerpc.tcc"
					>));
					if(
#line 883 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138089 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138093 "powerpc.tcc"
					>(0x10000640UL, 0xfc0007ffUL, DecodeOpVsubuhs<
#line 38 "ppc.isa"
					CONFIG
#line 138097 "powerpc.tcc"
					>));
					if(
#line 877 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138102 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138106 "powerpc.tcc"
					>(0x10000440UL, 0xfc0007ffUL, DecodeOpVsubuhm<
#line 38 "ppc.isa"
					CONFIG
#line 138110 "powerpc.tcc"
					>));
					if(
#line 871 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138115 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138119 "powerpc.tcc"
					>(0x10000600UL, 0xfc0007ffUL, DecodeOpVsububs<
#line 38 "ppc.isa"
					CONFIG
#line 138123 "powerpc.tcc"
					>));
					if(
#line 865 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138128 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138132 "powerpc.tcc"
					>(0x10000400UL, 0xfc0007ffUL, DecodeOpVsububm<
#line 38 "ppc.isa"
					CONFIG
#line 138136 "powerpc.tcc"
					>));
					if(
#line 859 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138141 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138145 "powerpc.tcc"
					>(0x10000780UL, 0xfc0007ffUL, DecodeOpVsubsws<
#line 38 "ppc.isa"
					CONFIG
#line 138149 "powerpc.tcc"
					>));
					if(
#line 853 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138154 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138158 "powerpc.tcc"
					>(0x10000740UL, 0xfc0007ffUL, DecodeOpVsubshs<
#line 38 "ppc.isa"
					CONFIG
#line 138162 "powerpc.tcc"
					>));
					if(
#line 847 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138167 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138171 "powerpc.tcc"
					>(0x10000700UL, 0xfc0007ffUL, DecodeOpVsubsbs<
#line 38 "ppc.isa"
					CONFIG
#line 138175 "powerpc.tcc"
					>));
					if(
#line 841 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138180 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138184 "powerpc.tcc"
					>(0x1000004aUL, 0xfc0007ffUL, DecodeOpVsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 138188 "powerpc.tcc"
					>));
					if(
#line 835 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138193 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138197 "powerpc.tcc"
					>(0x10000580UL, 0xfc0007ffUL, DecodeOpVsubcuw<
#line 38 "ppc.isa"
					CONFIG
#line 138201 "powerpc.tcc"
					>));
					if(
#line 829 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138206 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138210 "powerpc.tcc"
					>(0x10000284UL, 0xfc0007ffUL, DecodeOpVsrw<
#line 38 "ppc.isa"
					CONFIG
#line 138214 "powerpc.tcc"
					>));
					if(
#line 823 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138219 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138223 "powerpc.tcc"
					>(0x1000044cUL, 0xfc0007ffUL, DecodeOpVsro<
#line 38 "ppc.isa"
					CONFIG
#line 138227 "powerpc.tcc"
					>));
					if(
#line 817 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138232 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138236 "powerpc.tcc"
					>(0x10000244UL, 0xfc0007ffUL, DecodeOpVsrh<
#line 38 "ppc.isa"
					CONFIG
#line 138240 "powerpc.tcc"
					>));
					if(
#line 811 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138245 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138249 "powerpc.tcc"
					>(0x10000204UL, 0xfc0007ffUL, DecodeOpVsrb<
#line 38 "ppc.isa"
					CONFIG
#line 138253 "powerpc.tcc"
					>));
					if(
#line 805 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138258 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138262 "powerpc.tcc"
					>(0x10000384UL, 0xfc0007ffUL, DecodeOpVsraw<
#line 38 "ppc.isa"
					CONFIG
#line 138266 "powerpc.tcc"
					>));
					if(
#line 799 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138271 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138275 "powerpc.tcc"
					>(0x10000344UL, 0xfc0007ffUL, DecodeOpVsrah<
#line 38 "ppc.isa"
					CONFIG
#line 138279 "powerpc.tcc"
					>));
					if(
#line 793 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138284 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138288 "powerpc.tcc"
					>(0x10000304UL, 0xfc0007ffUL, DecodeOpVsrab<
#line 38 "ppc.isa"
					CONFIG
#line 138292 "powerpc.tcc"
					>));
					if(
#line 787 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138297 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138301 "powerpc.tcc"
					>(0x100002c4UL, 0xfc0007ffUL, DecodeOpVsr<
#line 38 "ppc.isa"
					CONFIG
#line 138305 "powerpc.tcc"
					>));
					if(
#line 781 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138310 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138314 "powerpc.tcc"
					>(0x1000028cUL, 0xfc0007ffUL, DecodeOpVspltw<
#line 38 "ppc.isa"
					CONFIG
#line 138318 "powerpc.tcc"
					>));
					if(
#line 775 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138323 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138327 "powerpc.tcc"
					>(0x1000038cUL, 0xfc0007ffUL, DecodeOpVspltisw<
#line 38 "ppc.isa"
					CONFIG
#line 138331 "powerpc.tcc"
					>));
					if(
#line 769 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138336 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138340 "powerpc.tcc"
					>(0x1000034cUL, 0xfc0007ffUL, DecodeOpVspltish<
#line 38 "ppc.isa"
					CONFIG
#line 138344 "powerpc.tcc"
					>));
					if(
#line 763 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138349 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138353 "powerpc.tcc"
					>(0x1000030cUL, 0xfc0007ffUL, DecodeOpVspltisb<
#line 38 "ppc.isa"
					CONFIG
#line 138357 "powerpc.tcc"
					>));
					if(
#line 757 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138362 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138366 "powerpc.tcc"
					>(0x1000024cUL, 0xfc0007ffUL, DecodeOpVsplth<
#line 38 "ppc.isa"
					CONFIG
#line 138370 "powerpc.tcc"
					>));
					if(
#line 751 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138375 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138379 "powerpc.tcc"
					>(0x1000020cUL, 0xfc0007ffUL, DecodeOpVspltb<
#line 38 "ppc.isa"
					CONFIG
#line 138383 "powerpc.tcc"
					>));
					if(
#line 745 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138388 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138392 "powerpc.tcc"
					>(0x10000184UL, 0xfc0007ffUL, DecodeOpVslw<
#line 38 "ppc.isa"
					CONFIG
#line 138396 "powerpc.tcc"
					>));
					if(
#line 739 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138401 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138405 "powerpc.tcc"
					>(0x1000040cUL, 0xfc0007ffUL, DecodeOpVslo<
#line 38 "ppc.isa"
					CONFIG
#line 138409 "powerpc.tcc"
					>));
					if(
#line 733 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138414 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138418 "powerpc.tcc"
					>(0x10000144UL, 0xfc0007ffUL, DecodeOpVslh<
#line 38 "ppc.isa"
					CONFIG
#line 138422 "powerpc.tcc"
					>));
					if(
#line 727 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138427 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138431 "powerpc.tcc"
					>(0x1000002cUL, 0xfc00043fUL, DecodeOpVsldoi<
#line 38 "ppc.isa"
					CONFIG
#line 138435 "powerpc.tcc"
					>));
					if(
#line 721 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138440 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138444 "powerpc.tcc"
					>(0x10000104UL, 0xfc0007ffUL, DecodeOpVslb<
#line 38 "ppc.isa"
					CONFIG
#line 138448 "powerpc.tcc"
					>));
					if(
#line 715 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138453 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138457 "powerpc.tcc"
					>(0x100001c4UL, 0xfc0007ffUL, DecodeOpVsl<
#line 38 "ppc.isa"
					CONFIG
#line 138461 "powerpc.tcc"
					>));
					if(
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138466 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138470 "powerpc.tcc"
					>(0x1000002aUL, 0xfc00003fUL, DecodeOpVsel<
#line 38 "ppc.isa"
					CONFIG
#line 138474 "powerpc.tcc"
					>));
					if(
#line 703 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138479 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138483 "powerpc.tcc"
					>(0x1000014aUL, 0xfc1f07ffUL, DecodeOpVrsqrtefp<
#line 38 "ppc.isa"
					CONFIG
#line 138487 "powerpc.tcc"
					>));
					if(
#line 697 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138492 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138496 "powerpc.tcc"
					>(0x10000084UL, 0xfc0007ffUL, DecodeOpVrlw<
#line 38 "ppc.isa"
					CONFIG
#line 138500 "powerpc.tcc"
					>));
					if(
#line 691 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138505 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138509 "powerpc.tcc"
					>(0x10000044UL, 0xfc0007ffUL, DecodeOpVrlh<
#line 38 "ppc.isa"
					CONFIG
#line 138513 "powerpc.tcc"
					>));
					if(
#line 685 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138518 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138522 "powerpc.tcc"
					>(0x10000004UL, 0xfc0007ffUL, DecodeOpVrlb<
#line 38 "ppc.isa"
					CONFIG
#line 138526 "powerpc.tcc"
					>));
					if(
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138531 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138535 "powerpc.tcc"
					>(0x1000024aUL, 0xfc1f07ffUL, DecodeOpVrfiz<
#line 38 "ppc.isa"
					CONFIG
#line 138539 "powerpc.tcc"
					>));
					if(
#line 673 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138544 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138548 "powerpc.tcc"
					>(0x1000028aUL, 0xfc1f07ffUL, DecodeOpVrfip<
#line 38 "ppc.isa"
					CONFIG
#line 138552 "powerpc.tcc"
					>));
					if(
#line 667 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138557 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138561 "powerpc.tcc"
					>(0x1000020aUL, 0xfc1f07ffUL, DecodeOpVrfin<
#line 38 "ppc.isa"
					CONFIG
#line 138565 "powerpc.tcc"
					>));
					if(
#line 661 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138570 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138574 "powerpc.tcc"
					>(0x100002caUL, 0xfc1f07ffUL, DecodeOpVrfim<
#line 38 "ppc.isa"
					CONFIG
#line 138578 "powerpc.tcc"
					>));
					if(
#line 655 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138583 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138587 "powerpc.tcc"
					>(0x1000010aUL, 0xfc1f07ffUL, DecodeOpVrefp<
#line 38 "ppc.isa"
					CONFIG
#line 138591 "powerpc.tcc"
					>));
					if(
#line 649 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138596 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138600 "powerpc.tcc"
					>(0x100000ceUL, 0xfc0007ffUL, DecodeOpVpkuwus<
#line 38 "ppc.isa"
					CONFIG
#line 138604 "powerpc.tcc"
					>));
					if(
#line 643 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138609 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138613 "powerpc.tcc"
					>(0x1000004eUL, 0xfc0007ffUL, DecodeOpVpkuwum<
#line 38 "ppc.isa"
					CONFIG
#line 138617 "powerpc.tcc"
					>));
					if(
#line 637 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138622 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138626 "powerpc.tcc"
					>(0x1000008eUL, 0xfc0007ffUL, DecodeOpVpkuhus<
#line 38 "ppc.isa"
					CONFIG
#line 138630 "powerpc.tcc"
					>));
					if(
#line 631 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138635 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138639 "powerpc.tcc"
					>(0x1000000eUL, 0xfc0007ffUL, DecodeOpVpkuhum<
#line 38 "ppc.isa"
					CONFIG
#line 138643 "powerpc.tcc"
					>));
					if(
#line 625 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138648 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138652 "powerpc.tcc"
					>(0x1000014eUL, 0xfc0007ffUL, DecodeOpVpkswus<
#line 38 "ppc.isa"
					CONFIG
#line 138656 "powerpc.tcc"
					>));
					if(
#line 619 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138661 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138665 "powerpc.tcc"
					>(0x100001ceUL, 0xfc0007ffUL, DecodeOpVpkswss<
#line 38 "ppc.isa"
					CONFIG
#line 138669 "powerpc.tcc"
					>));
					if(
#line 613 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138674 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138678 "powerpc.tcc"
					>(0x1000010eUL, 0xfc0007ffUL, DecodeOpVpkshus<
#line 38 "ppc.isa"
					CONFIG
#line 138682 "powerpc.tcc"
					>));
					if(
#line 607 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138687 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138691 "powerpc.tcc"
					>(0x1000018eUL, 0xfc0007ffUL, DecodeOpVpkshss<
#line 38 "ppc.isa"
					CONFIG
#line 138695 "powerpc.tcc"
					>));
					if(
#line 601 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138700 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138704 "powerpc.tcc"
					>(0x1000030eUL, 0xfc0007ffUL, DecodeOpVpkpx<
#line 38 "ppc.isa"
					CONFIG
#line 138708 "powerpc.tcc"
					>));
					if(
#line 595 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138713 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138717 "powerpc.tcc"
					>(0x1000002bUL, 0xfc00003fUL, DecodeOpVperm<
#line 38 "ppc.isa"
					CONFIG
#line 138721 "powerpc.tcc"
					>));
					if(
#line 589 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138726 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138730 "powerpc.tcc"
					>(0x10000484UL, 0xfc0007ffUL, DecodeOpVor<
#line 38 "ppc.isa"
					CONFIG
#line 138734 "powerpc.tcc"
					>));
					if(
#line 583 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138739 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138743 "powerpc.tcc"
					>(0x10000504UL, 0xfc0007ffUL, DecodeOpVnor<
#line 38 "ppc.isa"
					CONFIG
#line 138747 "powerpc.tcc"
					>));
					if(
#line 577 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138752 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138756 "powerpc.tcc"
					>(0x1000002fUL, 0xfc00003fUL, DecodeOpVnmsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 138760 "powerpc.tcc"
					>));
					if(
#line 571 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138765 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138769 "powerpc.tcc"
					>(0x10000048UL, 0xfc0007ffUL, DecodeOpVmulouh<
#line 38 "ppc.isa"
					CONFIG
#line 138773 "powerpc.tcc"
					>));
					if(
#line 565 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138778 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138782 "powerpc.tcc"
					>(0x10000008UL, 0xfc0007ffUL, DecodeOpVmuloub<
#line 38 "ppc.isa"
					CONFIG
#line 138786 "powerpc.tcc"
					>));
					if(
#line 559 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138791 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138795 "powerpc.tcc"
					>(0x10000148UL, 0xfc0007ffUL, DecodeOpVmulosh<
#line 38 "ppc.isa"
					CONFIG
#line 138799 "powerpc.tcc"
					>));
					if(
#line 553 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138804 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138808 "powerpc.tcc"
					>(0x10000108UL, 0xfc0007ffUL, DecodeOpVmulosb<
#line 38 "ppc.isa"
					CONFIG
#line 138812 "powerpc.tcc"
					>));
					if(
#line 547 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138817 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138821 "powerpc.tcc"
					>(0x10000248UL, 0xfc0007ffUL, DecodeOpVmuleuh<
#line 38 "ppc.isa"
					CONFIG
#line 138825 "powerpc.tcc"
					>));
					if(
#line 541 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138830 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138834 "powerpc.tcc"
					>(0x10000208UL, 0xfc0007ffUL, DecodeOpVmuleub<
#line 38 "ppc.isa"
					CONFIG
#line 138838 "powerpc.tcc"
					>));
					if(
#line 535 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138843 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138847 "powerpc.tcc"
					>(0x10000348UL, 0xfc0007ffUL, DecodeOpVmulesh<
#line 38 "ppc.isa"
					CONFIG
#line 138851 "powerpc.tcc"
					>));
					if(
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138856 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138860 "powerpc.tcc"
					>(0x10000308UL, 0xfc0007ffUL, DecodeOpVmulesb<
#line 38 "ppc.isa"
					CONFIG
#line 138864 "powerpc.tcc"
					>));
					if(
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138869 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138873 "powerpc.tcc"
					>(0x10000027UL, 0xfc00003fUL, DecodeOpVmsumuhs<
#line 38 "ppc.isa"
					CONFIG
#line 138877 "powerpc.tcc"
					>));
					if(
#line 517 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138882 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138886 "powerpc.tcc"
					>(0x10000026UL, 0xfc00003fUL, DecodeOpVmsumuhm<
#line 38 "ppc.isa"
					CONFIG
#line 138890 "powerpc.tcc"
					>));
					if(
#line 511 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138895 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138899 "powerpc.tcc"
					>(0x10000024UL, 0xfc00003fUL, DecodeOpVmsumubm<
#line 38 "ppc.isa"
					CONFIG
#line 138903 "powerpc.tcc"
					>));
					if(
#line 505 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138908 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138912 "powerpc.tcc"
					>(0x10000029UL, 0xfc00003fUL, DecodeOpVmsumshs<
#line 38 "ppc.isa"
					CONFIG
#line 138916 "powerpc.tcc"
					>));
					if(
#line 499 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138921 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138925 "powerpc.tcc"
					>(0x10000028UL, 0xfc00003fUL, DecodeOpVmsumshm<
#line 38 "ppc.isa"
					CONFIG
#line 138929 "powerpc.tcc"
					>));
					if(
#line 493 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138934 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138938 "powerpc.tcc"
					>(0x10000025UL, 0xfc00003fUL, DecodeOpVmsummbm<
#line 38 "ppc.isa"
					CONFIG
#line 138942 "powerpc.tcc"
					>));
					if(
#line 487 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138947 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138951 "powerpc.tcc"
					>(0x1000018cUL, 0xfc0007ffUL, DecodeOpVmrglw<
#line 38 "ppc.isa"
					CONFIG
#line 138955 "powerpc.tcc"
					>));
					if(
#line 481 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138960 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138964 "powerpc.tcc"
					>(0x1000014cUL, 0xfc0007ffUL, DecodeOpVmrglh<
#line 38 "ppc.isa"
					CONFIG
#line 138968 "powerpc.tcc"
					>));
					if(
#line 475 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138973 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138977 "powerpc.tcc"
					>(0x1000010cUL, 0xfc0007ffUL, DecodeOpVmrglb<
#line 38 "ppc.isa"
					CONFIG
#line 138981 "powerpc.tcc"
					>));
					if(
#line 469 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138986 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 138990 "powerpc.tcc"
					>(0x1000008cUL, 0xfc0007ffUL, DecodeOpVmrghw<
#line 38 "ppc.isa"
					CONFIG
#line 138994 "powerpc.tcc"
					>));
					if(
#line 463 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 138999 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139003 "powerpc.tcc"
					>(0x1000004cUL, 0xfc0007ffUL, DecodeOpVmrghh<
#line 38 "ppc.isa"
					CONFIG
#line 139007 "powerpc.tcc"
					>));
					if(
#line 457 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139012 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139016 "powerpc.tcc"
					>(0x1000000cUL, 0xfc0007ffUL, DecodeOpVmrghb<
#line 38 "ppc.isa"
					CONFIG
#line 139020 "powerpc.tcc"
					>));
					if(
#line 451 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139025 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139029 "powerpc.tcc"
					>(0x10000022UL, 0xfc00003fUL, DecodeOpVmladduhm<
#line 38 "ppc.isa"
					CONFIG
#line 139033 "powerpc.tcc"
					>));
					if(
#line 445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139038 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139042 "powerpc.tcc"
					>(0x10000282UL, 0xfc0007ffUL, DecodeOpVminuw<
#line 38 "ppc.isa"
					CONFIG
#line 139046 "powerpc.tcc"
					>));
					if(
#line 439 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139051 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139055 "powerpc.tcc"
					>(0x10000242UL, 0xfc0007ffUL, DecodeOpVminuh<
#line 38 "ppc.isa"
					CONFIG
#line 139059 "powerpc.tcc"
					>));
					if(
#line 433 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139064 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139068 "powerpc.tcc"
					>(0x10000202UL, 0xfc0007ffUL, DecodeOpVminub<
#line 38 "ppc.isa"
					CONFIG
#line 139072 "powerpc.tcc"
					>));
					if(
#line 427 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139077 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139081 "powerpc.tcc"
					>(0x10000382UL, 0xfc0007ffUL, DecodeOpVminsw<
#line 38 "ppc.isa"
					CONFIG
#line 139085 "powerpc.tcc"
					>));
					if(
#line 421 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139090 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139094 "powerpc.tcc"
					>(0x10000342UL, 0xfc0007ffUL, DecodeOpVminsh<
#line 38 "ppc.isa"
					CONFIG
#line 139098 "powerpc.tcc"
					>));
					if(
#line 415 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139103 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139107 "powerpc.tcc"
					>(0x10000302UL, 0xfc0007ffUL, DecodeOpVminsb<
#line 38 "ppc.isa"
					CONFIG
#line 139111 "powerpc.tcc"
					>));
					if(
#line 409 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139116 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139120 "powerpc.tcc"
					>(0x1000044aUL, 0xfc0007ffUL, DecodeOpVminfp<
#line 38 "ppc.isa"
					CONFIG
#line 139124 "powerpc.tcc"
					>));
					if(
#line 403 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139129 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139133 "powerpc.tcc"
					>(0x10000021UL, 0xfc00003fUL, DecodeOpVmhraddshs<
#line 38 "ppc.isa"
					CONFIG
#line 139137 "powerpc.tcc"
					>));
					if(
#line 397 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139142 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139146 "powerpc.tcc"
					>(0x10000020UL, 0xfc00003fUL, DecodeOpVmhaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 139150 "powerpc.tcc"
					>));
					if(
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139155 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139159 "powerpc.tcc"
					>(0x10000082UL, 0xfc0007ffUL, DecodeOpVmaxuw<
#line 38 "ppc.isa"
					CONFIG
#line 139163 "powerpc.tcc"
					>));
					if(
#line 385 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139168 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139172 "powerpc.tcc"
					>(0x10000042UL, 0xfc0007ffUL, DecodeOpVmaxuh<
#line 38 "ppc.isa"
					CONFIG
#line 139176 "powerpc.tcc"
					>));
					if(
#line 379 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139181 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139185 "powerpc.tcc"
					>(0x10000002UL, 0xfc0007ffUL, DecodeOpVmaxub<
#line 38 "ppc.isa"
					CONFIG
#line 139189 "powerpc.tcc"
					>));
					if(
#line 373 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139194 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139198 "powerpc.tcc"
					>(0x10000182UL, 0xfc0007ffUL, DecodeOpVmaxsw<
#line 38 "ppc.isa"
					CONFIG
#line 139202 "powerpc.tcc"
					>));
					if(
#line 367 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139207 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139211 "powerpc.tcc"
					>(0x10000142UL, 0xfc0007ffUL, DecodeOpVmaxsh<
#line 38 "ppc.isa"
					CONFIG
#line 139215 "powerpc.tcc"
					>));
					if(
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139220 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139224 "powerpc.tcc"
					>(0x10000102UL, 0xfc0007ffUL, DecodeOpVmaxsb<
#line 38 "ppc.isa"
					CONFIG
#line 139228 "powerpc.tcc"
					>));
					if(
#line 355 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139233 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139237 "powerpc.tcc"
					>(0x1000040aUL, 0xfc0007ffUL, DecodeOpVmaxfp<
#line 38 "ppc.isa"
					CONFIG
#line 139241 "powerpc.tcc"
					>));
					if(
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139246 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139250 "powerpc.tcc"
					>(0x1000002eUL, 0xfc00003fUL, DecodeOpVmaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 139254 "powerpc.tcc"
					>));
					if(
#line 343 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139259 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139263 "powerpc.tcc"
					>(0x100001caUL, 0xfc1f07ffUL, DecodeOpVlogefp<
#line 38 "ppc.isa"
					CONFIG
#line 139267 "powerpc.tcc"
					>));
					if(
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139272 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139276 "powerpc.tcc"
					>(0x1000018aUL, 0xfc1f07ffUL, DecodeOpVexptefp<
#line 38 "ppc.isa"
					CONFIG
#line 139280 "powerpc.tcc"
					>));
					if(
#line 331 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139285 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139289 "powerpc.tcc"
					>(0x1000038aUL, 0xfc0007ffUL, DecodeOpVctuxs<
#line 38 "ppc.isa"
					CONFIG
#line 139293 "powerpc.tcc"
					>));
					if(
#line 325 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139298 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139302 "powerpc.tcc"
					>(0x100003caUL, 0xfc0007ffUL, DecodeOpVctsxs<
#line 38 "ppc.isa"
					CONFIG
#line 139306 "powerpc.tcc"
					>));
					if(
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139311 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139315 "powerpc.tcc"
					>(0x10000286UL, 0xfc0003ffUL, DecodeOpVcmpgtuw<
#line 38 "ppc.isa"
					CONFIG
#line 139319 "powerpc.tcc"
					>));
					if(
#line 313 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139324 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139328 "powerpc.tcc"
					>(0x10000246UL, 0xfc0003ffUL, DecodeOpVcmpgtuh<
#line 38 "ppc.isa"
					CONFIG
#line 139332 "powerpc.tcc"
					>));
					if(
#line 307 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139337 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139341 "powerpc.tcc"
					>(0x10000206UL, 0xfc0003ffUL, DecodeOpVcmpgtub<
#line 38 "ppc.isa"
					CONFIG
#line 139345 "powerpc.tcc"
					>));
					if(
#line 301 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139350 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139354 "powerpc.tcc"
					>(0x10000386UL, 0xfc0003ffUL, DecodeOpVcmpgtsw<
#line 38 "ppc.isa"
					CONFIG
#line 139358 "powerpc.tcc"
					>));
					if(
#line 295 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139363 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139367 "powerpc.tcc"
					>(0x10000346UL, 0xfc0003ffUL, DecodeOpVcmpgtsh<
#line 38 "ppc.isa"
					CONFIG
#line 139371 "powerpc.tcc"
					>));
					if(
#line 289 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139376 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139380 "powerpc.tcc"
					>(0x10000306UL, 0xfc0003ffUL, DecodeOpVcmpgtsb<
#line 38 "ppc.isa"
					CONFIG
#line 139384 "powerpc.tcc"
					>));
					if(
#line 283 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139389 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139393 "powerpc.tcc"
					>(0x100002c6UL, 0xfc0003ffUL, DecodeOpVcmpgtfp<
#line 38 "ppc.isa"
					CONFIG
#line 139397 "powerpc.tcc"
					>));
					if(
#line 277 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139402 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139406 "powerpc.tcc"
					>(0x100001c6UL, 0xfc0003ffUL, DecodeOpVcmpgefp<
#line 38 "ppc.isa"
					CONFIG
#line 139410 "powerpc.tcc"
					>));
					if(
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139415 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139419 "powerpc.tcc"
					>(0x10000086UL, 0xfc0003ffUL, DecodeOpVcmpequw<
#line 38 "ppc.isa"
					CONFIG
#line 139423 "powerpc.tcc"
					>));
					if(
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139428 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139432 "powerpc.tcc"
					>(0x10000046UL, 0xfc0003ffUL, DecodeOpVcmpequh<
#line 38 "ppc.isa"
					CONFIG
#line 139436 "powerpc.tcc"
					>));
					if(
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139441 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139445 "powerpc.tcc"
					>(0x10000006UL, 0xfc0003ffUL, DecodeOpVcmpequb<
#line 38 "ppc.isa"
					CONFIG
#line 139449 "powerpc.tcc"
					>));
					if(
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139454 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139458 "powerpc.tcc"
					>(0x100000c6UL, 0xfc0003ffUL, DecodeOpVcmpeqfp<
#line 38 "ppc.isa"
					CONFIG
#line 139462 "powerpc.tcc"
					>));
					if(
#line 247 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139467 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139471 "powerpc.tcc"
					>(0x100003c6UL, 0xfc0003ffUL, DecodeOpVcmpbfp<
#line 38 "ppc.isa"
					CONFIG
#line 139475 "powerpc.tcc"
					>));
					if(
#line 241 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139480 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139484 "powerpc.tcc"
					>(0x1000030aUL, 0xfc0007ffUL, DecodeOpVcfux<
#line 38 "ppc.isa"
					CONFIG
#line 139488 "powerpc.tcc"
					>));
					if(
#line 235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139493 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139497 "powerpc.tcc"
					>(0x1000034aUL, 0xfc0007ffUL, DecodeOpVcfsx<
#line 38 "ppc.isa"
					CONFIG
#line 139501 "powerpc.tcc"
					>));
					if(
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139506 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139510 "powerpc.tcc"
					>(0x10000482UL, 0xfc0007ffUL, DecodeOpVavguw<
#line 38 "ppc.isa"
					CONFIG
#line 139514 "powerpc.tcc"
					>));
					if(
#line 223 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139519 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139523 "powerpc.tcc"
					>(0x10000442UL, 0xfc0007ffUL, DecodeOpVavguh<
#line 38 "ppc.isa"
					CONFIG
#line 139527 "powerpc.tcc"
					>));
					if(
#line 217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139532 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139536 "powerpc.tcc"
					>(0x10000402UL, 0xfc0007ffUL, DecodeOpVavgub<
#line 38 "ppc.isa"
					CONFIG
#line 139540 "powerpc.tcc"
					>));
					if(
#line 211 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139545 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139549 "powerpc.tcc"
					>(0x10000582UL, 0xfc0007ffUL, DecodeOpVavgsw<
#line 38 "ppc.isa"
					CONFIG
#line 139553 "powerpc.tcc"
					>));
					if(
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139558 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139562 "powerpc.tcc"
					>(0x10000542UL, 0xfc0007ffUL, DecodeOpVavgsh<
#line 38 "ppc.isa"
					CONFIG
#line 139566 "powerpc.tcc"
					>));
					if(
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139571 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139575 "powerpc.tcc"
					>(0x10000502UL, 0xfc0007ffUL, DecodeOpVavgsb<
#line 38 "ppc.isa"
					CONFIG
#line 139579 "powerpc.tcc"
					>));
					if(
#line 193 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139584 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139588 "powerpc.tcc"
					>(0x10000444UL, 0xfc0007ffUL, DecodeOpVandc<
#line 38 "ppc.isa"
					CONFIG
#line 139592 "powerpc.tcc"
					>));
					if(
#line 187 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139597 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139601 "powerpc.tcc"
					>(0x10000404UL, 0xfc0007ffUL, DecodeOpVand<
#line 38 "ppc.isa"
					CONFIG
#line 139605 "powerpc.tcc"
					>));
					if(
#line 181 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139610 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139614 "powerpc.tcc"
					>(0x10000280UL, 0xfc0007ffUL, DecodeOpVadduws<
#line 38 "ppc.isa"
					CONFIG
#line 139618 "powerpc.tcc"
					>));
					if(
#line 175 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139623 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139627 "powerpc.tcc"
					>(0x10000080UL, 0xfc0007ffUL, DecodeOpVadduwm<
#line 38 "ppc.isa"
					CONFIG
#line 139631 "powerpc.tcc"
					>));
					if(
#line 169 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139636 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139640 "powerpc.tcc"
					>(0x10000240UL, 0xfc0007ffUL, DecodeOpVadduhs<
#line 38 "ppc.isa"
					CONFIG
#line 139644 "powerpc.tcc"
					>));
					if(
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139649 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139653 "powerpc.tcc"
					>(0x10000040UL, 0xfc0007ffUL, DecodeOpVadduhm<
#line 38 "ppc.isa"
					CONFIG
#line 139657 "powerpc.tcc"
					>));
					if(
#line 157 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139662 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139666 "powerpc.tcc"
					>(0x10000200UL, 0xfc0007ffUL, DecodeOpVaddubs<
#line 38 "ppc.isa"
					CONFIG
#line 139670 "powerpc.tcc"
					>));
					if(
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139675 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139679 "powerpc.tcc"
					>(0x10000000UL, 0xfc0007ffUL, DecodeOpVaddubm<
#line 38 "ppc.isa"
					CONFIG
#line 139683 "powerpc.tcc"
					>));
					if(
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139688 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139692 "powerpc.tcc"
					>(0x10000380UL, 0xfc0007ffUL, DecodeOpVaddsws<
#line 38 "ppc.isa"
					CONFIG
#line 139696 "powerpc.tcc"
					>));
					if(
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139701 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139705 "powerpc.tcc"
					>(0x10000340UL, 0xfc0007ffUL, DecodeOpVaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 139709 "powerpc.tcc"
					>));
					if(
#line 133 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139714 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139718 "powerpc.tcc"
					>(0x10000300UL, 0xfc0007ffUL, DecodeOpVaddsbs<
#line 38 "ppc.isa"
					CONFIG
#line 139722 "powerpc.tcc"
					>));
					if(
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139727 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139731 "powerpc.tcc"
					>(0x1000000aUL, 0xfc0007ffUL, DecodeOpVaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 139735 "powerpc.tcc"
					>));
					if(
#line 121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139740 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139744 "powerpc.tcc"
					>(0x10000180UL, 0xfc0007ffUL, DecodeOpVaddcuw<
#line 38 "ppc.isa"
					CONFIG
#line 139748 "powerpc.tcc"
					>));
					if(
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139753 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139757 "powerpc.tcc"
					>(0x7c0003ceUL, 0xfc0007ffUL, DecodeOpStvxl<
#line 38 "ppc.isa"
					CONFIG
#line 139761 "powerpc.tcc"
					>));
					if(
#line 109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139766 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139770 "powerpc.tcc"
					>(0x7c0001ceUL, 0xfc0007ffUL, DecodeOpStvx<
#line 38 "ppc.isa"
					CONFIG
#line 139774 "powerpc.tcc"
					>));
					if(
#line 103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139779 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139783 "powerpc.tcc"
					>(0x7c00018eUL, 0xfc0007ffUL, DecodeOpStvewx<
#line 38 "ppc.isa"
					CONFIG
#line 139787 "powerpc.tcc"
					>));
					if(
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139792 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139796 "powerpc.tcc"
					>(0x7c00014eUL, 0xfc0007ffUL, DecodeOpStvehx<
#line 38 "ppc.isa"
					CONFIG
#line 139800 "powerpc.tcc"
					>));
					if(
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139805 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139809 "powerpc.tcc"
					>(0x7c00010eUL, 0xfc0007ffUL, DecodeOpStvebx<
#line 38 "ppc.isa"
					CONFIG
#line 139813 "powerpc.tcc"
					>));
					if(
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139818 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139822 "powerpc.tcc"
					>(0x10000644UL, 0xffff07ffUL, DecodeOpMtvscr<
#line 38 "ppc.isa"
					CONFIG
#line 139826 "powerpc.tcc"
					>));
					if(
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139831 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139835 "powerpc.tcc"
					>(0x10000604UL, 0xfc1fffffUL, DecodeOpMfvscr<
#line 38 "ppc.isa"
					CONFIG
#line 139839 "powerpc.tcc"
					>));
					if(
#line 73 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139844 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139848 "powerpc.tcc"
					>(0x7c0002ceUL, 0xfc0007ffUL, DecodeOpLvxl<
#line 38 "ppc.isa"
					CONFIG
#line 139852 "powerpc.tcc"
					>));
					if(
#line 67 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139857 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139861 "powerpc.tcc"
					>(0x7c0000ceUL, 0xfc0007ffUL, DecodeOpLvx<
#line 38 "ppc.isa"
					CONFIG
#line 139865 "powerpc.tcc"
					>));
					if(
#line 61 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139870 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139874 "powerpc.tcc"
					>(0x7c00004cUL, 0xfc0007ffUL, DecodeOpLvsr<
#line 38 "ppc.isa"
					CONFIG
#line 139878 "powerpc.tcc"
					>));
					if(
#line 55 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139883 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139887 "powerpc.tcc"
					>(0x7c00000cUL, 0xfc0007ffUL, DecodeOpLvsl<
#line 38 "ppc.isa"
					CONFIG
#line 139891 "powerpc.tcc"
					>));
					if(
#line 49 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139896 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139900 "powerpc.tcc"
					>(0x7c00008eUL, 0xfc0007ffUL, DecodeOpLvewx<
#line 38 "ppc.isa"
					CONFIG
#line 139904 "powerpc.tcc"
					>));
					if(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139909 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139913 "powerpc.tcc"
					>(0x7c00004eUL, 0xfc0007ffUL, DecodeOpLvehx<
#line 38 "ppc.isa"
					CONFIG
#line 139917 "powerpc.tcc"
					>));
					if(
#line 37 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139922 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139926 "powerpc.tcc"
					>(0x7c00000eUL, 0xfc0007ffUL, DecodeOpLvebx<
#line 38 "ppc.isa"
					CONFIG
#line 139930 "powerpc.tcc"
					>));
					if(
#line 31 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139935 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139939 "powerpc.tcc"
					>(0x7e0002acUL, 0xff8007ffUL, DecodeOpDstt<
#line 38 "ppc.isa"
					CONFIG
#line 139943 "powerpc.tcc"
					>));
					if(
#line 25 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139948 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139952 "powerpc.tcc"
					>(0x7e0002ecUL, 0xff8007ffUL, DecodeOpDststt<
#line 38 "ppc.isa"
					CONFIG
#line 139956 "powerpc.tcc"
					>));
					if(
#line 19 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139961 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139965 "powerpc.tcc"
					>(0x7c0002ecUL, 0xff8007ffUL, DecodeOpDstst<
#line 38 "ppc.isa"
					CONFIG
#line 139969 "powerpc.tcc"
					>));
					if(
#line 13 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139974 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139978 "powerpc.tcc"
					>(0x7c0002acUL, 0xff8007ffUL, DecodeOpDst<
#line 38 "ppc.isa"
					CONFIG
#line 139982 "powerpc.tcc"
					>));
					if(
#line 7 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 139987 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 139991 "powerpc.tcc"
					>(0x7e00066cUL, 0xff9fffffUL, DecodeOpDssall<
#line 38 "ppc.isa"
					CONFIG
#line 139995 "powerpc.tcc"
					>));
					if(
#line 1 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 140000 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140004 "powerpc.tcc"
					>(0x7c00066cUL, 0xff9fffffUL, DecodeOpDss<
#line 38 "ppc.isa"
					CONFIG
#line 140008 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140013 "powerpc.tcc"
					>(0x7c0001e4UL, 0xfc0007feUL, DecodeOpMtsrin<
#line 38 "ppc.isa"
					CONFIG
#line 140017 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140022 "powerpc.tcc"
					>(0x7c0001a4UL, 0xfc0007feUL, DecodeOpMtsr<
#line 38 "ppc.isa"
					CONFIG
#line 140026 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140031 "powerpc.tcc"
					>(0x7c000526UL, 0xfc0007feUL, DecodeOpMfsrin<
#line 38 "ppc.isa"
					CONFIG
#line 140035 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140040 "powerpc.tcc"
					>(0x7c0004a6UL, 0xfc0007feUL, DecodeOpMfsr<
#line 38 "ppc.isa"
					CONFIG
#line 140044 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140049 "powerpc.tcc"
					>(0x7c000124UL, 0xfc0007feUL, DecodeOpMtmsr<
#line 38 "ppc.isa"
					CONFIG
#line 140053 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140058 "powerpc.tcc"
					>(0x7c000120UL, 0xfc0007feUL, DecodeOpMtcrf<
#line 38 "ppc.isa"
					CONFIG
#line 140062 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140067 "powerpc.tcc"
					>(0x7c0002e6UL, 0xfc0007feUL, DecodeOpMftb<
#line 38 "ppc.isa"
					CONFIG
#line 140071 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140076 "powerpc.tcc"
					>(0x7c0003a6UL, 0xfc0007feUL, DecodeOpMtspr<
#line 38 "ppc.isa"
					CONFIG
#line 140080 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140085 "powerpc.tcc"
					>(0x7c0002a6UL, 0xfc0007feUL, DecodeOpMfspr<
#line 38 "ppc.isa"
					CONFIG
#line 140089 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140094 "powerpc.tcc"
					>(0x7c0000a6UL, 0xfc0007feUL, DecodeOpMfmsr<
#line 38 "ppc.isa"
					CONFIG
#line 140098 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140103 "powerpc.tcc"
					>(0x7c000026UL, 0xfc0007feUL, DecodeOpMfcr<
#line 38 "ppc.isa"
					CONFIG
#line 140107 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140112 "powerpc.tcc"
					>(0x7c000400UL, 0xfc0007feUL, DecodeOpMcrxr<
#line 38 "ppc.isa"
					CONFIG
#line 140116 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140121 "powerpc.tcc"
					>(0xc000000UL, 0xfc000000UL, DecodeOpTwi<
#line 38 "ppc.isa"
					CONFIG
#line 140125 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140130 "powerpc.tcc"
					>(0x7c000008UL, 0xfc0007feUL, DecodeOpTw<
#line 38 "ppc.isa"
					CONFIG
#line 140134 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140139 "powerpc.tcc"
					>(0x4c000064UL, 0xfc0007feUL, DecodeOpRfi<
#line 38 "ppc.isa"
					CONFIG
#line 140143 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140148 "powerpc.tcc"
					>(0x44000002UL, 0xfc000002UL, DecodeOpSc<
#line 38 "ppc.isa"
					CONFIG
#line 140152 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140157 "powerpc.tcc"
					>(0x7c0004acUL, 0xfc0007feUL, DecodeOpSync<
#line 38 "ppc.isa"
					CONFIG
#line 140161 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140166 "powerpc.tcc"
					>(0x7c00012dUL, 0xfc0007ffUL, DecodeOpStwcx_<
#line 38 "ppc.isa"
					CONFIG
#line 140170 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140175 "powerpc.tcc"
					>(0x7c000028UL, 0xfc0007feUL, DecodeOpLwarx<
#line 38 "ppc.isa"
					CONFIG
#line 140179 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140184 "powerpc.tcc"
					>(0x4c00012cUL, 0xfc0007feUL, DecodeOpIsync<
#line 38 "ppc.isa"
					CONFIG
#line 140188 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140193 "powerpc.tcc"
					>(0x7c0006acUL, 0xfc0007feUL, DecodeOpEieio<
#line 38 "ppc.isa"
					CONFIG
#line 140197 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140202 "powerpc.tcc"
					>(0x7c00036cUL, 0xfc0007feUL, DecodeOpEcowx<
#line 38 "ppc.isa"
					CONFIG
#line 140206 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140211 "powerpc.tcc"
					>(0x7c00026cUL, 0xfc0007feUL, DecodeOpEciwx<
#line 38 "ppc.isa"
					CONFIG
#line 140215 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140220 "powerpc.tcc"
					>(0x7c0007e4UL, 0xffff07ffUL, DecodeOpTlbli<
#line 38 "ppc.isa"
					CONFIG
#line 140224 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140229 "powerpc.tcc"
					>(0x7c0007a4UL, 0xffff07ffUL, DecodeOpTlbld<
#line 38 "ppc.isa"
					CONFIG
#line 140233 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140238 "powerpc.tcc"
					>(0x7c00046cUL, 0xfc0007feUL, DecodeOpTlbsync<
#line 38 "ppc.isa"
					CONFIG
#line 140242 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140247 "powerpc.tcc"
					>(0x7c000264UL, 0xfc0007feUL, DecodeOpTlbie<
#line 38 "ppc.isa"
					CONFIG
#line 140251 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140256 "powerpc.tcc"
					>(0x7c0002e4UL, 0xfc0007feUL, DecodeOpTlbia<
#line 38 "ppc.isa"
					CONFIG
#line 140260 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140265 "powerpc.tcc"
					>(0x7c0007acUL, 0xfc0007feUL, DecodeOpIcbi<
#line 38 "ppc.isa"
					CONFIG
#line 140269 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140274 "powerpc.tcc"
					>(0x7c0007ecUL, 0xfc0007feUL, DecodeOpDcbz<
#line 38 "ppc.isa"
					CONFIG
#line 140278 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140283 "powerpc.tcc"
					>(0x7c0001ecUL, 0xfc0007feUL, DecodeOpDcbtst<
#line 38 "ppc.isa"
					CONFIG
#line 140287 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140292 "powerpc.tcc"
					>(0x7c00022cUL, 0xfc0007feUL, DecodeOpDcbt<
#line 38 "ppc.isa"
					CONFIG
#line 140296 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140301 "powerpc.tcc"
					>(0x7c00006cUL, 0xfc0007feUL, DecodeOpDcbst<
#line 38 "ppc.isa"
					CONFIG
#line 140305 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140310 "powerpc.tcc"
					>(0x7c0003acUL, 0xfc0007feUL, DecodeOpDcbi<
#line 38 "ppc.isa"
					CONFIG
#line 140314 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140319 "powerpc.tcc"
					>(0x7c0000acUL, 0xfc0007feUL, DecodeOpDcbf<
#line 38 "ppc.isa"
					CONFIG
#line 140323 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140328 "powerpc.tcc"
					>(0x7c0005ecUL, 0xfc0007feUL, DecodeOpDcba<
#line 38 "ppc.isa"
					CONFIG
#line 140332 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140337 "powerpc.tcc"
					>(0x7c00052eUL, 0xfc0007feUL, DecodeOpStfsx<
#line 38 "ppc.isa"
					CONFIG
#line 140341 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140346 "powerpc.tcc"
					>(0x7c00056eUL, 0xfc0007feUL, DecodeOpStfsux<
#line 38 "ppc.isa"
					CONFIG
#line 140350 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140355 "powerpc.tcc"
					>(0xd4000000UL, 0xfc000000UL, DecodeOpStfsu<
#line 38 "ppc.isa"
					CONFIG
#line 140359 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140364 "powerpc.tcc"
					>(0xd0000000UL, 0xfc000000UL, DecodeOpStfs<
#line 38 "ppc.isa"
					CONFIG
#line 140368 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140373 "powerpc.tcc"
					>(0x7c0007aeUL, 0xfc0007feUL, DecodeOpStfiwx<
#line 38 "ppc.isa"
					CONFIG
#line 140377 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140382 "powerpc.tcc"
					>(0x7c0005aeUL, 0xfc0007feUL, DecodeOpStfdx<
#line 38 "ppc.isa"
					CONFIG
#line 140386 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140391 "powerpc.tcc"
					>(0x7c0005eeUL, 0xfc0007feUL, DecodeOpStfdux<
#line 38 "ppc.isa"
					CONFIG
#line 140395 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140400 "powerpc.tcc"
					>(0xdc000000UL, 0xfc000000UL, DecodeOpStfdu<
#line 38 "ppc.isa"
					CONFIG
#line 140404 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140409 "powerpc.tcc"
					>(0xd8000000UL, 0xfc000000UL, DecodeOpStfd<
#line 38 "ppc.isa"
					CONFIG
#line 140413 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140418 "powerpc.tcc"
					>(0x7c00042eUL, 0xfc0007feUL, DecodeOpLfsx<
#line 38 "ppc.isa"
					CONFIG
#line 140422 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140427 "powerpc.tcc"
					>(0x7c00046eUL, 0xfc0007feUL, DecodeOpLfsux<
#line 38 "ppc.isa"
					CONFIG
#line 140431 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140436 "powerpc.tcc"
					>(0xc4000000UL, 0xfc000000UL, DecodeOpLfsu<
#line 38 "ppc.isa"
					CONFIG
#line 140440 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140445 "powerpc.tcc"
					>(0xc0000000UL, 0xfc000000UL, DecodeOpLfs<
#line 38 "ppc.isa"
					CONFIG
#line 140449 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140454 "powerpc.tcc"
					>(0x7c0004aeUL, 0xfc0007feUL, DecodeOpLfdx<
#line 38 "ppc.isa"
					CONFIG
#line 140458 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140463 "powerpc.tcc"
					>(0x7c0004eeUL, 0xfc0007feUL, DecodeOpLfdux<
#line 38 "ppc.isa"
					CONFIG
#line 140467 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140472 "powerpc.tcc"
					>(0xcc000000UL, 0xfc000000UL, DecodeOpLfdu<
#line 38 "ppc.isa"
					CONFIG
#line 140476 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140481 "powerpc.tcc"
					>(0xc8000000UL, 0xfc000000UL, DecodeOpLfd<
#line 38 "ppc.isa"
					CONFIG
#line 140485 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140490 "powerpc.tcc"
					>(0xbc000000UL, 0xfc000000UL, DecodeOpStmw<
#line 38 "ppc.isa"
					CONFIG
#line 140494 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140499 "powerpc.tcc"
					>(0xb8000000UL, 0xfc000000UL, DecodeOpLmw<
#line 38 "ppc.isa"
					CONFIG
#line 140503 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140508 "powerpc.tcc"
					>(0x7c00052aUL, 0xfc0007feUL, DecodeOpStswx<
#line 38 "ppc.isa"
					CONFIG
#line 140512 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140517 "powerpc.tcc"
					>(0x7c0005aaUL, 0xfc0007feUL, DecodeOpStswi<
#line 38 "ppc.isa"
					CONFIG
#line 140521 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140526 "powerpc.tcc"
					>(0x7c00042aUL, 0xfc0007feUL, DecodeOpLswx<
#line 38 "ppc.isa"
					CONFIG
#line 140530 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140535 "powerpc.tcc"
					>(0x7c0004aaUL, 0xfc0007feUL, DecodeOpLswi<
#line 38 "ppc.isa"
					CONFIG
#line 140539 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140544 "powerpc.tcc"
					>(0x7c00052cUL, 0xfc0007feUL, DecodeOpStwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140548 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140553 "powerpc.tcc"
					>(0x7c00072cUL, 0xfc0007feUL, DecodeOpSthbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140557 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140562 "powerpc.tcc"
					>(0x7c00042cUL, 0xfc0007feUL, DecodeOpLwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140566 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140571 "powerpc.tcc"
					>(0x7c00062cUL, 0xfc0007feUL, DecodeOpLhbrx<
#line 38 "ppc.isa"
					CONFIG
#line 140575 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140580 "powerpc.tcc"
					>(0x7c00012eUL, 0xfc0007feUL, DecodeOpStwx<
#line 38 "ppc.isa"
					CONFIG
#line 140584 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140589 "powerpc.tcc"
					>(0x7c00016eUL, 0xfc0007feUL, DecodeOpStwux<
#line 38 "ppc.isa"
					CONFIG
#line 140593 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140598 "powerpc.tcc"
					>(0x94000000UL, 0xfc000000UL, DecodeOpStwu<
#line 38 "ppc.isa"
					CONFIG
#line 140602 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140607 "powerpc.tcc"
					>(0x90000000UL, 0xfc000000UL, DecodeOpStw<
#line 38 "ppc.isa"
					CONFIG
#line 140611 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140616 "powerpc.tcc"
					>(0x7c00032eUL, 0xfc0007feUL, DecodeOpSthx<
#line 38 "ppc.isa"
					CONFIG
#line 140620 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140625 "powerpc.tcc"
					>(0x7c00036eUL, 0xfc0007feUL, DecodeOpSthux<
#line 38 "ppc.isa"
					CONFIG
#line 140629 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140634 "powerpc.tcc"
					>(0xb4000000UL, 0xfc000000UL, DecodeOpSthu<
#line 38 "ppc.isa"
					CONFIG
#line 140638 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140643 "powerpc.tcc"
					>(0xb0000000UL, 0xfc000000UL, DecodeOpSth<
#line 38 "ppc.isa"
					CONFIG
#line 140647 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140652 "powerpc.tcc"
					>(0x7c0001aeUL, 0xfc0007feUL, DecodeOpStbx<
#line 38 "ppc.isa"
					CONFIG
#line 140656 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140661 "powerpc.tcc"
					>(0x7c0001eeUL, 0xfc0007feUL, DecodeOpStbux<
#line 38 "ppc.isa"
					CONFIG
#line 140665 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140670 "powerpc.tcc"
					>(0x9c000000UL, 0xfc000000UL, DecodeOpStbu<
#line 38 "ppc.isa"
					CONFIG
#line 140674 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140679 "powerpc.tcc"
					>(0x98000000UL, 0xfc000000UL, DecodeOpStb<
#line 38 "ppc.isa"
					CONFIG
#line 140683 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140688 "powerpc.tcc"
					>(0x7c00002eUL, 0xfc0007feUL, DecodeOpLwzx<
#line 38 "ppc.isa"
					CONFIG
#line 140692 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140697 "powerpc.tcc"
					>(0x7c00006eUL, 0xfc0007feUL, DecodeOpLwzux<
#line 38 "ppc.isa"
					CONFIG
#line 140701 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140706 "powerpc.tcc"
					>(0x84000000UL, 0xfc000000UL, DecodeOpLwzu<
#line 38 "ppc.isa"
					CONFIG
#line 140710 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140715 "powerpc.tcc"
					>(0x80000000UL, 0xfc000000UL, DecodeOpLwz<
#line 38 "ppc.isa"
					CONFIG
#line 140719 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140724 "powerpc.tcc"
					>(0x7c00022eUL, 0xfc0007feUL, DecodeOpLhzx<
#line 38 "ppc.isa"
					CONFIG
#line 140728 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140733 "powerpc.tcc"
					>(0x7c00026eUL, 0xfc0007feUL, DecodeOpLhzux<
#line 38 "ppc.isa"
					CONFIG
#line 140737 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140742 "powerpc.tcc"
					>(0xa4000000UL, 0xfc000000UL, DecodeOpLhzu<
#line 38 "ppc.isa"
					CONFIG
#line 140746 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140751 "powerpc.tcc"
					>(0xa0000000UL, 0xfc000000UL, DecodeOpLhz<
#line 38 "ppc.isa"
					CONFIG
#line 140755 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140760 "powerpc.tcc"
					>(0x7c0002aeUL, 0xfc0007feUL, DecodeOpLhax<
#line 38 "ppc.isa"
					CONFIG
#line 140764 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140769 "powerpc.tcc"
					>(0x7c0002eeUL, 0xfc0007feUL, DecodeOpLhaux<
#line 38 "ppc.isa"
					CONFIG
#line 140773 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140778 "powerpc.tcc"
					>(0xac000000UL, 0xfc000000UL, DecodeOpLhau<
#line 38 "ppc.isa"
					CONFIG
#line 140782 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140787 "powerpc.tcc"
					>(0xa8000000UL, 0xfc000000UL, DecodeOpLha<
#line 38 "ppc.isa"
					CONFIG
#line 140791 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140796 "powerpc.tcc"
					>(0x7c0000aeUL, 0xfc0007feUL, DecodeOpLbzx<
#line 38 "ppc.isa"
					CONFIG
#line 140800 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140805 "powerpc.tcc"
					>(0x7c0000eeUL, 0xfc0007feUL, DecodeOpLbzux<
#line 38 "ppc.isa"
					CONFIG
#line 140809 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140814 "powerpc.tcc"
					>(0x8c000000UL, 0xfc000000UL, DecodeOpLbzu<
#line 38 "ppc.isa"
					CONFIG
#line 140818 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140823 "powerpc.tcc"
					>(0x88000000UL, 0xfc000000UL, DecodeOpLbz<
#line 38 "ppc.isa"
					CONFIG
#line 140827 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140832 "powerpc.tcc"
					>(0x4c000000UL, 0xfc0007feUL, DecodeOpMcrf<
#line 38 "ppc.isa"
					CONFIG
#line 140836 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140841 "powerpc.tcc"
					>(0x4c000182UL, 0xfc0007feUL, DecodeOpCrxor<
#line 38 "ppc.isa"
					CONFIG
#line 140845 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140850 "powerpc.tcc"
					>(0x4c000342UL, 0xfc0007feUL, DecodeOpCrorc<
#line 38 "ppc.isa"
					CONFIG
#line 140854 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140859 "powerpc.tcc"
					>(0x4c000382UL, 0xfc0007feUL, DecodeOpCror<
#line 38 "ppc.isa"
					CONFIG
#line 140863 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140868 "powerpc.tcc"
					>(0x4c000042UL, 0xfc0007feUL, DecodeOpCrnor<
#line 38 "ppc.isa"
					CONFIG
#line 140872 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140877 "powerpc.tcc"
					>(0x4c0001c2UL, 0xfc0007feUL, DecodeOpCrnand<
#line 38 "ppc.isa"
					CONFIG
#line 140881 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140886 "powerpc.tcc"
					>(0x4c000242UL, 0xfc0007feUL, DecodeOpCreqv<
#line 38 "ppc.isa"
					CONFIG
#line 140890 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140895 "powerpc.tcc"
					>(0x4c000102UL, 0xfc0007feUL, DecodeOpCrandc<
#line 38 "ppc.isa"
					CONFIG
#line 140899 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140904 "powerpc.tcc"
					>(0x4c000202UL, 0xfc0007feUL, DecodeOpCrand<
#line 38 "ppc.isa"
					CONFIG
#line 140908 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140913 "powerpc.tcc"
					>(0x4c000020UL, 0xfc0007feUL, DecodeOpBclr<
#line 38 "ppc.isa"
					CONFIG
#line 140917 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140922 "powerpc.tcc"
					>(0x4c000420UL, 0xfc0007feUL, DecodeOpBcctr<
#line 38 "ppc.isa"
					CONFIG
#line 140926 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140931 "powerpc.tcc"
					>(0x40000000UL, 0xfc000000UL, DecodeOpBc<
#line 38 "ppc.isa"
					CONFIG
#line 140935 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140940 "powerpc.tcc"
					>(0x48000000UL, 0xfc000000UL, DecodeOpB<
#line 38 "ppc.isa"
					CONFIG
#line 140944 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140949 "powerpc.tcc"
					>(0xfc00010cUL, 0xfc0007feUL, DecodeOpMtfsfi<
#line 38 "ppc.isa"
					CONFIG
#line 140953 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140958 "powerpc.tcc"
					>(0xfc00058eUL, 0xfc0007feUL, DecodeOpMtfsf<
#line 38 "ppc.isa"
					CONFIG
#line 140962 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140967 "powerpc.tcc"
					>(0xfc00004cUL, 0xfc0007feUL, DecodeOpMtfsb1<
#line 38 "ppc.isa"
					CONFIG
#line 140971 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140976 "powerpc.tcc"
					>(0xfc00008cUL, 0xfc0007feUL, DecodeOpMtfsb0<
#line 38 "ppc.isa"
					CONFIG
#line 140980 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140985 "powerpc.tcc"
					>(0xfc00048eUL, 0xfc0007feUL, DecodeOpMffs<
#line 38 "ppc.isa"
					CONFIG
#line 140989 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 140994 "powerpc.tcc"
					>(0xfc000080UL, 0xfc0007feUL, DecodeOpMcrfs<
#line 38 "ppc.isa"
					CONFIG
#line 140998 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141003 "powerpc.tcc"
					>(0xfc000050UL, 0xfc0007feUL, DecodeOpFneg<
#line 38 "ppc.isa"
					CONFIG
#line 141007 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141012 "powerpc.tcc"
					>(0xfc000110UL, 0xfc0007feUL, DecodeOpFnabs<
#line 38 "ppc.isa"
					CONFIG
#line 141016 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141021 "powerpc.tcc"
					>(0xfc000090UL, 0xfc0007feUL, DecodeOpFmr<
#line 38 "ppc.isa"
					CONFIG
#line 141025 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141030 "powerpc.tcc"
					>(0xfc000210UL, 0xfc0007feUL, DecodeOpFabs<
#line 38 "ppc.isa"
					CONFIG
#line 141034 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141039 "powerpc.tcc"
					>(0xfc000018UL, 0xfc0007feUL, DecodeOpFrsp<
#line 38 "ppc.isa"
					CONFIG
#line 141043 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141048 "powerpc.tcc"
					>(0xfc00001eUL, 0xfc0007feUL, DecodeOpFctiwz<
#line 38 "ppc.isa"
					CONFIG
#line 141052 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141057 "powerpc.tcc"
					>(0xfc00001cUL, 0xfc0007feUL, DecodeOpFctiw<
#line 38 "ppc.isa"
					CONFIG
#line 141061 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141066 "powerpc.tcc"
					>(0xfc000000UL, 0xfc0007feUL, DecodeOpFcmpu<
#line 38 "ppc.isa"
					CONFIG
#line 141070 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141075 "powerpc.tcc"
					>(0xfc000040UL, 0xfc0007feUL, DecodeOpFcmpo<
#line 38 "ppc.isa"
					CONFIG
#line 141079 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141084 "powerpc.tcc"
					>(0xec00003cUL, 0xfc00003eUL, DecodeOpFnmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 141088 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141093 "powerpc.tcc"
					>(0xfc00003cUL, 0xfc00003eUL, DecodeOpFnmsub<
#line 38 "ppc.isa"
					CONFIG
#line 141097 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141102 "powerpc.tcc"
					>(0xec00003eUL, 0xfc00003eUL, DecodeOpFnmadds<
#line 38 "ppc.isa"
					CONFIG
#line 141106 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141111 "powerpc.tcc"
					>(0xfc00003eUL, 0xfc00003eUL, DecodeOpFnmadd<
#line 38 "ppc.isa"
					CONFIG
#line 141115 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141120 "powerpc.tcc"
					>(0xec000038UL, 0xfc00003eUL, DecodeOpFmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 141124 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141129 "powerpc.tcc"
					>(0xfc000038UL, 0xfc00003eUL, DecodeOpFmsub<
#line 38 "ppc.isa"
					CONFIG
#line 141133 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141138 "powerpc.tcc"
					>(0xec00003aUL, 0xfc00003eUL, DecodeOpFmadds<
#line 38 "ppc.isa"
					CONFIG
#line 141142 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141147 "powerpc.tcc"
					>(0xfc00003aUL, 0xfc00003eUL, DecodeOpFmadd<
#line 38 "ppc.isa"
					CONFIG
#line 141151 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141156 "powerpc.tcc"
					>(0xec00002cUL, 0xfc00003eUL, DecodeOpFsqrts<
#line 38 "ppc.isa"
					CONFIG
#line 141160 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141165 "powerpc.tcc"
					>(0xfc00002cUL, 0xfc00003eUL, DecodeOpFsqrt<
#line 38 "ppc.isa"
					CONFIG
#line 141169 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141174 "powerpc.tcc"
					>(0xfc00002eUL, 0xfc00003eUL, DecodeOpFsel<
#line 38 "ppc.isa"
					CONFIG
#line 141178 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141183 "powerpc.tcc"
					>(0xec000028UL, 0xfc00003eUL, DecodeOpFsubs<
#line 38 "ppc.isa"
					CONFIG
#line 141187 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141192 "powerpc.tcc"
					>(0xfc000028UL, 0xfc00003eUL, DecodeOpFsub<
#line 38 "ppc.isa"
					CONFIG
#line 141196 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141201 "powerpc.tcc"
					>(0xfc000034UL, 0xfc00003eUL, DecodeOpFrsqrte<
#line 38 "ppc.isa"
					CONFIG
#line 141205 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141210 "powerpc.tcc"
					>(0xec000030UL, 0xfc00003eUL, DecodeOpFres<
#line 38 "ppc.isa"
					CONFIG
#line 141214 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141219 "powerpc.tcc"
					>(0xec000032UL, 0xfc00003eUL, DecodeOpFmuls<
#line 38 "ppc.isa"
					CONFIG
#line 141223 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141228 "powerpc.tcc"
					>(0xfc000032UL, 0xfc00003eUL, DecodeOpFmul<
#line 38 "ppc.isa"
					CONFIG
#line 141232 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141237 "powerpc.tcc"
					>(0xec000024UL, 0xfc00003eUL, DecodeOpFdivs<
#line 38 "ppc.isa"
					CONFIG
#line 141241 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141246 "powerpc.tcc"
					>(0xfc000024UL, 0xfc00003eUL, DecodeOpFdiv<
#line 38 "ppc.isa"
					CONFIG
#line 141250 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141255 "powerpc.tcc"
					>(0xec00002aUL, 0xfc00003eUL, DecodeOpFadds<
#line 38 "ppc.isa"
					CONFIG
#line 141259 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141264 "powerpc.tcc"
					>(0xfc00002aUL, 0xfc00003eUL, DecodeOpFadd<
#line 38 "ppc.isa"
					CONFIG
#line 141268 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141273 "powerpc.tcc"
					>(0x7c000430UL, 0xfc0007feUL, DecodeOpSrw<
#line 38 "ppc.isa"
					CONFIG
#line 141277 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141282 "powerpc.tcc"
					>(0x7c000670UL, 0xfc0007feUL, DecodeOpSrawi<
#line 38 "ppc.isa"
					CONFIG
#line 141286 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141291 "powerpc.tcc"
					>(0x7c000630UL, 0xfc0007feUL, DecodeOpSraw<
#line 38 "ppc.isa"
					CONFIG
#line 141295 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141300 "powerpc.tcc"
					>(0x7c000030UL, 0xfc0007feUL, DecodeOpSlw<
#line 38 "ppc.isa"
					CONFIG
#line 141304 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141309 "powerpc.tcc"
					>(0x5c000000UL, 0xfc000000UL, DecodeOpRlwnm<
#line 38 "ppc.isa"
					CONFIG
#line 141313 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141318 "powerpc.tcc"
					>(0x54000000UL, 0xfc000000UL, DecodeOpRlwinm<
#line 38 "ppc.isa"
					CONFIG
#line 141322 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141327 "powerpc.tcc"
					>(0x50000000UL, 0xfc000000UL, DecodeOpRlwimi<
#line 38 "ppc.isa"
					CONFIG
#line 141331 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141336 "powerpc.tcc"
					>(0x6c000000UL, 0xfc000000UL, DecodeOpXoris<
#line 38 "ppc.isa"
					CONFIG
#line 141340 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141345 "powerpc.tcc"
					>(0x68000000UL, 0xfc000000UL, DecodeOpXori<
#line 38 "ppc.isa"
					CONFIG
#line 141349 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141354 "powerpc.tcc"
					>(0x7c000278UL, 0xfc0007feUL, DecodeOpXor<
#line 38 "ppc.isa"
					CONFIG
#line 141358 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141363 "powerpc.tcc"
					>(0x64000000UL, 0xfc000000UL, DecodeOpOris<
#line 38 "ppc.isa"
					CONFIG
#line 141367 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141372 "powerpc.tcc"
					>(0x60000000UL, 0xfc000000UL, DecodeOpOri<
#line 38 "ppc.isa"
					CONFIG
#line 141376 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141381 "powerpc.tcc"
					>(0x7c000338UL, 0xfc0007feUL, DecodeOpOrc<
#line 38 "ppc.isa"
					CONFIG
#line 141385 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141390 "powerpc.tcc"
					>(0x7c000378UL, 0xfc0007feUL, DecodeOpOr<
#line 38 "ppc.isa"
					CONFIG
#line 141394 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141399 "powerpc.tcc"
					>(0x7c0000f8UL, 0xfc0007feUL, DecodeOpNor<
#line 38 "ppc.isa"
					CONFIG
#line 141403 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141408 "powerpc.tcc"
					>(0x7c0003b8UL, 0xfc0007feUL, DecodeOpNand<
#line 38 "ppc.isa"
					CONFIG
#line 141412 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141417 "powerpc.tcc"
					>(0x7c000734UL, 0xfc0007feUL, DecodeOpExtsh<
#line 38 "ppc.isa"
					CONFIG
#line 141421 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141426 "powerpc.tcc"
					>(0x7c000774UL, 0xfc0007feUL, DecodeOpExtsb<
#line 38 "ppc.isa"
					CONFIG
#line 141430 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141435 "powerpc.tcc"
					>(0x7c000238UL, 0xfc0007feUL, DecodeOpEqv<
#line 38 "ppc.isa"
					CONFIG
#line 141439 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141444 "powerpc.tcc"
					>(0x7c000034UL, 0xfc0007feUL, DecodeOpCntlzw<
#line 38 "ppc.isa"
					CONFIG
#line 141448 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141453 "powerpc.tcc"
					>(0x74000000UL, 0xfc000000UL, DecodeOpAndis_<
#line 38 "ppc.isa"
					CONFIG
#line 141457 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141462 "powerpc.tcc"
					>(0x70000000UL, 0xfc000000UL, DecodeOpAndi_<
#line 38 "ppc.isa"
					CONFIG
#line 141466 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141471 "powerpc.tcc"
					>(0x7c000078UL, 0xfc0007feUL, DecodeOpAndc<
#line 38 "ppc.isa"
					CONFIG
#line 141475 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141480 "powerpc.tcc"
					>(0x7c000038UL, 0xfc0007feUL, DecodeOpAnd<
#line 38 "ppc.isa"
					CONFIG
#line 141484 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141489 "powerpc.tcc"
					>(0x28000000UL, 0xfc000000UL, DecodeOpCmpli<
#line 38 "ppc.isa"
					CONFIG
#line 141493 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141498 "powerpc.tcc"
					>(0x7c000040UL, 0xfc0007feUL, DecodeOpCmpl<
#line 38 "ppc.isa"
					CONFIG
#line 141502 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141507 "powerpc.tcc"
					>(0x2c000000UL, 0xfc000000UL, DecodeOpCmpi<
#line 38 "ppc.isa"
					CONFIG
#line 141511 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141516 "powerpc.tcc"
					>(0x7c000000UL, 0xfc0007feUL, DecodeOpCmp<
#line 38 "ppc.isa"
					CONFIG
#line 141520 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141525 "powerpc.tcc"
					>(0x7c000190UL, 0xfc0003feUL, DecodeOpSubfze<
#line 38 "ppc.isa"
					CONFIG
#line 141529 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141534 "powerpc.tcc"
					>(0x7c0001d0UL, 0xfc0003feUL, DecodeOpSubfme<
#line 38 "ppc.isa"
					CONFIG
#line 141538 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141543 "powerpc.tcc"
					>(0x20000000UL, 0xfc000000UL, DecodeOpSubfic<
#line 38 "ppc.isa"
					CONFIG
#line 141547 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141552 "powerpc.tcc"
					>(0x7c000110UL, 0xfc0003feUL, DecodeOpSubfe<
#line 38 "ppc.isa"
					CONFIG
#line 141556 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141561 "powerpc.tcc"
					>(0x7c000010UL, 0xfc0003feUL, DecodeOpSubfc<
#line 38 "ppc.isa"
					CONFIG
#line 141565 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141570 "powerpc.tcc"
					>(0x7c000050UL, 0xfc0003feUL, DecodeOpSubf<
#line 38 "ppc.isa"
					CONFIG
#line 141574 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141579 "powerpc.tcc"
					>(0x7c0000d0UL, 0xfc0003feUL, DecodeOpNeg<
#line 38 "ppc.isa"
					CONFIG
#line 141583 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141588 "powerpc.tcc"
					>(0x7c0001d6UL, 0xfc0003feUL, DecodeOpMullw<
#line 38 "ppc.isa"
					CONFIG
#line 141592 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141597 "powerpc.tcc"
					>(0x1c000000UL, 0xfc000000UL, DecodeOpMulli<
#line 38 "ppc.isa"
					CONFIG
#line 141601 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141606 "powerpc.tcc"
					>(0x7c000016UL, 0xfc0003feUL, DecodeOpMulhwu<
#line 38 "ppc.isa"
					CONFIG
#line 141610 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141615 "powerpc.tcc"
					>(0x7c000096UL, 0xfc0003feUL, DecodeOpMulhw<
#line 38 "ppc.isa"
					CONFIG
#line 141619 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141624 "powerpc.tcc"
					>(0x7c000396UL, 0xfc0003feUL, DecodeOpDivwu<
#line 38 "ppc.isa"
					CONFIG
#line 141628 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141633 "powerpc.tcc"
					>(0x7c0003d6UL, 0xfc0003feUL, DecodeOpDivw<
#line 38 "ppc.isa"
					CONFIG
#line 141637 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141642 "powerpc.tcc"
					>(0x7c000194UL, 0xfc0003feUL, DecodeOpAddze<
#line 38 "ppc.isa"
					CONFIG
#line 141646 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141651 "powerpc.tcc"
					>(0x7c0001d4UL, 0xfc0003feUL, DecodeOpAddme<
#line 38 "ppc.isa"
					CONFIG
#line 141655 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141660 "powerpc.tcc"
					>(0x3c000000UL, 0xfc000000UL, DecodeOpAddis<
#line 38 "ppc.isa"
					CONFIG
#line 141664 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141669 "powerpc.tcc"
					>(0x34000000UL, 0xfc000000UL, DecodeOpAddic_<
#line 38 "ppc.isa"
					CONFIG
#line 141673 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141678 "powerpc.tcc"
					>(0x30000000UL, 0xfc000000UL, DecodeOpAddic<
#line 38 "ppc.isa"
					CONFIG
#line 141682 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141687 "powerpc.tcc"
					>(0x38000000UL, 0xfc000000UL, DecodeOpAddi<
#line 38 "ppc.isa"
					CONFIG
#line 141691 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141696 "powerpc.tcc"
					>(0x7c000114UL, 0xfc0003feUL, DecodeOpAdde<
#line 38 "ppc.isa"
					CONFIG
#line 141700 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141705 "powerpc.tcc"
					>(0x7c000014UL, 0xfc0003feUL, DecodeOpAddc<
#line 38 "ppc.isa"
					CONFIG
#line 141709 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 141714 "powerpc.tcc"
					>(0x7c000214UL, 0xfc0003feUL, DecodeOpAdd<
#line 38 "ppc.isa"
					CONFIG
#line 141718 "powerpc.tcc"
					>));
				}

				template <
#line 38 "ppc.isa"
				class
#line 141725 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141728 "powerpc.tcc"
				>
				Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141733 "powerpc.tcc"
				>::~Decoder()
				{
					InvalidateDecodingCache();
				}

				template <
#line 38 "ppc.isa"
				class
#line 141742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141745 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141750 "powerpc.tcc"
				>::Fetch(void *, typename CONFIG::address_t, uint32_t)
				{
					assert( ! "Calling unimplemented virtual method Fetch" );
				}

				template <
#line 38 "ppc.isa"
				class
#line 141759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141762 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 141767 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141771 "powerpc.tcc"
				>::NCDecode(typename CONFIG::address_t addr)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 141777 "powerpc.tcc"
					> *operation;
					CodeType code;
					Fetch(&code, addr, sizeof(code));
#if BYTE_ORDER == LITTLE_ENDIAN
					if(!is_little_endian)
#else
					if(is_little_endian)
#endif
					{
						code = ((code & 0xff000000UL) >> 24) | ((code & 0x00ff0000UL) >> 8) | ((code & 0x0000ff00UL) << 8) | ((code & 0x000000ffUL) << 24);
					}
					unsigned int count = decode_table.size();
					unsigned int idx;
					for(idx = 0; idx < count; idx++)
					{
						if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
						{
							operation = decode_table[idx].decode(code, addr);
							operation->initialize_operands();
							operation->initialize_latencies();
							operation->initialize_function();
							operation->initialize_write_fpscr();
							operation->initialize_read_xer();
							operation->initialize_write_xer();
							operation->initialize_write_crbd();
							operation->initialize_write_cr();
							operation->initialize_read_crbb();
							operation->initialize_read_crba();
							operation->initialize_read_cr();
							operation->initialize_write_ctr();
							operation->initialize_write_lr();
							operation->initialize_write_ear();
							operation->initialize_write_ra();
							operation->initialize_write_rd();
							operation->initialize_write_fd();
							operation->initialize_read_ctr();
							operation->initialize_read_lr();
							operation->initialize_read_fs();
							operation->initialize_read_fc();
							operation->initialize_read_fb();
							operation->initialize_read_fa();
							operation->initialize_read_rs();
							operation->initialize_read_rb();
							operation->initialize_read_ra();
							operation->initialize_serialization();
							operation->initialize_unit();
							return operation;
						}
					}
					operation = new Operation<
#line 38 "ppc.isa"
					CONFIG
#line 141830 "powerpc.tcc"
					>(code, addr, "???");
					operation->initialize_operands();
					operation->initialize_latencies();
					operation->initialize_function();
					operation->initialize_write_fpscr();
					operation->initialize_read_xer();
					operation->initialize_write_xer();
					operation->initialize_write_crbd();
					operation->initialize_write_cr();
					operation->initialize_read_crbb();
					operation->initialize_read_crba();
					operation->initialize_read_cr();
					operation->initialize_write_ctr();
					operation->initialize_write_lr();
					operation->initialize_write_ear();
					operation->initialize_write_ra();
					operation->initialize_write_rd();
					operation->initialize_write_fd();
					operation->initialize_read_ctr();
					operation->initialize_read_lr();
					operation->initialize_read_fs();
					operation->initialize_read_fc();
					operation->initialize_read_fb();
					operation->initialize_read_fa();
					operation->initialize_read_rs();
					operation->initialize_read_rb();
					operation->initialize_read_ra();
					operation->initialize_serialization();
					operation->initialize_unit();
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 141866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141869 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 141874 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141878 "powerpc.tcc"
				>::NCDecode(typename CONFIG::address_t addr, CodeType code)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 141884 "powerpc.tcc"
					> *operation;
					unsigned int count = decode_table.size();
					unsigned int idx;
					for(idx = 0; idx < count; idx++)
					{
						if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
						{
							operation = decode_table[idx].decode(code, addr);
							operation->initialize_operands();
							operation->initialize_latencies();
							operation->initialize_function();
							operation->initialize_write_fpscr();
							operation->initialize_read_xer();
							operation->initialize_write_xer();
							operation->initialize_write_crbd();
							operation->initialize_write_cr();
							operation->initialize_read_crbb();
							operation->initialize_read_crba();
							operation->initialize_read_cr();
							operation->initialize_write_ctr();
							operation->initialize_write_lr();
							operation->initialize_write_ear();
							operation->initialize_write_ra();
							operation->initialize_write_rd();
							operation->initialize_write_fd();
							operation->initialize_read_ctr();
							operation->initialize_read_lr();
							operation->initialize_read_fs();
							operation->initialize_read_fc();
							operation->initialize_read_fb();
							operation->initialize_read_fa();
							operation->initialize_read_rs();
							operation->initialize_read_rb();
							operation->initialize_read_ra();
							operation->initialize_serialization();
							operation->initialize_unit();
							return operation;
						}
					}
					operation = new Operation<
#line 38 "ppc.isa"
					CONFIG
#line 141927 "powerpc.tcc"
					>(code, addr, "???");
					operation->initialize_operands();
					operation->initialize_latencies();
					operation->initialize_function();
					operation->initialize_write_fpscr();
					operation->initialize_read_xer();
					operation->initialize_write_xer();
					operation->initialize_write_crbd();
					operation->initialize_write_cr();
					operation->initialize_read_crbb();
					operation->initialize_read_crba();
					operation->initialize_read_cr();
					operation->initialize_write_ctr();
					operation->initialize_write_lr();
					operation->initialize_write_ear();
					operation->initialize_write_ra();
					operation->initialize_write_rd();
					operation->initialize_write_fd();
					operation->initialize_read_ctr();
					operation->initialize_read_lr();
					operation->initialize_read_fs();
					operation->initialize_read_fc();
					operation->initialize_read_fb();
					operation->initialize_read_fa();
					operation->initialize_read_rs();
					operation->initialize_read_rb();
					operation->initialize_read_ra();
					operation->initialize_serialization();
					operation->initialize_unit();
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 141963 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 141966 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 141971 "powerpc.tcc"
				>::InvalidateDecodingCache()
				{
					uint32_t index;
					mru_page = 0;
					for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
					{
						DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 141981 "powerpc.tcc"
						> *page, *next_page;
						page = decode_hash_table[index];
						if(page)
						{
							do
							{
								next_page = page->next;
								delete page;
								page = next_page;
							} while(page);
							decode_hash_table[index] = 0;
						}
					}
				}

				template <
#line 38 "ppc.isa"
				class
#line 142000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142003 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142008 "powerpc.tcc"
				>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
				{
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					if(mru_page && mru_page->key == page_key) mru_page = 0;
					uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 142017 "powerpc.tcc"
					> *prev, *cur;
					cur = decode_hash_table[index];
					if(cur)
					{
						if(cur->key == page_key)
						{
							decode_hash_table[index] = cur->next;
							delete cur;
							return;
						}
						prev = cur;
						cur = cur->next;
						if(cur)
						{
							do
							{
								if(cur->key == page_key)
								{
									prev->next = cur->next;
									cur->next = 0;
									delete cur;
									return;
								}
								prev = cur;
							} while((cur = cur->next) != 0);
						}
					}
				}

				template <
#line 38 "ppc.isa"
				class
#line 142050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142053 "powerpc.tcc"
				>
				inline DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 142058 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142062 "powerpc.tcc"
				>::FindPage(typename CONFIG::address_t page_key)
				{
					if(mru_page && mru_page->key == page_key) return mru_page;
					uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 142070 "powerpc.tcc"
					> *prev, *cur;
					cur = decode_hash_table[index];
					if(cur)
					{
						if(cur->key == page_key)
						{
							mru_page = cur;
							return cur;
						}
						prev = cur;
						cur = cur->next;
						if(cur)
						{
							do
							{
								if(cur->key == page_key)
								{
									prev->next = cur->next;
									cur->next= decode_hash_table[index];
									decode_hash_table[index] = cur;
									mru_page = cur;
									return cur;
								}
								prev = cur;
							} while((cur = cur->next) != 0);
						}
					}
					return 0;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142107 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 142112 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142116 "powerpc.tcc"
				>::Decode(typename CONFIG::address_t addr)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 142122 "powerpc.tcc"
					> *operation;
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 142128 "powerpc.tcc"
					> *page;
					page = FindPage(page_key);
					if(!page)
					{
						page = new DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 142136 "powerpc.tcc"
						>(page_key);
						uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
						page->next = decode_hash_table[index];
						decode_hash_table[index] = page;
						mru_page = page;
					}
					operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
					if(operation)
					{
						return operation;
					}
					operation = NCDecode(addr);
					page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142159 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 142164 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142168 "powerpc.tcc"
				>::Decode(typename CONFIG::address_t addr, CodeType insn)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 142174 "powerpc.tcc"
					> *operation;
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 142180 "powerpc.tcc"
					> *page;
					page = FindPage(page_key);
					if(!page)
					{
						page = new DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 142188 "powerpc.tcc"
						> (page_key);
						uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
						page->next = decode_hash_table[index];
						decode_hash_table[index] = page;
						mru_page = page;
					}
					operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
					if(operation)
					{
						if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
						return operation;
						delete operation;
					}
					operation = NCDecode(addr, insn);
					page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142213 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142218 "powerpc.tcc"
				>::SetLittleEndian()
				{
					is_little_endian = true;
				}

				template <
#line 38 "ppc.isa"
				class
#line 142227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 142230 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 142235 "powerpc.tcc"
				>::SetBigEndian()
				{
					is_little_endian = false;
				}

} } } } }
