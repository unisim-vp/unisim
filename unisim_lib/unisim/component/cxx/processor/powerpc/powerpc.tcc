#include "powerpc.hh"
#include <cassert>
namespace unisim { namespace component { namespace cxx { namespace processor { namespace powerpc {
template <
#line 38 "ppc.isa"
class
#line 8 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11 "powerpc.tcc"
>
Operation<
#line 38 "ppc.isa"
CONFIG
#line 16 "powerpc.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
function(
#line 127 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
FnInvalid
#line 22 "powerpc.tcc"
),
latency(
#line 57 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
0
#line 27 "powerpc.tcc"
),
nstages(
#line 58 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
0
#line 32 "powerpc.tcc"
),
noperands(
#line 124 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
0
#line 37 "powerpc.tcc"
),
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 38 "ppc.isa"
class
#line 48 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 51 "powerpc.tcc"
>
Operation<
#line 38 "ppc.isa"
CONFIG
#line 56 "powerpc.tcc"
>::~Operation()
{
}

template <
#line 38 "ppc.isa"
class
#line 64 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 67 "powerpc.tcc"
>
#line 758 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 71 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 75 "powerpc.tcc"
>::is_sign_extended()
{
#line 758 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 82 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 87 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 90 "powerpc.tcc"
>
#line 745 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 94 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 98 "powerpc.tcc"
>::load_need_conversion()
{
#line 745 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 105 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 110 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 113 "powerpc.tcc"
>
#line 733 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 117 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 121 "powerpc.tcc"
>::store_need_conversion()
{
#line 733 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 128 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 133 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 136 "powerpc.tcc"
>
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
uint32_t
#line 140 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 144 "powerpc.tcc"
>::get_single(
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
CPU<CONFIG> *
#line 148 "powerpc.tcc"
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 151 "powerpc.tcc"
)
{
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: operation do not provide single precision information: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 161 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 166 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 169 "powerpc.tcc"
>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
list <Operation<CONFIG> *>
#line 173 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 177 "powerpc.tcc"
>::split_into()
{
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: operation non splitable: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 187 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 192 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 195 "powerpc.tcc"
>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
bool
#line 199 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 203 "powerpc.tcc"
>::is_splitted()
{
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return false;
	}
#line 210 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 215 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 218 "powerpc.tcc"
>
#line 227 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
typename CONFIG::address_t
#line 222 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 226 "powerpc.tcc"
>::loadstore_effective_address(
#line 227 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
CPU<CONFIG> *
#line 230 "powerpc.tcc"
#line 227 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 233 "powerpc.tcc"
)
{
#line 227 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		return cpu->GetEA();
	}
#line 240 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 245 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 248 "powerpc.tcc"
>
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 252 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 256 "powerpc.tcc"
>::loadstore_string_numbyte(
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
CPU<CONFIG> *
#line 260 "powerpc.tcc"
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 263 "powerpc.tcc"
)
{
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action memory_acces_size not set for: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 273 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 278 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 281 "powerpc.tcc"
>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 285 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 289 "powerpc.tcc"
>::memory_access_size()
{
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action memory_acces_size not set for: ";
		Operation<CONFIG>::disasm(0, cerr);
		cerr << endl;
		exit(1);
	}
#line 299 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 304 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 307 "powerpc.tcc"
>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
int
#line 311 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 315 "powerpc.tcc"
>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
CPU<CONFIG> *
#line 319 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
cpu
#line 322 "powerpc.tcc"
)
{
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	{
		cerr << "ISS Error: action loadstore_target_register not set for: ";
		Operation<CONFIG>::disasm(0,cerr);
		cerr << endl;
		exit(1);
	}
#line 332 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 337 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 340 "powerpc.tcc"
>
#line 120 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 344 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 348 "powerpc.tcc"
>::branch_conditioned()
{
#line 120 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return true;
	}
#line 355 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 360 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 363 "powerpc.tcc"
>
#line 100 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 367 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 371 "powerpc.tcc"
>::branch_linked()
{
#line 100 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return false;
	}
#line 378 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 383 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 386 "powerpc.tcc"
>
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
bool
#line 390 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 394 "powerpc.tcc"
>::branch_statically_predicted_taken(
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
CPU<CONFIG> *
#line 398 "powerpc.tcc"
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cpu
#line 401 "powerpc.tcc"
)
{
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return true;
	}
#line 408 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 413 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 416 "powerpc.tcc"
>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::address_t
#line 420 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 424 "powerpc.tcc"
>::get_target_address(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
typename CONFIG::address_t
#line 428 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cia
#line 431 "powerpc.tcc"
,
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
CPU<CONFIG> *
#line 435 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
cpu
#line 438 "powerpc.tcc"
)
{
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	{
		return 0;
	}
#line 445 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 450 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 453 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 460 "powerpc.tcc"
>::initialize_operands()
{
#line 127 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
	{
		stringstream ss;
		Operation<CONFIG>::disasm(0,ss);
		string s;
		ss >> s;
		if(s!="???")
		{ cerr << "Error: missing initialize_operands for instruction \"" << s << "\" !" << endl;
		}
	}
#line 473 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 478 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 481 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 488 "powerpc.tcc"
>::initialize_latencies()
{
#line 64 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
	{
	}
#line 494 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 499 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 502 "powerpc.tcc"
>

void
Operation<
#line 38 "ppc.isa"
CONFIG
#line 509 "powerpc.tcc"
>::initialize_function()
{
#line 129 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
	{
		/*
		Operation<CONFIG>::function = FnInvalid;
		registers_written = RegNone;
		*/
	}
#line 519 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 524 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 527 "powerpc.tcc"
>
#line 48 "ppc.isa"
void
#line 531 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 535 "powerpc.tcc"
>::disasm(
#line 48 "ppc.isa"
CPU<CONFIG> *
#line 539 "powerpc.tcc"
#line 48 "ppc.isa"
cpu
#line 542 "powerpc.tcc"
,
#line 48 "ppc.isa"
ostream&
#line 546 "powerpc.tcc"
#line 48 "ppc.isa"
os
#line 549 "powerpc.tcc"
)
{
#line 48 "ppc.isa"
	{
		os << "???";
	}
#line 556 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 561 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 564 "powerpc.tcc"
>
#line 44 "ppc.isa"
void
#line 568 "powerpc.tcc"
Operation<
#line 38 "ppc.isa"
CONFIG
#line 572 "powerpc.tcc"
>::execute(
#line 44 "ppc.isa"
CPU<CONFIG> *
#line 576 "powerpc.tcc"
#line 44 "ppc.isa"
cpu
#line 579 "powerpc.tcc"
)
{
#line 44 "ppc.isa"
	{
		throw IllegalInstructionException<CONFIG>();
	}
#line 586 "powerpc.tcc"
}
template <
#line 38 "ppc.isa"
class
#line 591 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 594 "powerpc.tcc"
>
class OpAdd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 599 "powerpc.tcc"
>
{
public:
	OpAdd(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 646 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 650 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 653 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 658 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 662 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 665 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 669 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 672 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 827 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 830 "powerpc.tcc"
>
class OpAddc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 835 "powerpc.tcc"
>
{
public:
	OpAddc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 882 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 886 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 889 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 894 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 898 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 901 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 905 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 908 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 1063 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1066 "powerpc.tcc"
>
class OpAdde : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1071 "powerpc.tcc"
>
{
public:
	OpAdde(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 1118 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 1122 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 1125 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 1130 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 1134 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 1137 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 1141 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 1144 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 1299 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1302 "powerpc.tcc"
>
class OpAddi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1307 "powerpc.tcc"
>
{
public:
	OpAddi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 1352 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 1356 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 1359 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 1364 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 1368 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 1371 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 1375 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 1378 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 1533 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1536 "powerpc.tcc"
>
class OpAddic : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1541 "powerpc.tcc"
>
{
public:
	OpAddic(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 1586 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 1590 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 1593 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 1598 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 1602 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 1605 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 1609 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 1612 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 1767 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 1770 "powerpc.tcc"
>
class OpAddic_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 1775 "powerpc.tcc"
>
{
public:
	OpAddic_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 1820 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 1824 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 1827 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 1832 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 1836 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 1839 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 1843 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 1846 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2001 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2004 "powerpc.tcc"
>
class OpAddis : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2009 "powerpc.tcc"
>
{
public:
	OpAddis(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 2054 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 2058 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 2061 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 2066 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 2070 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 2073 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 2077 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 2080 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2235 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2238 "powerpc.tcc"
>
class OpAddme : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2243 "powerpc.tcc"
>
{
public:
	OpAddme(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 2289 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 2293 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 2296 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 2301 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 2305 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 2308 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 2312 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 2315 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2470 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2473 "powerpc.tcc"
>
class OpAddze : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2478 "powerpc.tcc"
>
{
public:
	OpAddze(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 2524 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 2528 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 2531 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 2536 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 2540 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 2543 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 2547 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 2550 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2705 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2708 "powerpc.tcc"
>
class OpDivw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2713 "powerpc.tcc"
>
{
public:
	OpDivw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 2760 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 2764 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 2767 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 2772 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 2776 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 2779 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 2783 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 2786 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 2941 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 2944 "powerpc.tcc"
>
class OpDivwu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 2949 "powerpc.tcc"
>
{
public:
	OpDivwu(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 2996 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 3000 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 3003 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 3008 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 3012 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 3015 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 3019 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 3022 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3177 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3180 "powerpc.tcc"
>
class OpMulhw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3185 "powerpc.tcc"
>
{
public:
	OpMulhw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 3231 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 3235 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 3238 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 3243 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 3247 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 3250 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 3254 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 3257 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3412 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3415 "powerpc.tcc"
>
class OpMulhwu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3420 "powerpc.tcc"
>
{
public:
	OpMulhwu(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 3466 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 3470 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 3473 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 3478 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 3482 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 3485 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 3489 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 3492 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3647 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3650 "powerpc.tcc"
>
class OpMulli : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3655 "powerpc.tcc"
>
{
public:
	OpMulli(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 3700 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 3704 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 3707 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 3712 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 3716 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 3719 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 3723 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 3726 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 3881 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 3884 "powerpc.tcc"
>
class OpMullw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 3889 "powerpc.tcc"
>
{
public:
	OpMullw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 3936 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 3940 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 3943 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 3948 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 3952 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 3955 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 3959 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 3962 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4117 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4120 "powerpc.tcc"
>
class OpNeg : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4125 "powerpc.tcc"
>
{
public:
	OpNeg(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 4171 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 4175 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 4178 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 4183 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 4187 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 4190 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 4194 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 4197 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4352 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4355 "powerpc.tcc"
>
class OpSubf : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4360 "powerpc.tcc"
>
{
public:
	OpSubf(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 4407 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 4411 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 4414 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 4419 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 4423 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 4426 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 4430 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 4433 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4588 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4591 "powerpc.tcc"
>
class OpSubfc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4596 "powerpc.tcc"
>
{
public:
	OpSubfc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 4643 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 4647 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 4650 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 4655 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 4659 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 4662 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 4666 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 4669 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 4824 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 4827 "powerpc.tcc"
>
class OpSubfe : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 4832 "powerpc.tcc"
>
{
public:
	OpSubfe(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t rb;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 4879 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 4883 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 4886 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 4891 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 4895 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 4898 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 4902 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 4905 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5060 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5063 "powerpc.tcc"
>
class OpSubfic : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5068 "powerpc.tcc"
>
{
public:
	OpSubfic(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 5113 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 5117 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 5120 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 5125 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 5129 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 5132 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 5136 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 5139 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5294 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5297 "powerpc.tcc"
>
class OpSubfme : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5302 "powerpc.tcc"
>
{
public:
	OpSubfme(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 5348 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 5352 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 5355 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 5360 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 5364 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 5367 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 5371 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 5374 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5529 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5532 "powerpc.tcc"
>
class OpSubfze : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5537 "powerpc.tcc"
>
{
public:
	OpSubfze(CodeType code, typename CONFIG::address_t addr);
	uint32_t rd;
	uint32_t ra;
	uint32_t oe;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 5583 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 5587 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 5590 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 5595 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 5599 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 5602 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 5606 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 5609 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5764 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 5767 "powerpc.tcc"
>
class OpCmp : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 5772 "powerpc.tcc"
>
{
public:
	OpCmp(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t rb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 5818 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 5822 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 5825 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 5830 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 5834 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 5837 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 5841 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 5844 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 5999 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6002 "powerpc.tcc"
>
class OpCmpi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6007 "powerpc.tcc"
>
{
public:
	OpCmpi(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	int32_t simm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 6053 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 6057 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 6060 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 6065 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 6069 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 6072 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 6076 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 6079 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6234 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6237 "powerpc.tcc"
>
class OpCmpl : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6242 "powerpc.tcc"
>
{
public:
	OpCmpl(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t rb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 6288 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 6292 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 6295 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 6300 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 6304 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 6307 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 6311 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 6314 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6469 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6472 "powerpc.tcc"
>
class OpCmpli : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6477 "powerpc.tcc"
>
{
public:
	OpCmpli(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t l;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 6523 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 6527 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 6530 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 6535 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 6539 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 6542 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 6546 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 6549 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6704 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6707 "powerpc.tcc"
>
class OpAnd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6712 "powerpc.tcc"
>
{
public:
	OpAnd(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 6758 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 6762 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 6765 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 6770 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 6774 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 6777 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 6781 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 6784 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 6939 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 6942 "powerpc.tcc"
>
class OpAndc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 6947 "powerpc.tcc"
>
{
public:
	OpAndc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 6993 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 6997 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 7000 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 7005 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 7009 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 7012 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 7016 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 7019 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7174 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7177 "powerpc.tcc"
>
class OpAndi_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7182 "powerpc.tcc"
>
{
public:
	OpAndi_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 7227 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 7231 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 7234 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 7239 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 7243 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 7246 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 7250 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 7253 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7408 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7411 "powerpc.tcc"
>
class OpAndis_ : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7416 "powerpc.tcc"
>
{
public:
	OpAndis_(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 7461 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 7465 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 7468 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 7473 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 7477 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 7480 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 7484 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 7487 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7642 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7645 "powerpc.tcc"
>
class OpCntlzw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7650 "powerpc.tcc"
>
{
public:
	OpCntlzw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 7695 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 7699 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 7702 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 7707 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 7711 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 7714 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 7718 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 7721 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 7876 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 7879 "powerpc.tcc"
>
class OpEqv : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 7884 "powerpc.tcc"
>
{
public:
	OpEqv(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 7930 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 7934 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 7937 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 7942 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 7946 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 7949 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 7953 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 7956 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8111 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8114 "powerpc.tcc"
>
class OpExtsb : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8119 "powerpc.tcc"
>
{
public:
	OpExtsb(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 8164 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 8168 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 8171 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 8176 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 8180 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 8183 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 8187 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 8190 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8345 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8348 "powerpc.tcc"
>
class OpExtsh : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8353 "powerpc.tcc"
>
{
public:
	OpExtsh(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 8398 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 8402 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 8405 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 8410 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 8414 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 8417 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 8421 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 8424 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8579 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8582 "powerpc.tcc"
>
class OpNand : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8587 "powerpc.tcc"
>
{
public:
	OpNand(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 8633 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 8637 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 8640 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 8645 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 8649 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 8652 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 8656 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 8659 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 8814 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 8817 "powerpc.tcc"
>
class OpNor : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 8822 "powerpc.tcc"
>
{
public:
	OpNor(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 8868 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 8872 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 8875 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 8880 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 8884 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 8887 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 8891 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 8894 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9049 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9052 "powerpc.tcc"
>
class OpOr : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9057 "powerpc.tcc"
>
{
public:
	OpOr(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 9103 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 9107 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 9110 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 9115 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 9119 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 9122 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 9126 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 9129 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9284 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9287 "powerpc.tcc"
>
class OpOrc : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9292 "powerpc.tcc"
>
{
public:
	OpOrc(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 9338 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 9342 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 9345 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 9350 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 9354 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 9357 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 9361 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 9364 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9519 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9522 "powerpc.tcc"
>
class OpOri : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9527 "powerpc.tcc"
>
{
public:
	OpOri(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 9572 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 9576 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 9579 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 9584 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 9588 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 9591 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 9595 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 9598 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9753 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9756 "powerpc.tcc"
>
class OpOris : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9761 "powerpc.tcc"
>
{
public:
	OpOris(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 9806 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 9810 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 9813 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 9818 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 9822 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 9825 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 9829 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 9832 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 9987 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 9990 "powerpc.tcc"
>
class OpXor : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 9995 "powerpc.tcc"
>
{
public:
	OpXor(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 10041 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 10045 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 10048 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 10053 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 10057 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 10060 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 10064 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 10067 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10222 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10225 "powerpc.tcc"
>
class OpXori : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10230 "powerpc.tcc"
>
{
public:
	OpXori(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 10275 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 10279 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 10282 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 10287 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 10291 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 10294 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 10298 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 10301 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10456 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10459 "powerpc.tcc"
>
class OpXoris : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10464 "powerpc.tcc"
>
{
public:
	OpXoris(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t uimm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 10509 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 10513 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 10516 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 10521 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 10525 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 10528 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 10532 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 10535 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10690 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10693 "powerpc.tcc"
>
class OpRlwimi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10698 "powerpc.tcc"
>
{
public:
	OpRlwimi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 10746 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 10750 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 10753 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 10758 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 10762 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 10765 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 10769 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 10772 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 10927 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 10930 "powerpc.tcc"
>
class OpRlwinm : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 10935 "powerpc.tcc"
>
{
public:
	OpRlwinm(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 10983 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 10987 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 10990 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 10995 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 10999 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 11002 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 11006 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 11009 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11164 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11167 "powerpc.tcc"
>
class OpRlwnm : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11172 "powerpc.tcc"
>
{
public:
	OpRlwnm(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t mb;
	uint32_t me;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 11220 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 11224 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 11227 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 11232 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 11236 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 11239 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 11243 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 11246 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11401 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11404 "powerpc.tcc"
>
class OpSlw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11409 "powerpc.tcc"
>
{
public:
	OpSlw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 11455 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 11459 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 11462 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 11467 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 11471 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 11474 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 11478 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 11481 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11636 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11639 "powerpc.tcc"
>
class OpSraw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11644 "powerpc.tcc"
>
{
public:
	OpSraw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 11690 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 11694 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 11697 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 11702 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 11706 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 11709 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 11713 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 11716 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 11871 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 11874 "powerpc.tcc"
>
class OpSrawi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 11879 "powerpc.tcc"
>
{
public:
	OpSrawi(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t sh;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 11925 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 11929 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 11932 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 11937 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 11941 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 11944 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 11948 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 11951 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12106 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12109 "powerpc.tcc"
>
class OpSrw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12114 "powerpc.tcc"
>
{
public:
	OpSrw(CodeType code, typename CONFIG::address_t addr);
	uint32_t rs;
	uint32_t ra;
	uint32_t rb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 12160 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 12164 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 12167 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 12172 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 12176 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 12179 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 12183 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 12186 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12341 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12344 "powerpc.tcc"
>
class OpFadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12349 "powerpc.tcc"
>
{
public:
	OpFadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 12395 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 12399 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 12402 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 12407 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 12411 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 12414 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 12418 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 12421 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12576 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12579 "powerpc.tcc"
>
class OpFadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12584 "powerpc.tcc"
>
{
public:
	OpFadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 12630 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 12634 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 12637 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 12642 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 12646 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 12649 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 12653 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 12656 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 12811 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 12814 "powerpc.tcc"
>
class OpFdiv : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 12819 "powerpc.tcc"
>
{
public:
	OpFdiv(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 12865 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 12869 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 12872 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 12877 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 12881 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 12884 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 12888 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 12891 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13046 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13049 "powerpc.tcc"
>
class OpFdivs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13054 "powerpc.tcc"
>
{
public:
	OpFdivs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 13100 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 13104 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 13107 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 13112 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 13116 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 13119 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 13123 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 13126 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13281 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13284 "powerpc.tcc"
>
class OpFmul : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13289 "powerpc.tcc"
>
{
public:
	OpFmul(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 13335 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 13339 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 13342 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 13347 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 13351 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 13354 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 13358 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 13361 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13516 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13519 "powerpc.tcc"
>
class OpFmuls : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13524 "powerpc.tcc"
>
{
public:
	OpFmuls(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 13570 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 13574 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 13577 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 13582 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 13586 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 13589 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 13593 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 13596 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13751 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13754 "powerpc.tcc"
>
class OpFres : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13759 "powerpc.tcc"
>
{
public:
	OpFres(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 13804 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 13808 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 13811 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 13816 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 13820 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 13823 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 13827 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 13830 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 13985 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 13988 "powerpc.tcc"
>
class OpFrsqrte : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 13993 "powerpc.tcc"
>
{
public:
	OpFrsqrte(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 14038 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 14042 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 14045 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 14050 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 14054 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 14057 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 14061 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 14064 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14219 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14222 "powerpc.tcc"
>
class OpFsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14227 "powerpc.tcc"
>
{
public:
	OpFsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 14273 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 14277 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 14280 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 14285 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 14289 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 14292 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 14296 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 14299 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14454 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14457 "powerpc.tcc"
>
class OpFsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14462 "powerpc.tcc"
>
{
public:
	OpFsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 14508 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 14512 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 14515 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 14520 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 14524 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 14527 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 14531 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 14534 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14689 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14692 "powerpc.tcc"
>
class OpFsel : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14697 "powerpc.tcc"
>
{
public:
	OpFsel(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 14744 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 14748 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 14751 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 14756 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 14760 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 14763 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 14767 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 14770 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 14925 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 14928 "powerpc.tcc"
>
class OpFsqrt : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 14933 "powerpc.tcc"
>
{
public:
	OpFsqrt(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 14978 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 14982 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 14985 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 14990 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 14994 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 14997 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 15001 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 15004 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15159 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15162 "powerpc.tcc"
>
class OpFsqrts : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15167 "powerpc.tcc"
>
{
public:
	OpFsqrts(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 15212 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 15216 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 15219 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 15224 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 15228 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 15231 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 15235 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 15238 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15393 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15396 "powerpc.tcc"
>
class OpFmadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15401 "powerpc.tcc"
>
{
public:
	OpFmadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 15448 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 15452 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 15455 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 15460 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 15464 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 15467 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 15471 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 15474 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15629 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15632 "powerpc.tcc"
>
class OpFmadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15637 "powerpc.tcc"
>
{
public:
	OpFmadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 15684 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 15688 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 15691 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 15696 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 15700 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 15703 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 15707 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 15710 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 15865 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 15868 "powerpc.tcc"
>
class OpFmsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 15873 "powerpc.tcc"
>
{
public:
	OpFmsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 15920 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 15924 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 15927 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 15932 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 15936 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 15939 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 15943 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 15946 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16101 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16104 "powerpc.tcc"
>
class OpFmsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16109 "powerpc.tcc"
>
{
public:
	OpFmsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 16156 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 16160 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 16163 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 16168 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 16172 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 16175 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 16179 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 16182 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16337 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16340 "powerpc.tcc"
>
class OpFnmadd : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16345 "powerpc.tcc"
>
{
public:
	OpFnmadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 16392 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 16396 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 16399 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 16404 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 16408 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 16411 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 16415 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 16418 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16573 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16576 "powerpc.tcc"
>
class OpFnmadds : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16581 "powerpc.tcc"
>
{
public:
	OpFnmadds(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 16628 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 16632 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 16635 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 16640 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 16644 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 16647 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 16651 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 16654 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 16809 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 16812 "powerpc.tcc"
>
class OpFnmsub : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 16817 "powerpc.tcc"
>
{
public:
	OpFnmsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 16864 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 16868 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 16871 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 16876 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 16880 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 16883 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 16887 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 16890 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17045 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17048 "powerpc.tcc"
>
class OpFnmsubs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17053 "powerpc.tcc"
>
{
public:
	OpFnmsubs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fa;
	uint32_t fb;
	uint32_t fc;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 17100 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 17104 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 17107 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 17112 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 17116 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 17119 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 17123 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 17126 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17281 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17284 "powerpc.tcc"
>
class OpFcmpo : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17289 "powerpc.tcc"
>
{
public:
	OpFcmpo(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t fa;
	uint32_t fb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 17334 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 17338 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 17341 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 17346 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 17350 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 17353 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 17357 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 17360 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17515 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17518 "powerpc.tcc"
>
class OpFcmpu : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17523 "powerpc.tcc"
>
{
public:
	OpFcmpu(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t fa;
	uint32_t fb;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 17568 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 17572 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 17575 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 17580 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 17584 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 17587 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 17591 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 17594 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17749 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17752 "powerpc.tcc"
>
class OpFctiw : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17757 "powerpc.tcc"
>
{
public:
	OpFctiw(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 17802 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 17806 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 17809 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 17814 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 17818 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 17821 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 17825 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 17828 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 17983 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 17986 "powerpc.tcc"
>
class OpFctiwz : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 17991 "powerpc.tcc"
>
{
public:
	OpFctiwz(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 18036 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 18040 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 18043 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 18048 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 18052 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 18055 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 18059 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 18062 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18217 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18220 "powerpc.tcc"
>
class OpFrsp : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18225 "powerpc.tcc"
>
{
public:
	OpFrsp(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 18270 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 18274 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 18277 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 18282 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 18286 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 18289 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 18293 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 18296 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18451 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18454 "powerpc.tcc"
>
class OpFabs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18459 "powerpc.tcc"
>
{
public:
	OpFabs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 18504 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 18508 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 18511 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 18516 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 18520 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 18523 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 18527 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 18530 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18685 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18688 "powerpc.tcc"
>
class OpFmr : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18693 "powerpc.tcc"
>
{
public:
	OpFmr(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 18738 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 18742 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 18745 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 18750 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 18754 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 18757 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 18761 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 18764 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 18919 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 18922 "powerpc.tcc"
>
class OpFnabs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 18927 "powerpc.tcc"
>
{
public:
	OpFnabs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 18972 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 18976 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 18979 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 18984 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 18988 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 18991 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 18995 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 18998 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19153 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19156 "powerpc.tcc"
>
class OpFneg : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19161 "powerpc.tcc"
>
{
public:
	OpFneg(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 19206 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 19210 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 19213 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 19218 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 19222 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 19225 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 19229 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 19232 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19387 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19390 "powerpc.tcc"
>
class OpMcrfs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19395 "powerpc.tcc"
>
{
public:
	OpMcrfs(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t crfS;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 19439 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 19443 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 19446 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 19451 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 19455 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 19458 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 19462 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 19465 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19620 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19623 "powerpc.tcc"
>
class OpMffs : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19628 "powerpc.tcc"
>
{
public:
	OpMffs(CodeType code, typename CONFIG::address_t addr);
	uint32_t fd;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 19672 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 19676 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 19679 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 19684 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 19688 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 19691 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 19695 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 19698 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 19853 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 19856 "powerpc.tcc"
>
class OpMtfsb0 : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 19861 "powerpc.tcc"
>
{
public:
	OpMtfsb0(CodeType code, typename CONFIG::address_t addr);
	uint32_t crbD;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 19905 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 19909 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 19912 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 19917 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 19921 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 19924 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 19928 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 19931 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20086 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20089 "powerpc.tcc"
>
class OpMtfsb1 : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20094 "powerpc.tcc"
>
{
public:
	OpMtfsb1(CodeType code, typename CONFIG::address_t addr);
	uint32_t crbD;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 20138 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 20142 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 20145 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 20150 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 20154 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 20157 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 20161 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 20164 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20319 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20322 "powerpc.tcc"
>
class OpMtfsf : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20327 "powerpc.tcc"
>
{
public:
	OpMtfsf(CodeType code, typename CONFIG::address_t addr);
	uint32_t fm;
	uint32_t fb;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 20372 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 20376 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 20379 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 20384 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 20388 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 20391 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 20395 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 20398 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20553 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20556 "powerpc.tcc"
>
class OpMtfsfi : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20561 "powerpc.tcc"
>
{
public:
	OpMtfsfi(CodeType code, typename CONFIG::address_t addr);
	uint32_t crfD;
	uint32_t imm;
	uint32_t rc;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 20606 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 20610 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 20613 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 20618 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 20622 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 20625 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 20629 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 20632 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
private:
};

template <
#line 38 "ppc.isa"
class
#line 20787 "powerpc.tcc"
#line 38 "ppc.isa"
CONFIG
#line 20790 "powerpc.tcc"
>
class OpB : public Operation<
#line 38 "ppc.isa"
CONFIG
#line 20795 "powerpc.tcc"
>
{
public:
	OpB(CodeType code, typename CONFIG::address_t addr);
	int32_t li;
	uint32_t aa;
	uint32_t lk;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 44 "ppc.isa"
	void
#line 20840 "powerpc.tcc"
	execute(
#line 44 "ppc.isa"
	CPU<CONFIG> *
#line 20844 "powerpc.tcc"
#line 44 "ppc.isa"
	cpu
#line 20847 "powerpc.tcc"
	);
	virtual
#line 48 "ppc.isa"
	void
#line 20852 "powerpc.tcc"
	disasm(
#line 48 "ppc.isa"
	CPU<CONFIG> *
#line 20856 "powerpc.tcc"
#line 48 "ppc.isa"
	cpu
#line 20859 "powerpc.tcc"
	,
#line 48 "ppc.isa"
	ostream&
#line 20863 "powerpc.tcc"
#line 48 "ppc.isa"
	os
#line 20866 "powerpc.tcc"
	);
	//include "perf.isa"
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
	*          Eric Renard (erenard@lri.fr)
	*          Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	//var registers_written : {registers_written_t} = {0}
	/** Functions **/
	virtual
	void
	initialize_function();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Initilize the latency values of each instrucion
	*/
	virtual
	void
	initialize_latencies();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/* --------------------------------------------------------------------------

	Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
	Mais sinon elle respecte bien le format rd = premier registre

	> lbzu lhau lhzu lwzu
	> lbzux, lhaux, lhzux, lwzux
	> stbu, sthu, stwu
	> stbux, sthux, stwux

	> lfdu, lfsu
	> lfdux
	> stfdu, stfsu
	> stfdux, stfsux

	manque les loafd flottant a update comme lfdu)
	-------------------------------------------------------------------------- */
	/* ----
	lswi: load string should output to (rd .. rd+ ceil(nb/4))
	lswx: should output to (rd.. XER[25..31] /4)
	stswi: should input (rs .. rs+ceil(nb/4))
	stswx: should input (rs .. rs+ceil(XER[25..31]/4))
	----- */
	/*
* NOTES :
	*     -- For store fisrt operand is to oprand to write into memory.
	*     -- For other instructions (to defined)
	*/
	virtual
	void
	initialize_operands();
	/*
	*  Copyright (c) 2007,
	*  INRIA Futurs
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
	*          David Parello (david.parello@univ-perp.fr)
	*/
	/**
	* Returns the target address of branch instructions.
	* The AA bit inform if the branch is relative or absolute.
	*/
	virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::address_t
#line 21056 "powerpc.tcc"
	get_target_address(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::address_t
#line 21060 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cia
#line 21063 "powerpc.tcc"
	,
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	CPU<CONFIG> *
#line 21067 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cpu
#line 21070 "powerpc.tcc"
	);
	// ----------------------------------------------------------------------------
	/**
	* Returns true if the branch is statically preficten taken.
	* The powerpc instruction set has a bit of the bo field to set
	* up the default branch prediction value statically.
	* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
	*/
	virtual
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	bool
#line 21082 "powerpc.tcc"
	branch_statically_predicted_taken(
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	CPU<CONFIG> *
#line 21086 "powerpc.tcc"
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cpu
#line 21089 "powerpc.tcc"
	);
	// Are branches linked ?
	//action {bool} branch_linked({CPU<CONFIG> *} {cpu}) {
		virtual
#line 100 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 21096 "powerpc.tcc"
		branch_linked();
		virtual
#line 120 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 21101 "powerpc.tcc"
		branch_conditioned();
	private:
	};

	template <
#line 38 "ppc.isa"
	class
#line 21109 "powerpc.tcc"
#line 38 "ppc.isa"
	CONFIG
#line 21112 "powerpc.tcc"
	>
	class OpBc : public Operation<
#line 38 "ppc.isa"
	CONFIG
#line 21117 "powerpc.tcc"
	>
	{
	public:
		OpBc(CodeType code, typename CONFIG::address_t addr);
		uint32_t bo;
		uint32_t bi;
		int32_t bd;
		uint32_t aa;
		uint32_t lk;
		/*
		*  Copyright (c) 2007,
		*  Commissariat a l'Energie Atomique (CEA)
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
		*/
		/* instruction endian */
		virtual
#line 44 "ppc.isa"
		void
#line 21164 "powerpc.tcc"
		execute(
#line 44 "ppc.isa"
		CPU<CONFIG> *
#line 21168 "powerpc.tcc"
#line 44 "ppc.isa"
		cpu
#line 21171 "powerpc.tcc"
		);
		virtual
#line 48 "ppc.isa"
		void
#line 21176 "powerpc.tcc"
		disasm(
#line 48 "ppc.isa"
		CPU<CONFIG> *
#line 21180 "powerpc.tcc"
#line 48 "ppc.isa"
		cpu
#line 21183 "powerpc.tcc"
		,
#line 48 "ppc.isa"
		ostream&
#line 21187 "powerpc.tcc"
#line 48 "ppc.isa"
		os
#line 21190 "powerpc.tcc"
		);
		//include "perf.isa"
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
		*          Eric Renard (erenard@lri.fr)
		*          Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		//var registers_written : {registers_written_t} = {0}
		/** Functions **/
		virtual
		void
		initialize_function();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/**
		* Initilize the latency values of each instrucion
		*/
		virtual
		void
		initialize_latencies();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/* --------------------------------------------------------------------------

		Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
		Mais sinon elle respecte bien le format rd = premier registre

		> lbzu lhau lhzu lwzu
		> lbzux, lhaux, lhzux, lwzux
		> stbu, sthu, stwu
		> stbux, sthux, stwux

		> lfdu, lfsu
		> lfdux
		> stfdu, stfsu
		> stfdux, stfsux

		manque les loafd flottant a update comme lfdu)
		-------------------------------------------------------------------------- */
		/* ----
		lswi: load string should output to (rd .. rd+ ceil(nb/4))
		lswx: should output to (rd.. XER[25..31] /4)
		stswi: should input (rs .. rs+ceil(nb/4))
		stswx: should input (rs .. rs+ceil(XER[25..31]/4))
		----- */
		/*
	* NOTES :
		*     -- For store fisrt operand is to oprand to write into memory.
		*     -- For other instructions (to defined)
		*/
		virtual
		void
		initialize_operands();
		/*
		*  Copyright (c) 2007,
		*  INRIA Futurs
		*  All rights reserved.
		*
		*  Redistribution and use in source and binary forms, with or without modification,
	*  are permitted provided that the following conditions are met:
		*
		*   - Redistributions of source code must retain the above copyright notice, this
		*     list of conditions and the following disclaimer.
		*
		*   - Redistributions in binary form must reproduce the above copyright notice,
		*     this list of conditions and the following disclaimer in the documentation
		*     and/or other materials provided with the distribution.
		*
		*   - Neither the name of CEA nor the names of its contributors may be used to
		*     endorse or promote products derived from this software without specific prior
		*     written permission.
		*
		*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
		*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
		*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
		*  DISCLAIMED.
		*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
		*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
		*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
		*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
		*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		*
		* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
		*          David Parello (david.parello@univ-perp.fr)
		*/
		/**
		* Returns the target address of branch instructions.
		* The AA bit inform if the branch is relative or absolute.
		*/
		virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::address_t
#line 21380 "powerpc.tcc"
		get_target_address(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		typename CONFIG::address_t
#line 21384 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cia
#line 21387 "powerpc.tcc"
		,
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		CPU<CONFIG> *
#line 21391 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cpu
#line 21394 "powerpc.tcc"
		);
		// ----------------------------------------------------------------------------
		/**
		* Returns true if the branch is statically preficten taken.
		* The powerpc instruction set has a bit of the bo field to set
		* up the default branch prediction value statically.
		* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
		*/
		virtual
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		bool
#line 21406 "powerpc.tcc"
		branch_statically_predicted_taken(
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		CPU<CONFIG> *
#line 21410 "powerpc.tcc"
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
		cpu
#line 21413 "powerpc.tcc"
		);
		// Are branches linked ?
		//action {bool} branch_linked({CPU<CONFIG> *} {cpu}) {
			virtual
#line 100 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 21420 "powerpc.tcc"
			branch_linked();
			virtual
#line 120 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 21425 "powerpc.tcc"
			branch_conditioned();
		private:
		};

		template <
#line 38 "ppc.isa"
		class
#line 21433 "powerpc.tcc"
#line 38 "ppc.isa"
		CONFIG
#line 21436 "powerpc.tcc"
		>
		class OpBcctr : public Operation<
#line 38 "ppc.isa"
		CONFIG
#line 21441 "powerpc.tcc"
		>
		{
		public:
			OpBcctr(CodeType code, typename CONFIG::address_t addr);
			uint32_t bo;
			uint32_t bi;
			uint32_t lk;
			/*
			*  Copyright (c) 2007,
			*  Commissariat a l'Energie Atomique (CEA)
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
			*/
			/* instruction endian */
			virtual
#line 44 "ppc.isa"
			void
#line 21486 "powerpc.tcc"
			execute(
#line 44 "ppc.isa"
			CPU<CONFIG> *
#line 21490 "powerpc.tcc"
#line 44 "ppc.isa"
			cpu
#line 21493 "powerpc.tcc"
			);
			virtual
#line 48 "ppc.isa"
			void
#line 21498 "powerpc.tcc"
			disasm(
#line 48 "ppc.isa"
			CPU<CONFIG> *
#line 21502 "powerpc.tcc"
#line 48 "ppc.isa"
			cpu
#line 21505 "powerpc.tcc"
			,
#line 48 "ppc.isa"
			ostream&
#line 21509 "powerpc.tcc"
#line 48 "ppc.isa"
			os
#line 21512 "powerpc.tcc"
			);
			//include "perf.isa"
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
			*          Eric Renard (erenard@lri.fr)
			*          Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			//var registers_written : {registers_written_t} = {0}
			/** Functions **/
			virtual
			void
			initialize_function();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/**
			* Initilize the latency values of each instrucion
			*/
			virtual
			void
			initialize_latencies();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/* --------------------------------------------------------------------------

			Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
			Mais sinon elle respecte bien le format rd = premier registre

			> lbzu lhau lhzu lwzu
			> lbzux, lhaux, lhzux, lwzux
			> stbu, sthu, stwu
			> stbux, sthux, stwux

			> lfdu, lfsu
			> lfdux
			> stfdu, stfsu
			> stfdux, stfsux

			manque les loafd flottant a update comme lfdu)
			-------------------------------------------------------------------------- */
			/* ----
			lswi: load string should output to (rd .. rd+ ceil(nb/4))
			lswx: should output to (rd.. XER[25..31] /4)
			stswi: should input (rs .. rs+ceil(nb/4))
			stswx: should input (rs .. rs+ceil(XER[25..31]/4))
			----- */
			/*
		* NOTES :
			*     -- For store fisrt operand is to oprand to write into memory.
			*     -- For other instructions (to defined)
			*/
			virtual
			void
			initialize_operands();
			/*
			*  Copyright (c) 2007,
			*  INRIA Futurs
			*  All rights reserved.
			*
			*  Redistribution and use in source and binary forms, with or without modification,
		*  are permitted provided that the following conditions are met:
			*
			*   - Redistributions of source code must retain the above copyright notice, this
			*     list of conditions and the following disclaimer.
			*
			*   - Redistributions in binary form must reproduce the above copyright notice,
			*     this list of conditions and the following disclaimer in the documentation
			*     and/or other materials provided with the distribution.
			*
			*   - Neither the name of CEA nor the names of its contributors may be used to
			*     endorse or promote products derived from this software without specific prior
			*     written permission.
			*
			*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
			*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
			*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
			*  DISCLAIMED.
			*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
			*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
			*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
			*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
			*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
			*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
			*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
			*
			* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
			*          David Parello (david.parello@univ-perp.fr)
			*/
			/**
			* Returns the target address of branch instructions.
			* The AA bit inform if the branch is relative or absolute.
			*/
			virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::address_t
#line 21702 "powerpc.tcc"
			get_target_address(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			typename CONFIG::address_t
#line 21706 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cia
#line 21709 "powerpc.tcc"
			,
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			CPU<CONFIG> *
#line 21713 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cpu
#line 21716 "powerpc.tcc"
			);
			// ----------------------------------------------------------------------------
			/**
			* Returns true if the branch is statically preficten taken.
			* The powerpc instruction set has a bit of the bo field to set
			* up the default branch prediction value statically.
			* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
			*/
			virtual
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			bool
#line 21728 "powerpc.tcc"
			branch_statically_predicted_taken(
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			CPU<CONFIG> *
#line 21732 "powerpc.tcc"
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
			cpu
#line 21735 "powerpc.tcc"
			);
			// Are branches linked ?
			//action {bool} branch_linked({CPU<CONFIG> *} {cpu}) {
				virtual
#line 100 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 21742 "powerpc.tcc"
				branch_linked();
				virtual
#line 120 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 21747 "powerpc.tcc"
				branch_conditioned();
			private:
			};

			template <
#line 38 "ppc.isa"
			class
#line 21755 "powerpc.tcc"
#line 38 "ppc.isa"
			CONFIG
#line 21758 "powerpc.tcc"
			>
			class OpBclr : public Operation<
#line 38 "ppc.isa"
			CONFIG
#line 21763 "powerpc.tcc"
			>
			{
			public:
				OpBclr(CodeType code, typename CONFIG::address_t addr);
				uint32_t bo;
				uint32_t bi;
				uint32_t lk;
				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/* instruction endian */
				virtual
#line 44 "ppc.isa"
				void
#line 21808 "powerpc.tcc"
				execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 21812 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 21815 "powerpc.tcc"
				);
				virtual
#line 48 "ppc.isa"
				void
#line 21820 "powerpc.tcc"
				disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 21824 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 21827 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 21831 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 21834 "powerpc.tcc"
				);
				//include "perf.isa"
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*          Eric Renard (erenard@lri.fr)
				*          Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				//var registers_written : {registers_written_t} = {0}
				/** Functions **/
				virtual
				void
				initialize_function();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/**
				* Initilize the latency values of each instrucion
				*/
				virtual
				void
				initialize_latencies();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/* --------------------------------------------------------------------------

				Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
				Mais sinon elle respecte bien le format rd = premier registre

				> lbzu lhau lhzu lwzu
				> lbzux, lhaux, lhzux, lwzux
				> stbu, sthu, stwu
				> stbux, sthux, stwux

				> lfdu, lfsu
				> lfdux
				> stfdu, stfsu
				> stfdux, stfsux

				manque les loafd flottant a update comme lfdu)
				-------------------------------------------------------------------------- */
				/* ----
				lswi: load string should output to (rd .. rd+ ceil(nb/4))
				lswx: should output to (rd.. XER[25..31] /4)
				stswi: should input (rs .. rs+ceil(nb/4))
				stswx: should input (rs .. rs+ceil(XER[25..31]/4))
				----- */
				/*
			* NOTES :
				*     -- For store fisrt operand is to oprand to write into memory.
				*     -- For other instructions (to defined)
				*/
				virtual
				void
				initialize_operands();
				/*
				*  Copyright (c) 2007,
				*  INRIA Futurs
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
				*          David Parello (david.parello@univ-perp.fr)
				*/
				/**
				* Returns the target address of branch instructions.
				* The AA bit inform if the branch is relative or absolute.
				*/
				virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 22024 "powerpc.tcc"
				get_target_address(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 22028 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 22031 "powerpc.tcc"
				,
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				CPU<CONFIG> *
#line 22035 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 22038 "powerpc.tcc"
				);
				// ----------------------------------------------------------------------------
				/**
				* Returns true if the branch is statically preficten taken.
				* The powerpc instruction set has a bit of the bo field to set
				* up the default branch prediction value statically.
				* See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
				*/
				virtual
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 22050 "powerpc.tcc"
				branch_statically_predicted_taken(
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				CPU<CONFIG> *
#line 22054 "powerpc.tcc"
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 22057 "powerpc.tcc"
				);
				// Are branches linked ?
				//action {bool} branch_linked({CPU<CONFIG> *} {cpu}) {
					virtual
#line 100 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					bool
#line 22064 "powerpc.tcc"
					branch_linked();
					virtual
#line 120 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					bool
#line 22069 "powerpc.tcc"
					branch_conditioned();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 22077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 22080 "powerpc.tcc"
				>
				class OpCrand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 22085 "powerpc.tcc"
				>
				{
				public:
					OpCrand(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 22130 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 22134 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 22137 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 22142 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 22146 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 22149 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 22153 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 22156 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 22311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 22314 "powerpc.tcc"
				>
				class OpCrandc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 22319 "powerpc.tcc"
				>
				{
				public:
					OpCrandc(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 22364 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 22368 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 22371 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 22376 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 22380 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 22383 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 22387 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 22390 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 22545 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 22548 "powerpc.tcc"
				>
				class OpCreqv : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 22553 "powerpc.tcc"
				>
				{
				public:
					OpCreqv(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 22598 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 22602 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 22605 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 22610 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 22614 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 22617 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 22621 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 22624 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 22779 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 22782 "powerpc.tcc"
				>
				class OpCrnand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 22787 "powerpc.tcc"
				>
				{
				public:
					OpCrnand(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 22832 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 22836 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 22839 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 22844 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 22848 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 22851 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 22855 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 22858 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 23013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 23016 "powerpc.tcc"
				>
				class OpCrnor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 23021 "powerpc.tcc"
				>
				{
				public:
					OpCrnor(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 23066 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 23070 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 23073 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 23078 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 23082 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 23085 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 23089 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 23092 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 23247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 23250 "powerpc.tcc"
				>
				class OpCror : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 23255 "powerpc.tcc"
				>
				{
				public:
					OpCror(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 23300 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 23304 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 23307 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 23312 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 23316 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 23319 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 23323 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 23326 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 23481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 23484 "powerpc.tcc"
				>
				class OpCrorc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 23489 "powerpc.tcc"
				>
				{
				public:
					OpCrorc(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 23534 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 23538 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 23541 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 23546 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 23550 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 23553 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 23557 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 23560 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 23715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 23718 "powerpc.tcc"
				>
				class OpCrxor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 23723 "powerpc.tcc"
				>
				{
				public:
					OpCrxor(CodeType code, typename CONFIG::address_t addr);
					uint32_t crbD;
					uint32_t crbA;
					uint32_t crbB;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 23768 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 23772 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 23775 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 23780 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 23784 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 23787 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 23791 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 23794 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 23949 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 23952 "powerpc.tcc"
				>
				class OpMcrf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 23957 "powerpc.tcc"
				>
				{
				public:
					OpMcrf(CodeType code, typename CONFIG::address_t addr);
					uint32_t crfD;
					uint32_t crfS;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 24001 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 24005 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 24008 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 24013 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 24017 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 24020 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 24024 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 24027 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24182 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24185 "powerpc.tcc"
				>
				class OpLbz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24190 "powerpc.tcc"
				>
				{
				public:
					OpLbz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 24235 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 24239 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 24242 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 24247 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 24251 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 24254 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 24258 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 24261 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 24450 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 24454 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 24457 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 24465 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24473 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24476 "powerpc.tcc"
				>
				class OpLbzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24481 "powerpc.tcc"
				>
				{
				public:
					OpLbzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 24526 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 24530 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 24533 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 24538 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 24542 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 24545 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 24549 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 24552 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 24741 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 24745 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 24748 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 24756 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 24762 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 24767 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 24775 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 24778 "powerpc.tcc"
				>
				class OpLbzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 24783 "powerpc.tcc"
				>
				{
				public:
					OpLbzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 24828 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 24832 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 24835 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 24840 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 24844 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 24847 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 24851 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 24854 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 25043 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 25047 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 25050 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 25058 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 25064 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 25069 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25080 "powerpc.tcc"
				>
				class OpLbzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25085 "powerpc.tcc"
				>
				{
				public:
					OpLbzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 25130 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 25134 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 25137 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 25142 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 25146 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 25149 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 25153 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 25156 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 25345 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 25349 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 25352 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 25360 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25368 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25371 "powerpc.tcc"
				>
				class OpLha : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25376 "powerpc.tcc"
				>
				{
				public:
					OpLha(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 25421 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 25425 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 25428 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 25433 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 25437 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 25440 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 25444 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 25447 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 25636 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 25640 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 25643 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 25651 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 758 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 25657 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25665 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25668 "powerpc.tcc"
				>
				class OpLhau : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25673 "powerpc.tcc"
				>
				{
				public:
					OpLhau(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 25718 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 25722 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 25725 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 25730 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 25734 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 25737 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 25741 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 25744 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 25933 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 25937 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 25940 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 25948 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 758 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 25954 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 25962 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 25965 "powerpc.tcc"
				>
				class OpLhaux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 25970 "powerpc.tcc"
				>
				{
				public:
					OpLhaux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 26015 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 26019 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 26022 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 26027 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 26031 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 26034 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 26038 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 26041 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26230 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 26234 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 26237 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26245 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 758 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 26251 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26262 "powerpc.tcc"
				>
				class OpLhax : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26267 "powerpc.tcc"
				>
				{
				public:
					OpLhax(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 26312 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 26316 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 26319 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 26324 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 26328 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 26331 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 26335 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 26338 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26527 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 26531 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 26534 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26542 "powerpc.tcc"
					memory_access_size();
					// Return true if load need a sign extension.
					virtual
#line 758 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 26548 "powerpc.tcc"
					is_sign_extended();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26559 "powerpc.tcc"
				>
				class OpLhz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26564 "powerpc.tcc"
				>
				{
				public:
					OpLhz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 26609 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 26613 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 26616 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 26621 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 26625 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 26628 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 26632 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 26635 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26824 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 26828 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 26831 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 26839 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 26847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 26850 "powerpc.tcc"
				>
				class OpLhzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 26855 "powerpc.tcc"
				>
				{
				public:
					OpLhzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 26900 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 26904 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 26907 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 26912 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 26916 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 26919 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 26923 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 26926 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27115 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 27119 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27122 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27130 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 27136 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 27141 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27149 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27152 "powerpc.tcc"
				>
				class OpLhzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27157 "powerpc.tcc"
				>
				{
				public:
					OpLhzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 27202 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 27206 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 27209 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 27214 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 27218 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 27221 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 27225 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 27228 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27417 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 27421 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27424 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27432 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 27438 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 27443 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27454 "powerpc.tcc"
				>
				class OpLhzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27459 "powerpc.tcc"
				>
				{
				public:
					OpLhzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 27504 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 27508 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 27511 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 27516 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 27520 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 27523 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 27527 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 27530 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27719 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 27723 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 27726 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 27734 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 27742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 27745 "powerpc.tcc"
				>
				class OpLwz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 27750 "powerpc.tcc"
				>
				{
				public:
					OpLwz(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 27795 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 27799 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 27802 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 27807 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 27811 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 27814 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 27818 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 27821 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28010 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 28014 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28017 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28025 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28036 "powerpc.tcc"
				>
				class OpLwzu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28041 "powerpc.tcc"
				>
				{
				public:
					OpLwzu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 28086 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 28090 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 28093 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 28098 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 28102 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 28105 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 28109 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 28112 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28301 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 28305 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28308 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28316 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28322 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 28327 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28335 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28338 "powerpc.tcc"
				>
				class OpLwzux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28343 "powerpc.tcc"
				>
				{
				public:
					OpLwzux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 28388 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 28392 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 28395 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 28400 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 28404 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 28407 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 28411 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 28414 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28603 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 28607 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28610 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28618 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 28624 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 28629 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28640 "powerpc.tcc"
				>
				class OpLwzx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28645 "powerpc.tcc"
				>
				{
				public:
					OpLwzx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 28690 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 28694 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 28697 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 28702 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 28706 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 28709 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 28713 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 28716 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28905 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 28909 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 28912 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 28920 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 28928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 28931 "powerpc.tcc"
				>
				class OpStb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 28936 "powerpc.tcc"
				>
				{
				public:
					OpStb(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 28981 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 28985 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 28988 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 28993 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 28997 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 29000 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 29004 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 29007 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29196 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 29200 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29203 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29211 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29222 "powerpc.tcc"
				>
				class OpStbu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29227 "powerpc.tcc"
				>
				{
				public:
					OpStbu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 29272 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 29276 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 29279 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 29284 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 29288 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 29291 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 29295 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 29298 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29487 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 29491 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29494 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29502 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 29508 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 29513 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29524 "powerpc.tcc"
				>
				class OpStbux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29529 "powerpc.tcc"
				>
				{
				public:
					OpStbux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 29574 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 29578 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 29581 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 29586 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 29590 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 29593 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 29597 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 29600 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29789 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 29793 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 29796 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 29804 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 29810 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 29815 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 29823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 29826 "powerpc.tcc"
				>
				class OpStbx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 29831 "powerpc.tcc"
				>
				{
				public:
					OpStbx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 29876 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 29880 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 29883 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 29888 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 29892 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 29895 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 29899 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 29902 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30091 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 30095 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30098 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30106 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30114 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30117 "powerpc.tcc"
				>
				class OpSth : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30122 "powerpc.tcc"
				>
				{
				public:
					OpSth(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 30167 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 30171 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 30174 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 30179 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 30183 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 30186 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 30190 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 30193 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30382 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 30386 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30389 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30397 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30408 "powerpc.tcc"
				>
				class OpSthu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30413 "powerpc.tcc"
				>
				{
				public:
					OpSthu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 30458 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 30462 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 30465 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 30470 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 30474 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 30477 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 30481 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 30484 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30673 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 30677 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30680 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30688 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 30694 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 30699 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 30707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 30710 "powerpc.tcc"
				>
				class OpSthux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 30715 "powerpc.tcc"
				>
				{
				public:
					OpSthux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 30760 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 30764 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 30767 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 30772 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 30776 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 30779 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 30783 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 30786 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30975 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 30979 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 30982 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 30990 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 30996 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 31001 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31009 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31012 "powerpc.tcc"
				>
				class OpSthx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31017 "powerpc.tcc"
				>
				{
				public:
					OpSthx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 31062 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 31066 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 31069 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 31074 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 31078 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 31081 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 31085 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 31088 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31277 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 31281 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31284 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31292 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31303 "powerpc.tcc"
				>
				class OpStw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31308 "powerpc.tcc"
				>
				{
				public:
					OpStw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 31353 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 31357 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 31360 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 31365 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 31369 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 31372 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 31376 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 31379 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31568 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 31572 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31575 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31583 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31594 "powerpc.tcc"
				>
				class OpStwu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31599 "powerpc.tcc"
				>
				{
				public:
					OpStwu(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 31644 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 31648 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 31651 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 31656 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 31660 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 31663 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 31667 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 31670 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31859 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 31863 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 31866 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 31874 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 31880 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 31885 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 31893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 31896 "powerpc.tcc"
				>
				class OpStwux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 31901 "powerpc.tcc"
				>
				{
				public:
					OpStwux(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 31946 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 31950 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 31953 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 31958 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 31962 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 31965 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 31969 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 31972 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32161 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 32165 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32168 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32176 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 32182 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 32187 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32198 "powerpc.tcc"
				>
				class OpStwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32203 "powerpc.tcc"
				>
				{
				public:
					OpStwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 32248 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 32252 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 32255 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 32260 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 32264 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 32267 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 32271 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 32274 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32463 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 32467 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32470 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32478 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32489 "powerpc.tcc"
				>
				class OpLhbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32494 "powerpc.tcc"
				>
				{
				public:
					OpLhbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 32539 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 32543 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 32546 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 32551 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 32555 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 32558 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 32562 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 32565 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32754 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 32758 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 32761 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 32769 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 32777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 32780 "powerpc.tcc"
				>
				class OpLwbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 32785 "powerpc.tcc"
				>
				{
				public:
					OpLwbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 32830 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 32834 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 32837 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 32842 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 32846 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 32849 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 32853 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 32856 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33045 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 33049 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33052 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33060 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33071 "powerpc.tcc"
				>
				class OpSthbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33076 "powerpc.tcc"
				>
				{
				public:
					OpSthbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 33121 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 33125 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 33128 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 33133 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 33137 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 33140 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 33144 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 33147 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33336 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 33340 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33343 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33351 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33362 "powerpc.tcc"
				>
				class OpStwbrx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33367 "powerpc.tcc"
				>
				{
				public:
					OpStwbrx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 33412 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 33416 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 33419 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 33424 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 33428 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 33431 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 33435 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 33438 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33627 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 33631 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33634 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33642 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33650 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33653 "powerpc.tcc"
				>
				class OpLswi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33658 "powerpc.tcc"
				>
				{
				public:
					OpLswi(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t nb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 33703 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 33707 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 33710 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 33715 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 33719 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 33722 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 33726 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 33729 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33918 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 33922 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33925 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33933 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 33941 "powerpc.tcc"
					loadstore_string_numbyte(
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 33945 "powerpc.tcc"
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 33948 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 33956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 33959 "powerpc.tcc"
				>
				class OpLswx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 33964 "powerpc.tcc"
				>
				{
				public:
					OpLswx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 34009 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 34013 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 34016 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 34021 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 34025 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 34028 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 34032 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 34035 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34224 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 34228 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34231 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34239 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34247 "powerpc.tcc"
					loadstore_string_numbyte(
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 34251 "powerpc.tcc"
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34254 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34262 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34265 "powerpc.tcc"
				>
				class OpStswi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34270 "powerpc.tcc"
				>
				{
				public:
					OpStswi(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t nb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 34315 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 34319 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 34322 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 34327 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 34331 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 34334 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 34338 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 34341 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34530 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 34534 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34537 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34545 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34553 "powerpc.tcc"
					loadstore_string_numbyte(
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 34557 "powerpc.tcc"
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34560 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34571 "powerpc.tcc"
				>
				class OpStswx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34576 "powerpc.tcc"
				>
				{
				public:
					OpStswx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 34621 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 34625 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 34628 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 34633 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 34637 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 34640 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 34644 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 34647 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34836 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 34840 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34843 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34851 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the number of byte (chararcter) for load/store-string instructions
					*/
					virtual
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 34859 "powerpc.tcc"
					loadstore_string_numbyte(
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 34863 "powerpc.tcc"
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 34866 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 34874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 34877 "powerpc.tcc"
				>
				class OpLmw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 34882 "powerpc.tcc"
				>
				{
				public:
					OpLmw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 34927 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 34931 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 34934 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 34939 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 34943 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 34946 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 34950 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 34953 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35142 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 35146 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35149 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35157 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35168 "powerpc.tcc"
				>
				class OpStmw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35173 "powerpc.tcc"
				>
				{
				public:
					OpStmw(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 35218 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 35222 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 35225 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 35230 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 35234 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 35237 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 35241 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 35244 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35433 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 35437 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35440 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35448 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35459 "powerpc.tcc"
				>
				class OpLfd : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35464 "powerpc.tcc"
				>
				{
				public:
					OpLfd(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 35509 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 35513 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 35516 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 35521 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 35525 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 35528 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 35532 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 35535 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35724 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 35728 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 35731 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 35739 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 35747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 35750 "powerpc.tcc"
				>
				class OpLfdu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 35755 "powerpc.tcc"
				>
				{
				public:
					OpLfdu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 35800 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 35804 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 35807 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 35812 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 35816 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 35819 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 35823 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 35826 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36015 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 36019 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36022 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36030 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 36036 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 36041 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36052 "powerpc.tcc"
				>
				class OpLfdux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36057 "powerpc.tcc"
				>
				{
				public:
					OpLfdux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 36102 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 36106 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 36109 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 36114 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 36118 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 36121 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 36125 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 36128 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36317 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 36321 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36324 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36332 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 36338 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 36343 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36354 "powerpc.tcc"
				>
				class OpLfdx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36359 "powerpc.tcc"
				>
				{
				public:
					OpLfdx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 36404 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 36408 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 36411 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 36416 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 36420 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 36423 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 36427 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 36430 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36619 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 36623 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36626 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36634 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36645 "powerpc.tcc"
				>
				class OpLfs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36650 "powerpc.tcc"
				>
				{
				public:
					OpLfs(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 36695 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 36699 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 36702 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 36707 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 36711 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 36714 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 36718 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 36721 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36910 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 36914 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 36917 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 36925 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 745 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 36933 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 36941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 36944 "powerpc.tcc"
				>
				class OpLfsu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 36949 "powerpc.tcc"
				>
				{
				public:
					OpLfsu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 36994 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 36998 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 37001 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 37006 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 37010 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 37013 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 37017 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 37020 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37209 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 37213 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37216 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37224 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 37230 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 37235 "powerpc.tcc"
					split_into();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 745 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 37243 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37251 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37254 "powerpc.tcc"
				>
				class OpLfsux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37259 "powerpc.tcc"
				>
				{
				public:
					OpLfsux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 37304 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 37308 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 37311 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 37316 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 37320 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 37323 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 37327 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 37330 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37454 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 37458 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37461 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37469 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 37475 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 37480 "powerpc.tcc"
					split_into();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 745 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 37488 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37499 "powerpc.tcc"
				>
				class OpLfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37504 "powerpc.tcc"
				>
				{
				public:
					OpLfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 37549 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 37553 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 37556 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 37561 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 37565 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 37568 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 37572 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 37575 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37764 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 37768 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 37771 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 37779 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 745 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 37787 "powerpc.tcc"
					load_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 37795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 37798 "powerpc.tcc"
				>
				class OpStfd : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 37803 "powerpc.tcc"
				>
				{
				public:
					OpStfd(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 37848 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 37852 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 37855 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 37860 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 37864 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 37867 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 37871 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 37874 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38063 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 38067 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38070 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38078 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38089 "powerpc.tcc"
				>
				class OpStfdu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38094 "powerpc.tcc"
				>
				{
				public:
					OpStfdu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 38139 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 38143 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 38146 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 38151 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 38155 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 38158 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 38162 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 38165 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38354 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 38358 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38361 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38369 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 38375 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 38380 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38391 "powerpc.tcc"
				>
				class OpStfdux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38396 "powerpc.tcc"
				>
				{
				public:
					OpStfdux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 38441 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 38445 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 38448 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 38453 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 38457 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 38460 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 38464 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 38467 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38656 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 38660 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38663 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38671 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 38677 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 38682 "powerpc.tcc"
					split_into();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38693 "powerpc.tcc"
				>
				class OpStfdx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38698 "powerpc.tcc"
				>
				{
				public:
					OpStfdx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 38743 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 38747 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 38750 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 38755 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 38759 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 38762 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 38766 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 38769 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38958 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 38962 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 38965 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 38973 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 38981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 38984 "powerpc.tcc"
				>
				class OpStfiwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 38989 "powerpc.tcc"
				>
				{
				public:
					OpStfiwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 39034 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 39038 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 39041 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 39046 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 39050 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 39053 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 39057 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 39060 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39249 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 39253 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39256 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39264 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39275 "powerpc.tcc"
				>
				class OpStfs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39280 "powerpc.tcc"
				>
				{
				public:
					OpStfs(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 39325 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 39329 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 39332 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 39337 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 39341 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 39344 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 39348 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 39351 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39540 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 39544 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39547 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39555 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 39563 "powerpc.tcc"
					get_single(
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 39567 "powerpc.tcc"
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39570 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 733 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 39586 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39597 "powerpc.tcc"
				>
				class OpStfsu : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39602 "powerpc.tcc"
				>
				{
				public:
					OpStfsu(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					int32_t d;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 39647 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 39651 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 39654 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 39659 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 39663 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 39666 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 39670 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 39673 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39862 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 39866 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39869 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 39877 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 39883 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 39888 "powerpc.tcc"
					split_into();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 39896 "powerpc.tcc"
					get_single(
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 39900 "powerpc.tcc"
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 39903 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 733 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 39919 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 39927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 39930 "powerpc.tcc"
				>
				class OpStfsux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 39935 "powerpc.tcc"
				>
				{
				public:
					OpStfsux(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 39980 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 39984 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 39987 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 39992 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 39996 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 39999 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 40003 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 40006 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40195 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 40199 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40202 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40210 "powerpc.tcc"
					memory_access_size();
					/* Instruction SPLITTING !!!!!!!!!! */
					virtual
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40216 "powerpc.tcc"
					is_splitted();
					virtual
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					list <Operation<CONFIG> *>
#line 40221 "powerpc.tcc"
					split_into();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 40229 "powerpc.tcc"
					get_single(
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 40233 "powerpc.tcc"
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40236 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 733 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40252 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40263 "powerpc.tcc"
				>
				class OpStfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40268 "powerpc.tcc"
				>
				{
				public:
					OpStfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t fs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 40313 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 40317 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 40320 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 40325 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 40329 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 40332 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 40336 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 40339 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40528 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 40532 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40535 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40543 "powerpc.tcc"
					memory_access_size();
					/**
					* Returns the true value of single-precision to store
					*/
					virtual
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					uint32_t
#line 40551 "powerpc.tcc"
					get_single(
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 40555 "powerpc.tcc"
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 40558 "powerpc.tcc"
					);
					/*
					lfs.get_single = { return cpu->GetFp32(fs); }
					lfsu.get_single = { return cpu->GetFp32(fs); }
					lfsux.get_single = { return cpu->GetFp32(fs); }
					lfsx.get_single = { return cpu->GetFp32(fs); }
					*/
					// Single precision not necessary here
					//stfiwx.get_single = { return cpu->GetFp32(fs); }
					/**
					* Returns true if store need a conversion to single-precision value.
					*/
					virtual
#line 733 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					bool
#line 40574 "powerpc.tcc"
					store_need_conversion();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40582 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40585 "powerpc.tcc"
				>
				class OpDcba : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40590 "powerpc.tcc"
				>
				{
				public:
					OpDcba(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 40634 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 40638 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 40641 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 40646 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 40650 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 40653 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 40657 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 40660 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 40815 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 40823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 40826 "powerpc.tcc"
				>
				class OpDcbf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 40831 "powerpc.tcc"
				>
				{
				public:
					OpDcbf(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 40875 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 40879 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 40882 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 40887 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 40891 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 40894 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 40898 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 40901 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41056 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41067 "powerpc.tcc"
				>
				class OpDcbi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41072 "powerpc.tcc"
				>
				{
				public:
					OpDcbi(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 41116 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 41120 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 41123 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 41128 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 41132 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 41135 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 41139 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 41142 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41297 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41308 "powerpc.tcc"
				>
				class OpDcbst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41313 "powerpc.tcc"
				>
				{
				public:
					OpDcbst(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 41357 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 41361 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 41364 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 41369 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 41373 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 41376 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 41380 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 41383 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41538 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41546 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41549 "powerpc.tcc"
				>
				class OpDcbt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41554 "powerpc.tcc"
				>
				{
				public:
					OpDcbt(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 41598 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 41602 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 41605 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 41610 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 41614 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 41617 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 41621 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 41624 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 41779 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 41787 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 41790 "powerpc.tcc"
				>
				class OpDcbtst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 41795 "powerpc.tcc"
				>
				{
				public:
					OpDcbtst(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 41839 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 41843 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 41846 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 41851 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 41855 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 41858 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 41862 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 41865 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42020 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42028 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42031 "powerpc.tcc"
				>
				class OpDcbz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42036 "powerpc.tcc"
				>
				{
				public:
					OpDcbz(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 42080 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 42084 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 42087 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 42092 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 42096 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 42099 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 42103 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 42106 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42261 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42272 "powerpc.tcc"
				>
				class OpIcbi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42277 "powerpc.tcc"
				>
				{
				public:
					OpIcbi(CodeType code, typename CONFIG::address_t addr);
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 42321 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 42325 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 42328 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 42333 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 42337 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 42340 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 42344 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 42347 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42502 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42513 "powerpc.tcc"
				>
				class OpTlbia : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42518 "powerpc.tcc"
				>
				{
				public:
					OpTlbia(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 42560 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 42564 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 42567 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 42572 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 42576 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 42579 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 42583 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 42586 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42741 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42749 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42752 "powerpc.tcc"
				>
				class OpTlbie : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42757 "powerpc.tcc"
				>
				{
				public:
					OpTlbie(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 42800 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 42804 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 42807 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 42812 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 42816 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 42819 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 42823 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 42826 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 42981 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 42989 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 42992 "powerpc.tcc"
				>
				class OpTlbsync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 42997 "powerpc.tcc"
				>
				{
				public:
					OpTlbsync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 43039 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 43043 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 43046 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 43051 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 43055 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 43058 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 43062 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 43065 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43220 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43228 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43231 "powerpc.tcc"
				>
				class OpTlbld : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43236 "powerpc.tcc"
				>
				{
				public:
					OpTlbld(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 43279 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 43283 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 43286 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 43291 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 43295 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 43298 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 43302 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 43305 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43316 "powerpc.tcc"
				>
				class OpTlbli : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43321 "powerpc.tcc"
				>
				{
				public:
					OpTlbli(CodeType code, typename CONFIG::address_t addr);
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 43364 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 43368 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 43371 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 43376 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 43380 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 43383 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 43387 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 43390 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43401 "powerpc.tcc"
				>
				class OpEciwx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43406 "powerpc.tcc"
				>
				{
				public:
					OpEciwx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 43451 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 43455 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 43458 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 43463 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 43467 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 43470 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 43474 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 43477 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43666 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 43670 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43673 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43681 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43692 "powerpc.tcc"
				>
				class OpEcowx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43697 "powerpc.tcc"
				>
				{
				public:
					OpEcowx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 43742 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 43746 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 43749 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 43754 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 43758 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 43761 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 43765 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 43768 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43892 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 43896 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 43899 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 43907 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 43915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 43918 "powerpc.tcc"
				>
				class OpEieio : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 43923 "powerpc.tcc"
				>
				{
				public:
					OpEieio(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 43965 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 43969 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 43972 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 43977 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 43981 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 43984 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 43988 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 43991 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44146 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44157 "powerpc.tcc"
				>
				class OpIsync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44162 "powerpc.tcc"
				>
				{
				public:
					OpIsync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 44204 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 44208 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 44211 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 44216 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 44220 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 44223 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 44227 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 44230 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44385 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44393 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44396 "powerpc.tcc"
				>
				class OpLwarx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44401 "powerpc.tcc"
				>
				{
				public:
					OpLwarx(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 44446 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 44450 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 44453 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 44458 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 44462 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 44465 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 44469 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 44472 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Returns the target register of the load instruction.
					*/
					virtual
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44661 "powerpc.tcc"
					loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					CPU<CONFIG> *
#line 44665 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					cpu
#line 44668 "powerpc.tcc"
					);
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44676 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44687 "powerpc.tcc"
				>
				class OpStwcx_ : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44692 "powerpc.tcc"
				>
				{
				public:
					OpStwcx_(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 44737 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 44741 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 44744 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 44749 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 44753 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 44756 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 44760 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 44763 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 44918 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 44926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 44929 "powerpc.tcc"
				>
				class OpSync : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 44934 "powerpc.tcc"
				>
				{
				public:
					OpSync(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 44976 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 44980 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 44983 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 44988 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 44992 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 44995 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 44999 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 45002 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
					/**
					* Returns the memory acces size in bytes of a load / store instruction
					*/
					virtual
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					int
#line 45157 "powerpc.tcc"
					memory_access_size();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45168 "powerpc.tcc"
				>
				class OpSc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45173 "powerpc.tcc"
				>
				{
				public:
					OpSc(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 45215 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 45219 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 45222 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 45227 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 45231 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 45234 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 45238 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 45241 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45399 "powerpc.tcc"
				>
				class OpRfi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45404 "powerpc.tcc"
				>
				{
				public:
					OpRfi(CodeType code, typename CONFIG::address_t addr);
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 45446 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 45450 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 45453 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 45458 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 45462 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 45465 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 45469 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 45472 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45627 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45630 "powerpc.tcc"
				>
				class OpTw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45635 "powerpc.tcc"
				>
				{
				public:
					OpTw(CodeType code, typename CONFIG::address_t addr);
					uint32_t to;
					uint32_t ra;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 45680 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 45684 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 45687 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 45692 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 45696 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 45699 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 45703 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 45706 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 45861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 45864 "powerpc.tcc"
				>
				class OpTwi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 45869 "powerpc.tcc"
				>
				{
				public:
					OpTwi(CodeType code, typename CONFIG::address_t addr);
					uint32_t to;
					uint32_t ra;
					int32_t simm;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 45914 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 45918 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 45921 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 45926 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 45930 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 45933 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 45937 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 45940 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46098 "powerpc.tcc"
				>
				class OpMcrxr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46103 "powerpc.tcc"
				>
				{
				public:
					OpMcrxr(CodeType code, typename CONFIG::address_t addr);
					uint32_t crfD;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 46146 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 46150 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 46153 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 46158 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 46162 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 46165 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 46169 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 46172 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46330 "powerpc.tcc"
				>
				class OpMfcr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46335 "powerpc.tcc"
				>
				{
				public:
					OpMfcr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 46378 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 46382 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 46385 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 46390 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 46394 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 46397 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 46401 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 46404 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46559 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46562 "powerpc.tcc"
				>
				class OpMfmsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46567 "powerpc.tcc"
				>
				{
				public:
					OpMfmsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 46610 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 46614 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 46617 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 46622 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 46626 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 46629 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 46633 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 46636 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 46791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 46794 "powerpc.tcc"
				>
				class OpMfspr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 46799 "powerpc.tcc"
				>
				{
				public:
					OpMfspr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t spr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 46843 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 46847 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 46850 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 46855 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 46859 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 46862 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 46866 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 46869 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47027 "powerpc.tcc"
				>
				class OpMtspr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47032 "powerpc.tcc"
				>
				{
				public:
					OpMtspr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t spr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 47076 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 47080 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 47083 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 47088 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 47092 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 47095 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 47099 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 47102 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47260 "powerpc.tcc"
				>
				class OpMftb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47265 "powerpc.tcc"
				>
				{
				public:
					OpMftb(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t tbr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 47309 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 47313 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 47316 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 47321 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 47325 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 47328 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 47332 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 47335 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47493 "powerpc.tcc"
				>
				class OpMtcrf : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47498 "powerpc.tcc"
				>
				{
				public:
					OpMtcrf(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t crm;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 47542 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 47546 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 47549 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 47554 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 47558 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 47561 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 47565 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 47568 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47726 "powerpc.tcc"
				>
				class OpMtmsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47731 "powerpc.tcc"
				>
				{
				public:
					OpMtmsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 47774 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 47778 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 47781 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 47786 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 47790 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 47793 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 47797 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 47800 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 47955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 47958 "powerpc.tcc"
				>
				class OpMfsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 47963 "powerpc.tcc"
				>
				{
				public:
					OpMfsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t sr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 48007 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 48011 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 48014 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 48019 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 48023 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 48026 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 48030 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 48033 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48191 "powerpc.tcc"
				>
				class OpMfsrin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48196 "powerpc.tcc"
				>
				{
				public:
					OpMfsrin(CodeType code, typename CONFIG::address_t addr);
					uint32_t rd;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 48240 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 48244 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 48247 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 48252 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 48256 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 48259 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 48263 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 48266 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48424 "powerpc.tcc"
				>
				class OpMtsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48429 "powerpc.tcc"
				>
				{
				public:
					OpMtsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t sr;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 48473 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 48477 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 48480 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 48485 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 48489 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 48492 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 48496 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 48499 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48654 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48657 "powerpc.tcc"
				>
				class OpMtsrin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48662 "powerpc.tcc"
				>
				{
				public:
					OpMtsrin(CodeType code, typename CONFIG::address_t addr);
					uint32_t rs;
					uint32_t rb;
					/*
					*  Copyright (c) 2007,
					*  Commissariat a l'Energie Atomique (CEA)
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*/
					/* instruction endian */
					virtual
#line 44 "ppc.isa"
					void
#line 48706 "powerpc.tcc"
					execute(
#line 44 "ppc.isa"
					CPU<CONFIG> *
#line 48710 "powerpc.tcc"
#line 44 "ppc.isa"
					cpu
#line 48713 "powerpc.tcc"
					);
					virtual
#line 48 "ppc.isa"
					void
#line 48718 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 48722 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 48725 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 48729 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 48732 "powerpc.tcc"
					);
					//include "perf.isa"
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
					*          Eric Renard (erenard@lri.fr)
					*          Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					//var registers_written : {registers_written_t} = {0}
					/** Functions **/
					virtual
					void
					initialize_function();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/**
					* Initilize the latency values of each instrucion
					*/
					virtual
					void
					initialize_latencies();
					/*
					*  Copyright (c) 2007,
					*  INRIA Futurs
					*  All rights reserved.
					*
					*  Redistribution and use in source and binary forms, with or without modification,
				*  are permitted provided that the following conditions are met:
					*
					*   - Redistributions of source code must retain the above copyright notice, this
					*     list of conditions and the following disclaimer.
					*
					*   - Redistributions in binary form must reproduce the above copyright notice,
					*     this list of conditions and the following disclaimer in the documentation
					*     and/or other materials provided with the distribution.
					*
					*   - Neither the name of CEA nor the names of its contributors may be used to
					*     endorse or promote products derived from this software without specific prior
					*     written permission.
					*
					*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
					*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
					*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
					*  DISCLAIMED.
					*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
					*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
					*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
					*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
					*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
					*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
					*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
					*
					* Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
					*          David Parello (david.parello@univ-perp.fr)
					*/
					/* --------------------------------------------------------------------------

					Ces instructions updatant ra, ra ne devrait pas �tre a la fois input et output.
					Mais sinon elle respecte bien le format rd = premier registre

					> lbzu lhau lhzu lwzu
					> lbzux, lhaux, lhzux, lwzux
					> stbu, sthu, stwu
					> stbux, sthux, stwux

					> lfdu, lfsu
					> lfdux
					> stfdu, stfsu
					> stfdux, stfsux

					manque les loafd flottant a update comme lfdu)
					-------------------------------------------------------------------------- */
					/* ----
					lswi: load string should output to (rd .. rd+ ceil(nb/4))
					lswx: should output to (rd.. XER[25..31] /4)
					stswi: should input (rs .. rs+ceil(nb/4))
					stswx: should input (rs .. rs+ceil(XER[25..31]/4))
					----- */
					/*
				* NOTES :
					*     -- For store fisrt operand is to oprand to write into memory.
					*     -- For other instructions (to defined)
					*/
					virtual
					void
					initialize_operands();
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48890 "powerpc.tcc"
				>
				class OpDss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48895 "powerpc.tcc"
				>
				{
				public:
					OpDss(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					virtual
#line 48 "ppc.isa"
					void
#line 48904 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 48908 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 48911 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 48915 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 48918 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48929 "powerpc.tcc"
				>
				class OpDssall : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48934 "powerpc.tcc"
				>
				{
				public:
					OpDssall(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					virtual
#line 48 "ppc.isa"
					void
#line 48943 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 48947 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 48950 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 48954 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 48957 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 48965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 48968 "powerpc.tcc"
				>
				class OpDst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 48973 "powerpc.tcc"
				>
				{
				public:
					OpDst(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 48984 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 48988 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 48991 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 48995 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 48998 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49009 "powerpc.tcc"
				>
				class OpDstst : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49014 "powerpc.tcc"
				>
				{
				public:
					OpDstst(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49025 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49029 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49032 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49036 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49039 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49050 "powerpc.tcc"
				>
				class OpDststt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49055 "powerpc.tcc"
				>
				{
				public:
					OpDststt(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49066 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49070 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49073 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49077 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49080 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49091 "powerpc.tcc"
				>
				class OpDstt : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49096 "powerpc.tcc"
				>
				{
				public:
					OpDstt(CodeType code, typename CONFIG::address_t addr);
					uint32_t strm;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49107 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49111 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49114 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49118 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49121 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49129 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49132 "powerpc.tcc"
				>
				class OpLvebx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49137 "powerpc.tcc"
				>
				{
				public:
					OpLvebx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49148 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49152 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49155 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49159 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49162 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49173 "powerpc.tcc"
				>
				class OpLvehx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49178 "powerpc.tcc"
				>
				{
				public:
					OpLvehx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49189 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49193 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49196 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49200 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49203 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49214 "powerpc.tcc"
				>
				class OpLvewx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49219 "powerpc.tcc"
				>
				{
				public:
					OpLvewx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49230 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49234 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49237 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49241 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49244 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49255 "powerpc.tcc"
				>
				class OpLvsl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49260 "powerpc.tcc"
				>
				{
				public:
					OpLvsl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49271 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49275 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49278 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49282 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49285 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49293 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49296 "powerpc.tcc"
				>
				class OpLvsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49301 "powerpc.tcc"
				>
				{
				public:
					OpLvsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49312 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49316 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49319 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49323 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49326 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49334 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49337 "powerpc.tcc"
				>
				class OpLvx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49342 "powerpc.tcc"
				>
				{
				public:
					OpLvx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49353 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49357 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49360 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49364 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49367 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49378 "powerpc.tcc"
				>
				class OpLvxl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49383 "powerpc.tcc"
				>
				{
				public:
					OpLvxl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49394 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49398 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49401 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49405 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49408 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49419 "powerpc.tcc"
				>
				class OpMfvscr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49424 "powerpc.tcc"
				>
				{
				public:
					OpMfvscr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					virtual
#line 48 "ppc.isa"
					void
#line 49433 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49437 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49440 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49444 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49447 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49455 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49458 "powerpc.tcc"
				>
				class OpMtvscr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49463 "powerpc.tcc"
				>
				{
				public:
					OpMtvscr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 49472 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49476 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49479 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49483 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49486 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49494 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49497 "powerpc.tcc"
				>
				class OpStvebx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49502 "powerpc.tcc"
				>
				{
				public:
					OpStvebx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49513 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49517 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49520 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49524 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49527 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49538 "powerpc.tcc"
				>
				class OpStvehx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49543 "powerpc.tcc"
				>
				{
				public:
					OpStvehx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49554 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49558 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49561 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49565 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49568 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49576 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49579 "powerpc.tcc"
				>
				class OpStvewx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49584 "powerpc.tcc"
				>
				{
				public:
					OpStvewx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49595 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49599 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49602 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49606 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49609 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49620 "powerpc.tcc"
				>
				class OpStvx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49625 "powerpc.tcc"
				>
				{
				public:
					OpStvx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49636 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49640 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49643 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49647 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49650 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49661 "powerpc.tcc"
				>
				class OpStvxl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49666 "powerpc.tcc"
				>
				{
				public:
					OpStvxl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vs;
					uint32_t ra;
					uint32_t rb;
					virtual
#line 48 "ppc.isa"
					void
#line 49677 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49681 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49684 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49688 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49691 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49702 "powerpc.tcc"
				>
				class OpVaddcuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49707 "powerpc.tcc"
				>
				{
				public:
					OpVaddcuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 49718 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49722 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49725 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49729 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49732 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49743 "powerpc.tcc"
				>
				class OpVaddfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49748 "powerpc.tcc"
				>
				{
				public:
					OpVaddfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 49759 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49763 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49766 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49770 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49773 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49781 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49784 "powerpc.tcc"
				>
				class OpVaddsbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49789 "powerpc.tcc"
				>
				{
				public:
					OpVaddsbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 49800 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49804 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49807 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49811 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49814 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49825 "powerpc.tcc"
				>
				class OpVaddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49830 "powerpc.tcc"
				>
				{
				public:
					OpVaddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 49841 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49845 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49848 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49852 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49855 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49866 "powerpc.tcc"
				>
				class OpVaddsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49871 "powerpc.tcc"
				>
				{
				public:
					OpVaddsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 49882 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49886 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49889 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49893 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49896 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49904 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49907 "powerpc.tcc"
				>
				class OpVaddubm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49912 "powerpc.tcc"
				>
				{
				public:
					OpVaddubm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 49923 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49927 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49930 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49934 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49937 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49945 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49948 "powerpc.tcc"
				>
				class OpVaddubs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49953 "powerpc.tcc"
				>
				{
				public:
					OpVaddubs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 49964 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 49968 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 49971 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 49975 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 49978 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 49986 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 49989 "powerpc.tcc"
				>
				class OpVadduhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 49994 "powerpc.tcc"
				>
				{
				public:
					OpVadduhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50005 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50009 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50012 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50016 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50019 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50027 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50030 "powerpc.tcc"
				>
				class OpVadduhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50035 "powerpc.tcc"
				>
				{
				public:
					OpVadduhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50046 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50050 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50053 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50057 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50060 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50071 "powerpc.tcc"
				>
				class OpVadduwm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50076 "powerpc.tcc"
				>
				{
				public:
					OpVadduwm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50087 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50091 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50094 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50098 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50101 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50109 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50112 "powerpc.tcc"
				>
				class OpVadduws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50117 "powerpc.tcc"
				>
				{
				public:
					OpVadduws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50128 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50132 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50135 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50139 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50142 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50153 "powerpc.tcc"
				>
				class OpVand : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50158 "powerpc.tcc"
				>
				{
				public:
					OpVand(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50169 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50173 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50176 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50180 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50183 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50194 "powerpc.tcc"
				>
				class OpVandc : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50199 "powerpc.tcc"
				>
				{
				public:
					OpVandc(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50210 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50214 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50217 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50221 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50224 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50235 "powerpc.tcc"
				>
				class OpVavgsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50240 "powerpc.tcc"
				>
				{
				public:
					OpVavgsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50251 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50255 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50258 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50262 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50265 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50273 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50276 "powerpc.tcc"
				>
				class OpVavgsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50281 "powerpc.tcc"
				>
				{
				public:
					OpVavgsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50292 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50296 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50299 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50303 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50306 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50314 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50317 "powerpc.tcc"
				>
				class OpVavgsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50322 "powerpc.tcc"
				>
				{
				public:
					OpVavgsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50333 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50337 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50340 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50344 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50347 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50358 "powerpc.tcc"
				>
				class OpVavgub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50363 "powerpc.tcc"
				>
				{
				public:
					OpVavgub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50374 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50378 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50381 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50385 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50388 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50399 "powerpc.tcc"
				>
				class OpVavguh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50404 "powerpc.tcc"
				>
				{
				public:
					OpVavguh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50415 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50419 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50422 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50426 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50429 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50440 "powerpc.tcc"
				>
				class OpVavguw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50445 "powerpc.tcc"
				>
				{
				public:
					OpVavguw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50456 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50460 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50463 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50467 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50470 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50481 "powerpc.tcc"
				>
				class OpVcfsx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50486 "powerpc.tcc"
				>
				{
				public:
					OpVcfsx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50497 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50501 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50504 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50508 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50511 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50522 "powerpc.tcc"
				>
				class OpVcfux : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50527 "powerpc.tcc"
				>
				{
				public:
					OpVcfux(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 50538 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50542 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50545 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50549 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50552 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50563 "powerpc.tcc"
				>
				class OpVcmpbfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50568 "powerpc.tcc"
				>
				{
				public:
					OpVcmpbfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 50580 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50584 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50587 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50591 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50594 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50605 "powerpc.tcc"
				>
				class OpVcmpeqfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50610 "powerpc.tcc"
				>
				{
				public:
					OpVcmpeqfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 50622 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50626 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50629 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50633 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50636 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50644 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50647 "powerpc.tcc"
				>
				class OpVcmpequb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50652 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 50664 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50668 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50671 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50675 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50678 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50686 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50689 "powerpc.tcc"
				>
				class OpVcmpequh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50694 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 50706 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50710 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50713 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50717 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50720 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50731 "powerpc.tcc"
				>
				class OpVcmpequw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50736 "powerpc.tcc"
				>
				{
				public:
					OpVcmpequw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 50748 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50752 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50755 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50759 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50762 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50773 "powerpc.tcc"
				>
				class OpVcmpgefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50778 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 50790 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50794 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50797 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50801 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50804 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50812 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50815 "powerpc.tcc"
				>
				class OpVcmpgtfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50820 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 50832 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50836 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50839 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50843 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50846 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50857 "powerpc.tcc"
				>
				class OpVcmpgtsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50862 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 50874 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50878 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50881 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50885 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50888 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50899 "powerpc.tcc"
				>
				class OpVcmpgtsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50904 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 50916 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50920 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50923 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50927 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50930 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50941 "powerpc.tcc"
				>
				class OpVcmpgtsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50946 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 50958 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 50962 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 50965 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 50969 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 50972 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 50980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 50983 "powerpc.tcc"
				>
				class OpVcmpgtub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 50988 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 51000 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51004 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51007 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51011 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51014 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51022 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51025 "powerpc.tcc"
				>
				class OpVcmpgtuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51030 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 51042 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51046 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51049 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51053 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51056 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51067 "powerpc.tcc"
				>
				class OpVcmpgtuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51072 "powerpc.tcc"
				>
				{
				public:
					OpVcmpgtuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t rc;
					virtual
#line 48 "ppc.isa"
					void
#line 51084 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51088 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51091 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51095 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51098 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51106 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51109 "powerpc.tcc"
				>
				class OpVctsxs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51114 "powerpc.tcc"
				>
				{
				public:
					OpVctsxs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51125 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51129 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51132 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51136 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51139 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51150 "powerpc.tcc"
				>
				class OpVctuxs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51155 "powerpc.tcc"
				>
				{
				public:
					OpVctuxs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51166 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51170 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51173 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51177 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51180 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51191 "powerpc.tcc"
				>
				class OpVexptefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51196 "powerpc.tcc"
				>
				{
				public:
					OpVexptefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51206 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51210 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51213 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51217 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51220 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51228 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51231 "powerpc.tcc"
				>
				class OpVlogefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51236 "powerpc.tcc"
				>
				{
				public:
					OpVlogefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51246 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51250 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51253 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51257 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51260 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51268 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51271 "powerpc.tcc"
				>
				class OpVmaddfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51276 "powerpc.tcc"
				>
				{
				public:
					OpVmaddfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 51288 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51292 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51295 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51299 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51302 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51313 "powerpc.tcc"
				>
				class OpVmaxfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51318 "powerpc.tcc"
				>
				{
				public:
					OpVmaxfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51329 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51333 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51336 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51340 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51343 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51354 "powerpc.tcc"
				>
				class OpVmaxsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51359 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51370 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51374 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51377 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51381 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51384 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51395 "powerpc.tcc"
				>
				class OpVmaxsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51400 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51411 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51415 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51418 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51422 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51425 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51436 "powerpc.tcc"
				>
				class OpVmaxsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51441 "powerpc.tcc"
				>
				{
				public:
					OpVmaxsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51452 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51456 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51459 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51463 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51466 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51477 "powerpc.tcc"
				>
				class OpVmaxub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51482 "powerpc.tcc"
				>
				{
				public:
					OpVmaxub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51493 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51497 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51500 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51504 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51507 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51518 "powerpc.tcc"
				>
				class OpVmaxuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51523 "powerpc.tcc"
				>
				{
				public:
					OpVmaxuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51534 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51538 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51541 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51545 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51548 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51559 "powerpc.tcc"
				>
				class OpVmaxuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51564 "powerpc.tcc"
				>
				{
				public:
					OpVmaxuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51575 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51579 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51582 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51586 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51589 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51600 "powerpc.tcc"
				>
				class OpVmhaddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51605 "powerpc.tcc"
				>
				{
				public:
					OpVmhaddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 51617 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51621 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51624 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51628 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51631 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51642 "powerpc.tcc"
				>
				class OpVmhraddshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51647 "powerpc.tcc"
				>
				{
				public:
					OpVmhraddshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 51659 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51663 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51666 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51670 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51673 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51684 "powerpc.tcc"
				>
				class OpVminfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51689 "powerpc.tcc"
				>
				{
				public:
					OpVminfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51700 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51704 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51707 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51711 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51714 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51725 "powerpc.tcc"
				>
				class OpVminsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51730 "powerpc.tcc"
				>
				{
				public:
					OpVminsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51741 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51745 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51748 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51752 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51755 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51766 "powerpc.tcc"
				>
				class OpVminsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51771 "powerpc.tcc"
				>
				{
				public:
					OpVminsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51782 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51786 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51789 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51793 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51796 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51804 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51807 "powerpc.tcc"
				>
				class OpVminsw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51812 "powerpc.tcc"
				>
				{
				public:
					OpVminsw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51823 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51827 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51830 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51834 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51837 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51845 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51848 "powerpc.tcc"
				>
				class OpVminub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51853 "powerpc.tcc"
				>
				{
				public:
					OpVminub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51864 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51868 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51871 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51875 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51878 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51889 "powerpc.tcc"
				>
				class OpVminuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51894 "powerpc.tcc"
				>
				{
				public:
					OpVminuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51905 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51909 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51912 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51916 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51919 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51930 "powerpc.tcc"
				>
				class OpVminuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51935 "powerpc.tcc"
				>
				{
				public:
					OpVminuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 51946 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51950 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51953 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51957 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 51960 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 51968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 51971 "powerpc.tcc"
				>
				class OpVmladduhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 51976 "powerpc.tcc"
				>
				{
				public:
					OpVmladduhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 51988 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 51992 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 51995 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 51999 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52002 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52010 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52013 "powerpc.tcc"
				>
				class OpVmrghb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52018 "powerpc.tcc"
				>
				{
				public:
					OpVmrghb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52029 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52033 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52036 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52040 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52043 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52054 "powerpc.tcc"
				>
				class OpVmrghh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52059 "powerpc.tcc"
				>
				{
				public:
					OpVmrghh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52070 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52074 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52077 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52081 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52084 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52095 "powerpc.tcc"
				>
				class OpVmrghw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52100 "powerpc.tcc"
				>
				{
				public:
					OpVmrghw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52111 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52115 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52118 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52122 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52125 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52133 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52136 "powerpc.tcc"
				>
				class OpVmrglb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52141 "powerpc.tcc"
				>
				{
				public:
					OpVmrglb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52152 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52156 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52159 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52163 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52166 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52177 "powerpc.tcc"
				>
				class OpVmrglh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52182 "powerpc.tcc"
				>
				{
				public:
					OpVmrglh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52193 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52197 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52200 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52204 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52207 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52215 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52218 "powerpc.tcc"
				>
				class OpVmrglw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52223 "powerpc.tcc"
				>
				{
				public:
					OpVmrglw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52234 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52238 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52241 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52245 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52248 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52259 "powerpc.tcc"
				>
				class OpVmsummbm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52264 "powerpc.tcc"
				>
				{
				public:
					OpVmsummbm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 52276 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52280 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52283 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52287 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52290 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52301 "powerpc.tcc"
				>
				class OpVmsumshm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52306 "powerpc.tcc"
				>
				{
				public:
					OpVmsumshm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 52318 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52322 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52325 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52329 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52332 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52343 "powerpc.tcc"
				>
				class OpVmsumshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52348 "powerpc.tcc"
				>
				{
				public:
					OpVmsumshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 52360 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52364 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52367 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52371 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52374 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52382 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52385 "powerpc.tcc"
				>
				class OpVmsumubm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52390 "powerpc.tcc"
				>
				{
				public:
					OpVmsumubm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 52402 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52406 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52409 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52413 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52416 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52424 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52427 "powerpc.tcc"
				>
				class OpVmsumuhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52432 "powerpc.tcc"
				>
				{
				public:
					OpVmsumuhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 52444 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52448 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52451 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52455 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52458 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52469 "powerpc.tcc"
				>
				class OpVmsumuhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52474 "powerpc.tcc"
				>
				{
				public:
					OpVmsumuhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 52486 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52490 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52493 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52497 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52500 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52511 "powerpc.tcc"
				>
				class OpVmulesb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52516 "powerpc.tcc"
				>
				{
				public:
					OpVmulesb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52527 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52531 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52534 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52538 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52541 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52549 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52552 "powerpc.tcc"
				>
				class OpVmulesh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52557 "powerpc.tcc"
				>
				{
				public:
					OpVmulesh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52568 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52572 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52575 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52579 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52582 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52593 "powerpc.tcc"
				>
				class OpVmuleub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52598 "powerpc.tcc"
				>
				{
				public:
					OpVmuleub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52609 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52613 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52616 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52620 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52623 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52634 "powerpc.tcc"
				>
				class OpVmuleuh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52639 "powerpc.tcc"
				>
				{
				public:
					OpVmuleuh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52650 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52654 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52657 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52661 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52664 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52675 "powerpc.tcc"
				>
				class OpVmulosb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52680 "powerpc.tcc"
				>
				{
				public:
					OpVmulosb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52691 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52695 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52698 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52702 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52705 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52713 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52716 "powerpc.tcc"
				>
				class OpVmulosh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52721 "powerpc.tcc"
				>
				{
				public:
					OpVmulosh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52732 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52736 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52739 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52743 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52746 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52757 "powerpc.tcc"
				>
				class OpVmuloub : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52762 "powerpc.tcc"
				>
				{
				public:
					OpVmuloub(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52773 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52777 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52780 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52784 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52787 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52798 "powerpc.tcc"
				>
				class OpVmulouh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52803 "powerpc.tcc"
				>
				{
				public:
					OpVmulouh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52814 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52818 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52821 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52825 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52828 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52839 "powerpc.tcc"
				>
				class OpVnmsubfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52844 "powerpc.tcc"
				>
				{
				public:
					OpVnmsubfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 52856 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52860 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52863 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52867 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52870 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52878 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52881 "powerpc.tcc"
				>
				class OpVnor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52886 "powerpc.tcc"
				>
				{
				public:
					OpVnor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52897 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52901 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52904 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52908 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52911 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52922 "powerpc.tcc"
				>
				class OpVor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52927 "powerpc.tcc"
				>
				{
				public:
					OpVor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 52938 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52942 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52945 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52949 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52952 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 52960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 52963 "powerpc.tcc"
				>
				class OpVperm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 52968 "powerpc.tcc"
				>
				{
				public:
					OpVperm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 52980 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 52984 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 52987 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 52991 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 52994 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53005 "powerpc.tcc"
				>
				class OpVpkpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53010 "powerpc.tcc"
				>
				{
				public:
					OpVpkpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53021 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53025 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53028 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53032 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53035 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53043 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53046 "powerpc.tcc"
				>
				class OpVpkshss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53051 "powerpc.tcc"
				>
				{
				public:
					OpVpkshss(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53062 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53066 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53069 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53073 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53076 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53087 "powerpc.tcc"
				>
				class OpVpkshus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53092 "powerpc.tcc"
				>
				{
				public:
					OpVpkshus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53103 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53107 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53110 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53114 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53117 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53125 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53128 "powerpc.tcc"
				>
				class OpVpkswss : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53133 "powerpc.tcc"
				>
				{
				public:
					OpVpkswss(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53144 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53148 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53151 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53155 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53158 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53166 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53169 "powerpc.tcc"
				>
				class OpVpkswus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53174 "powerpc.tcc"
				>
				{
				public:
					OpVpkswus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53185 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53189 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53192 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53196 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53199 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53210 "powerpc.tcc"
				>
				class OpVpkuhum : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53215 "powerpc.tcc"
				>
				{
				public:
					OpVpkuhum(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53226 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53230 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53233 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53237 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53240 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53248 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53251 "powerpc.tcc"
				>
				class OpVpkuhus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53256 "powerpc.tcc"
				>
				{
				public:
					OpVpkuhus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53267 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53271 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53274 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53278 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53281 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53292 "powerpc.tcc"
				>
				class OpVpkuwum : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53297 "powerpc.tcc"
				>
				{
				public:
					OpVpkuwum(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53308 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53312 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53315 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53319 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53322 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53333 "powerpc.tcc"
				>
				class OpVpkuwus : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53338 "powerpc.tcc"
				>
				{
				public:
					OpVpkuwus(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53349 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53353 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53356 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53360 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53363 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53374 "powerpc.tcc"
				>
				class OpVrefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53379 "powerpc.tcc"
				>
				{
				public:
					OpVrefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53389 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53393 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53396 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53400 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53403 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53411 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53414 "powerpc.tcc"
				>
				class OpVrfim : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53419 "powerpc.tcc"
				>
				{
				public:
					OpVrfim(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53429 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53433 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53436 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53440 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53443 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53454 "powerpc.tcc"
				>
				class OpVrfin : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53459 "powerpc.tcc"
				>
				{
				public:
					OpVrfin(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53469 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53473 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53476 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53480 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53483 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53491 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53494 "powerpc.tcc"
				>
				class OpVrfip : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53499 "powerpc.tcc"
				>
				{
				public:
					OpVrfip(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53509 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53513 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53516 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53520 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53523 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53534 "powerpc.tcc"
				>
				class OpVrfiz : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53539 "powerpc.tcc"
				>
				{
				public:
					OpVrfiz(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53549 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53553 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53556 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53560 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53563 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53574 "powerpc.tcc"
				>
				class OpVrlb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53579 "powerpc.tcc"
				>
				{
				public:
					OpVrlb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53590 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53594 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53597 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53601 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53604 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53612 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53615 "powerpc.tcc"
				>
				class OpVrlh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53620 "powerpc.tcc"
				>
				{
				public:
					OpVrlh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53631 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53635 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53638 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53642 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53645 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53656 "powerpc.tcc"
				>
				class OpVrlw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53661 "powerpc.tcc"
				>
				{
				public:
					OpVrlw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53672 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53676 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53679 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53683 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53686 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53694 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53697 "powerpc.tcc"
				>
				class OpVrsqrtefp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53702 "powerpc.tcc"
				>
				{
				public:
					OpVrsqrtefp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53712 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53716 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53719 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53723 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53726 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53737 "powerpc.tcc"
				>
				class OpVsel : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53742 "powerpc.tcc"
				>
				{
				public:
					OpVsel(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t vc;
					virtual
#line 48 "ppc.isa"
					void
#line 53754 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53758 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53761 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53765 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53768 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53779 "powerpc.tcc"
				>
				class OpVsl : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53784 "powerpc.tcc"
				>
				{
				public:
					OpVsl(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53795 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53799 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53802 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53806 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53809 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53817 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53820 "powerpc.tcc"
				>
				class OpVslb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53825 "powerpc.tcc"
				>
				{
				public:
					OpVslb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53836 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53840 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53843 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53847 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53850 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53858 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53861 "powerpc.tcc"
				>
				class OpVsldoi : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53866 "powerpc.tcc"
				>
				{
				public:
					OpVsldoi(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					uint32_t sh;
					virtual
#line 48 "ppc.isa"
					void
#line 53878 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53882 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53885 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53889 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53892 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53903 "powerpc.tcc"
				>
				class OpVslh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53908 "powerpc.tcc"
				>
				{
				public:
					OpVslh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53919 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53923 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53926 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53930 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53933 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53944 "powerpc.tcc"
				>
				class OpVslo : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53949 "powerpc.tcc"
				>
				{
				public:
					OpVslo(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 53960 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 53964 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 53967 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 53971 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 53974 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 53982 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 53985 "powerpc.tcc"
				>
				class OpVslw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 53990 "powerpc.tcc"
				>
				{
				public:
					OpVslw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54001 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54005 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54008 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54012 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54015 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54026 "powerpc.tcc"
				>
				class OpVspltb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54031 "powerpc.tcc"
				>
				{
				public:
					OpVspltb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54042 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54046 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54049 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54053 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54056 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54064 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54067 "powerpc.tcc"
				>
				class OpVsplth : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54072 "powerpc.tcc"
				>
				{
				public:
					OpVsplth(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54083 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54087 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54090 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54094 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54097 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54108 "powerpc.tcc"
				>
				class OpVspltisb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54113 "powerpc.tcc"
				>
				{
				public:
					OpVspltisb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54124 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54128 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54131 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54135 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54138 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54149 "powerpc.tcc"
				>
				class OpVspltish : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54154 "powerpc.tcc"
				>
				{
				public:
					OpVspltish(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54165 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54169 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54172 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54176 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54179 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54190 "powerpc.tcc"
				>
				class OpVspltisw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54195 "powerpc.tcc"
				>
				{
				public:
					OpVspltisw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					int32_t simm;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54206 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54210 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54213 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54217 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54220 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54228 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54231 "powerpc.tcc"
				>
				class OpVspltw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54236 "powerpc.tcc"
				>
				{
				public:
					OpVspltw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t uimm;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54247 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54251 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54254 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54258 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54261 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54272 "powerpc.tcc"
				>
				class OpVsr : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54277 "powerpc.tcc"
				>
				{
				public:
					OpVsr(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54288 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54292 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54295 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54299 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54302 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54313 "powerpc.tcc"
				>
				class OpVsrab : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54318 "powerpc.tcc"
				>
				{
				public:
					OpVsrab(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54329 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54333 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54336 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54340 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54343 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54354 "powerpc.tcc"
				>
				class OpVsrah : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54359 "powerpc.tcc"
				>
				{
				public:
					OpVsrah(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54370 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54374 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54377 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54381 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54384 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54395 "powerpc.tcc"
				>
				class OpVsraw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54400 "powerpc.tcc"
				>
				{
				public:
					OpVsraw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54411 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54415 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54418 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54422 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54425 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54436 "powerpc.tcc"
				>
				class OpVsrb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54441 "powerpc.tcc"
				>
				{
				public:
					OpVsrb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54452 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54456 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54459 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54463 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54466 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54477 "powerpc.tcc"
				>
				class OpVsrh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54482 "powerpc.tcc"
				>
				{
				public:
					OpVsrh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54493 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54497 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54500 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54504 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54507 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54518 "powerpc.tcc"
				>
				class OpVsro : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54523 "powerpc.tcc"
				>
				{
				public:
					OpVsro(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54534 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54538 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54541 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54545 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54548 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54559 "powerpc.tcc"
				>
				class OpVsrw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54564 "powerpc.tcc"
				>
				{
				public:
					OpVsrw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54575 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54579 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54582 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54586 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54589 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54600 "powerpc.tcc"
				>
				class OpVsubcuw : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54605 "powerpc.tcc"
				>
				{
				public:
					OpVsubcuw(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54616 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54620 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54623 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54627 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54630 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54641 "powerpc.tcc"
				>
				class OpVsubfp : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54646 "powerpc.tcc"
				>
				{
				public:
					OpVsubfp(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54657 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54661 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54664 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54668 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54671 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54682 "powerpc.tcc"
				>
				class OpVsubsbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54687 "powerpc.tcc"
				>
				{
				public:
					OpVsubsbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54698 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54702 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54705 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54709 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54712 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54723 "powerpc.tcc"
				>
				class OpVsubshs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54728 "powerpc.tcc"
				>
				{
				public:
					OpVsubshs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54739 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54743 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54746 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54750 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54753 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54761 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54764 "powerpc.tcc"
				>
				class OpVsubsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54769 "powerpc.tcc"
				>
				{
				public:
					OpVsubsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54780 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54784 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54787 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54791 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54794 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54805 "powerpc.tcc"
				>
				class OpVsububm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54810 "powerpc.tcc"
				>
				{
				public:
					OpVsububm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54821 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54825 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54828 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54832 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54835 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54846 "powerpc.tcc"
				>
				class OpVsububs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54851 "powerpc.tcc"
				>
				{
				public:
					OpVsububs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54862 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54866 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54869 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54873 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54876 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54887 "powerpc.tcc"
				>
				class OpVsubuhm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54892 "powerpc.tcc"
				>
				{
				public:
					OpVsubuhm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54903 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54907 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54910 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54914 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54917 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54925 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54928 "powerpc.tcc"
				>
				class OpVsubuhs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54933 "powerpc.tcc"
				>
				{
				public:
					OpVsubuhs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54944 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54948 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54951 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54955 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54958 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 54966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 54969 "powerpc.tcc"
				>
				class OpVsubuwm : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 54974 "powerpc.tcc"
				>
				{
				public:
					OpVsubuwm(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 54985 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 54989 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 54992 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 54996 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 54999 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55010 "powerpc.tcc"
				>
				class OpVsubuws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55015 "powerpc.tcc"
				>
				{
				public:
					OpVsubuws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55026 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55030 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55033 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55037 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55040 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55051 "powerpc.tcc"
				>
				class OpVsumsws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55056 "powerpc.tcc"
				>
				{
				public:
					OpVsumsws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55067 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55071 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55074 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55078 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55081 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55092 "powerpc.tcc"
				>
				class OpVsum2sws : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55097 "powerpc.tcc"
				>
				{
				public:
					OpVsum2sws(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55108 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55112 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55115 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55119 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55122 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55130 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55133 "powerpc.tcc"
				>
				class OpVsum4sbs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55138 "powerpc.tcc"
				>
				{
				public:
					OpVsum4sbs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55149 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55153 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55156 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55160 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55163 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55171 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55174 "powerpc.tcc"
				>
				class OpVsum4shs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55179 "powerpc.tcc"
				>
				{
				public:
					OpVsum4shs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55190 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55194 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55197 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55201 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55204 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55212 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55215 "powerpc.tcc"
				>
				class OpVsum4ubs : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55220 "powerpc.tcc"
				>
				{
				public:
					OpVsum4ubs(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55231 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55235 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55238 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55242 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55245 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55256 "powerpc.tcc"
				>
				class OpVupkhpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55261 "powerpc.tcc"
				>
				{
				public:
					OpVupkhpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55271 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55275 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55278 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55282 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55285 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55293 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55296 "powerpc.tcc"
				>
				class OpVupkhsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55301 "powerpc.tcc"
				>
				{
				public:
					OpVupkhsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55311 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55315 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55318 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55322 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55325 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55336 "powerpc.tcc"
				>
				class OpVupkhsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55341 "powerpc.tcc"
				>
				{
				public:
					OpVupkhsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55351 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55355 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55358 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55362 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55365 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55376 "powerpc.tcc"
				>
				class OpVupklpx : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55381 "powerpc.tcc"
				>
				{
				public:
					OpVupklpx(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55391 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55395 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55398 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55402 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55405 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55416 "powerpc.tcc"
				>
				class OpVupklsb : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55421 "powerpc.tcc"
				>
				{
				public:
					OpVupklsb(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55431 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55435 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55438 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55442 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55445 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55453 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55456 "powerpc.tcc"
				>
				class OpVupklsh : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55461 "powerpc.tcc"
				>
				{
				public:
					OpVupklsh(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55471 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55475 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55478 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55482 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55485 "powerpc.tcc"
					);
				private:
				};

				template <
#line 38 "ppc.isa"
				class
#line 55493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55496 "powerpc.tcc"
				>
				class OpVxor : public Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55501 "powerpc.tcc"
				>
				{
				public:
					OpVxor(CodeType code, typename CONFIG::address_t addr);
					uint32_t vd;
					uint32_t va;
					uint32_t vb;
					virtual
#line 48 "ppc.isa"
					void
#line 55512 "powerpc.tcc"
					disasm(
#line 48 "ppc.isa"
					CPU<CONFIG> *
#line 55516 "powerpc.tcc"
#line 48 "ppc.isa"
					cpu
#line 55519 "powerpc.tcc"
					,
#line 48 "ppc.isa"
					ostream&
#line 55523 "powerpc.tcc"
#line 48 "ppc.isa"
					os
#line 55526 "powerpc.tcc"
					);
				private:
				};

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 55567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55570 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 55574 "powerpc.tcc"
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 55578 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 55582 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 55585 "powerpc.tcc"
				)
				{
#line 36 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t ca, ov;
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t result;
						Add32(result, ca, ov, a, b, 0);
						cpu->SetGPR(rd, result);
						if(oe) {
							if(ov) {
								cpu->SetXER_OV();
								cpu->SetXER_SO();
								} else {
								cpu->ResetXER_OV();
							}
						}
						if(rc) {
							cpu->ComputeCR0(result) ;
						}
					}
#line 55608 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 55613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55616 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 55620 "powerpc.tcc"
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 55624 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 55628 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 55631 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 55635 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 55638 "powerpc.tcc"
				)
				{
#line 55 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "add" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 55645 "powerpc.tcc"
				}
				/** Integer (FnIntBasic | FnIntBasicSerial | FnIntExtended) **/
				template <
#line 38 "ppc.isa"
				class
#line 55651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55654 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 55661 "powerpc.tcc"
				>::initialize_function()
				{
#line 194 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 55666 "powerpc.tcc"
				}
				/** Integer **/
				template <
#line 38 "ppc.isa"
				class
#line 55672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55675 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 55682 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 55687 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 55692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55695 "powerpc.tcc"
				>

				void
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 55702 "powerpc.tcc"
				>::initialize_operands()
				{
#line 462 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 55715 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 55721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55724 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55729 "powerpc.tcc"
				> *DecodeOpAdd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAdd<
#line 38 "ppc.isa"
					CONFIG
#line 55735 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 55742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55745 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 55749 "powerpc.tcc"
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 55753 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 55757 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 55760 "powerpc.tcc"
				)
				{
#line 60 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t carry, overflow;
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t result;
						Add32(result, carry, overflow, a, b, 0);
						cpu->SetGPR(rd, result);
						if(carry) cpu->SetXER_CA(); else cpu->ResetXER_CA();
						if(oe) {
							if(overflow) {
								cpu->SetXER_OV();
								cpu->SetXER_SO();
								} else {
								cpu->ResetXER_OV();
							}
						}
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 55784 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 55789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55792 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 55796 "powerpc.tcc"
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 55800 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 55804 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 55807 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 55811 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 55814 "powerpc.tcc"
				)
				{
#line 80 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addc" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 55821 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 55826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55829 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 55836 "powerpc.tcc"
				>::initialize_function()
				{
#line 195 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 55841 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 55846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55849 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 55856 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 124 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 55861 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 55866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55869 "powerpc.tcc"
				>

				void
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 55876 "powerpc.tcc"
				>::initialize_operands()
				{
#line 473 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T, 2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 55890 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 55896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55899 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 55904 "powerpc.tcc"
				> *DecodeOpAddc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddc<
#line 38 "ppc.isa"
					CONFIG
#line 55910 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 55917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55920 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 55924 "powerpc.tcc"
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 55928 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 55932 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 55935 "powerpc.tcc"
				)
				{
#line 85 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t CA, OV;
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t result;
						Add32(result, CA, OV, a, b, cpu->GetXER_CA());
						cpu->SetGPR(rd, result);
						if(CA) cpu->SetXER_CA(); else cpu->ResetXER_CA();
						if(oe) {
							if(OV) {
								cpu->SetXER_OV();
								cpu->SetXER_SO();
								} else {
								cpu->ResetXER_OV();
							}
						}
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 55959 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 55964 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 55967 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 55971 "powerpc.tcc"
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 55975 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 55979 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 55982 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 55986 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 55989 "powerpc.tcc"
				)
				{
#line 105 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "adde" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 55996 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56004 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 56011 "powerpc.tcc"
				>::initialize_function()
				{
#line 196 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 56016 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56024 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 56031 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 125 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 56036 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56041 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56044 "powerpc.tcc"
				>

				void
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 56051 "powerpc.tcc"
				>::initialize_operands()
				{
#line 485 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 56066 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 56072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56075 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56080 "powerpc.tcc"
				> *DecodeOpAdde(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAdde<
#line 38 "ppc.isa"
					CONFIG
#line 56086 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 56093 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56096 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 56100 "powerpc.tcc"
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 56104 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 56108 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 56111 "powerpc.tcc"
				)
				{
#line 110 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = (ra != 0 ? cpu->GetGPR(ra) + simm : simm);
						cpu->SetGPR(rd, result);
					}
#line 56119 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56127 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 56131 "powerpc.tcc"
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 56135 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 56139 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 56142 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 56146 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 56149 "powerpc.tcc"
				)
				{
#line 114 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(ra == 0)
						os << "li r" << rd << ", " << simm;
						else
						os << "addi r" << rd << ", r" << ra << ", " << simm;
					}
#line 56159 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56167 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 56174 "powerpc.tcc"
				>::initialize_function()
				{
#line 197 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 56179 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56184 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56187 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 56194 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 126 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 56199 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56204 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56207 "powerpc.tcc"
				>

				void
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 56214 "powerpc.tcc"
				>::initialize_operands()
				{
#line 222 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 56226 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 56232 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56235 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56240 "powerpc.tcc"
				> *DecodeOpAddi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddi<
#line 38 "ppc.isa"
					CONFIG
#line 56246 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 56253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56256 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 56260 "powerpc.tcc"
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 56264 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 56268 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 56271 "powerpc.tcc"
				)
				{
#line 122 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = simm;
						uint8_t CA, OV ;
						uint32_t result;
						Add32(result, CA, OV, a, b, 0) ;
						cpu->SetGPR(rd, result);
						if(CA) cpu->SetXER_CA(); else cpu->ResetXER_CA();
					}
#line 56284 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56289 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56292 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 56296 "powerpc.tcc"
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 56300 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 56304 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 56307 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 56311 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 56314 "powerpc.tcc"
				)
				{
#line 131 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addic r" << rd << ", r" << ra << ", " << simm;
					}
#line 56321 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56329 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 56336 "powerpc.tcc"
				>::initialize_function()
				{
#line 198 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 56341 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56346 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56349 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 56356 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 127 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 56361 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 56378 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56381 "powerpc.tcc"
				>

				void
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 56388 "powerpc.tcc"
				>::initialize_operands()
				{
#line 250 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 56398 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 56404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56407 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56412 "powerpc.tcc"
				> *DecodeOpAddic(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddic<
#line 38 "ppc.isa"
					CONFIG
#line 56418 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 56425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56428 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 56432 "powerpc.tcc"
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 56436 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 56440 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 56443 "powerpc.tcc"
				)
				{
#line 136 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t CA, OV ;
						uint32_t a = cpu->GetGPR(ra);
						uint32_t b = simm;
						uint32_t result;
						Add32(result, CA, OV, a, b, 0) ;
						cpu->SetGPR(rd, result);
						if(CA) cpu->SetXER_CA(); else cpu->ResetXER_CA();
						cpu->ComputeCR0(result);
					}
#line 56457 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56465 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 56469 "powerpc.tcc"
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 56473 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 56477 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 56480 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 56484 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 56487 "powerpc.tcc"
				)
				{
#line 146 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addic. r" << rd << ", r" << ra << ", " << simm;
					}
#line 56494 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56502 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 56509 "powerpc.tcc"
				>::initialize_function()
				{
#line 199 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 56514 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56522 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 56529 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 128 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 56534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56542 "powerpc.tcc"
				>

				void
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 56549 "powerpc.tcc"
				>::initialize_operands()
				{
#line 269 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
						OUTPUT(XER_T,2);

					}
#line 56560 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 56566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56569 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56574 "powerpc.tcc"
				> *DecodeOpAddic_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddic_<
#line 38 "ppc.isa"
					CONFIG
#line 56580 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 56587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56590 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 56594 "powerpc.tcc"
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 56598 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 56602 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 56605 "powerpc.tcc"
				)
				{
#line 151 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = ra != 0 ? cpu->GetGPR(ra) + simm : simm;
						cpu->SetGPR(rd, result);
					}
#line 56613 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56621 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 56625 "powerpc.tcc"
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 56629 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 56633 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 56636 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 56640 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 56643 "powerpc.tcc"
				)
				{
#line 155 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(ra == 0)
						os << "lis r" << rd << ", " << (simm >> 16);
						else
						os << "addis r" << rd << ", r" << ra << ", " << (simm >> 16);
					}
#line 56653 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56661 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 56668 "powerpc.tcc"
				>::initialize_function()
				{
#line 200 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 56673 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56681 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 56688 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 129 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 56693 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56701 "powerpc.tcc"
				>

				void
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 56708 "powerpc.tcc"
				>::initialize_operands()
				{
#line 222 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 56720 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 56726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56729 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56734 "powerpc.tcc"
				> *DecodeOpAddis(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddis<
#line 38 "ppc.isa"
					CONFIG
#line 56740 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 56747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56750 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 56754 "powerpc.tcc"
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 56758 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 56762 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 56765 "powerpc.tcc"
				)
				{
#line 163 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t CA, OV;
						uint32_t result;
						Add32(result, CA, OV, 0xFFFFFFFF, cpu->GetGPR(ra), cpu->GetXER_CA());
						cpu->SetGPR(rd, result);
						if(CA) cpu->SetXER_CA(); else cpu->ResetXER_CA();
						if(oe) {
							if(OV) {
								cpu->SetXER_OV();
								cpu->SetXER_SO();
								} else {
								cpu->ResetXER_OV();
							}
						}
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 56787 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56795 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 56799 "powerpc.tcc"
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 56803 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 56807 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 56810 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 56814 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 56817 "powerpc.tcc"
				)
				{
#line 181 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addme" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 56824 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56832 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 56839 "powerpc.tcc"
				>::initialize_function()
				{
#line 201 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 56844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56852 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 56859 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 130 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 56864 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 56881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56884 "powerpc.tcc"
				>

				void
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 56891 "powerpc.tcc"
				>::initialize_operands()
				{
#line 250 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 56901 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 56907 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56910 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 56915 "powerpc.tcc"
				> *DecodeOpAddme(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddme<
#line 38 "ppc.isa"
					CONFIG
#line 56921 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 56928 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56931 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 56935 "powerpc.tcc"
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 56939 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 56943 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 56946 "powerpc.tcc"
				)
				{
#line 186 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t CA, OV;
						uint32_t result;
						Add32(result, CA, OV, cpu->GetGPR(ra), cpu->GetXER_CA(), 0);
						cpu->SetGPR(rd, result);
						if(CA) cpu->SetXER_CA(); else cpu->ResetXER_CA();
						if(oe) {
							if(OV) {
								cpu->SetXER_OV();
								cpu->SetXER_SO();
								} else {
								cpu->ResetXER_OV();
							}
						}
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 56968 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 56973 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 56976 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 56980 "powerpc.tcc"
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 56984 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 56988 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 56991 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 56995 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 56998 "powerpc.tcc"
				)
				{
#line 204 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "addze" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 57005 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57010 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57013 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 57020 "powerpc.tcc"
				>::initialize_function()
				{
#line 202 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 57025 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57033 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 57040 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 131 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 57045 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57053 "powerpc.tcc"
				>

				void
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 57060 "powerpc.tcc"
				>::initialize_operands()
				{
#line 257 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(XER_T, 2);
						INPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 57074 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 57080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57083 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57088 "powerpc.tcc"
				> *DecodeOpAddze(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAddze<
#line 38 "ppc.isa"
					CONFIG
#line 57094 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 57101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57104 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 57108 "powerpc.tcc"
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 57112 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 57116 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 57119 "powerpc.tcc"
				)
				{
#line 210 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if((cpu->GetGPR(ra) == 0x80000000UL && cpu->GetGPR(rb) == 0xffffffffUL) || cpu->GetGPR(rb) == 0) {
							cpu->SetGPR(rd, 0);
							if(oe) {
								cpu->SetXER_OV();
								cpu->SetXER_SO();
							}
							if(rc) {
								cpu->ResetCR0_LT();
								cpu->ResetCR0_GT();
								cpu->ResetCR0_EQ();
								if(cpu->GetXER_SO()) cpu->SetCR0_SO(); else cpu->ResetCR0_SO();
							}
							} else {
							int32_t _a = cpu->GetGPR(ra) ;
							int32_t _b = cpu->GetGPR(rb) ;
							int32_t _c = _a / _b ;
							cpu->SetGPR(rd, _c);
							if(oe) cpu->ResetXER_OV();
							if(rc) {
								cpu->ComputeCR0(_c);
							}
						}
					}
#line 57147 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57155 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 57159 "powerpc.tcc"
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 57163 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 57167 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 57170 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 57174 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 57177 "powerpc.tcc"
				)
				{
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "divw" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 57184 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57192 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 57199 "powerpc.tcc"
				>::initialize_function()
				{
#line 203 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 57204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57212 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 57219 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 132 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(35); }
#line 57224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57232 "powerpc.tcc"
				>

				void
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 57239 "powerpc.tcc"
				>::initialize_operands()
				{
#line 449 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 57252 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 57258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57261 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57266 "powerpc.tcc"
				> *DecodeOpDivw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDivw<
#line 38 "ppc.isa"
					CONFIG
#line 57272 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 57279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57282 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 57286 "powerpc.tcc"
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 57290 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 57294 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 57297 "powerpc.tcc"
				)
				{
#line 239 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t _a = cpu->GetGPR(ra) ;
						uint32_t _b = cpu->GetGPR(rb) ;
						if(_b == 0) {
							cpu->SetGPR(rd, 0);
							if(oe) {
								cpu->SetXER_OV();
								cpu->SetXER_SO();
							}
							if(rc) {
								cpu->ResetCR0_LT();
								cpu->ResetCR0_GT();
								cpu->ResetCR0_EQ();
								cpu->SetCR0_SO();
							}
							} else {
							uint32_t _c = _a / _b ;
							cpu->SetGPR(rd, _c);
							if(oe) cpu->ResetXER_OV();
							if(rc) {
								cpu->ComputeCR0(_c) ;
							}
						}
					}
#line 57325 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57333 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 57337 "powerpc.tcc"
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 57341 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 57345 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 57348 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 57352 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 57355 "powerpc.tcc"
				)
				{
#line 263 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "divwu" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 57362 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57370 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 57377 "powerpc.tcc"
				>::initialize_function()
				{
#line 204 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 57382 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57390 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 57397 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 133 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(35); }
#line 57402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57410 "powerpc.tcc"
				>

				void
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 57417 "powerpc.tcc"
				>::initialize_operands()
				{
#line 449 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 57430 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 57436 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57439 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57444 "powerpc.tcc"
				> *DecodeOpDivwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDivwu<
#line 38 "ppc.isa"
					CONFIG
#line 57450 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 57457 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57460 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 57464 "powerpc.tcc"
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 57468 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 57472 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 57475 "powerpc.tcc"
				)
				{
#line 269 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						int64_t a = (int32_t) cpu->GetGPR(ra);
						int64_t b = (int32_t) cpu->GetGPR(rb);
						int64_t _prod = a * b ;
						uint32_t result = (int32_t)(_prod >> 32) ;
						cpu->SetGPR(rd, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 57489 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57494 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57497 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 57501 "powerpc.tcc"
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 57505 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 57509 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 57512 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 57516 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 57519 "powerpc.tcc"
				)
				{
#line 279 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulhw" << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 57526 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57534 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 57541 "powerpc.tcc"
				>::initialize_function()
				{
#line 205 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 57546 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57554 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 57561 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 134 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(5); }
#line 57566 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57574 "powerpc.tcc"
				>

				void
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 57581 "powerpc.tcc"
				>::initialize_operands()
				{
#line 449 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 57594 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 57600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57603 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57608 "powerpc.tcc"
				> *DecodeOpMulhw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulhw<
#line 38 "ppc.isa"
					CONFIG
#line 57614 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 57621 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57624 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 57628 "powerpc.tcc"
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 57632 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 57636 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 57639 "powerpc.tcc"
				)
				{
#line 284 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint64_t _a = (uint32_t) cpu->GetGPR(ra);
						uint64_t _b = (uint32_t) cpu->GetGPR(rb);
						uint64_t _prod = _a * _b ;
						_prod = _prod >> 32 ;
						uint32_t result = (uint32_t) _prod ;
						cpu->SetGPR(rd, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 57654 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57662 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 57666 "powerpc.tcc"
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 57670 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 57674 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 57677 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 57681 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 57684 "powerpc.tcc"
				)
				{
#line 295 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulhwu" << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 57691 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57696 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57699 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 57706 "powerpc.tcc"
				>::initialize_function()
				{
#line 206 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 57711 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57719 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 57726 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 135 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(5); }
#line 57731 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57739 "powerpc.tcc"
				>

				void
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 57746 "powerpc.tcc"
				>::initialize_operands()
				{
#line 449 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 57759 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 57765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57768 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57773 "powerpc.tcc"
				> *DecodeOpMulhwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulhwu<
#line 38 "ppc.isa"
					CONFIG
#line 57779 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 57786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57789 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 57793 "powerpc.tcc"
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 57797 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 57801 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 57804 "powerpc.tcc"
				)
				{
#line 300 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						int64_t _prod = (int64_t) cpu->GetGPR(ra) * (int64_t) simm;
						uint32_t result = (uint32_t) _prod;
						cpu->SetGPR(rd, result);
					}
#line 57813 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57818 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57821 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 57825 "powerpc.tcc"
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 57829 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 57833 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 57836 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 57840 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 57843 "powerpc.tcc"
				)
				{
#line 305 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mulli r" << rd << ", r" << ra << ", " << simm;
					}
#line 57850 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57858 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 57865 "powerpc.tcc"
				>::initialize_function()
				{
#line 207 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 57870 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57875 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57878 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 57885 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 136 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 57890 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57895 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57898 "powerpc.tcc"
				>

				void
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 57905 "powerpc.tcc"
				>::initialize_operands()
				{
#line 231 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
					}
#line 57913 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 57919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57922 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 57927 "powerpc.tcc"
				> *DecodeOpMulli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMulli<
#line 38 "ppc.isa"
					CONFIG
#line 57933 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 57940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57943 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 57947 "powerpc.tcc"
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 57951 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 57955 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 57958 "powerpc.tcc"
				)
				{
#line 310 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						int64_t _prod = (int64_t) cpu->GetGPR(ra) * (int64_t) cpu->GetGPR(rb) ;
						uint32_t result = (uint32_t) _prod;
						cpu->SetGPR(rd, result);
						if(oe && (0xFFFFFFFF00000000ULL & _prod) != 0) {
							cpu->SetXER_OV();
							cpu->SetXER_SO();
						}
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 57974 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 57979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 57982 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 57986 "powerpc.tcc"
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 57990 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 57994 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 57997 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 58001 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 58004 "powerpc.tcc"
				)
				{
#line 322 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "mullw r" << rd << ", r" << ra << ", r" << rb;
					}
#line 58011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58019 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 58026 "powerpc.tcc"
				>::initialize_function()
				{
#line 208 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntExtended; }
#line 58031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58039 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 58046 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 137 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ if (oe) LAT(5); else LAT(4); }
#line 58051 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58059 "powerpc.tcc"
				>

				void
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 58066 "powerpc.tcc"
				>::initialize_operands()
				{
#line 449 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 58079 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 58085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58088 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58093 "powerpc.tcc"
				> *DecodeOpMullw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMullw<
#line 38 "ppc.isa"
					CONFIG
#line 58099 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 58106 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58109 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 58113 "powerpc.tcc"
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 58117 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 58121 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 58124 "powerpc.tcc"
				)
				{
#line 327 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result;
						if(cpu->GetGPR(ra) == 0x80000000UL)
						{
							result = 0x80000000UL;
							if(oe)
							{
								cpu->SetXER_OV();
								cpu->SetXER_SO();
							}
						}
						else
						{
							result = -cpu->GetGPR(ra); //(~GPR(ra)) + 1;
							if(oe) cpu->ResetXER_OV();
						}
						cpu->SetGPR(rd, result);
						if(rc) cpu->ComputeCR0(result);
					}
#line 58147 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58155 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 58159 "powerpc.tcc"
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 58163 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 58167 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 58170 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 58174 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 58177 "powerpc.tcc"
				)
				{
#line 346 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "neg" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 58184 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58192 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 58199 "powerpc.tcc"
				>::initialize_function()
				{
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 58204 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58212 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 58219 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 138 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 58224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58232 "powerpc.tcc"
				>

				void
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 58239 "powerpc.tcc"
				>::initialize_operands()
				{
#line 231 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
					}
#line 58247 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 58253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58256 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58261 "powerpc.tcc"
				> *DecodeOpNeg(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNeg<
#line 38 "ppc.isa"
					CONFIG
#line 58267 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 58274 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58277 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 58281 "powerpc.tcc"
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 58285 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 58289 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 58292 "powerpc.tcc"
				)
				{
#line 351 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t CA, OV;
						uint32_t result;
						Add32(result, CA, OV, ~(cpu->GetGPR(ra)), cpu->GetGPR(rb), 1);
						cpu->SetGPR(rd, result);
						if(oe) {
							if(OV) {
								cpu->SetXER_OV();
								cpu->SetXER_SO();
								} else {
								cpu->ResetXER_OV();
							}
						}
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 58313 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58318 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58321 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 58325 "powerpc.tcc"
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 58329 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 58333 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 58336 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 58340 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 58343 "powerpc.tcc"
				)
				{
#line 368 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subf" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 58350 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58355 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58358 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 58365 "powerpc.tcc"
				>::initialize_function()
				{
#line 210 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 58370 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58378 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 58385 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 139 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 58390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58398 "powerpc.tcc"
				>

				void
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 58405 "powerpc.tcc"
				>::initialize_operands()
				{
#line 462 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 58418 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 58424 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58427 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58432 "powerpc.tcc"
				> *DecodeOpSubf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubf<
#line 38 "ppc.isa"
					CONFIG
#line 58438 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 58445 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58448 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 58452 "powerpc.tcc"
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 58456 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 58460 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 58463 "powerpc.tcc"
				)
				{
#line 373 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t CA, OV;
						uint32_t result;
						Add32(result, CA, OV, ~(cpu->GetGPR(ra)), cpu->GetGPR(rb), 1);
						cpu->SetGPR(rd, result);
						if(CA) cpu->SetXER_CA(); else cpu->ResetXER_CA();
						if(oe) {
							if(OV) {
								cpu->SetXER_OV();
								cpu->SetXER_SO();
								} else {
								cpu->ResetXER_OV();
							}
						}
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 58485 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58493 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 58497 "powerpc.tcc"
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 58501 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 58505 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 58508 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 58512 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 58515 "powerpc.tcc"
				)
				{
#line 391 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfc" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 58522 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58530 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 58537 "powerpc.tcc"
				>::initialize_function()
				{
#line 211 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 58542 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58550 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 58557 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 140 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 58562 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58570 "powerpc.tcc"
				>

				void
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 58577 "powerpc.tcc"
				>::initialize_operands()
				{
#line 473 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T, 2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 58591 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 58597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58600 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58605 "powerpc.tcc"
				> *DecodeOpSubfc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfc<
#line 38 "ppc.isa"
					CONFIG
#line 58611 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 58618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58621 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 58625 "powerpc.tcc"
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 58629 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 58633 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 58636 "powerpc.tcc"
				)
				{
#line 396 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t a = ~cpu->GetGPR(ra);
						uint32_t b = cpu->GetGPR(rb);
						uint32_t c = cpu->GetXER_CA();
						uint8_t CA, OV;
						uint32_t result;
						Add32(result, CA, OV, a, b, c);
						cpu->SetGPR(rd, result);
						if(CA) cpu->SetXER_CA(); else cpu->ResetXER_CA();
						if(oe) {
							if(OV) {
								cpu->SetXER_OV();
								cpu->SetXER_SO();
								} else {
								cpu->ResetXER_OV();
							}
						}
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 58661 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58669 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 58673 "powerpc.tcc"
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 58677 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 58681 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 58684 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 58688 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 58691 "powerpc.tcc"
				)
				{
#line 417 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfe" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra << ", r" << rb;
					}
#line 58698 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58706 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 58713 "powerpc.tcc"
				>::initialize_function()
				{
#line 212 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 58718 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58726 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 58733 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 141 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 58738 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58746 "powerpc.tcc"
				>

				void
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 58753 "powerpc.tcc"
				>::initialize_operands()
				{
#line 485 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 58768 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 58774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58777 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58782 "powerpc.tcc"
				> *DecodeOpSubfe(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfe<
#line 38 "ppc.isa"
					CONFIG
#line 58788 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 58795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58798 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 58802 "powerpc.tcc"
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 58806 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 58810 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 58813 "powerpc.tcc"
				)
				{
#line 422 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t CA, OV = 0;
						int32_t a = cpu->GetGPR(ra);
						int32_t b = simm;
						uint32_t result;
						Add32(result, CA, OV, -a, b, 0);
						cpu->SetGPR(rd, result);
						if(CA || a == 0) cpu->SetXER_CA(); else cpu->ResetXER_CA();
					}
#line 58826 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58831 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58834 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 58838 "powerpc.tcc"
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 58842 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 58846 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 58849 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 58853 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 58856 "powerpc.tcc"
				)
				{
#line 431 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfic r" << rd << ", r" << ra << ", " << simm;
					}
#line 58863 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58871 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 58878 "powerpc.tcc"
				>::initialize_function()
				{
#line 213 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 58883 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 58888 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58891 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 58898 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 142 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 58903 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 58920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58923 "powerpc.tcc"
				>

				void
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 58930 "powerpc.tcc"
				>::initialize_operands()
				{
#line 250 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 58940 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 58946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58949 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 58954 "powerpc.tcc"
				> *DecodeOpSubfic(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfic<
#line 38 "ppc.isa"
					CONFIG
#line 58960 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 58967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 58970 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 58974 "powerpc.tcc"
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 58978 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 58982 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 58985 "powerpc.tcc"
				)
				{
#line 436 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t CA, OV;
						uint32_t result;
						Add32(result, CA, OV, ~(cpu->GetGPR(ra)), 0xFFFFFFFF, cpu->GetXER_CA());
						cpu->SetGPR(rd, result);
						if(CA) cpu->SetXER_CA(); else cpu->ResetXER_CA();
						if(oe) {
							if(OV) {
								cpu->SetXER_OV();
								cpu->SetXER_SO();
								} else {
								cpu->ResetXER_OV();
							}
						}
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 59007 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59015 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 59019 "powerpc.tcc"
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 59023 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 59027 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 59030 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 59034 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 59037 "powerpc.tcc"
				)
				{
#line 454 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfme" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 59044 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59052 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 59059 "powerpc.tcc"
				>::initialize_function()
				{
#line 214 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 59064 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59069 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59072 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 59079 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 143 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 59084 "powerpc.tcc"
				}
				/*
				group instr_rd_addis(addis)
				instr_rd_ra_addis.initialize_operands = {
					OUTPUT(GPR_T, rd);
					if (ra != 0)
					{
						INPUT(GPR_T, ra);
					}
				}
				*/
				//group instr_rd_ra_xerca(addic, addic_, subfic, addme, addze, subfme, subfze)
				//group instr_rd_ra_xerca(addic, subfic, addme, addze, subfme, subfze)
				template <
#line 38 "ppc.isa"
				class
#line 59101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59104 "powerpc.tcc"
				>

				void
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 59111 "powerpc.tcc"
				>::initialize_operands()
				{
#line 250 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(XER_T,2);
						OUTPUT(XER_T,2);
					}
#line 59121 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 59127 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59130 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59135 "powerpc.tcc"
				> *DecodeOpSubfme(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfme<
#line 38 "ppc.isa"
					CONFIG
#line 59141 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 59148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59151 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 59155 "powerpc.tcc"
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 59159 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 59163 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 59166 "powerpc.tcc"
				)
				{
#line 459 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint8_t CA, OV;
						uint32_t result;
						Add32(result, CA, OV, ~(cpu->GetGPR(ra)), cpu->GetXER_CA(), 0);
						cpu->SetGPR(rd, result);
						if(CA) cpu->SetXER_CA(); else cpu->ResetXER_CA();
						if(oe) {
							if(OV) {
								cpu->SetXER_OV();
								cpu->SetXER_SO();
								} else {
								cpu->ResetXER_OV();
							}
						}
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 59188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59196 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 59200 "powerpc.tcc"
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 59204 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 59208 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 59211 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 59215 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 59218 "powerpc.tcc"
				)
				{
#line 477 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "subfze" << (oe ? "o" : "") << (rc ? "." : "") << " r" << rd << ", r" << ra;
					}
#line 59225 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59233 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 59240 "powerpc.tcc"
				>::initialize_function()
				{
#line 215 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasicSerial; }
#line 59245 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59250 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59253 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 59260 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 144 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 59265 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59270 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59273 "powerpc.tcc"
				>

				void
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 59280 "powerpc.tcc"
				>::initialize_operands()
				{
#line 257 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(XER_T, 2);
						INPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 59294 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 59300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59303 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59308 "powerpc.tcc"
				> *DecodeOpSubfze(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSubfze<
#line 38 "ppc.isa"
					CONFIG
#line 59314 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER COMPARE INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 59326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59329 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 59333 "powerpc.tcc"
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 59337 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 59341 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 59344 "powerpc.tcc"
				)
				{
#line 488 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						int32_t _a, _b ;
						uint32_t _c;
						_a = (int32_t) cpu->GetGPR(ra);
						_b = (int32_t) cpu->GetGPR(rb);
						if(_a<_b) {
							_c = 1 << 3 ;
							} else {
							if(_a>_b) {
								_c = 1 << 2 ;
								} else {
								_c = 1 << 1 ;
							}
						}
						_c = _c | cpu->GetXER_SO();
						cpu->SetCRF(crfD, _c);
					}
#line 59365 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59373 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 59377 "powerpc.tcc"
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 59381 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 59385 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 59388 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 59392 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 59395 "powerpc.tcc"
				)
				{
#line 505 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmp cr" << crfD << ", " << l << ", r" << ra << ", r" << rb;
					}
#line 59402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59410 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 59417 "powerpc.tcc"
				>::initialize_function()
				{
#line 216 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 59422 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59427 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59430 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 59437 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 145 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 59442 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59450 "powerpc.tcc"
				>

				void
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 59457 "powerpc.tcc"
				>::initialize_operands()
				{
#line 749 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 59468 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 59474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59477 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59482 "powerpc.tcc"
				> *DecodeOpCmp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmp<
#line 38 "ppc.isa"
					CONFIG
#line 59488 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 59495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59498 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 59502 "powerpc.tcc"
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 59506 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 59510 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 59513 "powerpc.tcc"
				)
				{
#line 510 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(l) throw IllegalInstructionException<CONFIG>();
						int32_t _a ;
						uint32_t _c;
						_a = cpu->GetGPR(ra) ;
						if(_a<simm) {
							_c = 1 << 2 ;
							} else {
							if(_a>simm) {
								_c = 1 << 1 ;
								} else {
								_c = 1 ;
							}
						}
						_c = (_c << 1) | cpu->GetXER_SO();
						cpu->SetCRF(crfD, _c);
					}
#line 59534 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59542 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 59546 "powerpc.tcc"
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 59550 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 59554 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 59557 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 59561 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 59564 "powerpc.tcc"
				)
				{
#line 527 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpi cr" << crfD << ", " << l << ", r" << ra << ", " << simm;
					}
#line 59571 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59576 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59579 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 59586 "powerpc.tcc"
				>::initialize_function()
				{
#line 217 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 59591 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59596 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59599 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 59606 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 146 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 59611 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59616 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59619 "powerpc.tcc"
				>

				void
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 59626 "powerpc.tcc"
				>::initialize_operands()
				{
#line 381 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 59636 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 59642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59645 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59650 "powerpc.tcc"
				> *DecodeOpCmpi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpi<
#line 38 "ppc.isa"
					CONFIG
#line 59656 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 59663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59666 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 59670 "powerpc.tcc"
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 59674 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 59678 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 59681 "powerpc.tcc"
				)
				{
#line 532 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(l) throw IllegalInstructionException<CONFIG>();
						uint32_t _a, _b, _c;
						_a = cpu->GetGPR(ra) ;
						_b = cpu->GetGPR(rb) ;
						if(_a<_b) {
							_c = 1 << 2 ;
							} else {
							if(_a>_b) {
								_c = 1 << 1 ;
								} else {
								_c = 1 ;
							}
						}
						_c = _c << 1 | cpu->GetXER_SO();
						cpu->SetCRF(crfD, _c);
					}
#line 59702 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59710 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 59714 "powerpc.tcc"
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 59718 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 59722 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 59725 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 59729 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 59732 "powerpc.tcc"
				)
				{
#line 549 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpl cr" << crfD << ", " << l << ", r" << ra << ", r" << rb;
					}
#line 59739 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59747 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 59754 "powerpc.tcc"
				>::initialize_function()
				{
#line 218 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 59759 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59767 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 59774 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 147 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 59779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59787 "powerpc.tcc"
				>

				void
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 59794 "powerpc.tcc"
				>::initialize_operands()
				{
#line 749 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 59805 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 59811 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59814 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59819 "powerpc.tcc"
				> *DecodeOpCmpl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpl<
#line 38 "ppc.isa"
					CONFIG
#line 59825 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 59832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59835 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 59839 "powerpc.tcc"
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 59843 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 59847 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 59850 "powerpc.tcc"
				)
				{
#line 554 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(l) throw IllegalInstructionException<CONFIG>();
						uint32_t _a, _c;
						if(l)
						{
							throw IllegalInstructionException<CONFIG>();
						}
						_a = cpu->GetGPR(ra) ;
						if(_a<uimm) {
							_c = 1 << 2 ;
							} else {
							if(_a>uimm) {
								_c = 1 << 1 ;
								} else {
								_c = 1 ;
							}
						}
						_c = (_c << 1) | cpu->GetXER_SO();
						cpu->SetCRF(crfD, _c);
					}
#line 59874 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59882 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 59886 "powerpc.tcc"
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 59890 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 59894 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 59897 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 59901 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 59904 "powerpc.tcc"
				)
				{
#line 574 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cmpli cr" << crfD << ", " << l << ", r" << ra << ", " << uimm;
					}
#line 59911 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59919 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 59926 "powerpc.tcc"
				>::initialize_function()
				{
#line 219 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 59931 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59939 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 59946 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 148 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 59951 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 59956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59959 "powerpc.tcc"
				>

				void
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 59966 "powerpc.tcc"
				>::initialize_operands()
				{
#line 381 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(XER_T,0);
						//  OUTPUT(CRF_T, crfD);
						OUTPUT(CR_T, crfD);
					}
#line 59976 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 59982 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 59985 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 59990 "powerpc.tcc"
				> *DecodeOpCmpli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCmpli<
#line 38 "ppc.isa"
					CONFIG
#line 59996 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER LOGICAL INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 60008 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60011 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 60015 "powerpc.tcc"
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 60019 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 60023 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 60026 "powerpc.tcc"
				)
				{
#line 585 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = cpu->GetGPR(rs) & cpu->GetGPR(rb);
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 60037 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60045 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 60049 "powerpc.tcc"
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 60053 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 60057 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 60060 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 60064 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 60067 "powerpc.tcc"
				)
				{
#line 592 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "and" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 60074 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60082 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 60089 "powerpc.tcc"
				>::initialize_function()
				{
#line 220 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60094 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60102 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 60109 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 149 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60122 "powerpc.tcc"
				>

				void
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 60129 "powerpc.tcc"
				>::initialize_operands()
				{
#line 389 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 60142 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60151 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60156 "powerpc.tcc"
				> *DecodeOpAnd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAnd<
#line 38 "ppc.isa"
					CONFIG
#line 60162 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60169 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60172 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 60176 "powerpc.tcc"
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 60180 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 60184 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 60187 "powerpc.tcc"
				)
				{
#line 597 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = cpu->GetGPR(rs) & ~(cpu->GetGPR(rb));
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 60198 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60203 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60206 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 60210 "powerpc.tcc"
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 60214 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 60218 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 60221 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 60225 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 60228 "powerpc.tcc"
				)
				{
#line 604 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andc" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 60235 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60240 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60243 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 60250 "powerpc.tcc"
				>::initialize_function()
				{
#line 221 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60255 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60263 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 60270 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 150 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60275 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60283 "powerpc.tcc"
				>

				void
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 60290 "powerpc.tcc"
				>::initialize_operands()
				{
#line 389 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 60303 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60309 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60312 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60317 "powerpc.tcc"
				> *DecodeOpAndc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndc<
#line 38 "ppc.isa"
					CONFIG
#line 60323 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60333 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 60337 "powerpc.tcc"
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 60341 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 60345 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 60348 "powerpc.tcc"
				)
				{
#line 609 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = cpu->GetGPR(rs) & uimm;
						cpu->SetGPR(ra, result);
						cpu->ComputeCR0(result);
					}
#line 60357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60365 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 60369 "powerpc.tcc"
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 60373 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 60377 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 60380 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 60384 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 60387 "powerpc.tcc"
				)
				{
#line 614 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andi. r" << ra << ", r" << rs << ", " << uimm;
					}
#line 60394 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60399 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60402 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 60409 "powerpc.tcc"
				>::initialize_function()
				{
#line 222 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60414 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60419 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60422 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 60429 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 151 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60442 "powerpc.tcc"
				>

				void
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 60449 "powerpc.tcc"
				>::initialize_operands()
				{
#line 338 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
					}
#line 60458 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60467 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60472 "powerpc.tcc"
				> *DecodeOpAndi_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndi_<
#line 38 "ppc.isa"
					CONFIG
#line 60478 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60488 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 60492 "powerpc.tcc"
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 60496 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 60500 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 60503 "powerpc.tcc"
				)
				{
#line 619 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = cpu->GetGPR(rs) & (uimm);
						cpu->SetGPR(ra, result);
						cpu->ComputeCR0(result);
					}
#line 60512 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60520 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 60524 "powerpc.tcc"
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 60528 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 60532 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 60535 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 60539 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 60542 "powerpc.tcc"
				)
				{
#line 624 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "andis. r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 60549 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60557 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 60564 "powerpc.tcc"
				>::initialize_function()
				{
#line 223 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60569 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60574 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60577 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 60584 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 152 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60589 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60594 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60597 "powerpc.tcc"
				>

				void
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 60604 "powerpc.tcc"
				>::initialize_operands()
				{
#line 338 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(CR_T,0);
					}
#line 60613 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60622 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60627 "powerpc.tcc"
				> *DecodeOpAndis_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpAndis_<
#line 38 "ppc.isa"
					CONFIG
#line 60633 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60640 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60643 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 60647 "powerpc.tcc"
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 60651 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 60655 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 60658 "powerpc.tcc"
				)
				{
#line 629 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t n = 0;
						uint32_t m = 1 << 31;
						while(n < 32)
						{
							if(cpu->GetGPR(rs) & m) break;
							m >>= 1;
							n++;
						}
						cpu->SetGPR(ra, n);
						if(rc) cpu->ComputeCR0(n);
					}
#line 60674 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60682 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 60686 "powerpc.tcc"
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 60690 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 60694 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 60697 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 60701 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 60704 "powerpc.tcc"
				)
				{
#line 641 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "cntlzw" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 60711 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60719 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 60726 "powerpc.tcc"
				>::initialize_function()
				{
#line 224 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60731 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60739 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 60746 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 153 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60759 "powerpc.tcc"
				>

				void
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 60766 "powerpc.tcc"
				>::initialize_operands()
				{
#line 306 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 60778 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60787 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60792 "powerpc.tcc"
				> *DecodeOpCntlzw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCntlzw<
#line 38 "ppc.isa"
					CONFIG
#line 60798 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60808 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 60812 "powerpc.tcc"
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 60816 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 60820 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 60823 "powerpc.tcc"
				)
				{
#line 646 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t _c = ~(cpu->GetGPR(rs) ^ cpu->GetGPR(rb)) ;
						cpu->SetGPR(ra, _c);
						if(rc) {
							cpu->ComputeCR0(_c) ;
						}
					}
#line 60834 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60842 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 60846 "powerpc.tcc"
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 60850 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 60854 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 60857 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 60861 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 60864 "powerpc.tcc"
				)
				{
#line 653 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "eqv" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 60871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60879 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 60886 "powerpc.tcc"
				>::initialize_function()
				{
#line 225 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 60891 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60899 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 60906 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 154 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 60911 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 60916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60919 "powerpc.tcc"
				>

				void
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 60926 "powerpc.tcc"
				>::initialize_operands()
				{
#line 389 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 60939 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 60945 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60948 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 60953 "powerpc.tcc"
				> *DecodeOpEqv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEqv<
#line 38 "ppc.isa"
					CONFIG
#line 60959 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 60966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 60969 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 60973 "powerpc.tcc"
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 60977 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 60981 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 60984 "powerpc.tcc"
				)
				{
#line 658 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = (uint32_t)(int32_t)(int8_t)(uint8_t) cpu->GetGPR(rs);
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 60995 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61003 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 61007 "powerpc.tcc"
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 61011 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 61015 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 61018 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 61022 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 61025 "powerpc.tcc"
				)
				{
#line 665 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "extsb" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 61032 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61037 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61040 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 61047 "powerpc.tcc"
				>::initialize_function()
				{
#line 226 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61052 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61057 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61060 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 61067 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 155 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61072 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61080 "powerpc.tcc"
				>

				void
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 61087 "powerpc.tcc"
				>::initialize_operands()
				{
#line 306 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 61099 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61108 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61113 "powerpc.tcc"
				> *DecodeOpExtsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpExtsb<
#line 38 "ppc.isa"
					CONFIG
#line 61119 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61129 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 61133 "powerpc.tcc"
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 61137 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 61141 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 61144 "powerpc.tcc"
				)
				{
#line 670 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = (uint32_t)(int32_t)(int16_t)(uint16_t) cpu->GetGPR(rs);
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result) ;
						}
					}
#line 61155 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61163 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 61167 "powerpc.tcc"
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 61171 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 61175 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 61178 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 61182 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 61185 "powerpc.tcc"
				)
				{
#line 677 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "extsh" << (rc ? "." : "") << " r" << ra << ", r" << rs;
					}
#line 61192 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61200 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 61207 "powerpc.tcc"
				>::initialize_function()
				{
#line 227 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61212 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61217 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61220 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 61227 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 156 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61232 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61237 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61240 "powerpc.tcc"
				>

				void
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 61247 "powerpc.tcc"
				>::initialize_operands()
				{
#line 306 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 61259 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61268 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61273 "powerpc.tcc"
				> *DecodeOpExtsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpExtsh<
#line 38 "ppc.isa"
					CONFIG
#line 61279 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61286 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61289 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 61293 "powerpc.tcc"
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 61297 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 61301 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 61304 "powerpc.tcc"
				)
				{
#line 682 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = ~(cpu->GetGPR(rs) & cpu->GetGPR(rb));
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 61315 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61323 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 61327 "powerpc.tcc"
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 61331 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 61335 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 61338 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 61342 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 61345 "powerpc.tcc"
				)
				{
#line 689 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "nand" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 61352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61360 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 61367 "powerpc.tcc"
				>::initialize_function()
				{
#line 228 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61372 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61377 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61380 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 61387 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 157 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61392 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61397 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61400 "powerpc.tcc"
				>

				void
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 61407 "powerpc.tcc"
				>::initialize_operands()
				{
#line 389 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 61420 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61429 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61434 "powerpc.tcc"
				> *DecodeOpNand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNand<
#line 38 "ppc.isa"
					CONFIG
#line 61440 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61450 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 61454 "powerpc.tcc"
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 61458 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 61462 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 61465 "powerpc.tcc"
				)
				{
#line 694 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = ~(cpu->GetGPR(rs) | cpu->GetGPR(rb));
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 61476 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61484 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 61488 "powerpc.tcc"
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 61492 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 61496 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 61499 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 61503 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 61506 "powerpc.tcc"
				)
				{
#line 701 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == rb)
						os << "not" << (rc ? "." : "") << " r" << ra << ", r" << rs;
						else
						os << "nor" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 61516 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61524 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 61531 "powerpc.tcc"
				>::initialize_function()
				{
#line 229 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61536 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61544 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 61551 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 158 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61564 "powerpc.tcc"
				>

				void
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 61571 "powerpc.tcc"
				>::initialize_operands()
				{
#line 389 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 61584 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61593 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61598 "powerpc.tcc"
				> *DecodeOpNor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpNor<
#line 38 "ppc.isa"
					CONFIG
#line 61604 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61614 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 61618 "powerpc.tcc"
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 61622 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 61626 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 61629 "powerpc.tcc"
				)
				{
#line 709 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = cpu->GetGPR(rs) | cpu->GetGPR(rb);
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result) ;
						}
					}
#line 61640 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61645 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61648 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 61652 "powerpc.tcc"
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 61656 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 61660 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 61663 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 61667 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 61670 "powerpc.tcc"
				)
				{
#line 716 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == rb)
						os << "mr" << (rc ? "." : "") << " r" << ra << ", r" << rs;
						else
						os << "or" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 61680 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61688 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 61695 "powerpc.tcc"
				>::initialize_function()
				{
#line 230 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61700 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61708 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 61715 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 159 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61720 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61725 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61728 "powerpc.tcc"
				>

				void
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 61735 "powerpc.tcc"
				>::initialize_operands()
				{
#line 389 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 61748 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61757 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61762 "powerpc.tcc"
				> *DecodeOpOr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOr<
#line 38 "ppc.isa"
					CONFIG
#line 61768 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61775 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61778 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 61782 "powerpc.tcc"
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 61786 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 61790 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 61793 "powerpc.tcc"
				)
				{
#line 724 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = cpu->GetGPR(rs) | ~(cpu->GetGPR(rb));
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 61804 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61812 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 61816 "powerpc.tcc"
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 61820 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 61824 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 61827 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 61831 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 61834 "powerpc.tcc"
				)
				{
#line 731 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "orc" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 61841 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61849 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 61856 "powerpc.tcc"
				>::initialize_function()
				{
#line 231 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 61861 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61869 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 61876 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 160 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 61881 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61886 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61889 "powerpc.tcc"
				>

				void
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 61896 "powerpc.tcc"
				>::initialize_operands()
				{
#line 389 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 61909 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 61915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61918 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 61923 "powerpc.tcc"
				> *DecodeOpOrc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOrc<
#line 38 "ppc.isa"
					CONFIG
#line 61929 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 61936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61939 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 61943 "powerpc.tcc"
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 61947 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 61951 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 61954 "powerpc.tcc"
				)
				{
#line 736 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = cpu->GetGPR(rs) | uimm ;
						cpu->SetGPR(ra, result);
					}
#line 61962 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 61967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 61970 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 61974 "powerpc.tcc"
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 61978 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 61982 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 61985 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 61989 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 61992 "powerpc.tcc"
				)
				{
#line 740 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						if(rs == 0 && ra == 0 && uimm == 0)
						os << "nop";
						else
						os << "ori r" << ra << ", r" << rs << ", " << uimm;
					}
#line 62002 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62010 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 62017 "powerpc.tcc"
				>::initialize_function()
				{
#line 232 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 62022 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62027 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62030 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 62037 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 161 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 62042 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 62048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62051 "powerpc.tcc"
				>

				void
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 62058 "powerpc.tcc"
				>::initialize_operands()
				{
#line 300 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 62066 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62075 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62080 "powerpc.tcc"
				> *DecodeOpOri(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOri<
#line 38 "ppc.isa"
					CONFIG
#line 62086 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62093 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62096 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 62100 "powerpc.tcc"
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 62104 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 62108 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 62111 "powerpc.tcc"
				)
				{
#line 748 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = cpu->GetGPR(rs) | uimm;
						cpu->SetGPR(ra, result);
					}
#line 62119 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62127 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 62131 "powerpc.tcc"
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 62135 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 62139 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 62142 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 62146 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 62149 "powerpc.tcc"
				)
				{
#line 752 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "oris r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 62156 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62164 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 62171 "powerpc.tcc"
				>::initialize_function()
				{
#line 233 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 62176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62184 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 62191 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 162 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 62196 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 62202 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62205 "powerpc.tcc"
				>

				void
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 62212 "powerpc.tcc"
				>::initialize_operands()
				{
#line 300 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 62220 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62229 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62234 "powerpc.tcc"
				> *DecodeOpOris(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpOris<
#line 38 "ppc.isa"
					CONFIG
#line 62240 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62247 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62250 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 62254 "powerpc.tcc"
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 62258 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 62262 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 62265 "powerpc.tcc"
				)
				{
#line 757 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = cpu->GetGPR(rs) ^ cpu->GetGPR(rb);
						cpu->SetGPR(ra, result);
						if(rc) cpu->ComputeCR0(result);
					}
#line 62274 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62282 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 62286 "powerpc.tcc"
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 62290 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 62294 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 62297 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 62301 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 62304 "powerpc.tcc"
				)
				{
#line 762 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xor" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 62311 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62319 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 62326 "powerpc.tcc"
				>::initialize_function()
				{
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 62331 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62336 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62339 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 62346 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 163 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 62351 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62356 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62359 "powerpc.tcc"
				>

				void
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 62366 "powerpc.tcc"
				>::initialize_operands()
				{
#line 389 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 62379 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62388 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62393 "powerpc.tcc"
				> *DecodeOpXor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXor<
#line 38 "ppc.isa"
					CONFIG
#line 62399 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62409 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 62413 "powerpc.tcc"
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 62417 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 62421 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 62424 "powerpc.tcc"
				)
				{
#line 767 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = cpu->GetGPR(rs) ^ (uimm);
						cpu->SetGPR(ra, result);
					}
#line 62432 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62440 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 62444 "powerpc.tcc"
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 62448 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 62452 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 62455 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 62459 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 62462 "powerpc.tcc"
				)
				{
#line 771 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xori r" << ra << ", r" << rs << ", " << uimm;
					}
#line 62469 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62477 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 62484 "powerpc.tcc"
				>::initialize_function()
				{
#line 235 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 62489 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62494 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62497 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 62504 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 164 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 62509 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 62515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62518 "powerpc.tcc"
				>

				void
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 62525 "powerpc.tcc"
				>::initialize_operands()
				{
#line 300 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 62533 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62539 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62542 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62547 "powerpc.tcc"
				> *DecodeOpXori(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXori<
#line 38 "ppc.isa"
					CONFIG
#line 62553 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62560 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62563 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 62567 "powerpc.tcc"
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 62571 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 62575 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 62578 "powerpc.tcc"
				)
				{
#line 776 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result = cpu->GetGPR(rs) ^ (uimm);
						cpu->SetGPR(ra, result);
					}
#line 62586 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62591 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62594 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 62598 "powerpc.tcc"
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 62602 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 62606 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 62609 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 62613 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 62616 "powerpc.tcc"
				)
				{
#line 780 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "xoris r" << ra << ", r" << rs << ", " << (uimm >> 16);
					}
#line 62623 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62631 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 62638 "powerpc.tcc"
				>::initialize_function()
				{
#line 236 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 62643 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62648 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62651 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 62658 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 165 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 62663 "powerpc.tcc"
				}
				// TODO rlwixx (if RC=1)...
				template <
#line 38 "ppc.isa"
				class
#line 62669 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62672 "powerpc.tcc"
				>

				void
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 62679 "powerpc.tcc"
				>::initialize_operands()
				{
#line 300 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
					}
#line 62687 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62696 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62701 "powerpc.tcc"
				> *DecodeOpXoris(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpXoris<
#line 38 "ppc.isa"
					CONFIG
#line 62707 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER LOGICAL INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 62719 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62722 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 62726 "powerpc.tcc"
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 62730 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 62734 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 62737 "powerpc.tcc"
				)
				{
#line 791 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t _r, _mask ;
						_r = RotateLeft(cpu->GetGPR(rs), sh) ;
						_mask = cpu->Mask(mb, me) ;
						uint32_t result = (_r & _mask) | (cpu->GetGPR(ra) & ~(_mask));
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 62751 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62759 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 62763 "powerpc.tcc"
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 62767 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 62771 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 62774 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 62778 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 62781 "powerpc.tcc"
				)
				{
#line 801 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwimi" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh << ", " << mb << ", " << me;
					}
#line 62788 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62793 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62796 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 62803 "powerpc.tcc"
				>::initialize_function()
				{
#line 237 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 62808 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62813 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62816 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 62823 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 166 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 62828 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62833 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62836 "powerpc.tcc"
				>

				void
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 62843 "powerpc.tcc"
				>::initialize_operands()
				{
#line 316 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 62856 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 62862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62865 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 62870 "powerpc.tcc"
				> *DecodeOpRlwimi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwimi<
#line 38 "ppc.isa"
					CONFIG
#line 62876 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 62883 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62886 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 62890 "powerpc.tcc"
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 62894 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 62898 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 62901 "powerpc.tcc"
				)
				{
#line 806 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t _r, _mask;
						_r = RotateLeft(cpu->GetGPR(rs), sh);
						_mask = cpu->Mask(mb, me);
						uint32_t result = _r & _mask;
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 62915 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62923 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 62927 "powerpc.tcc"
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 62931 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 62935 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 62938 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 62942 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 62945 "powerpc.tcc"
				)
				{
#line 816 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwinm" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh << ", " << mb << ", " << me;
					}
#line 62952 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62957 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62960 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 62967 "powerpc.tcc"
				>::initialize_function()
				{
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 62972 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 62980 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 62987 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 167 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 62992 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 62997 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63000 "powerpc.tcc"
				>

				void
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 63007 "powerpc.tcc"
				>::initialize_operands()
				{
#line 306 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 63019 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63028 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63033 "powerpc.tcc"
				> *DecodeOpRlwinm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwinm<
#line 38 "ppc.isa"
					CONFIG
#line 63039 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63046 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63049 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 63053 "powerpc.tcc"
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 63057 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 63061 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 63064 "powerpc.tcc"
				)
				{
#line 821 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t _r, _mask;
						_r = RotateLeft(cpu->GetGPR(rs), cpu->GetGPR(rb));
						_mask = cpu->Mask(mb, me);
						uint32_t result = _r & _mask;
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 63078 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63086 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 63090 "powerpc.tcc"
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 63094 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 63098 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 63101 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 63105 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 63108 "powerpc.tcc"
				)
				{
#line 831 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "rlwnm" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb << ", " << mb << ", " << me;
					}
#line 63115 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63120 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63123 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 63130 "powerpc.tcc"
				>::initialize_function()
				{
#line 239 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63135 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63140 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63143 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 63150 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 168 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 63155 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63163 "powerpc.tcc"
				>

				void
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 63170 "powerpc.tcc"
				>::initialize_operands()
				{
#line 389 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 63183 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63192 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63197 "powerpc.tcc"
				> *DecodeOpRlwnm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRlwnm<
#line 38 "ppc.isa"
					CONFIG
#line 63203 "powerpc.tcc"
					>(code, addr);
				}

				/****************************************************

				INTEGER SHIFT INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 63215 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63218 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 63222 "powerpc.tcc"
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 63226 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 63230 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 63233 "powerpc.tcc"
				)
				{
#line 842 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t result;
						if((cpu->GetGPR(rb) & 0x20)!=0) {
							result = 0;
							} else {
							result = cpu->GetGPR(rs) << (cpu->GetGPR(rb) & 0x1F);
						}
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 63249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63257 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 63261 "powerpc.tcc"
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 63265 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 63269 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 63272 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 63276 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 63279 "powerpc.tcc"
				)
				{
#line 854 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "slw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 63286 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63294 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 63301 "powerpc.tcc"
				>::initialize_function()
				{
#line 240 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63306 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63314 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 63321 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 169 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 63326 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63334 "powerpc.tcc"
				>

				void
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 63341 "powerpc.tcc"
				>::initialize_operands()
				{
#line 389 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 63354 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63363 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63368 "powerpc.tcc"
				> *DecodeOpSlw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSlw<
#line 38 "ppc.isa"
					CONFIG
#line 63374 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63381 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63384 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 63388 "powerpc.tcc"
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 63392 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 63396 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 63399 "powerpc.tcc"
				)
				{
#line 859 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t n = cpu->GetGPR(rb);
						int32_t result;
						int32_t src = cpu->GetGPR(rs);

						if(n == 0)
						{
							result = src;
							cpu->ResetXER_CA();
						}
						else if(n & 0x20)
						{
							if(src < 0)
							{
								result = 0xffffffff;
								if(src & 0x7fffffff) cpu->SetXER_CA(); else cpu->ResetXER_CA();
							}
							else
							{
								result = 0;
								cpu->ResetXER_CA();
							}
						}
						else
						{
							n = n & 0x1f;
							result = (int32_t) src >> n;
							if(src < 0 && (src << (32 - n)) != 0) cpu->SetXER_CA(); else cpu->ResetXER_CA();
						}
						cpu->SetGPR(ra, result);
						if(rc) {
							cpu->ComputeCR0(result);
						}
					}
#line 63437 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63442 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63445 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 63449 "powerpc.tcc"
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 63453 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 63457 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 63460 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 63464 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 63467 "powerpc.tcc"
				)
				{
#line 893 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "sraw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 63474 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63479 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63482 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 63489 "powerpc.tcc"
				>::initialize_function()
				{
#line 241 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63494 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63502 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 63509 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 170 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 63514 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63519 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63522 "powerpc.tcc"
				>

				void
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 63529 "powerpc.tcc"
				>::initialize_operands()
				{
#line 400 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 63543 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63549 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63552 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63557 "powerpc.tcc"
				> *DecodeOpSraw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSraw<
#line 38 "ppc.isa"
					CONFIG
#line 63563 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63573 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 63577 "powerpc.tcc"
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 63581 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 63585 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 63588 "powerpc.tcc"
				)
				{
#line 898 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						uint32_t n = sh;
						int32_t result;
						int32_t src = cpu->GetGPR(rs);

						if(n == 0)
						{
							result = src;
							cpu->ResetXER_CA();
						}
						else
						{
							result = src >> n;
							if(src < 0 && (src << (32 - n)) != 0) cpu->SetXER_CA(); else cpu->ResetXER_CA();
						}
						cpu->SetGPR(ra, result);
						if(rc) cpu->ComputeCR0(result);
					}
#line 63610 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63615 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63618 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 63622 "powerpc.tcc"
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 63626 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 63630 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 63633 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 63637 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 63640 "powerpc.tcc"
				)
				{
#line 916 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "srawi" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", " << sh;
					}
#line 63647 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63655 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 63662 "powerpc.tcc"
				>::initialize_function()
				{
#line 242 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63667 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63675 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 63682 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 171 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 63687 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63695 "powerpc.tcc"
				>

				void
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 63702 "powerpc.tcc"
				>::initialize_operands()
				{
#line 327 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(GPR_T, ra);
						OUTPUT(XER_T,2);
						if (rc)
						{
							OUTPUT(CR_T,0);
						}
					}
#line 63715 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63724 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63729 "powerpc.tcc"
				> *DecodeOpSrawi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSrawi<
#line 38 "ppc.isa"
					CONFIG
#line 63735 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 63742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63745 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 63749 "powerpc.tcc"
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 63753 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 63757 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 63760 "powerpc.tcc"
				)
				{
#line 921 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						unsigned int sh = cpu->GetGPR(rb) & 0x3f;
						uint32_t result = (sh & 0x20) ? 0 : cpu->GetGPR(rs) >> (sh & 0x1f);
						cpu->SetGPR(ra, result);
						if(rc) cpu->ComputeCR0(result);
					}
#line 63770 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63775 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63778 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 63782 "powerpc.tcc"
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 63786 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 63790 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 63793 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 63797 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 63800 "powerpc.tcc"
				)
				{
#line 927 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./integer.isa"
					{
						os << "srw" << (rc ? "." : "") << " r" << ra << ", r" << rs << ", r" << rb;
					}
#line 63807 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63812 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63815 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 63822 "powerpc.tcc"
				>::initialize_function()
				{
#line 243 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnIntBasic; }
#line 63827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63835 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 63842 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 172 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 63847 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63855 "powerpc.tcc"
				>

				void
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 63862 "powerpc.tcc"
				>::initialize_operands()
				{
#line 389 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 63875 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 63881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63884 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 63889 "powerpc.tcc"
				> *DecodeOpSrw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSrw<
#line 38 "ppc.isa"
					CONFIG
#line 63895 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/***************************************************

				FLOATING-POINT ARITHMETIC INSTRUCTIONS

				****************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 63940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63943 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 63947 "powerpc.tcc"
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 63951 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 63955 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 63958 "powerpc.tcc"
				)
				{
#line 42 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64Add(fd, fa, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 63972 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 63977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 63980 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 63984 "powerpc.tcc"
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 63988 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 63992 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 63995 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 63999 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 64002 "powerpc.tcc"
				)
				{
#line 52 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 64009 "powerpc.tcc"
				}
				/** Floating (FnFpCommon |FnFpFPSCR | FnFpFPSCRSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 64015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64018 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 64025 "powerpc.tcc"
				>::initialize_function()
				{
#line 252 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 64030 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64035 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64038 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 64045 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 86 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 64050 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64055 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64058 "powerpc.tcc"
				>

				void
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 64065 "powerpc.tcc"
				>::initialize_operands()
				{
#line 520 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 64080 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64089 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64094 "powerpc.tcc"
				> *DecodeOpFadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFadd<
#line 38 "ppc.isa"
					CONFIG
#line 64100 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64107 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64110 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 64114 "powerpc.tcc"
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 64118 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 64122 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 64125 "powerpc.tcc"
				)
				{
#line 57 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp32Add(fd, fa, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 64139 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64147 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 64151 "powerpc.tcc"
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 64155 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 64159 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 64162 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 64166 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 64169 "powerpc.tcc"
				)
				{
#line 67 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 64176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64184 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 64191 "powerpc.tcc"
				>::initialize_function()
				{
#line 253 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 64196 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64204 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 64211 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 87 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 64216 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64224 "powerpc.tcc"
				>

				void
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 64231 "powerpc.tcc"
				>::initialize_operands()
				{
#line 520 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 64246 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64255 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64260 "powerpc.tcc"
				> *DecodeOpFadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFadds<
#line 38 "ppc.isa"
					CONFIG
#line 64266 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64273 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64276 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 64280 "powerpc.tcc"
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 64284 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 64288 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 64291 "powerpc.tcc"
				)
				{
#line 72 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64Div(fd, fa, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 64305 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64313 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 64317 "powerpc.tcc"
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 64321 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 64325 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 64328 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 64332 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 64335 "powerpc.tcc"
				)
				{
#line 82 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fdiv" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 64342 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64347 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64350 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 64357 "powerpc.tcc"
				>::initialize_function()
				{
#line 254 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 64362 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64370 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 64377 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 88 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(31); }
#line 64382 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64390 "powerpc.tcc"
				>

				void
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 64397 "powerpc.tcc"
				>::initialize_operands()
				{
#line 520 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 64412 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64421 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64426 "powerpc.tcc"
				> *DecodeOpFdiv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFdiv<
#line 38 "ppc.isa"
					CONFIG
#line 64432 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64442 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 64446 "powerpc.tcc"
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 64450 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 64454 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 64457 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp32Div(fd, fa, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 64471 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64476 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64479 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 64483 "powerpc.tcc"
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 64487 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 64491 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 64494 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 64498 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 64501 "powerpc.tcc"
				)
				{
#line 97 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fdivs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 64508 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64513 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64516 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 64523 "powerpc.tcc"
				>::initialize_function()
				{
#line 255 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 64528 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64536 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 64543 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 89 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(17); }
#line 64548 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64553 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64556 "powerpc.tcc"
				>

				void
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 64563 "powerpc.tcc"
				>::initialize_operands()
				{
#line 520 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 64578 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64587 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64592 "powerpc.tcc"
				> *DecodeOpFdivs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFdivs<
#line 38 "ppc.isa"
					CONFIG
#line 64598 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64608 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 64612 "powerpc.tcc"
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 64616 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 64620 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 64623 "powerpc.tcc"
				)
				{
#line 102 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64Mul(fd, fa, fc);

						if(rc) cpu->ComputeCR1();
					}
#line 64637 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64645 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 64649 "powerpc.tcc"
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 64653 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 64657 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 64660 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 64664 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 64667 "powerpc.tcc"
				)
				{
#line 112 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmul" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc;
					}
#line 64674 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64682 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 64689 "powerpc.tcc"
				>::initialize_function()
				{
#line 256 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 64694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64702 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 64709 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 96 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 64714 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64719 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64722 "powerpc.tcc"
				>

				void
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 64729 "powerpc.tcc"
				>::initialize_operands()
				{
#line 533 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fc);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 64744 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64753 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64758 "powerpc.tcc"
				> *DecodeOpFmul(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmul<
#line 38 "ppc.isa"
					CONFIG
#line 64764 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64771 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64774 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 64778 "powerpc.tcc"
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 64782 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 64786 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 64789 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp32Mul(fd, fa, fc);

						if(rc) cpu->ComputeCR1();
					}
#line 64803 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64811 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 64815 "powerpc.tcc"
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 64819 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 64823 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 64826 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 64830 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 64833 "powerpc.tcc"
				)
				{
#line 127 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmuls" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc;
					}
#line 64840 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64845 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64848 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 64855 "powerpc.tcc"
				>::initialize_function()
				{
#line 257 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 64860 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64868 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 64875 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 97 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 64880 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64888 "powerpc.tcc"
				>

				void
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 64895 "powerpc.tcc"
				>::initialize_operands()
				{
#line 533 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fc);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 64910 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 64916 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64919 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 64924 "powerpc.tcc"
				> *DecodeOpFmuls(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmuls<
#line 38 "ppc.isa"
					CONFIG
#line 64930 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 64937 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64940 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 64944 "powerpc.tcc"
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 64948 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 64952 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 64955 "powerpc.tcc"
				)
				{
#line 132 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp32EstimateInv(fd, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 64969 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 64974 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 64977 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 64981 "powerpc.tcc"
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 64985 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 64989 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 64992 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 64996 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 64999 "powerpc.tcc"
				)
				{
#line 142 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fres" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 65006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65014 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 65021 "powerpc.tcc"
				>::initialize_function()
				{
#line 258 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 65026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65034 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 65041 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 90 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(10); }
#line 65046 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65051 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65054 "powerpc.tcc"
				>

				void
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 65061 "powerpc.tcc"
				>::initialize_operands()
				{
#line 546 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 65075 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65084 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65089 "powerpc.tcc"
				> *DecodeOpFres(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFres<
#line 38 "ppc.isa"
					CONFIG
#line 65095 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65105 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 65109 "powerpc.tcc"
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 65113 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 65117 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 65120 "powerpc.tcc"
				)
				{
#line 147 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64EstimateInvSqrt(fd, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 65134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65142 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 65146 "powerpc.tcc"
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 65150 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 65154 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 65157 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 65161 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 65164 "powerpc.tcc"
				)
				{
#line 157 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "frsqrte" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 65171 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65179 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 65186 "powerpc.tcc"
				>::initialize_function()
				{
#line 259 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 65191 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65199 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 65206 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 109 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 65211 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65219 "powerpc.tcc"
				>

				void
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 65226 "powerpc.tcc"
				>::initialize_operands()
				{
#line 546 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 65240 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65249 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65254 "powerpc.tcc"
				> *DecodeOpFrsqrte(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFrsqrte<
#line 38 "ppc.isa"
					CONFIG
#line 65260 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65267 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65270 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 65274 "powerpc.tcc"
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 65278 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 65282 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 65285 "powerpc.tcc"
				)
				{
#line 162 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64Sub(fd, fa, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 65299 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65307 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 65311 "powerpc.tcc"
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 65315 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 65319 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 65322 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 65326 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 65329 "powerpc.tcc"
				)
				{
#line 172 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 65336 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65341 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65344 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 65351 "powerpc.tcc"
				>::initialize_function()
				{
#line 260 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 65356 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65361 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65364 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 65371 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 110 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 65376 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65381 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65384 "powerpc.tcc"
				>

				void
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 65391 "powerpc.tcc"
				>::initialize_operands()
				{
#line 520 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 65406 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65415 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65420 "powerpc.tcc"
				> *DecodeOpFsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsub<
#line 38 "ppc.isa"
					CONFIG
#line 65426 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65436 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 65440 "powerpc.tcc"
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 65444 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 65448 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 65451 "powerpc.tcc"
				)
				{
#line 177 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp32Sub(fd, fa, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 65465 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65470 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65473 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 65477 "powerpc.tcc"
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 65481 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 65485 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 65488 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 65492 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 65495 "powerpc.tcc"
				)
				{
#line 187 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fb;
					}
#line 65502 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65507 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65510 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 65517 "powerpc.tcc"
				>::initialize_function()
				{
#line 261 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 65522 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65530 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 65537 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 111 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 65542 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65550 "powerpc.tcc"
				>

				void
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 65557 "powerpc.tcc"
				>::initialize_operands()
				{
#line 520 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 65572 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65581 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65586 "powerpc.tcc"
				> *DecodeOpFsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsubs<
#line 38 "ppc.isa"
					CONFIG
#line 65592 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65602 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 65606 "powerpc.tcc"
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 65610 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 65614 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 65617 "powerpc.tcc"
				)
				{
#line 192 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64Select(fd, fa, fb, fc);

						if(rc) cpu->ComputeCR1();
					}
#line 65631 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65639 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 65643 "powerpc.tcc"
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 65647 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 65651 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 65654 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 65658 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 65661 "powerpc.tcc"
				)
				{
#line 202 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsel" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 65668 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65676 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 65683 "powerpc.tcc"
				>::initialize_function()
				{
#line 262 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 65688 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65696 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 65703 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 112 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 65708 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65713 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65716 "powerpc.tcc"
				>

				void
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 65723 "powerpc.tcc"
				>::initialize_operands()
				{
#line 572 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 65737 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65746 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65751 "powerpc.tcc"
				> *DecodeOpFsel(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsel<
#line 38 "ppc.isa"
					CONFIG
#line 65757 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65767 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 65771 "powerpc.tcc"
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 65775 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 65779 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 65782 "powerpc.tcc"
				)
				{
#line 207 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						/* this optional instruction is not implemented */
						throw IllegalInstructionException<CONFIG>();
					}
#line 65790 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65798 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 65802 "powerpc.tcc"
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 65806 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 65810 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 65813 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 65817 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 65820 "powerpc.tcc"
				)
				{
#line 211 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsqrt" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 65827 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65835 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 65842 "powerpc.tcc"
				>::initialize_function()
				{
#line 263 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 65847 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65852 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65855 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 65862 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 113 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 65867 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65875 "powerpc.tcc"
				>

				void
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 65882 "powerpc.tcc"
				>::initialize_operands()
				{
#line 546 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 65896 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 65902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65905 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 65910 "powerpc.tcc"
				> *DecodeOpFsqrt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsqrt<
#line 38 "ppc.isa"
					CONFIG
#line 65916 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 65923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65926 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 65930 "powerpc.tcc"
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 65934 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 65938 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 65941 "powerpc.tcc"
				)
				{
#line 216 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						/* this optional instruction is not implemented */
						throw IllegalInstructionException<CONFIG>();
					}
#line 65949 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65957 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 65961 "powerpc.tcc"
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 65965 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 65969 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 65972 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 65976 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 65979 "powerpc.tcc"
				)
				{
#line 220 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fsqrts" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 65986 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 65991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 65994 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 66001 "powerpc.tcc"
				>::initialize_function()
				{
#line 264 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 66006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66014 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 66021 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 114 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 66026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66034 "powerpc.tcc"
				>

				void
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 66041 "powerpc.tcc"
				>::initialize_operands()
				{
#line 546 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 66055 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66064 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66069 "powerpc.tcc"
				> *DecodeOpFsqrts(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFsqrts<
#line 38 "ppc.isa"
					CONFIG
#line 66075 "powerpc.tcc"
					>(code, addr);
				}

				/******************************************************

				FLOATING POINT MULTIPLY-ADD INSTRUCTIONS

				******************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 66087 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66090 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 66094 "powerpc.tcc"
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 66098 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 66102 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 66105 "powerpc.tcc"
				)
				{
#line 231 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64MulAdd(fd, fa, fb, fc);

						if(rc) cpu->ComputeCR1();
					}
#line 66119 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66127 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 66131 "powerpc.tcc"
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 66135 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 66139 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 66142 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 66146 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 66149 "powerpc.tcc"
				)
				{
#line 241 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 66156 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66164 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 66171 "powerpc.tcc"
				>::initialize_function()
				{
#line 265 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 66176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66184 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 66191 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 98 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 66196 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66204 "powerpc.tcc"
				>

				void
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 66211 "powerpc.tcc"
				>::initialize_operands()
				{
#line 558 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 66227 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66236 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66241 "powerpc.tcc"
				> *DecodeOpFmadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmadd<
#line 38 "ppc.isa"
					CONFIG
#line 66247 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66257 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 66261 "powerpc.tcc"
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 66265 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 66269 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 66272 "powerpc.tcc"
				)
				{
#line 246 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp32MulAdd(fd, fa, fb, fc);

						if(rc) cpu->ComputeCR1();
					}
#line 66286 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66294 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 66298 "powerpc.tcc"
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 66302 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 66306 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 66309 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 66313 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 66316 "powerpc.tcc"
				)
				{
#line 256 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 66323 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66328 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66331 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 66338 "powerpc.tcc"
				>::initialize_function()
				{
#line 266 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 66343 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66351 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 66358 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 99 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 66363 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66368 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66371 "powerpc.tcc"
				>

				void
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 66378 "powerpc.tcc"
				>::initialize_operands()
				{
#line 558 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 66394 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66403 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66408 "powerpc.tcc"
				> *DecodeOpFmadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmadds<
#line 38 "ppc.isa"
					CONFIG
#line 66414 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66424 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 66428 "powerpc.tcc"
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 66432 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 66436 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 66439 "powerpc.tcc"
				)
				{
#line 261 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64MulSub(fd, fa, fb, fc);

						if(rc) cpu->ComputeCR1();
					}
#line 66453 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66461 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 66465 "powerpc.tcc"
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 66469 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 66473 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 66476 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 66480 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 66483 "powerpc.tcc"
				)
				{
#line 271 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 66490 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66498 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 66505 "powerpc.tcc"
				>::initialize_function()
				{
#line 267 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 66510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66518 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 66525 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 100 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 66530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66538 "powerpc.tcc"
				>

				void
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 66545 "powerpc.tcc"
				>::initialize_operands()
				{
#line 558 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 66561 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66570 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66575 "powerpc.tcc"
				> *DecodeOpFmsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmsub<
#line 38 "ppc.isa"
					CONFIG
#line 66581 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66588 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66591 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 66595 "powerpc.tcc"
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 66599 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 66603 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 66606 "powerpc.tcc"
				)
				{
#line 276 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp32MulSub(fd, fa, fb, fc);

						if(rc) cpu->ComputeCR1();
					}
#line 66620 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66628 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 66632 "powerpc.tcc"
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 66636 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 66640 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 66643 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 66647 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 66650 "powerpc.tcc"
				)
				{
#line 286 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 66657 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66665 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 66672 "powerpc.tcc"
				>::initialize_function()
				{
#line 268 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 66677 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66685 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 66692 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 101 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 66697 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66705 "powerpc.tcc"
				>

				void
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 66712 "powerpc.tcc"
				>::initialize_operands()
				{
#line 558 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 66728 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66734 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66737 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66742 "powerpc.tcc"
				> *DecodeOpFmsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 66748 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66758 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 66762 "powerpc.tcc"
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 66766 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 66770 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 66773 "powerpc.tcc"
				)
				{
#line 291 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64NegMulAdd(fd, fa, fb, fc);

						if(rc) cpu->ComputeCR1();
					}
#line 66787 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66795 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 66799 "powerpc.tcc"
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 66803 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 66807 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 66810 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 66814 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 66817 "powerpc.tcc"
				)
				{
#line 301 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmadd" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 66824 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66832 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 66839 "powerpc.tcc"
				>::initialize_function()
				{
#line 269 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 66844 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66852 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 66859 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 104 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 66864 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66869 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66872 "powerpc.tcc"
				>

				void
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 66879 "powerpc.tcc"
				>::initialize_operands()
				{
#line 558 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 66895 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 66901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66904 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 66909 "powerpc.tcc"
				> *DecodeOpFnmadd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmadd<
#line 38 "ppc.isa"
					CONFIG
#line 66915 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 66922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66925 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 66929 "powerpc.tcc"
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 66933 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 66937 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 66940 "powerpc.tcc"
				)
				{
#line 306 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp32NegMulAdd(fd, fa, fb, fc);

						if(rc) cpu->ComputeCR1();
					}
#line 66954 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66962 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 66966 "powerpc.tcc"
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 66970 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 66974 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 66977 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 66981 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 66984 "powerpc.tcc"
				)
				{
#line 316 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmadds" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 66991 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 66996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 66999 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 67006 "powerpc.tcc"
				>::initialize_function()
				{
#line 270 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 67011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67019 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 67026 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 105 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 67031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67039 "powerpc.tcc"
				>

				void
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 67046 "powerpc.tcc"
				>::initialize_operands()
				{
#line 558 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 67062 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67071 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67076 "powerpc.tcc"
				> *DecodeOpFnmadds(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmadds<
#line 38 "ppc.isa"
					CONFIG
#line 67082 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67092 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 67096 "powerpc.tcc"
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 67100 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 67104 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 67107 "powerpc.tcc"
				)
				{
#line 321 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64NegMulSub(fd, fa, fb, fc);

						if(rc) cpu->ComputeCR1();
					}
#line 67121 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67129 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 67133 "powerpc.tcc"
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 67137 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 67141 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 67144 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 67148 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 67151 "powerpc.tcc"
				)
				{
#line 331 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmsub" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 67158 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67166 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 67173 "powerpc.tcc"
				>::initialize_function()
				{
#line 271 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 67178 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67186 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 67193 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 106 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 67198 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67203 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67206 "powerpc.tcc"
				>

				void
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 67213 "powerpc.tcc"
				>::initialize_operands()
				{
#line 558 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 67229 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67235 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67238 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67243 "powerpc.tcc"
				> *DecodeOpFnmsub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmsub<
#line 38 "ppc.isa"
					CONFIG
#line 67249 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67259 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 67263 "powerpc.tcc"
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 67267 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 67271 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 67274 "powerpc.tcc"
				)
				{
#line 336 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp32NegMulSub(fd, fa, fb, fc);

						if(rc) cpu->ComputeCR1();
					}
#line 67288 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67293 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67296 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 67300 "powerpc.tcc"
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 67304 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 67308 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 67311 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 67315 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 67318 "powerpc.tcc"
				)
				{
#line 346 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnmsubs" << (rc ? "." : "") << " f" << fd << ", f" << fa << ", f" << fc << ", f" << fb;
					}
#line 67325 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67330 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67333 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 67340 "powerpc.tcc"
				>::initialize_function()
				{
#line 272 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 67345 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67350 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67353 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 67360 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 107 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 67365 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67373 "powerpc.tcc"
				>

				void
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 67380 "powerpc.tcc"
				>::initialize_operands()
				{
#line 558 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPR_T, fc);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 67396 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67402 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67405 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67410 "powerpc.tcc"
				> *DecodeOpFnmsubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 67416 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT COMPARE INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 67428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67431 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 67435 "powerpc.tcc"
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 67439 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 67443 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 67446 "powerpc.tcc"
				)
				{
#line 357 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64CompareOrdered(crfD, fa, fb);
					}
#line 67458 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67463 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67466 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 67470 "powerpc.tcc"
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 67474 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 67478 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 67481 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 67485 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 67488 "powerpc.tcc"
				)
				{
#line 365 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fcmpo cr" << crfD << ", f" << fa << ", f" << fb;
					}
#line 67495 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67500 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67503 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 67510 "powerpc.tcc"
				>::initialize_function()
				{
#line 273 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 67515 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67523 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 67530 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 91 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 67535 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67543 "powerpc.tcc"
				>

				void
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 67550 "powerpc.tcc"
				>::initialize_operands()
				{
#line 758 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						//  OUTPUT(FPSCRF_T, crfD);
						//  OUTPUT(FPSCR_T, crfD);
						OUTPUT(FPSCR_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 67563 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67569 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67572 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67577 "powerpc.tcc"
				> *DecodeOpFcmpo(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFcmpo<
#line 38 "ppc.isa"
					CONFIG
#line 67583 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67593 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 67597 "powerpc.tcc"
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 67601 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 67605 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 67608 "powerpc.tcc"
				)
				{
#line 370 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64CompareUnordered(crfD, fa, fb);
					}
#line 67620 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67628 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 67632 "powerpc.tcc"
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 67636 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 67640 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 67643 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 67647 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 67650 "powerpc.tcc"
				)
				{
#line 378 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fcmpu cr" << crfD << ", f" << fa << ", f" << fb;
					}
#line 67657 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67662 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67665 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 67672 "powerpc.tcc"
				>::initialize_function()
				{
#line 274 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 67677 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67685 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 67692 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 92 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 67697 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67705 "powerpc.tcc"
				>

				void
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 67712 "powerpc.tcc"
				>::initialize_operands()
				{
#line 758 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fa);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						//  OUTPUT(FPSCRF_T, crfD);
						//  OUTPUT(FPSCR_T, crfD);
						OUTPUT(FPSCR_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 67725 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67731 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67734 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67739 "powerpc.tcc"
				> *DecodeOpFcmpu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFcmpu<
#line 38 "ppc.isa"
					CONFIG
#line 67745 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT ROUNDING-CONVERTING INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 67757 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67760 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 67764 "powerpc.tcc"
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 67768 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 67772 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 67775 "powerpc.tcc"
				)
				{
#line 389 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64ToInt32(fd, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 67789 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67797 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 67801 "powerpc.tcc"
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 67805 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 67809 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 67812 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 67816 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 67819 "powerpc.tcc"
				)
				{
#line 399 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fctiw" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 67826 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67831 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67834 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 67841 "powerpc.tcc"
				>::initialize_function()
				{
#line 275 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 67846 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67854 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 67861 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 93 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 67866 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67871 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67874 "powerpc.tcc"
				>

				void
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 67881 "powerpc.tcc"
				>::initialize_operands()
				{
#line 590 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 67895 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 67901 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67904 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 67909 "powerpc.tcc"
				> *DecodeOpFctiw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFctiw<
#line 38 "ppc.isa"
					CONFIG
#line 67915 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 67922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67925 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 67929 "powerpc.tcc"
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 67933 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 67937 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 67940 "powerpc.tcc"
				)
				{
#line 405 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64ToInt32TowardZero(fd, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 67954 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67962 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 67966 "powerpc.tcc"
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 67970 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 67974 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 67977 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 67981 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 67984 "powerpc.tcc"
				)
				{
#line 415 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fctiwz" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 67991 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 67996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 67999 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 68006 "powerpc.tcc"
				>::initialize_function()
				{
#line 276 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 68011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68019 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 68026 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 94 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 68031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68039 "powerpc.tcc"
				>

				void
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 68046 "powerpc.tcc"
				>::initialize_operands()
				{
#line 590 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 68060 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68069 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68074 "powerpc.tcc"
				> *DecodeOpFctiwz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFctiwz<
#line 38 "ppc.isa"
					CONFIG
#line 68080 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68087 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68090 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 68094 "powerpc.tcc"
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 68098 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 68102 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 68105 "powerpc.tcc"
				)
				{
#line 420 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64ToFp32(fd, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 68119 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68127 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 68131 "powerpc.tcc"
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 68135 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 68139 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 68142 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 68146 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 68149 "powerpc.tcc"
				)
				{
#line 430 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "frsp" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 68156 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68164 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 68171 "powerpc.tcc"
				>::initialize_function()
				{
#line 277 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 68176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68184 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 68191 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 108 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 68196 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68204 "powerpc.tcc"
				>

				void
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 68211 "powerpc.tcc"
				>::initialize_operands()
				{
#line 590 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						OUTPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 68225 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68234 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68239 "powerpc.tcc"
				> *DecodeOpFrsp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFrsp<
#line 38 "ppc.isa"
					CONFIG
#line 68245 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				FLOATING POINT MOVE INSTRUCTIONS

				**************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 68257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68260 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 68264 "powerpc.tcc"
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 68268 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 68272 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 68275 "powerpc.tcc"
				)
				{
#line 441 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64Abs(fd, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 68289 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68294 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68297 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 68301 "powerpc.tcc"
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 68305 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 68309 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 68312 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 68316 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 68319 "powerpc.tcc"
				)
				{
#line 451 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fabs" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 68326 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68334 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 68341 "powerpc.tcc"
				>::initialize_function()
				{
#line 278 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 68346 "powerpc.tcc"
				}
				/** Floating **/
				template <
#line 38 "ppc.isa"
				class
#line 68352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68355 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 68362 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 85 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 68367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68375 "powerpc.tcc"
				>

				void
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 68382 "powerpc.tcc"
				>::initialize_operands()
				{
#line 602 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 68394 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68403 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68408 "powerpc.tcc"
				> *DecodeOpFabs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFabs<
#line 38 "ppc.isa"
					CONFIG
#line 68414 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68424 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 68428 "powerpc.tcc"
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 68432 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 68436 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 68439 "powerpc.tcc"
				)
				{
#line 456 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64Move(fd, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 68453 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68461 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 68465 "powerpc.tcc"
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 68469 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 68473 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 68476 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 68480 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 68483 "powerpc.tcc"
				)
				{
#line 466 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fmr" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 68490 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68495 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68498 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 68505 "powerpc.tcc"
				>::initialize_function()
				{
#line 279 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 68510 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68515 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68518 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 68525 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 95 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 68530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68538 "powerpc.tcc"
				>

				void
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 68545 "powerpc.tcc"
				>::initialize_operands()
				{
#line 602 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 68557 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68566 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68571 "powerpc.tcc"
				> *DecodeOpFmr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFmr<
#line 38 "ppc.isa"
					CONFIG
#line 68577 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68587 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 68591 "powerpc.tcc"
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 68595 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 68599 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 68602 "powerpc.tcc"
				)
				{
#line 471 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64NegAbs(fd, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 68616 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68621 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68624 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 68628 "powerpc.tcc"
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 68632 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 68636 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 68639 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 68643 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 68646 "powerpc.tcc"
				)
				{
#line 481 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fnabs" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 68653 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68661 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 68668 "powerpc.tcc"
				>::initialize_function()
				{
#line 280 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 68673 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68678 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68681 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 68688 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 102 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 68693 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68701 "powerpc.tcc"
				>

				void
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 68708 "powerpc.tcc"
				>::initialize_operands()
				{
#line 602 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 68720 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68729 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68734 "powerpc.tcc"
				> *DecodeOpFnabs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFnabs<
#line 38 "ppc.isa"
					CONFIG
#line 68740 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 68747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68750 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 68754 "powerpc.tcc"
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 68758 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 68762 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 68765 "powerpc.tcc"
				)
				{
#line 486 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->Fp64Neg(fd, fb);

						if(rc) cpu->ComputeCR1();
					}
#line 68779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68787 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 68791 "powerpc.tcc"
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 68795 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 68799 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 68802 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 68806 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 68809 "powerpc.tcc"
				)
				{
#line 496 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "fneg" << (rc ? "." : "") << " f" << fd << ", f" << fb;
					}
#line 68816 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68824 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 68831 "powerpc.tcc"
				>::initialize_function()
				{
#line 281 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpCommon; }
#line 68836 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68844 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 68851 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 103 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 68856 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68864 "powerpc.tcc"
				>

				void
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 68871 "powerpc.tcc"
				>::initialize_operands()
				{
#line 602 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(FPR_T, fb);
						if (rc)
						{
							OUTPUT(CR_T, 0);
						}
					}
#line 68883 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 68889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68892 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 68897 "powerpc.tcc"
				> *DecodeOpFneg(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpFneg<
#line 38 "ppc.isa"
					CONFIG
#line 68903 "powerpc.tcc"
					>(code, addr);
				}

				/*****************************************************************

				FLOATING-POINT STATUS & CONTROL REGISTER INSTRUCTIONS

				*****************************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 68915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68918 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 68922 "powerpc.tcc"
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 68926 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 68930 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 68933 "powerpc.tcc"
				)
				{
#line 507 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						cpu->SetCRF(crfD, (cpu->GetFPSCR() >> (4 * (7 - crfS))) & 0xf);
						if(crfS == 0)
						cpu->SetFPSCR(cpu->GetFPSCR() & 0x9fffffffUL); // Don't clear FEX and VX bits
						else
						cpu->SetFPSCR(cpu->GetFPSCR() & ~(0xffUL << (4 * (7 - crfS)))); // clear bit field
					}
#line 68949 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68957 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 68961 "powerpc.tcc"
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 68965 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 68969 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 68972 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 68976 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 68979 "powerpc.tcc"
				)
				{
#line 519 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mcrfs cr" << crfD << ", cr" << crfS;
					}
#line 68986 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 68991 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 68994 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 69001 "powerpc.tcc"
				>::initialize_function()
				{
#line 282 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCRSerial; }
#line 69006 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69014 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 69021 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 115 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 69026 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69034 "powerpc.tcc"
				>

				void
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 69041 "powerpc.tcc"
				>::initialize_operands()
				{
#line 805 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						//  INPUT(FPSCRF_T, crfS);
						OUTPUT(CR_T, crfD);
						//  INPUT(FPSCR_T, crfS);
						INPUT(FPSCR_T, 0);
					}
#line 69052 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69061 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69066 "powerpc.tcc"
				> *DecodeOpMcrfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrfs<
#line 38 "ppc.isa"
					CONFIG
#line 69072 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69079 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69082 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 69086 "powerpc.tcc"
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 69090 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 69094 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 69097 "powerpc.tcc"
				)
				{
#line 524 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint64_t _f;
						_f = (uint64_t) cpu->GetFPSCR() | 0xfff8000000000000ULL;
						cpu->SetFp64(fd, _f);
						if(rc) cpu->ComputeCR1();
					}
#line 69112 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69120 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 69124 "powerpc.tcc"
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 69128 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 69132 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 69135 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 69139 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 69142 "powerpc.tcc"
				)
				{
#line 535 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mffs" << (rc ? "." : "") << " f" << fd;
					}
#line 69149 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69157 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 69164 "powerpc.tcc"
				>::initialize_function()
				{
#line 283 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCRSerial; }
#line 69169 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69177 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 69184 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 116 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 69189 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69194 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69197 "powerpc.tcc"
				>

				void
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 69204 "powerpc.tcc"
				>::initialize_operands()
				{
#line 662 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPSCR_T,0);
						OUTPUT(FPR_T, fd);
						if (rc)
						{
							OUTPUT(CR_T,1);
						}
					}
#line 69216 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69222 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69225 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69230 "powerpc.tcc"
				> *DecodeOpMffs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMffs<
#line 38 "ppc.isa"
					CONFIG
#line 69236 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69243 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69246 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 69250 "powerpc.tcc"
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 69254 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 69258 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 69261 "powerpc.tcc"
				)
				{
#line 540 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						if(crbD != 1 && crbD != 2)
						{
							cpu->SetFPSCR(cpu->GetFPSCR() & (~(1 << (31 - crbD))));
						}
						if(rc) cpu->ComputeCR1();
					}
#line 69277 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69282 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69285 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 69289 "powerpc.tcc"
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 69293 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 69297 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 69300 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 69304 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 69307 "powerpc.tcc"
				)
				{
#line 552 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsb0" << (rc ? "." : "") << " crb" << crbD;
					}
#line 69314 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69322 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 69329 "powerpc.tcc"
				>::initialize_function()
				{
#line 284 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 69334 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69339 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69342 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 69349 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 117 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 69354 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69362 "powerpc.tcc"
				>

				void
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 69369 "powerpc.tcc"
				>::initialize_operands()
				{
#line 851 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  INPUT(CRB_T, crbD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 69382 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69391 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69396 "powerpc.tcc"
				> *DecodeOpMtfsb0(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsb0<
#line 38 "ppc.isa"
					CONFIG
#line 69402 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69409 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69412 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 69416 "powerpc.tcc"
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 69420 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 69424 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 69427 "powerpc.tcc"
				)
				{
#line 557 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						if(crbD != 1 && crbD != 2)
						{
							cpu->SetFPSCR(cpu->GetFPSCR() | (1 << (31 - crbD)));
						}
						if(rc) cpu->ComputeCR1();
					}
#line 69443 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69451 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 69455 "powerpc.tcc"
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 69459 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 69463 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 69466 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 69470 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 69473 "powerpc.tcc"
				)
				{
#line 569 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsb1" << (rc ? "." : "") << " cr" << crbD;
					}
#line 69480 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69488 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 69495 "powerpc.tcc"
				>::initialize_function()
				{
#line 285 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 69500 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69508 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 69515 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 118 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 69520 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69528 "powerpc.tcc"
				>

				void
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 69535 "powerpc.tcc"
				>::initialize_operands()
				{
#line 851 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  INPUT(CRB_T, crbD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						OUTPUT(FPSCR_T, 0);
					}
#line 69548 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69557 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69562 "powerpc.tcc"
				> *DecodeOpMtfsb1(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsb1<
#line 38 "ppc.isa"
					CONFIG
#line 69568 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69575 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69578 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 69582 "powerpc.tcc"
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 69586 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 69590 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 69593 "powerpc.tcc"
				)
				{
#line 574 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t _m,_f, _fm, _rb,_c;
						int _i;
						_rb = cpu->GetFp64(fb);
						_f = cpu->GetFPSCR();
						_fm = fm;

						if(_fm & 0x80)
						{
							_m = 0x60000000;
						}
						else
						{
							_m=0x0;
						}
						_c=0x1;
						for(_i=0;_i< 8;_i++)
						{
							if(_c & _fm)
							{
								_m= _m | (0xf<<(_i*4));
							}
							_c=_c<<1;
						}
						_f = _rb & _m;
						cpu->SetFPSCR(_f);
						if(rc) cpu->ComputeCR1();
					}
#line 69630 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69638 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 69642 "powerpc.tcc"
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 69646 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 69650 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 69653 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 69657 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 69660 "powerpc.tcc"
				)
				{
#line 607 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsf" << (rc ? "." : "") << " " << fm << ", f" << fb;
					}
#line 69667 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69675 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 69682 "powerpc.tcc"
				>::initialize_function()
				{
#line 286 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 69687 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69695 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 69702 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 119 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 69707 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69712 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69715 "powerpc.tcc"
				>

				void
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 69722 "powerpc.tcc"
				>::initialize_operands()
				{
#line 769 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPSCR_T, 0);
						INPUT(FPR_T, fb);
						OUTPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
					}
#line 69735 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69744 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69749 "powerpc.tcc"
				> *DecodeOpMtfsf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsf<
#line 38 "ppc.isa"
					CONFIG
#line 69755 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 69762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69765 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 69769 "powerpc.tcc"
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 69773 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 69777 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 69780 "powerpc.tcc"
				)
				{
#line 612 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						uint32_t mask = crfD ? 0xf : 0x9;
						cpu->SetFPSCR((cpu->GetFPSCR() & (~(0xf << (4 * (7 - crfD))))) | ((imm & mask) << (4 * (7 - crfD))));
						if(rc) cpu->ComputeCR1();
					}
#line 69794 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69799 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69802 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 69806 "powerpc.tcc"
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 69810 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 69814 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 69817 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 69821 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 69824 "powerpc.tcc"
				)
				{
#line 622 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./floating.isa"
					{
						os << "mtfsfi" << (rc ? "." : "") << " cr" << crfD << ", " << imm;
					}
#line 69831 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69839 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 69846 "powerpc.tcc"
				>::initialize_function()
				{
#line 287 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnFpFPSCR; }
#line 69851 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69856 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69859 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 69866 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 120 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 69871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69879 "powerpc.tcc"
				>

				void
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 69886 "powerpc.tcc"
				>::initialize_operands()
				{
#line 793 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						INPUT(FPSCR_T, 0);
						if (rc)
						{
							OUTPUT(CR_T, 1);
						}
						//  OUTPUT(CR_T, crfD);
						OUTPUT(FPSCR_T, 0);
					}
#line 69900 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 69906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69909 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 69914 "powerpc.tcc"
				> *DecodeOpMtfsfi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtfsfi<
#line 38 "ppc.isa"
					CONFIG
#line 69920 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 69960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69963 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 69967 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 69971 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 69975 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 69978 "powerpc.tcc"
				)
				{
#line 36 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = aa ? li : cpu->GetCIA() + li;
						cpu->SetNIA(target_addr);
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 69987 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 69992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 69995 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 69999 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 70003 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 70007 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 70010 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 70014 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 70017 "powerpc.tcc"
				)
				{
#line 41 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = (aa ? li : Operation<CONFIG>::GetAddr() + li);
						os << "b" << (lk ? "l" : "") << (aa ? "a" : "") << " ";
						os << "0x" << hex << target_addr << dec;
						if(cpu)
						{
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 70030 "powerpc.tcc"
				}
				/** Branch (FnBranch | FnConditionalBranch | FnBranchCountReg | FnBranchLinkReg) **/
				template <
#line 38 "ppc.isa"
				class
#line 70036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70039 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 70046 "powerpc.tcc"
				>::initialize_function()
				{
#line 139 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranch;
						//  registers_written = (lk ? RegLR : RegNone);
					}
#line 70054 "powerpc.tcc"
				}
				/** Branch **/
				template <
#line 38 "ppc.isa"
				class
#line 70060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70063 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 70070 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70075 "powerpc.tcc"
				}
				/* Dependancies for Branch Instruction */
				template <
#line 38 "ppc.isa"
				class
#line 70081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70084 "powerpc.tcc"
				>

				void
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 70091 "powerpc.tcc"
				>::initialize_operands()
				{
#line 149 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 70101 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70106 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70109 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 70113 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 70117 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 70121 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 70124 "powerpc.tcc"
				,
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				CPU<CONFIG> *
#line 70128 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 70131 "powerpc.tcc"
				)
				{
#line 44 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (aa ? li : cia + li);
					}
#line 70138 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70143 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70146 "powerpc.tcc"
				>
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 70150 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 70154 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				CPU<CONFIG> *
#line 70158 "powerpc.tcc"
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 70161 "powerpc.tcc"
				)
				{
#line 72 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Unconditional branch is statically predicted taken
						return true;
					}
#line 70169 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70177 "powerpc.tcc"
				>
#line 100 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 70181 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 70185 "powerpc.tcc"
				>::branch_linked()
				{
#line 104 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 70192 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70197 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70200 "powerpc.tcc"
				>
#line 120 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 70204 "powerpc.tcc"
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 70208 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 124 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return false;
					}
#line 70215 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70224 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70229 "powerpc.tcc"
				> *DecodeOpB(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpB<
#line 38 "ppc.isa"
					CONFIG
#line 70235 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70245 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 70249 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 70253 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 70257 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 70260 "powerpc.tcc"
				)
				{
#line 52 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						uint32_t ctr_ok, cond_ok, ok;

						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}

						if((bo & 4) == 0)
						{
							/* Decrement CTR */
							cpu->SetCTR(cpu->GetCTR() - 1);
							/* Test whether to branch if CTR is zero or not */
							if(bo & 2) {
								ctr_ok = cpu->GetCTR() == 0;
							}
							else {
								ctr_ok = cpu->GetCTR() != 0;
							}
						}
						else {
							ctr_ok = 1;
						}

						ok = ctr_ok && cond_ok;

						if(ok) {
							typename CONFIG::address_t target_addr = aa ? bd : cpu->GetCIA() + bd;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 70306 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70314 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 70318 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 70322 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 70326 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 70329 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 70333 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 70336 "powerpc.tcc"
				)
				{
#line 94 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						typename CONFIG::address_t target_addr = aa ? bd : Operation<CONFIG>::GetAddr() + bd;
						switch(bo)
						{
							case 0: os << "bdnzf"; break;
							case 2: os << "bdzf"; break;
							case 4: os << "bf"; break;
							case 8: os << "bdnzt"; break;
							case 10: os << "bdzt"; break;
							case 12: os << "bt"; break;
							case 16: os << "bdnz"; break;
							case 18: os << "bdz"; break;
							default: os << "bc";
						}
						if(lk) os << "l";
						if(aa) os << "a";
						os << " ";
						switch(bo)
						{
							case 0: case 2: case 4: case 8: case 10: case 12: case 16: case 18: os << bi; break;
							default: os << bo << ", " << bi;
						}
						os << ", 0x" << hex << target_addr << dec;
						if(cpu)
						{
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 70368 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70376 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 70383 "powerpc.tcc"
				>::initialize_function()
				{
#line 143 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnConditionalBranch;
						//  registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
					}
#line 70391 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70399 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 70406 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 69 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70411 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70419 "powerpc.tcc"
				>

				void
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 70426 "powerpc.tcc"
				>::initialize_operands()
				{
#line 157 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						if( (bo & 16) == 0 )
						{
							INPUT(CR_T, bi/4);
						}
						if ( (bo & 4) == 0 )
						{
							INPUT(CTR_T,0);
							OUTPUT(CTR_T,0);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 70445 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70450 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70453 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 70457 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 70461 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 70465 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 70468 "powerpc.tcc"
				,
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				CPU<CONFIG> *
#line 70472 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 70475 "powerpc.tcc"
				)
				{
#line 48 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (aa ? bd : cia + bd);
					}
#line 70482 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70490 "powerpc.tcc"
				>
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 70494 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 70498 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				CPU<CONFIG> *
#line 70502 "powerpc.tcc"
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 70505 "powerpc.tcc"
				)
				{
#line 77 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// bd represent the displacement
						// bo represent the behavior of the branch
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04) || (bd < 0));
					}
#line 70515 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70520 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70523 "powerpc.tcc"
				>
#line 100 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 70527 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 70531 "powerpc.tcc"
				>::branch_linked()
				{
#line 108 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 70538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70546 "powerpc.tcc"
				>
#line 120 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 70550 "powerpc.tcc"
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 70554 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 128 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 70561 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70570 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70575 "powerpc.tcc"
				> *DecodeOpBc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBc<
#line 38 "ppc.isa"
					CONFIG
#line 70581 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70588 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70591 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 70595 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 70599 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 70603 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 70606 "powerpc.tcc"
				)
				{
#line 124 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						if(bo & 8) throw IllegalInstructionException<CONFIG>();
						int cond_ok ;
						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}
						if(cond_ok) {
							typename CONFIG::address_t target_addr = cpu->GetCTR() & 0xfffffffc;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 70633 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70638 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70641 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 70645 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 70649 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 70653 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 70656 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 70660 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 70663 "powerpc.tcc"
				)
				{
#line 147 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						switch(bo)
						{
							case 4: os << "bfctr"; break;
							case 12: os << "btctr"; break;
						case 20:
							if(bi == 0)
							{
								os << "bctr";
								break;
							}
							// no break if bi != 0
						default:
							os << "bcctr"; break;
						}
						if(lk) os << "l";
						switch(bo)
						{
							case 4: case 12: os << " " << bi; break;
							case 20: if(bi == 0) break;
							// no break if bi != 0
							default: os << " " << bo << ", " << bi;
						}
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t target_addr = cpu->GetCTR() & 0xfffffffc;
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 70696 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70701 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70704 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 70711 "powerpc.tcc"
				>::initialize_function()
				{
#line 147 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranchCountReg;
						//  registers_written = (lk ? RegLR : RegNone);
					}
#line 70719 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70724 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70727 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 70734 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 70 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 70739 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70747 "powerpc.tcc"
				>

				void
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 70754 "powerpc.tcc"
				>::initialize_operands()
				{
#line 174 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(CTR_T,0);
						if( (bo & 16) == 0)
						{
							INPUT(CR_T, bi/4);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 70769 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70777 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 70781 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 70785 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 70789 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 70792 "powerpc.tcc"
				,
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				CPU<CONFIG> *
#line 70796 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 70799 "powerpc.tcc"
				)
				{
#line 52 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (cpu->GetCTR() & 0xfffffffc);
					}
#line 70806 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70811 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70814 "powerpc.tcc"
				>
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 70818 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 70822 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				CPU<CONFIG> *
#line 70826 "powerpc.tcc"
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 70829 "powerpc.tcc"
				)
				{
#line 84 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Check the prediction bit of bo field unless it is an always branch statement
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04));
					}
#line 70838 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70846 "powerpc.tcc"
				>
#line 100 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 70850 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 70854 "powerpc.tcc"
				>::branch_linked()
				{
#line 112 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 70861 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70869 "powerpc.tcc"
				>
#line 120 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 70873 "powerpc.tcc"
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 70877 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 132 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 70884 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 70890 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70893 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 70898 "powerpc.tcc"
				> *DecodeOpBcctr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBcctr<
#line 38 "ppc.isa"
					CONFIG
#line 70904 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 70911 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70914 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 70918 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 70922 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 70926 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 70929 "powerpc.tcc"
				)
				{
#line 178 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						int ctr_ok, cond_ok ;
						if(((bo & 16) == 0)) {
							/* Conditional branch */
							if(bo & 8) {
								/* Branch if condition is true */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) != 0;
							}
							else {
								/* Branch if condition is false */
								cond_ok = ((cpu->GetCR() << bi) & 0x80000000) == 0;
							}
						}
						else {
							cond_ok = 1;
						}
						if((bo & 4) == 0)
						{
							/* Decrement CTR */
							cpu->SetCTR(cpu->GetCTR() - 1);
							/* Test whether to branch if CTR is zero or not */
							if(bo & 2) {
								ctr_ok = cpu->GetCTR() == 0;
							}
							else {
								ctr_ok = cpu->GetCTR() != 0;
							}
						}
						else {
							ctr_ok = 1;
						}

						if(ctr_ok && cond_ok) {
							typename CONFIG::address_t target_addr = cpu->GetLR() & 0xfffffffc;
							cpu->SetNIA(target_addr);
						}
						if(lk) cpu->SetLR(cpu->GetCIA() + 4);
					}
#line 70971 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 70976 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 70979 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 70983 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 70987 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 70991 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 70994 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 70998 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 71001 "powerpc.tcc"
				)
				{
#line 216 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./branch.isa"
					{
						switch(bo)
						{
							case 0: os << "bdnzflr"; break;
							case 2: os << "bdzflr"; break;
							case 4: os << "bflr"; break;
							case 8: os << "bdnztlr"; break;
							case 10: os << "bdztlr"; break;
							case 12: os << "btlr"; break;
							case 16: os << "bdnzlr"; break;
							case 18: os << "bdzlr"; break;
							case 20: os << "blr"; break;
							default: os << "bclr"; break;
						}
						if(lk) os << "l";
						switch(bo)
						{
							case 0: case 2: case 4: case 8: case 10: case 12: os << " " << bi; break;
							case 16: case 18: case 20: break;
							default: os << " " << bo << ", " << bi;
						}
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t target_addr = cpu->GetLR() & 0xfffffffc;
							os << " <" << cpu->GetFunctionFriendlyName(target_addr) << ">";
						}
					}
#line 71032 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71037 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71040 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 71047 "powerpc.tcc"
				>::initialize_function()
				{
#line 151 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnBranchLinkReg;
						//  registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
					}
#line 71055 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71063 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 71070 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 71 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71075 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71083 "powerpc.tcc"
				>

				void
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 71090 "powerpc.tcc"
				>::initialize_operands()
				{
#line 187 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(LR_T,0);
						if( (bo & 16) == 0)
						{
							INPUT(CR_T, bi/4);
						}
						if ( (bo & 4) == 0 )
						{
							INPUT(CTR_T,0);
							OUTPUT(CTR_T,0);
						}
						if(lk)
						{
							OUTPUT(LR_T,0);
						}
					}
#line 71110 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71118 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 71122 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 71126 "powerpc.tcc"
				>::get_target_address(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				typename CONFIG::address_t
#line 71130 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cia
#line 71133 "powerpc.tcc"
				,
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				CPU<CONFIG> *
#line 71137 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 71140 "powerpc.tcc"
				)
				{
#line 56 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return (cpu->GetLR() & 0xfffffffc);
					}
#line 71147 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71155 "powerpc.tcc"
				>
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 71159 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 71163 "powerpc.tcc"
				>::branch_statically_predicted_taken(
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				CPU<CONFIG> *
#line 71167 "powerpc.tcc"
#line 68 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				cpu
#line 71170 "powerpc.tcc"
				)
				{
#line 91 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						// Check the prediction bit of bo field unless it is an always branch statement
						// See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
						return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04));
					}
#line 71179 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71184 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71187 "powerpc.tcc"
				>
#line 100 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 71191 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 71195 "powerpc.tcc"
				>::branch_linked()
				{
#line 116 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return lk;
					}
#line 71202 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71210 "powerpc.tcc"
				>
#line 120 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
				bool
#line 71214 "powerpc.tcc"
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 71218 "powerpc.tcc"
				>::branch_conditioned()
				{
#line 136 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
					{
						return ((bo & 16) == 0);
					}
#line 71225 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71231 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71234 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71239 "powerpc.tcc"
				> *DecodeOpBclr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpBclr<
#line 38 "ppc.isa"
					CONFIG
#line 71245 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				template <
#line 38 "ppc.isa"
				class
#line 71285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71288 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 71292 "powerpc.tcc"
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 71296 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 71300 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 71303 "powerpc.tcc"
				)
				{
#line 36 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a & _b)<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 71316 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71324 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 71328 "powerpc.tcc"
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 71332 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 71336 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 71339 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 71343 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 71346 "powerpc.tcc"
				)
				{
#line 45 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crand cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 71353 "powerpc.tcc"
				}
				/** Condition Register **/
				template <
#line 38 "ppc.isa"
				class
#line 71359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71362 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 71369 "powerpc.tcc"
				>::initialize_function()
				{
#line 180 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 71374 "powerpc.tcc"
				}
				/** Condition **/
				template <
#line 38 "ppc.isa"
				class
#line 71380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71383 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 71390 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 74 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71395 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71403 "powerpc.tcc"
				>

				void
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 71410 "powerpc.tcc"
				>::initialize_operands()
				{
#line 822 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 71441 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71450 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71455 "powerpc.tcc"
				> *DecodeOpCrand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrand<
#line 38 "ppc.isa"
					CONFIG
#line 71461 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71471 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 71475 "powerpc.tcc"
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 71479 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 71483 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 71486 "powerpc.tcc"
				)
				{
#line 50 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a & (!_b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 71499 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71504 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71507 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 71511 "powerpc.tcc"
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 71515 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 71519 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 71522 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 71526 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 71529 "powerpc.tcc"
				)
				{
#line 59 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crandc cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 71536 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71544 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 71551 "powerpc.tcc"
				>::initialize_function()
				{
#line 181 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 71556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71564 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 71571 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 75 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71576 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71584 "powerpc.tcc"
				>

				void
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 71591 "powerpc.tcc"
				>::initialize_operands()
				{
#line 822 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 71622 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71631 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71636 "powerpc.tcc"
				> *DecodeOpCrandc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrandc<
#line 38 "ppc.isa"
					CONFIG
#line 71642 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71652 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 71656 "powerpc.tcc"
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 71660 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 71664 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 71667 "powerpc.tcc"
				)
				{
#line 64 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a ^ _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 71680 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71688 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 71692 "powerpc.tcc"
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 71696 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 71700 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 71703 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 71707 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 71710 "powerpc.tcc"
				)
				{
#line 73 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "creqv cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 71717 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71722 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71725 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 71732 "powerpc.tcc"
				>::initialize_function()
				{
#line 182 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 71737 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71745 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 71752 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 76 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71757 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71765 "powerpc.tcc"
				>

				void
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 71772 "powerpc.tcc"
				>::initialize_operands()
				{
#line 822 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 71803 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71812 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71817 "powerpc.tcc"
				> *DecodeOpCreqv(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCreqv<
#line 38 "ppc.isa"
					CONFIG
#line 71823 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 71830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71833 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 71837 "powerpc.tcc"
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 71841 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 71845 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 71848 "powerpc.tcc"
				)
				{
#line 78 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a & _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 71861 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71869 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 71873 "powerpc.tcc"
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 71877 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 71881 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 71884 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 71888 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 71891 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crnand cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 71898 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71906 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 71913 "powerpc.tcc"
				>::initialize_function()
				{
#line 183 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 71918 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71926 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 71933 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 77 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 71938 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 71943 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71946 "powerpc.tcc"
				>

				void
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 71953 "powerpc.tcc"
				>::initialize_operands()
				{
#line 822 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 71984 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 71990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 71993 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 71998 "powerpc.tcc"
				> *DecodeOpCrnand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrnand<
#line 38 "ppc.isa"
					CONFIG
#line 72004 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72011 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72014 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 72018 "powerpc.tcc"
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 72022 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 72026 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 72029 "powerpc.tcc"
				)
				{
#line 92 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (!(_a | _b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 72042 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72047 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72050 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 72054 "powerpc.tcc"
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 72058 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 72062 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 72065 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 72069 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 72072 "powerpc.tcc"
				)
				{
#line 101 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crnor cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 72079 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72087 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 72094 "powerpc.tcc"
				>::initialize_function()
				{
#line 184 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 72099 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72107 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 72114 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 78 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72119 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72127 "powerpc.tcc"
				>

				void
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 72134 "powerpc.tcc"
				>::initialize_operands()
				{
#line 822 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 72165 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72171 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72174 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72179 "powerpc.tcc"
				> *DecodeOpCrnor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrnor<
#line 38 "ppc.isa"
					CONFIG
#line 72185 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72195 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 72199 "powerpc.tcc"
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 72203 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 72207 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 72210 "powerpc.tcc"
				)
				{
#line 106 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a | _b) << (31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 72223 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72228 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72231 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 72235 "powerpc.tcc"
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 72239 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 72243 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 72246 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 72250 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 72253 "powerpc.tcc"
				)
				{
#line 115 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "cror cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 72260 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72268 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 72275 "powerpc.tcc"
				>::initialize_function()
				{
#line 185 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 72280 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72288 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 72295 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 79 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72300 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72308 "powerpc.tcc"
				>

				void
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 72315 "powerpc.tcc"
				>::initialize_operands()
				{
#line 822 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 72346 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72355 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72360 "powerpc.tcc"
				> *DecodeOpCror(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCror<
#line 38 "ppc.isa"
					CONFIG
#line 72366 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72376 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 72380 "powerpc.tcc"
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 72384 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 72388 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 72391 "powerpc.tcc"
				)
				{
#line 120 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _m;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a | (!_b))<<(31-crbD);
						_m = ~(1<<(31-crbD));
						cpu->SetCR((_c & _m) | _d );
					}
#line 72404 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72409 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72412 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 72416 "powerpc.tcc"
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 72420 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 72424 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 72427 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 72431 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 72434 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crorc cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 72441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72449 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 72456 "powerpc.tcc"
				>::initialize_function()
				{
#line 186 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 72461 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72469 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 72476 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 80 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72481 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72489 "powerpc.tcc"
				>

				void
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 72496 "powerpc.tcc"
				>::initialize_operands()
				{
#line 822 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 72527 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72536 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72541 "powerpc.tcc"
				> *DecodeOpCrorc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrorc<
#line 38 "ppc.isa"
					CONFIG
#line 72547 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72554 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72557 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 72561 "powerpc.tcc"
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 72565 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 72569 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 72572 "powerpc.tcc"
				)
				{
#line 134 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						uint32_t _a, _b, _c, _d, _e ;
						_c = cpu->GetCR();
						_a = (0x1)  & (_c >> (31- crbA));
						_b = (0x1)  & (_c >> (31- crbB));
						_d = (_a ^ _b)<<(31-crbD);
						_e = ~(1<<(31-crbD));
						cpu->SetCR((_c & _e) | _d );
					}
#line 72585 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72593 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 72597 "powerpc.tcc"
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 72601 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 72605 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 72608 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 72612 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 72615 "powerpc.tcc"
				)
				{
#line 143 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "crxor cr" << crbD << ", cr" << crbA << ", cr" << crbB;
					}
#line 72622 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72627 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72630 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 72637 "powerpc.tcc"
				>::initialize_function()
				{
#line 187 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 72642 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72650 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 72657 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 81 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72662 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72670 "powerpc.tcc"
				>

				void
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 72677 "powerpc.tcc"
				>::initialize_operands()
				{
#line 822 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crbD);
						//  INPUT(CRF_T, crbA);
						//  INPUT(CRF_T, crbB);
						/*
						OUTPUT(CR_T, crbD);
						INPUT(CR_T, crbA);
						INPUT(CR_T, crbB);
						*/
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 72708 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72717 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72722 "powerpc.tcc"
				> *DecodeOpCrxor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpCrxor<
#line 38 "ppc.isa"
					CONFIG
#line 72728 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 72735 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72738 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 72742 "powerpc.tcc"
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 72746 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 72750 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 72753 "powerpc.tcc"
				)
				{
#line 148 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						cpu->SetCR((cpu->GetCR() & (~(0xf << (4 * (7 - crfD))))) | (((cpu->GetCR() >> (4 * (7 - crfS))) & 0xf) << (4 * (7 - crfD))));
					}
#line 72760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72768 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 72772 "powerpc.tcc"
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 72776 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 72780 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 72783 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 72787 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 72790 "powerpc.tcc"
				)
				{
#line 151 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./condition.isa"
					{
						os << "mcrf cr" << crfD << ", cr" << crfS;
					}
#line 72797 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72805 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 72812 "powerpc.tcc"
				>::initialize_function()
				{
#line 188 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 72817 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72825 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 72832 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 82 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 72837 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72842 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72845 "powerpc.tcc"
				>

				void
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 72852 "powerpc.tcc"
				>::initialize_operands()
				{
#line 814 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						//  INPUT(CRF_T, crfS);
						OUTPUT(CR_T, crfD);
						INPUT(CR_T, crfS);
					}
#line 72862 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 72868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72871 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 72876 "powerpc.tcc"
				> *DecodeOpMcrf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrf<
#line 38 "ppc.isa"
					CONFIG
#line 72882 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/***************************

				INTEGER LOAD INSTRUCTIONS

				***************************/
				template <
#line 38 "ppc.isa"
				class
#line 72927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72930 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 72934 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 72938 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 72942 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 72945 "powerpc.tcc"
				)
				{
#line 41 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int8Load(rd, ea);
					}
#line 72955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 72960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 72963 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 72967 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 72971 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 72975 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 72978 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 72982 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 72985 "powerpc.tcc"
				)
				{
#line 47 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 72997 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73005 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 73012 "powerpc.tcc"
				>::initialize_function()
				{
#line 300 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 73017 "powerpc.tcc"
				}
				/** Load Store **/
				template <
#line 38 "ppc.isa"
				class
#line 73023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73026 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 73033 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 175 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 73038 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73043 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73046 "powerpc.tcc"
				>

				void
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 73053 "powerpc.tcc"
				>::initialize_operands()
				{
#line 222 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 73065 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73070 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73073 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 73077 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 73081 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 73085 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 73088 "powerpc.tcc"
				)
				{
#line 49 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 73093 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73101 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 73105 "powerpc.tcc"
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 73109 "powerpc.tcc"
				>::memory_access_size()
				{
#line 130 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 73114 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 73120 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73123 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 73128 "powerpc.tcc"
				> *DecodeOpLbz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbz<
#line 38 "ppc.isa"
					CONFIG
#line 73134 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 73141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73144 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 73148 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 73152 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 73156 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 73159 "powerpc.tcc"
				)
				{
#line 57 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int8Load(rd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 73172 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73177 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73180 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 73184 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 73188 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 73192 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 73195 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 73199 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 73202 "powerpc.tcc"
				)
				{
#line 66 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 73214 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73222 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 73229 "powerpc.tcc"
				>::initialize_function()
				{
#line 301 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 73234 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73239 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73242 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 73249 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 176 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 73254 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73262 "powerpc.tcc"
				>

				void
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 73269 "powerpc.tcc"
				>::initialize_operands()
				{
#line 280 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 73278 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73283 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73286 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 73290 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 73294 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 73298 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 73301 "powerpc.tcc"
				)
				{
#line 60 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 73306 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73314 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 73318 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 73322 "powerpc.tcc"
				>::memory_access_size()
				{
#line 131 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 73327 "powerpc.tcc"
				}
				// Integer LOADS with update
				template <
#line 38 "ppc.isa"
				class
#line 73333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73336 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 73340 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 73344 "powerpc.tcc"
				>::is_splitted()
				{
#line 247 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 73351 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73356 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73359 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 73363 "powerpc.tcc"
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 73367 "powerpc.tcc"
				>::split_into()
				{
#line 250 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbz_ctype=0;
						lbz_ctype = 34 << 26;
						lbz_ctype = lbz_ctype | (rd << 21);
						lbz_ctype = lbz_ctype | (ra << 16);
						lbz_ctype = lbz_ctype | (d & 0xffff);
						l.push_back( new OpLbz<CONFIG>(lbz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 73388 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 73394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73397 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 73402 "powerpc.tcc"
				> *DecodeOpLbzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzu<
#line 38 "ppc.isa"
					CONFIG
#line 73408 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 73415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73418 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 73422 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 73426 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 73430 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 73433 "powerpc.tcc"
				)
				{
#line 76 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Load(rd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 73446 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73451 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73454 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 73458 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 73462 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 73466 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 73469 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 73473 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 73476 "powerpc.tcc"
				)
				{
#line 85 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 73488 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73496 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 73503 "powerpc.tcc"
				>::initialize_function()
				{
#line 302 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 73508 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73513 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73516 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 73523 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 177 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 73528 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73536 "powerpc.tcc"
				>

				void
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 73543 "powerpc.tcc"
				>::initialize_operands()
				{
#line 499 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 73552 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73557 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73560 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 73564 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 73568 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 73572 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 73575 "powerpc.tcc"
				)
				{
#line 61 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 73580 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73588 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 73592 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 73596 "powerpc.tcc"
				>::memory_access_size()
				{
#line 132 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 73601 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73606 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73609 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 73613 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 73617 "powerpc.tcc"
				>::is_splitted()
				{
#line 268 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 73624 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73632 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 73636 "powerpc.tcc"
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 73640 "powerpc.tcc"
				>::split_into()
				{
#line 271 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbzx_ctype=0;
						lbzx_ctype = 31 << 26;
						lbzx_ctype = lbzx_ctype | (rd << 21);
						lbzx_ctype = lbzx_ctype | (ra << 16);
						lbzx_ctype = lbzx_ctype | (rb << 11);
						lbzx_ctype = lbzx_ctype | (87 << 1);
						l.push_back( new OpLbzx<CONFIG>(lbzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 73663 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 73669 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73672 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 73677 "powerpc.tcc"
				> *DecodeOpLbzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzux<
#line 38 "ppc.isa"
					CONFIG
#line 73683 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 73690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73693 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 73697 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 73701 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 73705 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 73708 "powerpc.tcc"
				)
				{
#line 95 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Load(rd, ea);
					}
#line 73718 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73726 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 73730 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 73734 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 73738 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 73741 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 73745 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 73748 "powerpc.tcc"
				)
				{
#line 101 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lbzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 73760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73768 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 73775 "powerpc.tcc"
				>::initialize_function()
				{
#line 303 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 73780 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73788 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 73795 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 178 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 73800 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 73807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73810 "powerpc.tcc"
				>

				void
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 73817 "powerpc.tcc"
				>::initialize_operands()
				{
#line 442 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 73826 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73831 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73834 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 73838 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 73842 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 73846 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 73849 "powerpc.tcc"
				)
				{
#line 50 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 73854 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73862 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 73866 "powerpc.tcc"
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 73870 "powerpc.tcc"
				>::memory_access_size()
				{
#line 133 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 73875 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 73881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73884 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 73889 "powerpc.tcc"
				> *DecodeOpLbzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLbzx<
#line 38 "ppc.isa"
					CONFIG
#line 73895 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 73902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73905 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 73909 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 73913 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 73917 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 73920 "powerpc.tcc"
				)
				{
#line 111 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
					}
#line 73930 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73938 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 73942 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 73946 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 73950 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 73953 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 73957 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 73960 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lha r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 73972 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 73980 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 73987 "powerpc.tcc"
				>::initialize_function()
				{
#line 304 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 73992 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 73997 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74000 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 74007 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 179 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 74012 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74017 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74020 "powerpc.tcc"
				>

				void
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 74027 "powerpc.tcc"
				>::initialize_operands()
				{
#line 222 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 74039 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74044 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74047 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 74051 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 74055 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 74059 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 74062 "powerpc.tcc"
				)
				{
#line 51 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 74067 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74072 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74075 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 74079 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 74083 "powerpc.tcc"
				>::memory_access_size()
				{
#line 134 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 74088 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74093 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74096 "powerpc.tcc"
				>
#line 758 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 74100 "powerpc.tcc"
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 74104 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 762 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 74109 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74118 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74123 "powerpc.tcc"
				> *DecodeOpLha(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLha<
#line 38 "ppc.isa"
					CONFIG
#line 74129 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74139 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 74143 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 74147 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 74151 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 74154 "powerpc.tcc"
				)
				{
#line 127 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 74167 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74172 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74175 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 74179 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 74183 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 74187 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 74190 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 74194 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 74197 "powerpc.tcc"
				)
				{
#line 136 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhau r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 74209 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74217 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 74224 "powerpc.tcc"
				>::initialize_function()
				{
#line 305 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 74229 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74234 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74237 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 74244 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 180 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 74249 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74257 "powerpc.tcc"
				>

				void
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 74264 "powerpc.tcc"
				>::initialize_operands()
				{
#line 280 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 74273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74281 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 74285 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 74289 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 74293 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 74296 "powerpc.tcc"
				)
				{
#line 62 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 74301 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74306 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74309 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 74313 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 74317 "powerpc.tcc"
				>::memory_access_size()
				{
#line 135 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 74322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74330 "powerpc.tcc"
				>
#line 758 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 74334 "powerpc.tcc"
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 74338 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 763 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 74343 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74352 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74357 "powerpc.tcc"
				> *DecodeOpLhau(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhau<
#line 38 "ppc.isa"
					CONFIG
#line 74363 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74370 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74373 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 74377 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 74381 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 74385 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 74388 "powerpc.tcc"
				)
				{
#line 146 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 74401 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74409 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 74413 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 74417 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 74421 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 74424 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 74428 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 74431 "powerpc.tcc"
				)
				{
#line 155 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhaux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 74443 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74451 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 74458 "powerpc.tcc"
				>::initialize_function()
				{
#line 306 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 74463 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74471 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 74478 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 181 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 74483 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74488 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74491 "powerpc.tcc"
				>

				void
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 74498 "powerpc.tcc"
				>::initialize_operands()
				{
#line 499 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 74507 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74512 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74515 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 74519 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 74523 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 74527 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 74530 "powerpc.tcc"
				)
				{
#line 63 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 74535 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74543 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 74547 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 74551 "powerpc.tcc"
				>::memory_access_size()
				{
#line 136 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 74556 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74564 "powerpc.tcc"
				>
#line 758 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 74568 "powerpc.tcc"
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 74572 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 764 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 74577 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74586 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74591 "powerpc.tcc"
				> *DecodeOpLhaux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhaux<
#line 38 "ppc.isa"
					CONFIG
#line 74597 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74604 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74607 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 74611 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 74615 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 74619 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 74622 "powerpc.tcc"
				)
				{
#line 165 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->SInt16Load(rd, ea); // 16-bit load/no byte reverse/sign extend
					}
#line 74632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74640 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 74644 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 74648 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 74652 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 74655 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 74659 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 74662 "powerpc.tcc"
				)
				{
#line 171 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhax r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 74674 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74682 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 74689 "powerpc.tcc"
				>::initialize_function()
				{
#line 307 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 74694 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74699 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74702 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 74709 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 182 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 74714 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 74721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74724 "powerpc.tcc"
				>

				void
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 74731 "powerpc.tcc"
				>::initialize_operands()
				{
#line 442 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 74740 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74748 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 74752 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 74756 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 74760 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 74763 "powerpc.tcc"
				)
				{
#line 52 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 74768 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74776 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 74780 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 74784 "powerpc.tcc"
				>::memory_access_size()
				{
#line 137 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 74789 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74797 "powerpc.tcc"
				>
#line 758 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 74801 "powerpc.tcc"
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 74805 "powerpc.tcc"
				>::is_sign_extended()
				{
#line 765 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 74810 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 74816 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74819 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 74824 "powerpc.tcc"
				> *DecodeOpLhax(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhax<
#line 38 "ppc.isa"
					CONFIG
#line 74830 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 74837 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74840 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 74844 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 74848 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 74852 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 74855 "powerpc.tcc"
				)
				{
#line 181 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
					}
#line 74865 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74873 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 74877 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 74881 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 74885 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 74888 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 74892 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 74895 "powerpc.tcc"
				)
				{
#line 187 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 74907 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74912 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74915 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 74922 "powerpc.tcc"
				>::initialize_function()
				{
#line 308 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 74927 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74932 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74935 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 74942 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 183 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 74947 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74955 "powerpc.tcc"
				>

				void
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 74962 "powerpc.tcc"
				>::initialize_operands()
				{
#line 222 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 74974 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 74979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 74982 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 74986 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 74990 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 74994 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 74997 "powerpc.tcc"
				)
				{
#line 54 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 75002 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75010 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 75014 "powerpc.tcc"
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 75018 "powerpc.tcc"
				>::memory_access_size()
				{
#line 138 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 75023 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75029 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75032 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75037 "powerpc.tcc"
				> *DecodeOpLhz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhz<
#line 38 "ppc.isa"
					CONFIG
#line 75043 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75053 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 75057 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 75061 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 75065 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 75068 "powerpc.tcc"
				)
				{
#line 197 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 75081 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75089 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 75093 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 75097 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 75101 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 75104 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 75108 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 75111 "powerpc.tcc"
				)
				{
#line 206 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 75123 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75128 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75131 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 75138 "powerpc.tcc"
				>::initialize_function()
				{
#line 309 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 75143 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75151 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 75158 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 184 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 75163 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75168 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75171 "powerpc.tcc"
				>

				void
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 75178 "powerpc.tcc"
				>::initialize_operands()
				{
#line 280 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 75187 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75195 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 75199 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 75203 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 75207 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 75210 "powerpc.tcc"
				)
				{
#line 64 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 75215 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75223 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 75227 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 75231 "powerpc.tcc"
				>::memory_access_size()
				{
#line 139 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 75236 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75241 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75244 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 75248 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 75252 "powerpc.tcc"
				>::is_splitted()
				{
#line 291 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 75259 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75267 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 75271 "powerpc.tcc"
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 75275 "powerpc.tcc"
				>::split_into()
				{
#line 294 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbz_ctype=0;
						lbz_ctype = 40 << 26;
						lbz_ctype = lbz_ctype | (rd << 21);
						lbz_ctype = lbz_ctype | (ra << 16);
						lbz_ctype = lbz_ctype | (d & 0xffff);
						l.push_back( new OpLbz<CONFIG>(lbz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 75296 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75305 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75310 "powerpc.tcc"
				> *DecodeOpLhzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzu<
#line 38 "ppc.isa"
					CONFIG
#line 75316 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75326 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 75330 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 75334 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 75338 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 75341 "powerpc.tcc"
				)
				{
#line 216 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 75354 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75359 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75362 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 75366 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 75370 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 75374 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 75377 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 75381 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 75384 "powerpc.tcc"
				)
				{
#line 225 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 75396 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75401 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75404 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 75411 "powerpc.tcc"
				>::initialize_function()
				{
#line 310 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 75416 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75421 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75424 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 75431 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 185 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 75436 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75441 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75444 "powerpc.tcc"
				>

				void
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 75451 "powerpc.tcc"
				>::initialize_operands()
				{
#line 499 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 75460 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75465 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75468 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 75472 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 75476 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 75480 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 75483 "powerpc.tcc"
				)
				{
#line 65 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 75488 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75496 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 75500 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 75504 "powerpc.tcc"
				>::memory_access_size()
				{
#line 140 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 75509 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75514 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75517 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 75521 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 75525 "powerpc.tcc"
				>::is_splitted()
				{
#line 312 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 75532 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75540 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 75544 "powerpc.tcc"
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 75548 "powerpc.tcc"
				>::split_into()
				{
#line 315 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lbzx_ctype=0;
						lbzx_ctype = 31 << 26;
						lbzx_ctype = lbzx_ctype | (rd << 21);
						lbzx_ctype = lbzx_ctype | (ra << 16);
						lbzx_ctype = lbzx_ctype | (rb << 11);
						lbzx_ctype = lbzx_ctype | (279 << 1);
						l.push_back( new OpLbzx<CONFIG>(lbzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 75571 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75577 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75580 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75585 "powerpc.tcc"
				> *DecodeOpLhzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzux<
#line 38 "ppc.isa"
					CONFIG
#line 75591 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75598 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75601 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 75605 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 75609 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 75613 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 75616 "powerpc.tcc"
				)
				{
#line 235 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Load(rd, ea); // 16-bit load/no byte reverse/no sign extend
					}
#line 75626 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75634 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 75638 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 75642 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 75646 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 75649 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 75653 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 75656 "powerpc.tcc"
				)
				{
#line 241 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 75668 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75676 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 75683 "powerpc.tcc"
				>::initialize_function()
				{
#line 311 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 75688 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75696 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 75703 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 186 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 75708 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 75715 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75718 "powerpc.tcc"
				>

				void
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 75725 "powerpc.tcc"
				>::initialize_operands()
				{
#line 442 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 75734 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75739 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75742 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 75746 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 75750 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 75754 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 75757 "powerpc.tcc"
				)
				{
#line 55 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 75762 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75770 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 75774 "powerpc.tcc"
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 75778 "powerpc.tcc"
				>::memory_access_size()
				{
#line 141 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 75783 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 75789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75792 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 75797 "powerpc.tcc"
				> *DecodeOpLhzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhzx<
#line 38 "ppc.isa"
					CONFIG
#line 75803 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 75810 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75813 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 75817 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 75821 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 75825 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 75828 "powerpc.tcc"
				)
				{
#line 251 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
					}
#line 75838 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75846 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 75850 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 75854 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 75858 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 75861 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 75865 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 75868 "powerpc.tcc"
				)
				{
#line 257 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwz r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 75880 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75888 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 75895 "powerpc.tcc"
				>::initialize_function()
				{
#line 312 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 75900 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75905 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75908 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 75915 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 187 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 75920 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75925 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75928 "powerpc.tcc"
				>

				void
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 75935 "powerpc.tcc"
				>::initialize_operands()
				{
#line 222 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						if (ra != 0)
						{
							INPUT(GPR_T, ra);
						}
						//  INPUT(GPR_T, ra);
					}
#line 75947 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75955 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 75959 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 75963 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 75967 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 75970 "powerpc.tcc"
				)
				{
#line 58 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 75975 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 75980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 75983 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 75987 "powerpc.tcc"
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 75991 "powerpc.tcc"
				>::memory_access_size()
				{
#line 142 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 75996 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76005 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76010 "powerpc.tcc"
				> *DecodeOpLwz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwz<
#line 38 "ppc.isa"
					CONFIG
#line 76016 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76023 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76026 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 76030 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 76034 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 76038 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 76041 "powerpc.tcc"
				)
				{
#line 267 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 76054 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76062 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 76066 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 76070 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 76074 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 76077 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 76081 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 76084 "powerpc.tcc"
				)
				{
#line 276 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzu r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 76096 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76104 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 76111 "powerpc.tcc"
				>::initialize_function()
				{
#line 313 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 76116 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76124 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 76131 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 188 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76136 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76144 "powerpc.tcc"
				>

				void
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 76151 "powerpc.tcc"
				>::initialize_operands()
				{
#line 280 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 76160 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76168 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 76172 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 76176 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 76180 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 76183 "powerpc.tcc"
				)
				{
#line 66 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 76188 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76193 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76196 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 76200 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 76204 "powerpc.tcc"
				>::memory_access_size()
				{
#line 143 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 76209 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76214 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76217 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 76221 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 76225 "powerpc.tcc"
				>::is_splitted()
				{
#line 335 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 76232 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76237 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76240 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 76244 "powerpc.tcc"
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 76248 "powerpc.tcc"
				>::split_into()
				{
#line 338 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lwz_ctype=0;
						lwz_ctype = 32 << 26;
						lwz_ctype = lwz_ctype | (rd << 21);
						lwz_ctype = lwz_ctype | (ra << 16);
						lwz_ctype = lwz_ctype | (d & 0xffff);
						l.push_back( new OpLwz<CONFIG>(lwz_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 76270 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76276 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76279 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76284 "powerpc.tcc"
				> *DecodeOpLwzu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzu<
#line 38 "ppc.isa"
					CONFIG
#line 76290 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76297 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76300 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 76304 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 76308 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 76312 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 76315 "powerpc.tcc"
				)
				{
#line 286 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0 || ra == rd) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 76328 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76333 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76336 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 76340 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 76344 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 76348 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 76351 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 76355 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 76358 "powerpc.tcc"
				)
				{
#line 295 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzux r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 76370 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76378 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 76385 "powerpc.tcc"
				>::initialize_function()
				{
#line 314 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 76390 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76395 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76398 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 76405 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 189 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76410 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76418 "powerpc.tcc"
				>

				void
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 76425 "powerpc.tcc"
				>::initialize_operands()
				{
#line 499 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 76434 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76439 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76442 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 76446 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 76450 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 76454 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 76457 "powerpc.tcc"
				)
				{
#line 67 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 76462 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76467 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76470 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 76474 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 76478 "powerpc.tcc"
				>::memory_access_size()
				{
#line 144 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 76483 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76488 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76491 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 76495 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 76499 "powerpc.tcc"
				>::is_splitted()
				{
#line 357 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 76506 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76514 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 76518 "powerpc.tcc"
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 76522 "powerpc.tcc"
				>::split_into()
				{
#line 360 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lwzx_ctype=0;
						lwzx_ctype = 31 << 26;
						lwzx_ctype = lwzx_ctype | (rd << 21);
						lwzx_ctype = lwzx_ctype | (ra << 16);
						lwzx_ctype = lwzx_ctype | (rb << 11);
						lwzx_ctype = lwzx_ctype | (23 << 1);
						l.push_back( new OpLwzx<CONFIG>(lwzx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 76545 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76554 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76559 "powerpc.tcc"
				> *DecodeOpLwzux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzux<
#line 38 "ppc.isa"
					CONFIG
#line 76565 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76575 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 76579 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 76583 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 76587 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 76590 "powerpc.tcc"
				)
				{
#line 305 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Load(rd, ea); // 32-bit load/no byte reverse/no sign extend
					}
#line 76600 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76608 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 76612 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 76616 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 76620 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 76623 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 76627 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 76630 "powerpc.tcc"
				)
				{
#line 311 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwzx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 76642 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76650 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 76657 "powerpc.tcc"
				>::initialize_function()
				{
#line 315 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 76662 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76670 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 76677 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 190 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76682 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 76689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76692 "powerpc.tcc"
				>

				void
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 76699 "powerpc.tcc"
				>::initialize_operands()
				{
#line 442 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 76708 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76713 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76716 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 76720 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 76724 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 76728 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 76731 "powerpc.tcc"
				)
				{
#line 59 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 76736 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76744 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 76748 "powerpc.tcc"
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 76752 "powerpc.tcc"
				>::memory_access_size()
				{
#line 145 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 76757 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76766 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76771 "powerpc.tcc"
				> *DecodeOpLwzx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwzx<
#line 38 "ppc.isa"
					CONFIG
#line 76777 "powerpc.tcc"
					>(code, addr);
				}

				/****************************

				INTEGER STORE INSTRUCTIONS

				****************************/
				template <
#line 38 "ppc.isa"
				class
#line 76789 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76792 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 76796 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 76800 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 76804 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 76807 "powerpc.tcc"
				)
				{
#line 326 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int8Store(rs, ea);
					}
#line 76817 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76822 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76825 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 76829 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 76833 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 76837 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 76840 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 76844 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 76847 "powerpc.tcc"
				)
				{
#line 332 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stb r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 76859 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76867 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 76874 "powerpc.tcc"
				>::initialize_function()
				{
#line 316 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 76879 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76887 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 76894 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 191 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 76899 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76904 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76907 "powerpc.tcc"
				>

				void
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 76914 "powerpc.tcc"
				>::initialize_operands()
				{
#line 345 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 76922 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76930 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 76934 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 76938 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 76942 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 76945 "powerpc.tcc"
				)
				{
#line 84 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 76950 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 76955 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76958 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 76962 "powerpc.tcc"
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 76966 "powerpc.tcc"
				>::memory_access_size()
				{
#line 146 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 76971 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 76977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 76980 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 76985 "powerpc.tcc"
				> *DecodeOpStb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStb<
#line 38 "ppc.isa"
					CONFIG
#line 76991 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 76998 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77001 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 77005 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 77009 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 77013 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 77016 "powerpc.tcc"
				)
				{
#line 342 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int8Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 77029 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77034 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77037 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 77041 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 77045 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 77049 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 77052 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 77056 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 77059 "powerpc.tcc"
				)
				{
#line 351 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 77071 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77076 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77079 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 77086 "powerpc.tcc"
				>::initialize_function()
				{
#line 317 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 77091 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77096 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77099 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 77106 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 192 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 77111 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77116 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77119 "powerpc.tcc"
				>

				void
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 77126 "powerpc.tcc"
				>::initialize_operands()
				{
#line 351 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 77135 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77140 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77143 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 77147 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 77151 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 77155 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 77158 "powerpc.tcc"
				)
				{
#line 85 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 77163 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77168 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77171 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 77175 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 77179 "powerpc.tcc"
				>::memory_access_size()
				{
#line 147 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 77184 "powerpc.tcc"
				}
				// Integer STORES with update
				template <
#line 38 "ppc.isa"
				class
#line 77190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77193 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 77197 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 77201 "powerpc.tcc"
				>::is_splitted()
				{
#line 381 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 77208 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77216 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 77220 "powerpc.tcc"
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 77224 "powerpc.tcc"
				>::split_into()
				{
#line 384 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stb_ctype=0;
						stb_ctype = 38 << 26;
						stb_ctype = stb_ctype | (rs << 21);
						stb_ctype = stb_ctype | (ra << 16);
						stb_ctype = stb_ctype | (d & 0xffff);
						l.push_back( new OpStb<CONFIG>(stb_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 77247 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77253 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77256 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77261 "powerpc.tcc"
				> *DecodeOpStbu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbu<
#line 38 "ppc.isa"
					CONFIG
#line 77267 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77274 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77277 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 77281 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 77285 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 77289 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 77292 "powerpc.tcc"
				)
				{
#line 361 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 77305 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77313 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 77317 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 77321 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 77325 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 77328 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 77332 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 77335 "powerpc.tcc"
				)
				{
#line 370 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 77347 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77355 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 77362 "powerpc.tcc"
				>::initialize_function()
				{
#line 318 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 77367 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77375 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 77382 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 193 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 77387 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77392 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77395 "powerpc.tcc"
				>

				void
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 77402 "powerpc.tcc"
				>::initialize_operands()
				{
#line 419 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 77411 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77419 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 77423 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 77427 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 77431 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 77434 "powerpc.tcc"
				)
				{
#line 86 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 77439 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77447 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 77451 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 77455 "powerpc.tcc"
				>::memory_access_size()
				{
#line 148 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 77460 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77465 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77468 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 77472 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 77476 "powerpc.tcc"
				>::is_splitted()
				{
#line 404 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 77483 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77488 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77491 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 77495 "powerpc.tcc"
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 77499 "powerpc.tcc"
				>::split_into()
				{
#line 407 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stbx_ctype=0;
						stbx_ctype = 31 << 26;
						stbx_ctype = stbx_ctype | (rs << 21);
						stbx_ctype = stbx_ctype | (ra << 16);
						stbx_ctype = stbx_ctype | (rb << 11);
						stbx_ctype = stbx_ctype | (215 << 1);
						l.push_back( new OpStb<CONFIG>(stbx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAddi<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 77524 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77530 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77533 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77538 "powerpc.tcc"
				> *DecodeOpStbux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbux<
#line 38 "ppc.isa"
					CONFIG
#line 77544 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77554 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 77558 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 77562 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 77566 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 77569 "powerpc.tcc"
				)
				{
#line 380 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int8Store(rs, ea);
					}
#line 77579 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77584 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77587 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 77591 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 77595 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 77599 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 77602 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 77606 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 77609 "powerpc.tcc"
				)
				{
#line 386 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stbx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 77621 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77629 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 77636 "powerpc.tcc"
				>::initialize_function()
				{
#line 319 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 77641 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77646 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77649 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 77656 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 194 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 77661 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77669 "powerpc.tcc"
				>

				void
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 77676 "powerpc.tcc"
				>::initialize_operands()
				{
#line 412 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 77685 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77693 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 77697 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 77701 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 77705 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 77708 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 77713 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77718 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77721 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 77725 "powerpc.tcc"
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 77729 "powerpc.tcc"
				>::memory_access_size()
				{
#line 149 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 1; }
#line 77734 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77743 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77748 "powerpc.tcc"
				> *DecodeOpStbx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStbx<
#line 38 "ppc.isa"
					CONFIG
#line 77754 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77761 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77764 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 77768 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 77772 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 77776 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 77779 "powerpc.tcc"
				)
				{
#line 396 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int16Store(rs, ea);
					}
#line 77789 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77797 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 77801 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 77805 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 77809 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 77812 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 77816 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 77819 "powerpc.tcc"
				)
				{
#line 402 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sth r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 77831 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77839 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 77846 "powerpc.tcc"
				>::initialize_function()
				{
#line 320 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 77851 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77856 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77859 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 77866 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 195 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 77871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77879 "powerpc.tcc"
				>

				void
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 77886 "powerpc.tcc"
				>::initialize_operands()
				{
#line 345 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 77894 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77899 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77902 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 77906 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 77910 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 77914 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 77917 "powerpc.tcc"
				)
				{
#line 88 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 77922 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 77927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77930 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 77934 "powerpc.tcc"
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 77938 "powerpc.tcc"
				>::memory_access_size()
				{
#line 150 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 77943 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 77949 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77952 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 77957 "powerpc.tcc"
				> *DecodeOpSth(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSth<
#line 38 "ppc.isa"
					CONFIG
#line 77963 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 77970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 77973 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 77977 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 77981 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 77985 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 77988 "powerpc.tcc"
				)
				{
#line 412 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int16Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 78001 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78009 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 78013 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 78017 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 78021 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 78024 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 78028 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 78031 "powerpc.tcc"
				)
				{
#line 421 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 78043 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78051 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 78058 "powerpc.tcc"
				>::initialize_function()
				{
#line 321 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 78063 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78071 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 78078 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 196 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 78083 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78091 "powerpc.tcc"
				>

				void
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 78098 "powerpc.tcc"
				>::initialize_operands()
				{
#line 351 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 78107 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78112 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78115 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 78119 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 78123 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 78127 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 78130 "powerpc.tcc"
				)
				{
#line 89 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 78135 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78140 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78143 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 78147 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 78151 "powerpc.tcc"
				>::memory_access_size()
				{
#line 151 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 78156 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78164 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 78168 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 78172 "powerpc.tcc"
				>::is_splitted()
				{
#line 429 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 78179 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78184 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78187 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 78191 "powerpc.tcc"
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 78195 "powerpc.tcc"
				>::split_into()
				{
#line 432 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stb_ctype=0;
						stb_ctype = 44 << 26;
						stb_ctype = stb_ctype | (rs << 21);
						stb_ctype = stb_ctype | (ra << 16);
						stb_ctype = stb_ctype | (d & 0xffff);
						l.push_back( new OpStb<CONFIG>(stb_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 78218 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 78224 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78227 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 78232 "powerpc.tcc"
				> *DecodeOpSthu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthu<
#line 38 "ppc.isa"
					CONFIG
#line 78238 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 78245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78248 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 78252 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 78256 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 78260 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 78263 "powerpc.tcc"
				)
				{
#line 431 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 78276 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78281 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78284 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 78288 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 78292 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 78296 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 78299 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 78303 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 78306 "powerpc.tcc"
				)
				{
#line 440 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 78318 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78323 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78326 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 78333 "powerpc.tcc"
				>::initialize_function()
				{
#line 322 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 78338 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78343 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78346 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 78353 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 197 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 78358 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78363 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78366 "powerpc.tcc"
				>

				void
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 78373 "powerpc.tcc"
				>::initialize_operands()
				{
#line 419 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 78382 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78390 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 78394 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 78398 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 78402 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 78405 "powerpc.tcc"
				)
				{
#line 90 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 78410 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78415 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78418 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 78422 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 78426 "powerpc.tcc"
				>::memory_access_size()
				{
#line 152 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 78431 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78436 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78439 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 78443 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 78447 "powerpc.tcc"
				>::is_splitted()
				{
#line 452 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 78454 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78459 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78462 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 78466 "powerpc.tcc"
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 78470 "powerpc.tcc"
				>::split_into()
				{
#line 455 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType sthx_ctype=0;
						sthx_ctype = 31 << 26;
						sthx_ctype = sthx_ctype | (rs << 21);
						sthx_ctype = sthx_ctype | (ra << 16);
						sthx_ctype = sthx_ctype | (rb << 11);
						sthx_ctype = sthx_ctype | (407 << 1);
						l.push_back( new OpStb<CONFIG>(sthx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAddi<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 78495 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 78501 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78504 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 78509 "powerpc.tcc"
				> *DecodeOpSthux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthux<
#line 38 "ppc.isa"
					CONFIG
#line 78515 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 78522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78525 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 78529 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 78533 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 78537 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 78540 "powerpc.tcc"
				)
				{
#line 450 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16Store(rs, ea);
					}
#line 78550 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78558 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 78562 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 78566 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 78570 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 78573 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 78577 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 78580 "powerpc.tcc"
				)
				{
#line 456 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 78592 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78600 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 78607 "powerpc.tcc"
				>::initialize_function()
				{
#line 323 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 78612 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78620 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 78627 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 198 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 78632 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78637 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78640 "powerpc.tcc"
				>

				void
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 78647 "powerpc.tcc"
				>::initialize_operands()
				{
#line 412 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 78656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78664 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 78668 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 78672 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 78676 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 78679 "powerpc.tcc"
				)
				{
#line 91 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 78684 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78689 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78692 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 78696 "powerpc.tcc"
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 78700 "powerpc.tcc"
				>::memory_access_size()
				{
#line 153 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 78705 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 78711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78714 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 78719 "powerpc.tcc"
				> *DecodeOpSthx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthx<
#line 38 "ppc.isa"
					CONFIG
#line 78725 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 78732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78735 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 78739 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 78743 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 78747 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 78750 "powerpc.tcc"
				)
				{
#line 466 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// do the memory access
						cpu->Int32Store(rs, ea);
					}
#line 78760 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78765 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78768 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 78772 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 78776 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 78780 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 78783 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 78787 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 78790 "powerpc.tcc"
				)
				{
#line 472 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stw r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 78802 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78807 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78810 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 78817 "powerpc.tcc"
				>::initialize_function()
				{
#line 324 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 78822 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78827 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78830 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 78837 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 199 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 78842 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78850 "powerpc.tcc"
				>

				void
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 78857 "powerpc.tcc"
				>::initialize_operands()
				{
#line 345 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
					}
#line 78865 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78870 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78873 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 78877 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 78881 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 78885 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 78888 "powerpc.tcc"
				)
				{
#line 92 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 78893 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78901 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 78905 "powerpc.tcc"
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 78909 "powerpc.tcc"
				>::memory_access_size()
				{
#line 154 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 78914 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 78920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78923 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 78928 "powerpc.tcc"
				> *DecodeOpStw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStw<
#line 38 "ppc.isa"
					CONFIG
#line 78934 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 78941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78944 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 78948 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 78952 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 78956 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 78959 "powerpc.tcc"
				)
				{
#line 482 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// do the memory access
						cpu->Int32Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 78972 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 78977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 78980 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 78984 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 78988 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 78992 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 78995 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 78999 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 79002 "powerpc.tcc"
				)
				{
#line 491 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwu r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 79014 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79019 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79022 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 79029 "powerpc.tcc"
				>::initialize_function()
				{
#line 325 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 79034 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79042 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 79049 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 200 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 79054 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79062 "powerpc.tcc"
				>

				void
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 79069 "powerpc.tcc"
				>::initialize_operands()
				{
#line 351 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						OUTPUT(GPR_T, ra); /*DD*/
					}
#line 79078 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79086 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 79090 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 79094 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 79098 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 79101 "powerpc.tcc"
				)
				{
#line 93 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 79106 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79111 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79114 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 79118 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 79122 "powerpc.tcc"
				>::memory_access_size()
				{
#line 155 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 79127 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79132 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79135 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 79139 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 79143 "powerpc.tcc"
				>::is_splitted()
				{
#line 478 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 79150 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79155 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79158 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 79162 "powerpc.tcc"
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 79166 "powerpc.tcc"
				>::split_into()
				{
#line 481 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stw_ctype=0;
						stw_ctype = 36 << 26;
						stw_ctype = stw_ctype | (rs << 21);
						stw_ctype = stw_ctype | (ra << 16);
						stw_ctype = stw_ctype | (d & 0xffff);
						l.push_back( new OpStw<CONFIG>(stw_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );

						return l;
					}
#line 79189 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79198 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79203 "powerpc.tcc"
				> *DecodeOpStwu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwu<
#line 38 "ppc.isa"
					CONFIG
#line 79209 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79219 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 79223 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 79227 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 79231 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 79234 "powerpc.tcc"
				)
				{
#line 501 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Store(rs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 79247 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79252 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79255 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 79259 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 79263 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 79267 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 79270 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 79274 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 79277 "powerpc.tcc"
				)
				{
#line 510 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwux r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 79289 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79294 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79297 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 79304 "powerpc.tcc"
				>::initialize_function()
				{
#line 326 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 79309 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79314 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79317 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 79324 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 201 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 79329 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79334 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79337 "powerpc.tcc"
				>

				void
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 79344 "powerpc.tcc"
				>::initialize_operands()
				{
#line 419 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 79353 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79358 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79361 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 79365 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 79369 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 79373 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 79376 "powerpc.tcc"
				)
				{
#line 94 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 79381 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79386 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79389 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 79393 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 79397 "powerpc.tcc"
				>::memory_access_size()
				{
#line 156 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 79402 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79407 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79410 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 79414 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 79418 "powerpc.tcc"
				>::is_splitted()
				{
#line 501 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 79425 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79430 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79433 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 79437 "powerpc.tcc"
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 79441 "powerpc.tcc"
				>::split_into()
				{
#line 504 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;

						CodeType stwx_ctype=0;
						stwx_ctype = 31 << 26;
						stwx_ctype = stwx_ctype | (rs << 21);
						stwx_ctype = stwx_ctype | (ra << 16);
						stwx_ctype = stwx_ctype | (rb << 11);
						stwx_ctype = stwx_ctype | (151 << 1);
						l.push_back( new OpStwx<CONFIG>(stwx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 79465 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79471 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79474 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79479 "powerpc.tcc"
				> *DecodeOpStwux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwux<
#line 38 "ppc.isa"
					CONFIG
#line 79485 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79492 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79495 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 79499 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 79503 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 79507 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 79510 "powerpc.tcc"
				)
				{
#line 520 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32Store(rs, ea);
					}
#line 79520 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79525 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79528 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 79532 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 79536 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 79540 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 79543 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 79547 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 79550 "powerpc.tcc"
				)
				{
#line 526 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 79562 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79570 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 79577 "powerpc.tcc"
				>::initialize_function()
				{
#line 327 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 79582 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79590 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 79597 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 202 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 79602 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79607 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79610 "powerpc.tcc"
				>

				void
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 79617 "powerpc.tcc"
				>::initialize_operands()
				{
#line 412 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 79626 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79631 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79634 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 79638 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 79642 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 79646 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 79649 "powerpc.tcc"
				)
				{
#line 95 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 79654 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79662 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 79666 "powerpc.tcc"
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 79670 "powerpc.tcc"
				>::memory_access_size()
				{
#line 157 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 79675 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79684 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79689 "powerpc.tcc"
				> *DecodeOpStwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwx<
#line 38 "ppc.isa"
					CONFIG
#line 79695 "powerpc.tcc"
					>(code, addr);
				}

				/**************************************************

				INTEGER LOAD STORE w BYTE REVERSE INSTRUCTIONS

				***************************************************/
				template <
#line 38 "ppc.isa"
				class
#line 79707 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79710 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 79714 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 79718 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 79722 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 79725 "powerpc.tcc"
				)
				{
#line 542 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16LoadByteReverse(rd, ea); // 16-bit load/byte reverse/no signe extend
					}
#line 79735 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79743 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 79747 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 79751 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 79755 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 79758 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 79762 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 79765 "powerpc.tcc"
				)
				{
#line 548 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lhbrx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 79777 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79785 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 79792 "powerpc.tcc"
				>::initialize_function()
				{
#line 328 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadByteReversed; }
#line 79797 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79805 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 79812 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 203 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 79817 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 79824 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79827 "powerpc.tcc"
				>

				void
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 79834 "powerpc.tcc"
				>::initialize_operands()
				{
#line 442 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 79843 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79851 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 79855 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 79859 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 79863 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 79866 "powerpc.tcc"
				)
				{
#line 53 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 79871 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79876 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79879 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 79883 "powerpc.tcc"
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 79887 "powerpc.tcc"
				>::memory_access_size()
				{
#line 158 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 79892 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 79898 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79901 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 79906 "powerpc.tcc"
				> *DecodeOpLhbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLhbrx<
#line 38 "ppc.isa"
					CONFIG
#line 79912 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 79919 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79922 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 79926 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 79930 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 79934 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 79937 "powerpc.tcc"
				)
				{
#line 558 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32LoadByteReverse(rd, ea); // 32-bit load/byte reverse/no signe extend
					}
#line 79947 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79952 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79955 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 79959 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 79963 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 79967 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 79970 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 79974 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 79977 "powerpc.tcc"
				)
				{
#line 564 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwbrx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 79989 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 79994 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 79997 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80004 "powerpc.tcc"
				>::initialize_function()
				{
#line 329 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadByteReversed; }
#line 80009 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80017 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80024 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 204 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 80029 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 80036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80039 "powerpc.tcc"
				>

				void
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80046 "powerpc.tcc"
				>::initialize_operands()
				{
#line 442 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 80055 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80060 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80063 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 80067 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80071 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 80075 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 80078 "powerpc.tcc"
				)
				{
#line 57 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 80083 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80088 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80091 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 80095 "powerpc.tcc"
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80099 "powerpc.tcc"
				>::memory_access_size()
				{
#line 159 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 80104 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80110 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80113 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80118 "powerpc.tcc"
				> *DecodeOpLwbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 80124 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 80131 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80134 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 80138 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80142 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 80146 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 80149 "powerpc.tcc"
				)
				{
#line 574 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int16StoreByteReverse(rs, ea); // 16-bit load/byte reverse
					}
#line 80159 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80167 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 80171 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80175 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 80179 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 80182 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 80186 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 80189 "powerpc.tcc"
				)
				{
#line 580 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "sthbrx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 80201 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80206 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80209 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80216 "powerpc.tcc"
				>::initialize_function()
				{
#line 330 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreByteReversed; }
#line 80221 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80229 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80236 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 205 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 80241 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80246 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80249 "powerpc.tcc"
				>

				void
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80256 "powerpc.tcc"
				>::initialize_operands()
				{
#line 412 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 80265 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80270 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80273 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 80277 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80281 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 80285 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 80288 "powerpc.tcc"
				)
				{
#line 96 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 80293 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80301 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 80305 "powerpc.tcc"
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80309 "powerpc.tcc"
				>::memory_access_size()
				{
#line 160 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 2; }
#line 80314 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80323 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80328 "powerpc.tcc"
				> *DecodeOpSthbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSthbrx<
#line 38 "ppc.isa"
					CONFIG
#line 80334 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 80341 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80344 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 80348 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80352 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 80356 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 80359 "powerpc.tcc"
				)
				{
#line 590 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// do the memory access
						cpu->Int32StoreByteReverse(rs, ea); // 32-bit load/byte reverse
					}
#line 80369 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80377 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 80381 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80385 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 80389 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 80392 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 80396 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 80399 "powerpc.tcc"
				)
				{
#line 596 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwbrx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 80411 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80419 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80426 "powerpc.tcc"
				>::initialize_function()
				{
#line 331 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreByteReversed; }
#line 80431 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80436 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80439 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80446 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 206 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 80451 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80459 "powerpc.tcc"
				>

				void
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80466 "powerpc.tcc"
				>::initialize_operands()
				{
#line 412 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 80475 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80483 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 80487 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80491 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 80495 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 80498 "powerpc.tcc"
				)
				{
#line 97 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 80503 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80511 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 80515 "powerpc.tcc"
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 80519 "powerpc.tcc"
				>::memory_access_size()
				{
#line 161 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 80524 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80530 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80533 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80538 "powerpc.tcc"
				> *DecodeOpStwbrx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 80544 "powerpc.tcc"
					>(code, addr);
				}

				/*******************************************

				INTEGER LOAD STORE STRING INSTRUCTIONS

				*******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 80556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80559 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 80563 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 80567 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 80571 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 80574 "powerpc.tcc"
				)
				{
#line 612 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/*	typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;

						if(cpu->GetMSR_LE())
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						uint8_t n = nb ? nb : 32;
						int r = rd - 1;
						int i = -8;
						uint8_t v;

						while(n > 0)
						{
							if(i < 0)
							{
								i = 24;
								r = (r + 1) & 31;
								cpu->SetGPR(r, 0);
							}

							//cpu->ReadMemory8(ea, v);
							//cpu->SetGPR(r, cpu->GetGPR(r) | ((uint32_t) v << i));
							i -= 8;
							ea++;
							n--;
						}*/
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;

						if(cpu->GetMSR_LE())
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						uint8_t n = nb ? nb : 32;
						unsigned int r = rd;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntLoadMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 80625 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80630 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80633 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 80637 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 80641 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 80645 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 80648 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 80652 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 80655 "powerpc.tcc"
				)
				{
#line 659 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lswi r" << rd << ", r" << ra << ", " << nb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 80667 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80672 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80675 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 80682 "powerpc.tcc"
				>::initialize_function()
				{
#line 333 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadStringImm; }
#line 80687 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80692 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80695 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 80702 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 207 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 80707 "powerpc.tcc"
				}
				// --- Load & Store string ----------------------------------------------------
				/*

				lswi.initialize_operands = {
					uint8_t n = nb ? nb : 32;
					uint8_t r = rd;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				stswi.initialize_operands = {
					uint8_t n = nb ? nb : 32;
					uint8_t r = rs;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				lswx.initialize_operands = {
					uint8_t n = cpu->GetXER_BYTE_COUNT();
					uint8_t r = rd;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				stswx.initialize_operands = {
					uint8_t n = cpu->GetXER_BYTE_COUNT();
					uint8_t r = rs;
					INPUT(GPR_T, ra);
					while(n>0)
					{ OUTPUT(GPR_T,r);
						n-=4;
						r = (r + 1) & 31;
					}
				}

				*/
				template <
#line 38 "ppc.isa"
				class
#line 80760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80763 "powerpc.tcc"
				>

				void
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 80770 "powerpc.tcc"
				>::initialize_operands()
				{
#line 921 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra); // target address
						INPUT(GPR_T, rd);
						INPUT(IMM_T, nb);
					}
#line 80779 "powerpc.tcc"
				}
				//Load string
				template <
#line 38 "ppc.isa"
				class
#line 80785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80788 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 80792 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 80796 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 80800 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 80803 "powerpc.tcc"
				)
				{
#line 71 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 80808 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80813 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80816 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 80820 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 80824 "powerpc.tcc"
				>::memory_access_size()
				{
#line 162 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 80829 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80834 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80837 "powerpc.tcc"
				>
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 80841 "powerpc.tcc"
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 80845 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 80849 "powerpc.tcc"
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 80852 "powerpc.tcc"
				)
				{
#line 216 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return nb ? nb : 32; }
#line 80857 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 80863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80866 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 80871 "powerpc.tcc"
				> *DecodeOpLswi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLswi<
#line 38 "ppc.isa"
					CONFIG
#line 80877 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 80884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80887 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 80891 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 80895 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 80899 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 80902 "powerpc.tcc"
				)
				{
#line 669 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/*	if(rd == ra ||
						rd == rb ||
						(rd == 0 && ra == 0)) throw IllegalInstructionException<CONFIG>();

						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = cpu->GetXER_BYTE_COUNT();
						int r = rd - 1;
						int i = -8;
						uint8_t v;

						while(n > 0)
						{
							if(i < 0)
							{
								i = 24;
								r = (r + 1) & 31;
								cpu->SetGPR(r, 0);
							}

							//cpu->ReadMemory8(ea, v);
							//cpu->SetGPR(r, cpu->GetGPR(r) | ((uint32_t) v << i));
							i -= 8;
							ea++;
							n--;
						}*/
						if(rd == ra ||
						rd == rb ||
						(rd == 0 && ra == 0)) throw IllegalInstructionException<CONFIG>();

						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = cpu->GetXER_BYTE_COUNT();
						unsigned int r = rd;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntLoadMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 80955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 80960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 80963 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 80967 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 80971 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 80975 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 80978 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 80982 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 80985 "powerpc.tcc"
				)
				{
#line 718 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lswx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 80997 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81005 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 81012 "powerpc.tcc"
				>::initialize_function()
				{
#line 334 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadString; }
#line 81017 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81022 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81025 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 81032 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 208 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 81037 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81045 "powerpc.tcc"
				>

				void
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 81052 "powerpc.tcc"
				>::initialize_operands()
				{
#line 933 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 81061 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81066 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81069 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 81073 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 81077 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 81081 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 81084 "powerpc.tcc"
				)
				{
#line 72 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 81089 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81094 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81097 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 81101 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 81105 "powerpc.tcc"
				>::memory_access_size()
				{
#line 163 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 81110 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81118 "powerpc.tcc"
				>
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 81122 "powerpc.tcc"
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 81126 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 81130 "powerpc.tcc"
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 81133 "powerpc.tcc"
				)
				{
#line 217 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetXER(); }
#line 81138 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81147 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81152 "powerpc.tcc"
				> *DecodeOpLswx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLswx<
#line 38 "ppc.isa"
					CONFIG
#line 81158 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 81165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81168 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 81172 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 81176 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 81180 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 81183 "powerpc.tcc"
				)
				{
#line 728 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/*	typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = nb ? nb : 32;
						uint8_t r = rs;
						int i = 24;
						while(n > 0)
						{
							if(i < 0)
							{
								i = 24;
								r = (r + 1) & 31;
							}

							//cpu->WriteMemory8(ea, cpu->GetGPR(r) >> i);

							i -= 8;
							ea++;
							n--;
						}*/
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = nb ? nb : 32;
						unsigned int r = rs;
						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntStoreMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 81224 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81229 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81232 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 81236 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 81240 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 81244 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 81247 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 81251 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 81254 "powerpc.tcc"
				)
				{
#line 765 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stswi r" << rs << ", r" << ra << ", " << nb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) : 0;
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 81266 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81271 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81274 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 81281 "powerpc.tcc"
				>::initialize_function()
				{
#line 335 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreStringImm; }
#line 81286 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81294 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 81301 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 81306 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81314 "powerpc.tcc"
				>

				void
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 81321 "powerpc.tcc"
				>::initialize_operands()
				{
#line 927 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rs);
						INPUT(IMM_T, nb);
					}
#line 81330 "powerpc.tcc"
				}
				//Store string
				template <
#line 38 "ppc.isa"
				class
#line 81336 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81339 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 81343 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 81347 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 81351 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 81354 "powerpc.tcc"
				)
				{
#line 101 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 81359 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81367 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 81371 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 81375 "powerpc.tcc"
				>::memory_access_size()
				{
#line 164 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 81380 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81385 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81388 "powerpc.tcc"
				>
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 81392 "powerpc.tcc"
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 81396 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 81400 "powerpc.tcc"
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 81403 "powerpc.tcc"
				)
				{
#line 218 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return nb ? nb : 32; }
#line 81408 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81417 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81422 "powerpc.tcc"
				> *DecodeOpStswi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStswi<
#line 38 "ppc.isa"
					CONFIG
#line 81428 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 81435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81438 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 81442 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 81446 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 81450 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 81453 "powerpc.tcc"
				)
				{
#line 775 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/*	typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = cpu->GetXER_BYTE_COUNT();
						uint8_t r = rs;
						int i = 24;

						while(n > 0)
						{
							if(i < 0)
							{
								i = 24;
								r = (r + 1) & 31;
							}

							//cpu->WriteMemory8(ea, cpu->GetGPR(r) >> i);

							i -= 8;
							ea++;
							n--;
						}*/
						typename CONFIG::address_t ea = ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb);

						if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint8_t n = cpu->GetXER_BYTE_COUNT();
						unsigned int r = rs;

						while(n > 0)
						{
							uint32_t sz = (n > 4) ? 4 : n;
							cpu->IntStoreMSBFirst(r, ea, sz);
							r = (r + 1) & 31;
							ea += sz;
							n -= sz;
						}
					}
#line 81496 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81501 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81504 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 81508 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 81512 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 81516 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 81519 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 81523 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 81526 "powerpc.tcc"
				)
				{
#line 814 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stswx r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 81538 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81546 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 81553 "powerpc.tcc"
				>::initialize_function()
				{
#line 336 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreString; }
#line 81558 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81563 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81566 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 81573 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 210 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 81578 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81586 "powerpc.tcc"
				>

				void
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 81593 "powerpc.tcc"
				>::initialize_operands()
				{
#line 939 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 81602 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81607 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81610 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 81614 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 81618 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 81622 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 81625 "powerpc.tcc"
				)
				{
#line 102 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 81630 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81635 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81638 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 81642 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 81646 "powerpc.tcc"
				>::memory_access_size()
				{
#line 165 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 81651 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81656 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81659 "powerpc.tcc"
				>
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 81663 "powerpc.tcc"
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 81667 "powerpc.tcc"
				>::loadstore_string_numbyte(
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 81671 "powerpc.tcc"
#line 209 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 81674 "powerpc.tcc"
				)
				{
#line 219 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetXER(); }
#line 81679 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81688 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81693 "powerpc.tcc"
				> *DecodeOpStswx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStswx<
#line 38 "ppc.isa"
					CONFIG
#line 81699 "powerpc.tcc"
					>(code, addr);
				}

				/*******************************************

				INTEGER LOAD STORE MULTIPLE INSTRUCTIONS

				*******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 81711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81714 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 81718 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 81722 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 81726 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 81729 "powerpc.tcc"
				)
				{
#line 830 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/*	if(ra >= rd) throw IllegalInstructionException<CONFIG>();
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t _r;
						uint32_t v;
						for(_r = rd; _r<32; _r++)
						{
							//cpu->ReadMemory32(ea, v);
							//cpu->SetGPR(_r, v);
							ea = ea + 4;
						}*/
						if(ra >= rd) throw IllegalInstructionException<CONFIG>();
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r;
						for(r = rd; r < 32; r++)
						{
							cpu->Int32Load(r, ea);
							ea = ea + 4;
						}
					}
#line 81759 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81767 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 81771 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 81775 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 81779 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 81782 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 81786 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 81789 "powerpc.tcc"
				)
				{
#line 856 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lmw r" << rd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 81801 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81809 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 81816 "powerpc.tcc"
				>::initialize_function()
				{
#line 332 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadMultiple; }
#line 81821 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81829 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 81836 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 211 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 81841 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81849 "powerpc.tcc"
				>

				void
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 81856 "powerpc.tcc"
				>::initialize_operands()
				{
#line 205 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						for(int i=rd; i<32; i++)
						{ OUTPUT(GPR_T, i);
						}
					}
#line 81866 "powerpc.tcc"
				}
				//Load multiple
				template <
#line 38 "ppc.isa"
				class
#line 81872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81875 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 81879 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 81883 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 81887 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 81890 "powerpc.tcc"
				)
				{
#line 69 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 81895 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81903 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 81907 "powerpc.tcc"
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 81911 "powerpc.tcc"
				>::memory_access_size()
				{
#line 166 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 81916 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 81922 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81925 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 81930 "powerpc.tcc"
				> *DecodeOpLmw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLmw<
#line 38 "ppc.isa"
					CONFIG
#line 81936 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 81943 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81946 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 81950 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 81954 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 81958 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 81961 "powerpc.tcc"
				)
				{
#line 866 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/*	typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						uint32_t _r;

						for(_r = rs; _r<32; _r++)
						{
							//cpu->WriteMemory32(ea, cpu->GetGPR(_r));
							ea = ea + 4;
						}*/
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

						unsigned int r;

						for(r = rs; r < 32; r++)
						{
							cpu->Int32Store(r, ea);
							ea = ea + 4;
						}
					}
#line 81989 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 81994 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 81997 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 82001 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 82005 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 82009 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 82012 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 82016 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 82019 "powerpc.tcc"
				)
				{
#line 890 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stmw r" << rs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 82031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82039 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 82046 "powerpc.tcc"
				>::initialize_function()
				{
#line 337 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreMultiple; }
#line 82051 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82059 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 82066 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 212 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 82071 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82076 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82079 "powerpc.tcc"
				>

				void
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 82086 "powerpc.tcc"
				>::initialize_operands()
				{
#line 213 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						for(int i=rs; i<32; i++)
						{ INPUT(GPR_T, i);
						}
					}
#line 82096 "powerpc.tcc"
				}
				//Store multiple
				template <
#line 38 "ppc.isa"
				class
#line 82102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82105 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 82109 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 82113 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 82117 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 82120 "powerpc.tcc"
				)
				{
#line 99 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 82125 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82130 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82133 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 82137 "powerpc.tcc"
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 82141 "powerpc.tcc"
				>::memory_access_size()
				{
#line 167 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 82146 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82152 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82155 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82160 "powerpc.tcc"
				> *DecodeOpStmw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStmw<
#line 38 "ppc.isa"
					CONFIG
#line 82166 "powerpc.tcc"
					>(code, addr);
				}

				/**********************************

				FLOATING POINT LOAD INSTRUCTIONS

				**********************************/
				template <
#line 38 "ppc.isa"
				class
#line 82178 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82181 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 82185 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 82189 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 82193 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 82196 "powerpc.tcc"
				)
				{
#line 906 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// check if FPU is available
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
					}
#line 82218 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82223 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82226 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 82230 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 82234 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 82238 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 82241 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 82245 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 82248 "powerpc.tcc"
				)
				{
#line 924 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfd f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 82260 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82268 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 82275 "powerpc.tcc"
				>::initialize_function()
				{
#line 338 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 82280 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82285 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82288 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 82295 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 213 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82300 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82308 "powerpc.tcc"
				>

				void
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 82315 "powerpc.tcc"
				>::initialize_operands()
				{
#line 287 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 82323 "powerpc.tcc"
				}
				//Load float
				template <
#line 38 "ppc.isa"
				class
#line 82329 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82332 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 82336 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 82340 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 82344 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 82347 "powerpc.tcc"
				)
				{
#line 74 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 82352 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82360 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 82364 "powerpc.tcc"
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 82368 "powerpc.tcc"
				>::memory_access_size()
				{
#line 168 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 82373 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82379 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82382 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82387 "powerpc.tcc"
				> *DecodeOpLfd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfd<
#line 38 "ppc.isa"
					CONFIG
#line 82393 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 82400 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82403 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 82407 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 82411 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 82415 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 82418 "powerpc.tcc"
				)
				{
#line 934 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 82442 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82447 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82450 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 82454 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 82458 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 82462 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 82465 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 82469 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 82472 "powerpc.tcc"
				)
				{
#line 954 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdu f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 82484 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82492 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 82499 "powerpc.tcc"
				>::initialize_function()
				{
#line 339 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 82504 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82509 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82512 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 82519 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 214 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82524 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82529 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82532 "powerpc.tcc"
				>

				void
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 82539 "powerpc.tcc"
				>::initialize_operands()
				{
#line 293 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 82547 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82555 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 82559 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 82563 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 82567 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 82570 "powerpc.tcc"
				)
				{
#line 75 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 82575 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82583 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 82587 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 82591 "powerpc.tcc"
				>::memory_access_size()
				{
#line 169 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 82596 "powerpc.tcc"
				}
				// Floating point LOADS with update
				template <
#line 38 "ppc.isa"
				class
#line 82602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82605 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 82609 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 82613 "powerpc.tcc"
				>::is_splitted()
				{
#line 527 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 82620 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82628 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 82632 "powerpc.tcc"
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 82636 "powerpc.tcc"
				>::split_into()
				{
#line 530 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfd_ctype=0;
						lfd_ctype = 50 << 26;
						lfd_ctype = lfd_ctype | (fd << 21);
						lfd_ctype = lfd_ctype | (ra << 16);
						lfd_ctype = lfd_ctype | (d & 0xffff);
						l.push_back( new OpLfd<CONFIG>(lfd_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 82657 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82666 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82671 "powerpc.tcc"
				> *DecodeOpLfdu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdu<
#line 38 "ppc.isa"
					CONFIG
#line 82677 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 82684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82687 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 82691 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 82695 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 82699 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 82702 "powerpc.tcc"
				)
				{
#line 964 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 82725 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82733 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 82737 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 82741 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 82745 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 82748 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 82752 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 82755 "powerpc.tcc"
				)
				{
#line 983 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdux f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 82767 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82772 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82775 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 82782 "powerpc.tcc"
				>::initialize_function()
				{
#line 340 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 82787 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82792 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82795 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 82802 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 215 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 82807 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82812 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82815 "powerpc.tcc"
				>

				void
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 82822 "powerpc.tcc"
				>::initialize_operands()
				{
#line 513 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 82831 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82836 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82839 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 82843 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 82847 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 82851 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 82854 "powerpc.tcc"
				)
				{
#line 76 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 82859 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82864 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82867 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 82871 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 82875 "powerpc.tcc"
				>::memory_access_size()
				{
#line 170 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 82880 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82888 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 82892 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 82896 "powerpc.tcc"
				>::is_splitted()
				{
#line 548 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 82903 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 82908 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82911 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 82915 "powerpc.tcc"
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 82919 "powerpc.tcc"
				>::split_into()
				{
#line 551 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfdx_ctype=0;
						lfdx_ctype = 50 << 26;
						lfdx_ctype = lfdx_ctype | (fd << 21);
						lfdx_ctype = lfdx_ctype | (ra << 16);
						lfdx_ctype = lfdx_ctype | (rb << 11);
						lfdx_ctype = lfdx_ctype | (599 << 1);
						l.push_back( new OpLfdx<CONFIG>(lfdx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 82942 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 82948 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82951 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 82956 "powerpc.tcc"
				> *DecodeOpLfdux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdux<
#line 38 "ppc.isa"
					CONFIG
#line 82962 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 82969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 82972 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 82976 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 82980 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 82984 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 82987 "powerpc.tcc"
				)
				{
#line 993 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp64Load(fd, ea);
					}
#line 83009 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83014 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83017 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 83021 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 83025 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 83029 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 83032 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 83036 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 83039 "powerpc.tcc"
				)
				{
#line 1011 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfdx f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 83051 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83059 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 83066 "powerpc.tcc"
				>::initialize_function()
				{
#line 341 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 83071 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83076 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83079 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 83086 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 216 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83091 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83096 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83099 "powerpc.tcc"
				>

				void
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 83106 "powerpc.tcc"
				>::initialize_operands()
				{
#line 506 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 83115 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83120 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83123 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 83127 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 83131 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 83135 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 83138 "powerpc.tcc"
				)
				{
#line 77 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 83143 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83151 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 83155 "powerpc.tcc"
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 83159 "powerpc.tcc"
				>::memory_access_size()
				{
#line 171 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 83164 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83170 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83173 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83178 "powerpc.tcc"
				> *DecodeOpLfdx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfdx<
#line 38 "ppc.isa"
					CONFIG
#line 83184 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83191 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83194 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 83198 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 83202 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 83206 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 83209 "powerpc.tcc"
				)
				{
#line 1021 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
					}
#line 83231 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83239 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 83243 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 83247 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 83251 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 83254 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 83258 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 83261 "powerpc.tcc"
				)
				{
#line 1039 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfs f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 83273 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83281 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 83288 "powerpc.tcc"
				>::initialize_function()
				{
#line 342 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 83293 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83301 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 83308 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 217 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83313 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83318 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83321 "powerpc.tcc"
				>

				void
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 83328 "powerpc.tcc"
				>::initialize_operands()
				{
#line 287 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 83336 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83341 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83344 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 83348 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 83352 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 83356 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 83359 "powerpc.tcc"
				)
				{
#line 78 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 83364 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83372 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 83376 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 83380 "powerpc.tcc"
				>::memory_access_size()
				{
#line 172 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 83385 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83393 "powerpc.tcc"
				>
#line 745 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 83397 "powerpc.tcc"
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 83401 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 749 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 83406 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83412 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83415 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83420 "powerpc.tcc"
				> *DecodeOpLfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfs<
#line 38 "ppc.isa"
					CONFIG
#line 83426 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83433 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83436 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 83440 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 83444 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 83448 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 83451 "powerpc.tcc"
				)
				{
#line 1049 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}
						// do the memory access
						cpu->Fp32Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 83475 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83480 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83483 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 83487 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 83491 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 83495 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 83498 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 83502 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 83505 "powerpc.tcc"
				)
				{
#line 1069 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsu f" << fd << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 83517 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83522 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83525 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 83532 "powerpc.tcc"
				>::initialize_function()
				{
#line 343 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 83537 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83542 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83545 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 83552 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 218 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83557 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83562 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83565 "powerpc.tcc"
				>

				void
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 83572 "powerpc.tcc"
				>::initialize_operands()
				{
#line 293 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
					}
#line 83580 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83585 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83588 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 83592 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 83596 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 83600 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 83603 "powerpc.tcc"
				)
				{
#line 79 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 83608 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83616 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 83620 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 83624 "powerpc.tcc"
				>::memory_access_size()
				{
#line 173 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 83629 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83637 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 83641 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 83645 "powerpc.tcc"
				>::is_splitted()
				{
#line 571 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 83652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83660 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 83664 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 83668 "powerpc.tcc"
				>::split_into()
				{
#line 574 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfs_ctype=0;
						lfs_ctype = 50 << 26;
						lfs_ctype = lfs_ctype | (fd << 21);
						lfs_ctype = lfs_ctype | (ra << 16);
						lfs_ctype = lfs_ctype | (d & 0xffff);
						l.push_back( new OpLfs<CONFIG>(lfs_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 83689 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83694 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83697 "powerpc.tcc"
				>
#line 745 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 83701 "powerpc.tcc"
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 83705 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 750 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 83710 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83719 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 83724 "powerpc.tcc"
				> *DecodeOpLfsu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsu<
#line 38 "ppc.isa"
					CONFIG
#line 83730 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 83737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83740 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 83744 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 83748 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 83752 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 83755 "powerpc.tcc"
				)
				{
#line 1079 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 83779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83787 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 83791 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 83795 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 83799 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 83802 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 83806 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 83809 "powerpc.tcc"
				)
				{
#line 1099 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsux f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 83821 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83829 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 83836 "powerpc.tcc"
				>::initialize_function()
				{
#line 344 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 83841 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83846 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83849 "powerpc.tcc"
				>

				void
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 83856 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 219 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 83861 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83869 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 83873 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 83877 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 83881 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 83884 "powerpc.tcc"
				)
				{
#line 80 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 83889 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83897 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 83901 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 83905 "powerpc.tcc"
				>::memory_access_size()
				{
#line 174 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 83910 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83918 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 83922 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 83926 "powerpc.tcc"
				>::is_splitted()
				{
#line 592 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 83933 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83941 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 83945 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 83949 "powerpc.tcc"
				>::split_into()
				{
#line 595 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType lfsx_ctype=0;
						lfsx_ctype = 50 << 26;
						lfsx_ctype = lfsx_ctype | (fd << 21);
						lfsx_ctype = lfsx_ctype | (ra << 16);
						lfsx_ctype = lfsx_ctype | (rb << 11);
						lfsx_ctype = lfsx_ctype | (535 << 1);
						l.push_back( new OpLfsx<CONFIG>(lfsx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 83972 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 83977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 83980 "powerpc.tcc"
				>
#line 745 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 83984 "powerpc.tcc"
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 83988 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 751 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 83993 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 83999 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84002 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84007 "powerpc.tcc"
				> *DecodeOpLfsux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsux<
#line 38 "ppc.isa"
					CONFIG
#line 84013 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84020 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84023 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 84027 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 84031 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 84035 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 84038 "powerpc.tcc"
				)
				{
#line 1109 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						// do the memory access
						cpu->Fp32Load(fd, ea);
					}
#line 84060 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84065 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84068 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 84072 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 84076 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 84080 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 84083 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 84087 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 84090 "powerpc.tcc"
				)
				{
#line 1127 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lfsx f" << fd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 84102 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84107 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84110 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 84117 "powerpc.tcc"
				>::initialize_function()
				{
#line 345 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoadFloat; }
#line 84122 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84127 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84130 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 84137 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 220 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84142 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84147 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84150 "powerpc.tcc"
				>

				void
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 84157 "powerpc.tcc"
				>::initialize_operands()
				{
#line 506 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(FPR_T, fd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 84166 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84171 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84174 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 84178 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 84182 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 84186 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 84189 "powerpc.tcc"
				)
				{
#line 81 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fd; }
#line 84194 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84202 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 84206 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 84210 "powerpc.tcc"
				>::memory_access_size()
				{
#line 175 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 84215 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84220 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84223 "powerpc.tcc"
				>
#line 745 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 84227 "powerpc.tcc"
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 84231 "powerpc.tcc"
				>::load_need_conversion()
				{
#line 752 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 84236 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84245 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84250 "powerpc.tcc"
				> *DecodeOpLfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLfsx<
#line 38 "ppc.isa"
					CONFIG
#line 84256 "powerpc.tcc"
					>(code, addr);
				}

				/***********************************

				FLOATING POINT STORE INSTRUCTIONS

				***********************************/
				template <
#line 38 "ppc.isa"
				class
#line 84268 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84271 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 84275 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 84279 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 84283 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 84286 "powerpc.tcc"
				)
				{
#line 1143 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
					}
#line 84307 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84312 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84315 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 84319 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 84323 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 84327 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 84330 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 84334 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 84337 "powerpc.tcc"
				)
				{
#line 1160 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfd f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 84349 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84357 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 84364 "powerpc.tcc"
				>::initialize_function()
				{
#line 346 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 84369 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84377 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 84384 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 221 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84389 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84397 "powerpc.tcc"
				>

				void
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 84404 "powerpc.tcc"
				>::initialize_operands()
				{
#line 358 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 84412 "powerpc.tcc"
				}
				//Store float
				template <
#line 38 "ppc.isa"
				class
#line 84418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84421 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 84425 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 84429 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 84433 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 84436 "powerpc.tcc"
				)
				{
#line 104 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 84441 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84449 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 84453 "powerpc.tcc"
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 84457 "powerpc.tcc"
				>::memory_access_size()
				{
#line 176 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 84462 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84468 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84471 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84476 "powerpc.tcc"
				> *DecodeOpStfd(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfd<
#line 38 "ppc.isa"
					CONFIG
#line 84482 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84492 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 84496 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 84500 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 84504 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 84507 "powerpc.tcc"
				)
				{
#line 1170 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 84531 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84536 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84539 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 84543 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 84547 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 84551 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 84554 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 84558 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 84561 "powerpc.tcc"
				)
				{
#line 1190 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdu f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 84573 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84581 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 84588 "powerpc.tcc"
				>::initialize_function()
				{
#line 347 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 84593 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84598 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84601 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 84608 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 222 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84613 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84618 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84621 "powerpc.tcc"
				>

				void
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 84628 "powerpc.tcc"
				>::initialize_operands()
				{
#line 364 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 84636 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84641 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84644 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 84648 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 84652 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 84656 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 84659 "powerpc.tcc"
				)
				{
#line 105 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 84664 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84669 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84672 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 84676 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 84680 "powerpc.tcc"
				>::memory_access_size()
				{
#line 177 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 84685 "powerpc.tcc"
				}
				// Floating point stores with update
				template <
#line 38 "ppc.isa"
				class
#line 84691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84694 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 84698 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 84702 "powerpc.tcc"
				>::is_splitted()
				{
#line 616 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 84709 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84717 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 84721 "powerpc.tcc"
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 84725 "powerpc.tcc"
				>::split_into()
				{
#line 619 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfd_ctype=0;
						stfd_ctype = 54 << 26;
						stfd_ctype = stfd_ctype | (fs << 21);
						stfd_ctype = stfd_ctype | (ra << 16);
						stfd_ctype = stfd_ctype | (d & 0xffff);
						l.push_back( new OpStfd<CONFIG>(stfd_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 84746 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 84752 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84755 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 84760 "powerpc.tcc"
				> *DecodeOpStfdu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdu<
#line 38 "ppc.isa"
					CONFIG
#line 84766 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 84773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84776 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 84780 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 84784 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 84788 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 84791 "powerpc.tcc"
				)
				{
#line 1200 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 84815 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84823 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 84827 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 84831 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 84835 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 84838 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 84842 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 84845 "powerpc.tcc"
				)
				{
#line 1220 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdux f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 84857 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84865 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 84872 "powerpc.tcc"
				>::initialize_function()
				{
#line 348 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 84877 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84885 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 84892 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 223 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 84897 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84902 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84905 "powerpc.tcc"
				>

				void
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 84912 "powerpc.tcc"
				>::initialize_operands()
				{
#line 433 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 84921 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84926 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84929 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 84933 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 84937 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 84941 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 84944 "powerpc.tcc"
				)
				{
#line 106 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 84949 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84954 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84957 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 84961 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 84965 "powerpc.tcc"
				>::memory_access_size()
				{
#line 178 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 84970 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84975 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 84978 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 84982 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 84986 "powerpc.tcc"
				>::is_splitted()
				{
#line 637 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 84993 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 84998 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85001 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 85005 "powerpc.tcc"
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 85009 "powerpc.tcc"
				>::split_into()
				{
#line 640 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfdx_ctype=0;
						stfdx_ctype = 31 << 26;
						stfdx_ctype = stfdx_ctype | (fs << 21);
						stfdx_ctype = stfdx_ctype | (ra << 16);
						stfdx_ctype = stfdx_ctype | (rb << 11);
						stfdx_ctype = stfdx_ctype | (727 << 1);
						l.push_back( new OpStfdx<CONFIG>(stfdx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 85032 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 85038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85041 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 85046 "powerpc.tcc"
				> *DecodeOpStfdux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdux<
#line 38 "ppc.isa"
					CONFIG
#line 85052 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 85059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85062 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 85066 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 85070 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 85074 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 85077 "powerpc.tcc"
				)
				{
#line 1230 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp64Store(fs, ea);
					}
#line 85097 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85102 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85105 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 85109 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 85113 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 85117 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 85120 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 85124 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 85127 "powerpc.tcc"
				)
				{
#line 1246 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfdx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 85139 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85147 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 85154 "powerpc.tcc"
				>::initialize_function()
				{
#line 349 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 85159 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85167 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 85174 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 224 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 85179 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85184 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85187 "powerpc.tcc"
				>

				void
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 85194 "powerpc.tcc"
				>::initialize_operands()
				{
#line 426 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 85203 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85208 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85211 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 85215 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 85219 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 85223 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 85226 "powerpc.tcc"
				)
				{
#line 107 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 85231 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85239 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 85243 "powerpc.tcc"
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 85247 "powerpc.tcc"
				>::memory_access_size()
				{
#line 179 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 8; }
#line 85252 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 85258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85261 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 85266 "powerpc.tcc"
				> *DecodeOpStfdx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfdx<
#line 38 "ppc.isa"
					CONFIG
#line 85272 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 85279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85282 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 85286 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 85290 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 85294 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 85297 "powerpc.tcc"
				)
				{
#line 1256 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->FpStoreLSW(fs, ea);
					}
#line 85317 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85325 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 85329 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 85333 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 85337 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 85340 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 85344 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 85347 "powerpc.tcc"
				)
				{
#line 1272 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfiwx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 85359 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85367 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 85374 "powerpc.tcc"
				>::initialize_function()
				{
#line 350 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 85379 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85387 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 85394 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 225 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 85399 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85407 "powerpc.tcc"
				>

				void
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 85414 "powerpc.tcc"
				>::initialize_operands()
				{
#line 426 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 85423 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85431 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 85435 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 85439 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 85443 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 85446 "powerpc.tcc"
				)
				{
#line 108 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 85451 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85456 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85459 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 85463 "powerpc.tcc"
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 85467 "powerpc.tcc"
				>::memory_access_size()
				{
#line 180 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 85472 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 85478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85481 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 85486 "powerpc.tcc"
				> *DecodeOpStfiwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfiwx<
#line 38 "ppc.isa"
					CONFIG
#line 85492 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 85499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85502 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 85506 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 85510 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 85514 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 85517 "powerpc.tcc"
				)
				{
#line 1282 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
					}
#line 85536 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85541 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85544 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 85548 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 85552 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 85556 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 85559 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 85563 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 85566 "powerpc.tcc"
				)
				{
#line 1297 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfs f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 85578 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85583 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85586 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 85593 "powerpc.tcc"
				>::initialize_function()
				{
#line 351 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 85598 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85603 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85606 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 85613 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 226 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 85618 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85623 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85626 "powerpc.tcc"
				>

				void
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 85633 "powerpc.tcc"
				>::initialize_operands()
				{
#line 358 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 85641 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85646 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85649 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 85653 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 85657 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 85661 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 85664 "powerpc.tcc"
				)
				{
#line 109 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 85669 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85677 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 85681 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 85685 "powerpc.tcc"
				>::memory_access_size()
				{
#line 181 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 85690 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85695 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85698 "powerpc.tcc"
				>
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 85702 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 85706 "powerpc.tcc"
				>::get_single(
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 85710 "powerpc.tcc"
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 85713 "powerpc.tcc"
				)
				{
#line 714 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetFp32(fs); }
#line 85718 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85726 "powerpc.tcc"
				>
#line 733 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 85730 "powerpc.tcc"
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 85734 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 737 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 85739 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 85745 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85748 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 85753 "powerpc.tcc"
				> *DecodeOpStfs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfs<
#line 38 "ppc.isa"
					CONFIG
#line 85759 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 85766 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85769 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 85773 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 85777 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 85781 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 85784 "powerpc.tcc"
				)
				{
#line 1307 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 85807 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85812 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85815 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 85819 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 85823 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 85827 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 85830 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 85834 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 85837 "powerpc.tcc"
				)
				{
#line 1326 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsu f" << fs << ", " << d << "(r" << ra << ")";
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + d);
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 85849 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85857 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 85864 "powerpc.tcc"
				>::initialize_function()
				{
#line 352 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 85869 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85877 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 85884 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 227 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 85889 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85897 "powerpc.tcc"
				>

				void
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 85904 "powerpc.tcc"
				>::initialize_operands()
				{
#line 364 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
					}
#line 85912 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85917 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85920 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 85924 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 85928 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 85932 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 85935 "powerpc.tcc"
				)
				{
#line 110 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 85940 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85945 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85948 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 85952 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 85956 "powerpc.tcc"
				>::memory_access_size()
				{
#line 182 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 85961 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85969 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 85973 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 85977 "powerpc.tcc"
				>::is_splitted()
				{
#line 660 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 85984 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 85989 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 85992 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 85996 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 86000 "powerpc.tcc"
				>::split_into()
				{
#line 663 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfs_ctype=0;
						stfs_ctype = 52 << 26;
						stfs_ctype = stfs_ctype | (fs << 21);
						stfs_ctype = stfs_ctype | (ra << 16);
						stfs_ctype = stfs_ctype | (d & 0xffff);
						l.push_back( new OpStfs<CONFIG>(stfs_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType addi_ctype=0;
						addi_ctype = 14 << 26;
						addi_ctype = addi_ctype | (ra << 21);
						addi_ctype = addi_ctype | (ra << 16);
						addi_ctype = addi_ctype | (d & 0xffff);
						l.push_back( new OpAddi<CONFIG>(addi_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 86021 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86026 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86029 "powerpc.tcc"
				>
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 86033 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 86037 "powerpc.tcc"
				>::get_single(
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 86041 "powerpc.tcc"
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 86044 "powerpc.tcc"
				)
				{
#line 715 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetFp32(fs); }
#line 86049 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86054 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86057 "powerpc.tcc"
				>
#line 733 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 86061 "powerpc.tcc"
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 86065 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 738 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 86070 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86076 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86079 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86084 "powerpc.tcc"
				> *DecodeOpStfsu(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsu<
#line 38 "ppc.isa"
					CONFIG
#line 86090 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 86097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86100 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 86104 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 86108 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 86112 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 86115 "powerpc.tcc"
				)
				{
#line 1336 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(ra == 0) throw IllegalInstructionException<CONFIG>();
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
						// update the address register
						cpu->SetGPR(ra, ea);
					}
#line 86138 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86143 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86146 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 86150 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 86154 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 86158 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 86161 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 86165 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 86168 "powerpc.tcc"
				)
				{
#line 1355 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsux f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (cpu->GetGPR(ra) + cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 86180 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86185 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86188 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 86195 "powerpc.tcc"
				>::initialize_function()
				{
#line 353 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 86200 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86208 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 86215 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 228 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 86220 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86225 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86228 "powerpc.tcc"
				>

				void
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 86235 "powerpc.tcc"
				>::initialize_operands()
				{
#line 433 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 86244 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86252 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 86256 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 86260 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 86264 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 86267 "powerpc.tcc"
				)
				{
#line 111 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 86272 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86280 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 86284 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 86288 "powerpc.tcc"
				>::memory_access_size()
				{
#line 183 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 86293 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86301 "powerpc.tcc"
				>
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 86305 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 86309 "powerpc.tcc"
				>::is_splitted()
				{
#line 681 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						return true;
					}
#line 86316 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86324 "powerpc.tcc"
				>
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				list <Operation<CONFIG> *>
#line 86328 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 86332 "powerpc.tcc"
				>::split_into()
				{
#line 684 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{
						list<Operation<CONFIG> *> l;
						CodeType stfsx_ctype=0;
						stfsx_ctype = 31 << 26;
						stfsx_ctype = stfsx_ctype | (fs << 21);
						stfsx_ctype = stfsx_ctype | (ra << 16);
						stfsx_ctype = stfsx_ctype | (rb << 11);
						stfsx_ctype = stfsx_ctype | (663 << 1);
						l.push_back( new OpStfsx<CONFIG>(stfsx_ctype,Operation<CONFIG>::GetAddr()) );

						CodeType add_ctype=0;
						add_ctype = 31 << 26;
						add_ctype = add_ctype | (ra << 21);
						add_ctype = add_ctype | (ra << 16);
						add_ctype = add_ctype | (rb << 11);
						add_ctype = add_ctype | (266 << 1);
						l.push_back( new OpAdd<CONFIG>(add_ctype,Operation<CONFIG>::GetAddr()) );
						return l;
					}
#line 86355 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86363 "powerpc.tcc"
				>
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 86367 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 86371 "powerpc.tcc"
				>::get_single(
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 86375 "powerpc.tcc"
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 86378 "powerpc.tcc"
				)
				{
#line 716 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetFp32(fs); }
#line 86383 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86388 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86391 "powerpc.tcc"
				>
#line 733 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 86395 "powerpc.tcc"
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 86399 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 739 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 86404 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86413 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86418 "powerpc.tcc"
				> *DecodeOpStfsux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsux<
#line 38 "ppc.isa"
					CONFIG
#line 86424 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 86431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86434 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 86438 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 86442 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 86446 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 86449 "powerpc.tcc"
				)
				{
#line 1365 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!cpu->GetMSR_FP())
						{
							throw FloatingPointUnavailableException<CONFIG>();
						}

						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						// check alignment
						if(ea & 3)
						{
							if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
						}

						cpu->Fp32Store(fs, ea);
					}
#line 86469 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86474 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86477 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 86481 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 86485 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 86489 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 86492 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 86496 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 86499 "powerpc.tcc"
				)
				{
#line 1381 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stfsx f" << fs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 86511 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86516 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86519 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 86526 "powerpc.tcc"
				>::initialize_function()
				{
#line 354 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreFloat; }
#line 86531 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86536 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86539 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 86546 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 229 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 86551 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86559 "powerpc.tcc"
				>

				void
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 86566 "powerpc.tcc"
				>::initialize_operands()
				{
#line 426 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(FPR_T, fs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 86575 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86580 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86583 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 86587 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 86591 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 86595 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 86598 "powerpc.tcc"
				)
				{
#line 112 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return fs; }
#line 86603 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86611 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 86615 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 86619 "powerpc.tcc"
				>::memory_access_size()
				{
#line 184 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 86624 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86632 "powerpc.tcc"
				>
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				uint32_t
#line 86636 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 86640 "powerpc.tcc"
				>::get_single(
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 86644 "powerpc.tcc"
#line 707 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 86647 "powerpc.tcc"
				)
				{
#line 717 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return cpu->GetFp32(fs); }
#line 86652 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86657 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86660 "powerpc.tcc"
				>
#line 733 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				bool
#line 86664 "powerpc.tcc"
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 86668 "powerpc.tcc"
				>::store_need_conversion()
				{
#line 740 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return true; }
#line 86673 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86682 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86687 "powerpc.tcc"
				> *DecodeOpStfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStfsx<
#line 38 "ppc.isa"
					CONFIG
#line 86693 "powerpc.tcc"
					>(code, addr);
				}

				/*********************************

				CACHE MANAGEMENT INSTRUCTIONS

				*********************************/
				template <
#line 38 "ppc.isa"
				class
#line 86705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86708 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 86712 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 86716 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 86720 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 86723 "powerpc.tcc"
				)
				{
#line 1397 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcba(ea);
					}
#line 86732 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86737 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86740 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 86744 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 86748 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 86752 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 86755 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 86759 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 86762 "powerpc.tcc"
				)
				{
#line 1402 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcba r" << ra << ", r" << rb;
					}
#line 86769 "powerpc.tcc"
				}
				/** Load Store (FnLoad | FnLoadFloat | FnLoadMultiple | FnLoadSerial | FnStore | FnStoreFloat | FnStoreMultiple | FnStoreSerial | FnCache | FnCacheSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 86775 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86778 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 86785 "powerpc.tcc"
				>::initialize_function()
				{
#line 290 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBA; }
#line 86790 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86795 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86798 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 86805 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 230 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 86810 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86815 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86818 "powerpc.tcc"
				>

				void
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 86825 "powerpc.tcc"
				>::initialize_operands()
				{
#line 780 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 86833 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86841 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 86845 "powerpc.tcc"
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 86849 "powerpc.tcc"
				>::memory_access_size()
				{
#line 185 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 86854 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 86860 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86863 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 86868 "powerpc.tcc"
				> *DecodeOpDcba(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcba<
#line 38 "ppc.isa"
					CONFIG
#line 86874 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 86881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86884 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 86888 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 86892 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 86896 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 86899 "powerpc.tcc"
				)
				{
#line 1408 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbf(ea);
					}
#line 86908 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86913 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86916 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 86920 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 86924 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 86928 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 86931 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 86935 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 86938 "powerpc.tcc"
				)
				{
#line 1413 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbf r" << ra << ", r" << rb;
					}
#line 86945 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86953 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 86960 "powerpc.tcc"
				>::initialize_function()
				{
#line 291 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBF; }
#line 86965 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86970 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86973 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 86980 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 231 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(8); }
#line 86985 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 86990 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 86993 "powerpc.tcc"
				>

				void
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 87000 "powerpc.tcc"
				>::initialize_operands()
				{
#line 780 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 87008 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87016 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 87020 "powerpc.tcc"
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 87024 "powerpc.tcc"
				>::memory_access_size()
				{
#line 186 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 87029 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87035 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87038 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87043 "powerpc.tcc"
				> *DecodeOpDcbf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbf<
#line 38 "ppc.isa"
					CONFIG
#line 87049 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87059 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 87063 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 87067 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 87071 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 87074 "powerpc.tcc"
				)
				{
#line 1418 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
						cpu->Dcbi(ea);
					}
#line 87082 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87087 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87090 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 87094 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 87098 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 87102 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 87105 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 87109 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 87112 "powerpc.tcc"
				)
				{
#line 1422 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbi r" << ra << ", r" << rb;
					}
#line 87119 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87127 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 87134 "powerpc.tcc"
				>::initialize_function()
				{
#line 292 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnDataCacheBI; }
#line 87139 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87147 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 87154 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 232 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(6); }
#line 87159 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87164 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87167 "powerpc.tcc"
				>

				void
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 87174 "powerpc.tcc"
				>::initialize_operands()
				{
#line 780 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 87182 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87190 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 87194 "powerpc.tcc"
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 87198 "powerpc.tcc"
				>::memory_access_size()
				{
#line 187 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 87203 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87209 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87212 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87217 "powerpc.tcc"
				> *DecodeOpDcbi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbi<
#line 38 "ppc.isa"
					CONFIG
#line 87223 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87230 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87233 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 87237 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 87241 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 87245 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 87248 "powerpc.tcc"
				)
				{
#line 1427 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbst(ea);
					}
#line 87257 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87262 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87265 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 87269 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 87273 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 87277 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 87280 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 87284 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 87287 "powerpc.tcc"
				)
				{
#line 1432 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbst r" << ra << ", r" << rb;
					}
#line 87294 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87302 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 87309 "powerpc.tcc"
				>::initialize_function()
				{
#line 293 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 87314 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87322 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 87329 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 233 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 87334 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87339 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87342 "powerpc.tcc"
				>

				void
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 87349 "powerpc.tcc"
				>::initialize_operands()
				{
#line 780 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 87357 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87362 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87365 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 87369 "powerpc.tcc"
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 87373 "powerpc.tcc"
				>::memory_access_size()
				{
#line 188 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 87378 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87387 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87392 "powerpc.tcc"
				> *DecodeOpDcbst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbst<
#line 38 "ppc.isa"
					CONFIG
#line 87398 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87405 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87408 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 87412 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 87416 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 87420 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 87423 "powerpc.tcc"
				)
				{
#line 1437 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* this instruction has no architectural effect (software prefetching) */
					}
#line 87430 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87435 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87438 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 87442 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 87446 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 87450 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 87453 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 87457 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 87460 "powerpc.tcc"
				)
				{
#line 1440 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbt r" << ra << ", r" << rb;
					}
#line 87467 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87472 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87475 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 87482 "powerpc.tcc"
				>::initialize_function()
				{
#line 294 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCache; }
#line 87487 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87492 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87495 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 87502 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 234 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 87507 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87512 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87515 "powerpc.tcc"
				>

				void
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 87522 "powerpc.tcc"
				>::initialize_operands()
				{
#line 780 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 87530 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87538 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 87542 "powerpc.tcc"
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 87546 "powerpc.tcc"
				>::memory_access_size()
				{
#line 189 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 87551 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87557 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87560 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87565 "powerpc.tcc"
				> *DecodeOpDcbt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbt<
#line 38 "ppc.isa"
					CONFIG
#line 87571 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87581 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 87585 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 87589 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 87593 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 87596 "powerpc.tcc"
				)
				{
#line 1445 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* this instruction has no architectural effect (software prefetching) */
					}
#line 87603 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87611 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 87615 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 87619 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 87623 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 87626 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 87630 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 87633 "powerpc.tcc"
				)
				{
#line 1448 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbtst r" << ra << ", r" << rb;
					}
#line 87640 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87645 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87648 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 87655 "powerpc.tcc"
				>::initialize_function()
				{
#line 295 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCache; }
#line 87660 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87665 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87668 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 87675 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 235 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 87680 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87688 "powerpc.tcc"
				>

				void
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 87695 "powerpc.tcc"
				>::initialize_operands()
				{
#line 780 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 87703 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87711 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 87715 "powerpc.tcc"
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 87719 "powerpc.tcc"
				>::memory_access_size()
				{
#line 190 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 87724 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87733 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87738 "powerpc.tcc"
				> *DecodeOpDcbtst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbtst<
#line 38 "ppc.isa"
					CONFIG
#line 87744 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87751 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87754 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 87758 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 87762 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 87766 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 87769 "powerpc.tcc"
				)
				{
#line 1453 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						// compute the effective address
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Dcbz(ea);
					}
#line 87779 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87787 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 87791 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 87795 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 87799 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 87802 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 87806 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 87809 "powerpc.tcc"
				)
				{
#line 1459 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "dcbz r" << ra << ", r" << rb;
					}
#line 87816 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87824 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 87831 "powerpc.tcc"
				>::initialize_function()
				{
#line 296 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 87836 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87844 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 87851 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 236 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 87856 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87861 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87864 "powerpc.tcc"
				>

				void
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 87871 "powerpc.tcc"
				>::initialize_operands()
				{
#line 780 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 87879 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87884 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87887 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 87891 "powerpc.tcc"
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 87895 "powerpc.tcc"
				>::memory_access_size()
				{
#line 191 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 87900 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 87906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87909 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 87914 "powerpc.tcc"
				> *DecodeOpDcbz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDcbz<
#line 38 "ppc.isa"
					CONFIG
#line 87920 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 87927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87930 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 87934 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 87938 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 87942 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 87945 "powerpc.tcc"
				)
				{
#line 1464 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Icbi(ea);
					}
#line 87954 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87962 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 87966 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 87970 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 87974 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 87977 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 87981 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 87984 "powerpc.tcc"
				)
				{
#line 1469 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "icbi r" << ra << ", r" << rb;
					}
#line 87991 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 87996 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 87999 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 88006 "powerpc.tcc"
				>::initialize_function()
				{
#line 299 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCacheSerial; }
#line 88011 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88016 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88019 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 88026 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 237 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 88031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88039 "powerpc.tcc"
				>

				void
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 88046 "powerpc.tcc"
				>::initialize_operands()
				{
#line 780 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 88054 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88062 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 88066 "powerpc.tcc"
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 88070 "powerpc.tcc"
				>::memory_access_size()
				{
#line 192 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 88075 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88084 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88089 "powerpc.tcc"
				> *DecodeOpIcbi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpIcbi<
#line 38 "ppc.isa"
					CONFIG
#line 88095 "powerpc.tcc"
					>(code, addr);
				}

				/*********************************************

				LOOKASIDE BUFFER MANAGEMENT INSTRUCTIONS

				*********************************************/
				template <
#line 38 "ppc.isa"
				class
#line 88107 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88110 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 88114 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 88118 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 88122 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 88125 "powerpc.tcc"
				)
				{
#line 1480 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(CPU<CONFIG>::IsMPC7X5() || CPU<CONFIG>::IsMPC7XXX())
						{
							throw IllegalInstructionException<CONFIG>();
						}
						if(cpu->GetMSR_PR())
						{
							throw PrivilegeViolationException<CONFIG>();
						}

						cpu->Tlbia();
					}
#line 88141 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88146 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88149 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 88153 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 88157 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 88161 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 88164 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 88168 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 88171 "powerpc.tcc"
				)
				{
#line 1492 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "tlbia"; }
#line 88176 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88181 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88184 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 88191 "powerpc.tcc"
				>::initialize_function()
				{
#line 176 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 88196 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88204 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 88211 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 238 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 88216 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88224 "powerpc.tcc"
				>

				void
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 88231 "powerpc.tcc"
				>::initialize_operands()
				{
#line 138 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 88243 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88248 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88251 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 88255 "powerpc.tcc"
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 88259 "powerpc.tcc"
				>::memory_access_size()
				{
#line 193 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 88264 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88270 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88273 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88278 "powerpc.tcc"
				> *DecodeOpTlbia(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbia<
#line 38 "ppc.isa"
					CONFIG
#line 88284 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88294 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 88298 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 88302 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 88306 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 88309 "powerpc.tcc"
				)
				{
#line 1495 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(cpu->GetMSR_PR())
						{
							throw PrivilegeViolationException<CONFIG>();
						}

						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbie(ea);
					}
#line 88322 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88330 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 88334 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 88338 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 88342 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 88345 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 88349 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 88352 "powerpc.tcc"
				)
				{
#line 1504 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbie r" << rb;
					}
#line 88359 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88364 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88367 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 88374 "powerpc.tcc"
				>::initialize_function()
				{
#line 177 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 88379 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88387 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 88394 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 239 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 88399 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88404 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88407 "powerpc.tcc"
				>

				void
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 88414 "powerpc.tcc"
				>::initialize_operands()
				{
#line 862 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rb);
					}
#line 88421 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88429 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 88433 "powerpc.tcc"
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 88437 "powerpc.tcc"
				>::memory_access_size()
				{
#line 194 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 88442 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88451 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88456 "powerpc.tcc"
				> *DecodeOpTlbie(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbie<
#line 38 "ppc.isa"
					CONFIG
#line 88462 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88469 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88472 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 88476 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 88480 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 88484 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 88487 "powerpc.tcc"
				)
				{
#line 1509 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ /* nothing to do */ }
#line 88492 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88500 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 88504 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 88508 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 88512 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 88515 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 88519 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 88522 "powerpc.tcc"
				)
				{
#line 1510 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "tlbsync"; }
#line 88527 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88532 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88535 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 88542 "powerpc.tcc"
				>::initialize_function()
				{
#line 175 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 88547 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88555 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 88562 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 240 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 88567 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88572 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88575 "powerpc.tcc"
				>

				void
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 88582 "powerpc.tcc"
				>::initialize_operands()
				{
#line 138 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 88594 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88602 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 88606 "powerpc.tcc"
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 88610 "powerpc.tcc"
				>::memory_access_size()
				{
#line 195 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 88615 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88621 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88624 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88629 "powerpc.tcc"
				> *DecodeOpTlbsync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbsync<
#line 38 "ppc.isa"
					CONFIG
#line 88635 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88645 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 88649 "powerpc.tcc"
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 88653 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 88657 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 88660 "powerpc.tcc"
				)
				{
#line 1513 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!CPU<CONFIG>::IsMPC7X5() && !CPU<CONFIG>::IsMPC7XXX())
						{
							throw IllegalInstructionException<CONFIG>();
						}

						if(cpu->GetMSR_PR())
						{
							throw PrivilegeViolationException<CONFIG>();
						}

						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbld(ea);
					}
#line 88678 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88683 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88686 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 88690 "powerpc.tcc"
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 88694 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 88698 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 88701 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 88705 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 88708 "powerpc.tcc"
				)
				{
#line 1527 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbld r" << rb;
					}
#line 88715 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88721 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88724 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88729 "powerpc.tcc"
				> *DecodeOpTlbld(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbld<
#line 38 "ppc.isa"
					CONFIG
#line 88735 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 88742 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88745 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 88749 "powerpc.tcc"
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 88753 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 88757 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 88760 "powerpc.tcc"
				)
				{
#line 1532 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						if(!CPU<CONFIG>::IsMPC7X5() && !CPU<CONFIG>::IsMPC7XXX())
						{
							throw IllegalInstructionException<CONFIG>();
						}

						if(cpu->GetMSR_PR())
						{
							throw PrivilegeViolationException<CONFIG>();
						}

						typename CONFIG::address_t ea = cpu->GetGPR(rb);
						cpu->Tlbli(ea);
					}
#line 88778 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88783 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88786 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 88790 "powerpc.tcc"
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 88794 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 88798 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 88801 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 88805 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 88808 "powerpc.tcc"
				)
				{
#line 1546 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "tlbli r" << rb;
					}
#line 88815 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 88821 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88824 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 88829 "powerpc.tcc"
				> *DecodeOpTlbli(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTlbli<
#line 38 "ppc.isa"
					CONFIG
#line 88835 "powerpc.tcc"
					>(code, addr);
				}

				/********************************

				EXTERNAL CONTROL INSTRUCTIONS

				********************************/
				template <
#line 38 "ppc.isa"
				class
#line 88847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88850 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 88854 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 88858 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 88862 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 88865 "powerpc.tcc"
				)
				{
#line 1557 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						throw IllegalInstructionException<CONFIG>();
					}
#line 88872 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88880 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 88884 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 88888 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 88892 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 88895 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 88899 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 88902 "powerpc.tcc"
				)
				{
#line 1560 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "eciwx r" << rd << ", r" << ra << ", r" << rb;
					}
#line 88909 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88914 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88917 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 88924 "powerpc.tcc"
				>::initialize_function()
				{
#line 297 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 88929 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 88934 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88937 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 88944 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 241 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 88949 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 88956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88959 "powerpc.tcc"
				>

				void
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 88966 "powerpc.tcc"
				>::initialize_operands()
				{
#line 442 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 88975 "powerpc.tcc"
				}
				//Load & Load byte reversed
				template <
#line 38 "ppc.isa"
				class
#line 88981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 88984 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 88988 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 88992 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 88996 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 88999 "powerpc.tcc"
				)
				{
#line 48 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 89004 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89009 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89012 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89016 "powerpc.tcc"
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 89020 "powerpc.tcc"
				>::memory_access_size()
				{
#line 196 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 89025 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89031 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89034 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89039 "powerpc.tcc"
				> *DecodeOpEciwx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEciwx<
#line 38 "ppc.isa"
					CONFIG
#line 89045 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89052 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89055 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 89059 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 89063 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 89067 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 89070 "powerpc.tcc"
				)
				{
#line 1565 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						throw IllegalInstructionException<CONFIG>();
					}
#line 89077 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89085 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 89089 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 89093 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 89097 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 89100 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 89104 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 89107 "powerpc.tcc"
				)
				{
#line 1568 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "ecowx r" << rs << ", r" << ra << ", r" << rb;
					}
#line 89114 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89119 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89122 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 89129 "powerpc.tcc"
				>::initialize_function()
				{
#line 298 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStore; }
#line 89134 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89142 "powerpc.tcc"
				>

				void
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 89149 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 242 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 89154 "powerpc.tcc"
				}
				//Store & Store byte reversed
				template <
#line 38 "ppc.isa"
				class
#line 89160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89163 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89167 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 89171 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 89175 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 89178 "powerpc.tcc"
				)
				{
#line 83 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rs; }
#line 89183 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89191 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89195 "powerpc.tcc"
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 89199 "powerpc.tcc"
				>::memory_access_size()
				{
#line 197 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 89204 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89213 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89218 "powerpc.tcc"
				> *DecodeOpEcowx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEcowx<
#line 38 "ppc.isa"
					CONFIG
#line 89224 "powerpc.tcc"
					>(code, addr);
				}

				/***************************************

				MEMORY SYNCHRONIZATION INSTRUCTIONS

				***************************************/
				template <
#line 38 "ppc.isa"
				class
#line 89236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89239 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 89243 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 89247 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 89251 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 89254 "powerpc.tcc"
				)
				{
#line 1579 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ /* order is always enforced in functional simulation */ }
#line 89259 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89264 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89267 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 89271 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 89275 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 89279 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 89282 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 89286 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 89289 "powerpc.tcc"
				)
				{
#line 1580 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "eieio"; }
#line 89294 "powerpc.tcc"
				}
				/** System Register (FnSysRegister | FnSysRegisterSerial) **/
				template <
#line 38 "ppc.isa"
				class
#line 89300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89303 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 89310 "powerpc.tcc"
				>::initialize_function()
				{
#line 157 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 89315 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89323 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 89330 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 243 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 89335 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89343 "powerpc.tcc"
				>

				void
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 89350 "powerpc.tcc"
				>::initialize_operands()
				{
#line 138 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 89362 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89367 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89370 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89374 "powerpc.tcc"
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 89378 "powerpc.tcc"
				>::memory_access_size()
				{
#line 198 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 89383 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89389 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89392 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89397 "powerpc.tcc"
				> *DecodeOpEieio(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpEieio<
#line 38 "ppc.isa"
					CONFIG
#line 89403 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89413 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 89417 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 89421 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 89425 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 89428 "powerpc.tcc"
				)
				{
#line 1583 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						/* order is always enforced in functional simulation */
						/* but we still must flush subsequent instruction in the prefetch buffer, forcing refetch */
						cpu->FlushSubsequentInstructions();
					}
#line 89437 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89442 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89445 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 89449 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 89453 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 89457 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 89460 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 89464 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 89467 "powerpc.tcc"
				)
				{
#line 1588 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "isync"; }
#line 89472 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89480 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 89487 "powerpc.tcc"
				>::initialize_function()
				{
#line 158 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 89492 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89497 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89500 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 89507 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 244 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 89512 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89517 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89520 "powerpc.tcc"
				>

				void
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 89527 "powerpc.tcc"
				>::initialize_operands()
				{
#line 138 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 89539 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89544 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89547 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89551 "powerpc.tcc"
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 89555 "powerpc.tcc"
				>::memory_access_size()
				{
#line 199 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 89560 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89566 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89569 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89574 "powerpc.tcc"
				> *DecodeOpIsync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpIsync<
#line 38 "ppc.isa"
					CONFIG
#line 89580 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89590 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 89594 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 89598 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 89602 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 89605 "powerpc.tcc"
				)
				{
#line 1591 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Lwarx(rd, ea);
					}
#line 89614 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89622 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 89626 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 89630 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 89634 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 89637 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 89641 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 89644 "powerpc.tcc"
				)
				{
#line 1596 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "lwarx r" << rd << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 89656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89664 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 89671 "powerpc.tcc"
				>::initialize_function()
				{
#line 355 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnLoad; }
#line 89676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89684 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 89691 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 245 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(4); }
#line 89696 "powerpc.tcc"
				}
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
				//group instr_rd_ra_rb(eciwx, lbzx, lhax, lhbrx, lhzx, lwarx, lwbrx, lwzx, add, addc, divw, divwu, mulhw, mulhwu, mullw, subf, subfc)
				template <
#line 38 "ppc.isa"
				class
#line 89703 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89706 "powerpc.tcc"
				>

				void
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 89713 "powerpc.tcc"
				>::initialize_operands()
				{
#line 442 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 89722 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89727 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89730 "powerpc.tcc"
				>
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89734 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 89738 "powerpc.tcc"
				>::loadstore_target_register(
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				CPU<CONFIG> *
#line 89742 "powerpc.tcc"
#line 40 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				cpu
#line 89745 "powerpc.tcc"
				)
				{
#line 56 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return rd; }
#line 89750 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89755 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89758 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89762 "powerpc.tcc"
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 89766 "powerpc.tcc"
				>::memory_access_size()
				{
#line 200 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 89771 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89777 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89780 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89785 "powerpc.tcc"
				> *DecodeOpLwarx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLwarx<
#line 38 "ppc.isa"
					CONFIG
#line 89791 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89798 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89801 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 89805 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 89809 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 89813 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 89816 "powerpc.tcc"
				)
				{
#line 1606 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));

						cpu->Stwcx(rs, ea);
					}
#line 89825 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89830 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89833 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 89837 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 89841 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 89845 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 89848 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 89852 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 89855 "powerpc.tcc"
				)
				{
#line 1612 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{
						os << "stwcx. r" << rs << ", r" << ra << ", r" << rb;
						if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
						{
							typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
							os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
						}
					}
#line 89867 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89875 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 89882 "powerpc.tcc"
				>::initialize_function()
				{
#line 356 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnStoreSerial; }
#line 89887 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89895 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 89902 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 246 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(16); }
#line 89907 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89912 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89915 "powerpc.tcc"
				>

				void
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 89922 "powerpc.tcc"
				>::initialize_operands()
				{
#line 412 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 89931 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 89936 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89939 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 89943 "powerpc.tcc"
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 89947 "powerpc.tcc"
				>::memory_access_size()
				{
#line 201 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 89952 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 89958 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89961 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 89966 "powerpc.tcc"
				> *DecodeOpStwcx_(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStwcx_<
#line 38 "ppc.isa"
					CONFIG
#line 89972 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 89979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 89982 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 89986 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 89990 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 89994 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 89997 "powerpc.tcc"
				)
				{
#line 1622 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ cpu->Synchronize(); }
#line 90002 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90010 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 90014 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 90018 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 90022 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 90025 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 90029 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 90032 "powerpc.tcc"
				)
				{
#line 1623 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./loadstore.isa"
					{ os << "sync"; }
#line 90037 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90045 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 90052 "powerpc.tcc"
				>::initialize_function()
				{
#line 174 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 90057 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90065 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 90072 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 247 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 90077 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90082 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90085 "powerpc.tcc"
				>

				void
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 90092 "powerpc.tcc"
				>::initialize_operands()
				{
#line 138 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 90104 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90109 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90112 "powerpc.tcc"
				>
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
				int
#line 90116 "powerpc.tcc"
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 90120 "powerpc.tcc"
				>::memory_access_size()
				{
#line 202 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
					{ return 4; }
#line 90125 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90131 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90134 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90139 "powerpc.tcc"
				> *DecodeOpSync(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSync<
#line 38 "ppc.isa"
					CONFIG
#line 90145 "powerpc.tcc"
					>(code, addr);
				}

				/*
				*  Copyright (c) 2007,
				*  Commissariat a l'Energie Atomique (CEA)
				*  All rights reserved.
				*
				*  Redistribution and use in source and binary forms, with or without modification,
			*  are permitted provided that the following conditions are met:
				*
				*   - Redistributions of source code must retain the above copyright notice, this
				*     list of conditions and the following disclaimer.
				*
				*   - Redistributions in binary form must reproduce the above copyright notice,
				*     this list of conditions and the following disclaimer in the documentation
				*     and/or other materials provided with the distribution.
				*
				*   - Neither the name of CEA nor the names of its contributors may be used to
				*     endorse or promote products derived from this software without specific prior
				*     written permission.
				*
				*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
				*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
				*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
				*  DISCLAIMED.
				*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
				*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
				*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
				*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
				*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
				*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
				*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
				*
				* Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
				*/
				/*************************************

				SYSTEM LINKAGE INSTRUCTIONS

				*************************************/
				template <
#line 38 "ppc.isa"
				class
#line 90190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90193 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 90197 "powerpc.tcc"
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 90201 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 90205 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 90208 "powerpc.tcc"
				)
				{
#line 42 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						cpu->FlushSubsequentInstructions();
						throw SystemCallException<CONFIG>();
					}
#line 90216 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90221 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90224 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 90228 "powerpc.tcc"
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 90232 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 90236 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 90239 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 90243 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 90246 "powerpc.tcc"
				)
				{
#line 46 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "sc";
					}
#line 90253 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90261 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 90268 "powerpc.tcc"
				>::initialize_function()
				{
#line 173 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 90273 "powerpc.tcc"
				}
				/** Misc **/
				template <
#line 38 "ppc.isa"
				class
#line 90279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90282 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 90289 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 250 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 90294 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90299 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90302 "powerpc.tcc"
				>

				void
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 90309 "powerpc.tcc"
				>::initialize_operands()
				{
#line 138 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 90321 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90327 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90330 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90335 "powerpc.tcc"
				> *DecodeOpSc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpSc<
#line 38 "ppc.isa"
					CONFIG
#line 90341 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90351 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 90355 "powerpc.tcc"
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 90359 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 90363 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 90366 "powerpc.tcc"
				)
				{
#line 51 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						cpu->FlushSubsequentInstructions();
						if(cpu->GetMSR_PR())
						{
							throw PrivilegeViolationException<CONFIG>();
						}

						//	cerr << "before resuming r9=0x" << hex << cpu->GetGPR(9) << std::dec << endl;

						cpu->SetNIA(cpu->GetSRR0() & 0xfffffffcUL);
						cpu->SetMSR((cpu->GetMSR() & 0xffff008cUL) | (cpu->GetSRR1() & 0x0000ff73UL));
					}
#line 90382 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90390 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 90394 "powerpc.tcc"
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 90398 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 90402 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 90405 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 90409 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 90412 "powerpc.tcc"
				)
				{
#line 63 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "rfi" << endl;
					}
#line 90419 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90424 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90427 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 90434 "powerpc.tcc"
				>::initialize_function()
				{
#line 172 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 90439 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90444 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90447 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 90454 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 251 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 90459 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90464 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90467 "powerpc.tcc"
				>

				void
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 90474 "powerpc.tcc"
				>::initialize_operands()
				{
#line 138 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						/*
						for(int i=0; i<32; i++)
						{ INPUT(GPR_T, i);
							OUTPUT(GPR_T, i);
						}
						*/
					}
#line 90486 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90492 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90495 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90500 "powerpc.tcc"
				> *DecodeOpRfi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpRfi<
#line 38 "ppc.isa"
					CONFIG
#line 90506 "powerpc.tcc"
					>(code, addr);
				}

				/***************************

				TRAP INSTRUCTIONS

				***************************/
				template <
#line 38 "ppc.isa"
				class
#line 90518 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90521 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 90525 "powerpc.tcc"
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 90529 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 90533 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 90536 "powerpc.tcc"
				)
				{
#line 74 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						int32_t a, b;
						int trap;
						a = cpu->GetGPR(ra);
						b = cpu->GetGPR(rb);
						trap = 0;
						if(a < b && (to & 16)) trap = 1;
						if(a > b && (to & 8)) trap = 1;
						if(a == b && (to & 4)) trap = 1;
						if((uint32_t) a < (uint32_t) b && (to & 2)) trap = 1;
						if((uint32_t) a > (uint32_t) b && (to & 1)) trap = 1;
						if(trap) throw TrapException<CONFIG>();
					}
#line 90553 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90561 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 90565 "powerpc.tcc"
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 90569 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 90573 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 90576 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 90580 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 90583 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "tw " << to << ", r" << ra << ", r" << rb;
					}
#line 90590 "powerpc.tcc"
				}
				/*
				tw.initialize_function =      { Operation<CONFIG>::function = FnIntBasicSerial; }
				twi.initialize_function =     { Operation<CONFIG>::function = FnIntBasicSerial; }
				*/
				template <
#line 38 "ppc.isa"
				class
#line 90599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90602 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 90609 "powerpc.tcc"
				>::initialize_function()
				{
#line 248 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 90614 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90622 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 90629 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 252 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 90634 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90639 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90642 "powerpc.tcc"
				>

				void
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 90649 "powerpc.tcc"
				>::initialize_operands()
				{
#line 375 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
						INPUT(GPR_T, rb);
					}
#line 90657 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90663 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90666 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90671 "powerpc.tcc"
				> *DecodeOpTw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTw<
#line 38 "ppc.isa"
					CONFIG
#line 90677 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 90684 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90687 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 90691 "powerpc.tcc"
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 90695 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 90699 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 90702 "powerpc.tcc"
				)
				{
#line 92 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						int32_t a;
						int trap;
						a = (int32_t) cpu->GetGPR(ra);
						trap = 0;
						if(a < simm && (to & 16)) trap = 1;
						if(a > simm && (to & 8)) trap = 1;
						if(a == simm && (to & 4)) trap = 1;
						if((uint32_t) a < (uint32_t) simm && (to & 2)) trap = 1;
						if((uint32_t) a > (uint32_t) simm && (to & 1)) trap = 1;
						if(trap) throw TrapException<CONFIG>();
					}
#line 90718 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90726 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 90730 "powerpc.tcc"
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 90734 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 90738 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 90741 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 90745 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 90748 "powerpc.tcc"
				)
				{
#line 104 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "twi " << to << ", r" << ra << ", " << simm;
					}
#line 90755 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90763 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 90770 "powerpc.tcc"
				>::initialize_function()
				{
#line 249 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysCall; }
#line 90775 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90780 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90783 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 90790 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 253 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 90795 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90800 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90803 "powerpc.tcc"
				>

				void
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 90810 "powerpc.tcc"
				>::initialize_operands()
				{
#line 370 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, ra);
					}
#line 90817 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90826 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90831 "powerpc.tcc"
				> *DecodeOpTwi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpTwi<
#line 38 "ppc.isa"
					CONFIG
#line 90837 "powerpc.tcc"
					>(code, addr);
				}

				/******************************************

				PROCESSOR CONTROL INSTRUCTIONS

				******************************************/
				template <
#line 38 "ppc.isa"
				class
#line 90849 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90852 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 90856 "powerpc.tcc"
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 90860 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 90864 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 90867 "powerpc.tcc"
				)
				{
#line 114 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t _c;
						_c = (cpu->GetXER() >> 28) & 0xf;	// take bits 0-3 of XER
						cpu->SetCRF(crfD, _c);

						cpu->SetXER(cpu->GetXER() & 0x0fffffffUL);	// resetting bits 0-3 of XER
					}
#line 90878 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90883 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90886 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 90890 "powerpc.tcc"
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 90894 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 90898 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 90901 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 90905 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 90908 "powerpc.tcc"
				)
				{
#line 121 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mcrxr cr" << crfD;
					}
#line 90915 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90923 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 90930 "powerpc.tcc"
				>::initialize_function()
				{
#line 189 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 90935 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90940 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90943 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 90950 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 254 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 90955 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 90960 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90963 "powerpc.tcc"
				>

				void
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 90970 "powerpc.tcc"
				>::initialize_operands()
				{
#line 786 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						//  OUTPUT(CRF_T, crfD);
						INPUT(XER_T, 0);
						OUTPUT(CR_T, crfD);
					}
#line 90979 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 90985 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 90988 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 90993 "powerpc.tcc"
				> *DecodeOpMcrxr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMcrxr<
#line 38 "ppc.isa"
					CONFIG
#line 90999 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91009 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 91013 "powerpc.tcc"
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 91017 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 91021 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 91024 "powerpc.tcc"
				)
				{
#line 126 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						cpu->SetGPR(rd, cpu->GetCR());
					}
#line 91031 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91039 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 91043 "powerpc.tcc"
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 91047 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 91051 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 91054 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 91058 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 91061 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfcr r" << rd;
					}
#line 91068 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91073 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91076 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 91083 "powerpc.tcc"
				>::initialize_function()
				{
#line 190 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 91088 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91093 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91096 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 91103 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 255 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 91108 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91113 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91116 "powerpc.tcc"
				>

				void
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 91123 "powerpc.tcc"
				>::initialize_operands()
				{
#line 617 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);
						OUTPUT(GPR_T, rd);
					}
#line 91138 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91144 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91147 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91152 "powerpc.tcc"
				> *DecodeOpMfcr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfcr<
#line 38 "ppc.isa"
					CONFIG
#line 91158 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91168 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 91172 "powerpc.tcc"
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 91176 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 91180 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 91183 "powerpc.tcc"
				)
				{
#line 134 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						if(cpu->GetMSR_PR())
						{
							throw PrivilegeViolationException<CONFIG>();
						}

						cpu->SetGPR(rd, cpu->GetMSR());
					}
#line 91195 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91200 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91203 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 91207 "powerpc.tcc"
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 91211 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 91215 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 91218 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 91222 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 91225 "powerpc.tcc"
				)
				{
#line 142 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfmsr r" << rd;
					}
#line 91232 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91237 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91240 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 91247 "powerpc.tcc"
				>::initialize_function()
				{
#line 159 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 91252 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91260 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 91267 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 256 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 91272 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91277 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91280 "powerpc.tcc"
				>

				void
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 91287 "powerpc.tcc"
				>::initialize_operands()
				{
#line 612 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
					}
#line 91294 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91300 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91303 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91308 "powerpc.tcc"
				> *DecodeOpMfmsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfmsr<
#line 38 "ppc.isa"
					CONFIG
#line 91314 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91321 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91324 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 91328 "powerpc.tcc"
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 91332 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 91336 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 91339 "powerpc.tcc"
				)
				{
#line 147 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						uint32_t result = cpu->GetSPR(n);
						cpu->SetGPR(rd, result);
					}
#line 91348 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91356 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 91360 "powerpc.tcc"
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 91364 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 91368 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 91371 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 91375 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 91378 "powerpc.tcc"
				)
				{
#line 152 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: os << "mfxer r" << rd;
							case 8: os << "mflr r" << rd; return;
							case 9: os << "mfctr r" << rd; return;
							case 22: os << "mfdec r" << rd; return;
							case 528: os << "mfibatu r" << rd << ", 0"; return;
							case 529: os << "mfibatl r" << rd << ", 0"; return;
							case 530: os << "mfibatu r" << rd << ", 1"; return;
							case 531: os << "mfibatl r" << rd << ", 1"; return;
							case 532: os << "mfibatu r" << rd << ", 2"; return;
							case 533: os << "mfibatl r" << rd << ", 2"; return;
							case 534: os << "mfibatu r" << rd << ", 3"; return;
							case 535: os << "mfibatl r" << rd << ", 3"; return;
							case 536: os << "mfdbatu r" << rd << ", 0"; return;
							case 537: os << "mfdbatl r" << rd << ", 0"; return;
							case 538: os << "mfdbatu r" << rd << ", 1"; return;
							case 539: os << "mfdbatl r" << rd << ", 1"; return;
							case 540: os << "mfdbatu r" << rd << ", 2"; return;
							case 541: os << "mfdbatl r" << rd << ", 2"; return;
							case 542: os << "mfdbatu r" << rd << ", 3"; return;
							case 543: os << "mfdbatl r" << rd << ", 3"; return;
						}

						if(CPU<CONFIG>::IsMPC7X5() || CPU<CONFIG>::IsMPC7XXX())
						{
							switch(n)
							{
								case 560: os << "mfibatu r" << rd << ", 4"; return;
								case 561: os << "mfibatl r" << rd << ", 4"; return;
								case 562: os << "mfibatu r" << rd << ", 5"; return;
								case 563: os << "mfibatl r" << rd << ", 5"; return;
								case 564: os << "mfibatu r" << rd << ", 6"; return;
								case 565: os << "mfibatl r" << rd << ", 6"; return;
								case 566: os << "mfibatu r" << rd << ", 7"; return;
								case 567: os << "mfibatl r" << rd << ", 7"; return;
								case 568: os << "mfdbatu r" << rd << ", 4"; return;
								case 569: os << "mfdbatl r" << rd << ", 4"; return;
								case 570: os << "mfdbatu r" << rd << ", 5"; return;
								case 571: os << "mfdbatl r" << rd << ", 5"; return;
								case 572: os << "mfdbatu r" << rd << ", 6"; return;
								case 573: os << "mfdbatl r" << rd << ", 6"; return;
								case 574: os << "mfdbatu r" << rd << ", 7"; return;
								case 575: os << "mfdbatl r" << rd << ", 7"; return;
							}
						}

						os << "mfspr r" << rd << ", " << n;
					}
#line 91433 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91441 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 91448 "powerpc.tcc"
				>::initialize_function()
				{
#line 160 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 91453 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91461 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 91468 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 257 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 91473 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91481 "powerpc.tcc"
				>

				void
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 91488 "powerpc.tcc"
				>::initialize_operands()
				{
#line 630 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(d)
						{
						case 1:
							INPUT(XER_T,0);
							INPUT(XER_T,1);
							INPUT(XER_T,2);
							INPUT(XER_T,3);
							break;
						case 8:
							INPUT(LR_T,0);
							break;
						case 9:
							INPUT(CTR_T,0);
							/*
							INPUT(CR_T,1);
							INPUT(CR_T,2);
							INPUT(CR_T,3);
							INPUT(CR_T,4);
							INPUT(CR_T,5);
							INPUT(CR_T,6);
							INPUT(CR_T,7);
							*/
							break;
						default:
							break;
						}
						OUTPUT(GPR_T, rd);
					}
#line 91522 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91531 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91536 "powerpc.tcc"
				> *DecodeOpMfspr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfspr<
#line 38 "ppc.isa"
					CONFIG
#line 91542 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91549 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91552 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 91556 "powerpc.tcc"
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 91560 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 91564 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 91567 "powerpc.tcc"
				)
				{
#line 205 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						uint32_t result = cpu->GetGPR(rs);
						cpu->SetSPR(n, result);
					}
#line 91576 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91584 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 91588 "powerpc.tcc"
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 91592 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 91596 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 91599 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 91603 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 91606 "powerpc.tcc"
				)
				{
#line 210 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(n)
						{
							case 1: os << "mtxer r" << rs; return;
							case 8: os << "mtlr r" << rs; return;
							case 9: os << "mtctr r" << rs; return;
							case 22: os << "mtdec r" << rs; return;
							case 528: os << "mtibatu 0, r" << rs; return;
							case 529: os << "mtibatl 0, r" << rs; return;
							case 530: os << "mtibatu 1, r" << rs; return;
							case 531: os << "mtibatl 1, r" << rs; return;
							case 532: os << "mtibatu 2, r" << rs; return;
							case 533: os << "mtibatl 2, r" << rs; return;
							case 534: os << "mtibatu 3, r" << rs; return;
							case 535: os << "mtibatl 3, r" << rs; return;
							case 536: os << "mtdbatu 0, r" << rs; return;
							case 537: os << "mtdbatl 0, r" << rs; return;
							case 538: os << "mtdbatu 1, r" << rs; return;
							case 539: os << "mtdbatl 1, r" << rs; return;
							case 540: os << "mtdbatu 2, r" << rs; return;
							case 541: os << "mtdbatl 2, r" << rs; return;
							case 542: os << "mtdbatu 3, r" << rs; return;
							case 543: os << "mtdbatl 3, r" << rs; return;
						}

						if(CPU<CONFIG>::IsMPC7X5() || CPU<CONFIG>::IsMPC7XXX())
						{
							switch(n)
							{
								case 560: os << "mtibatu 4, r" << rs; return;
								case 561: os << "mtibatl 4, r" << rs; return;
								case 562: os << "mtibatu 5, r" << rs; return;
								case 563: os << "mtibatl 5, r" << rs; return;
								case 564: os << "mtibatu 6, r" << rs; return;
								case 565: os << "mtibatl 6, r" << rs; return;
								case 566: os << "mtibatu 7, r" << rs; return;
								case 567: os << "mtibatl 7, r" << rs; return;
								case 568: os << "mtdbatu 4, r" << rs; return;
								case 569: os << "mtdbatl 4, r" << rs; return;
								case 570: os << "mtdbatu 5, r" << rs; return;
								case 571: os << "mtdbatl 5, r" << rs; return;
								case 572: os << "mtdbatu 6, r" << rs; return;
								case 573: os << "mtdbatl 6, r" << rs; return;
								case 574: os << "mtdbatu 7, r" << rs; return;
								case 575: os << "mtdbatl 7, r" << rs; return;
							}
						}

						os << "mtspr " << n << ", r" << rs;
					}
#line 91661 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91666 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91669 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 91676 "powerpc.tcc"
				>::initialize_function()
				{
#line 165 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{
						Operation<CONFIG>::function = FnSysRegisterSerial;
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						//	registers_written = ((d == 8) ? RegLR : RegNone) | ((d == 9) ? RegCTR : RegNone);
					}
#line 91685 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91693 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 91700 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 261 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 91705 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91710 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91713 "powerpc.tcc"
				>

				void
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 91720 "powerpc.tcc"
				>::initialize_operands()
				{
#line 699 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
						switch(d)
						{
						case 1:
							OUTPUT(XER_T,0);
							OUTPUT(XER_T,1);
							OUTPUT(XER_T,2);
							OUTPUT(XER_T,3);
							break;
						case 8:
							OUTPUT(LR_T,0);
							break;
						case 9:
							OUTPUT(CTR_T,0);
							/*
							OUTPUT(CR_T,1);
							OUTPUT(CR_T,2);
							OUTPUT(CR_T,3);
							OUTPUT(CR_T,4);
							OUTPUT(CR_T,5);
							OUTPUT(CR_T,6);
							OUTPUT(CR_T,7);
							*/
							break;
						default:
							break;
						}
					}
#line 91754 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91760 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91763 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91768 "powerpc.tcc"
				> *DecodeOpMtspr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtspr<
#line 38 "ppc.isa"
					CONFIG
#line 91774 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91781 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91784 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 91788 "powerpc.tcc"
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 91792 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 91796 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 91799 "powerpc.tcc"
				)
				{
#line 263 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t d;
						d = ((tbr & 0x1F) << 5) + ((tbr >> 5) & 0x1F);
						switch(d)
						{
							case 268: cpu->SetGPR(rd, cpu->GetTBL()); break;
							case 269: cpu->SetGPR(rd, cpu->GetTBU()); break;
						default:
							/* illegal instruction */
							throw IllegalInstructionException<CONFIG>();
						}
					}
#line 91815 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91823 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 91827 "powerpc.tcc"
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 91831 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 91835 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 91838 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 91842 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 91845 "powerpc.tcc"
				)
				{
#line 275 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mftb r" << rd << ", " << tbr;
					}
#line 91852 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91860 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 91867 "powerpc.tcc"
				>::initialize_function()
				{
#line 163 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 91872 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91880 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 91887 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 258 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 91892 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91900 "powerpc.tcc"
				>

				void
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 91907 "powerpc.tcc"
				>::initialize_operands()
				{
#line 612 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
					}
#line 91914 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 91920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91923 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 91928 "powerpc.tcc"
				> *DecodeOpMftb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMftb<
#line 38 "ppc.isa"
					CONFIG
#line 91934 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 91941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91944 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 91948 "powerpc.tcc"
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 91952 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 91956 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 91959 "powerpc.tcc"
				)
				{
#line 280 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						uint32_t _m,_crm, _c, _a;
						int _i, _b, _d;
						_crm = crm;
						_d = cpu->GetGPR(rs);
						for(_i = 0; _i < 8; _i++)
						{
							_b = (_crm >> _i) & 0x1;
							if(_b == 1)
							{
								_c = cpu->GetCR();
								_a = (_d >> (_i*4)) & 0xf;
								_m = (0xf << ((_i)*4));
								cpu->SetCR((_c & ~_m) | (_a << ((_i)*4)));
							}
						}
					}
#line 91980 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 91985 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 91988 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 91992 "powerpc.tcc"
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 91996 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 92000 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 92003 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 92007 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 92010 "powerpc.tcc"
				)
				{
#line 297 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						if(crm == 0xff)
						os << "mtcr r" << rs;
						else
						os << "mtcrf " << crm << ", r" << rs;
					}
#line 92020 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92028 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 92035 "powerpc.tcc"
				>::initialize_function()
				{
#line 191 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnCondRegister; }
#line 92040 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92045 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92048 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 92055 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 259 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 92060 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92065 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92068 "powerpc.tcc"
				>

				void
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 92075 "powerpc.tcc"
				>::initialize_operands()
				{
#line 677 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(CR_T,0);
						INPUT(CR_T,1);
						INPUT(CR_T,2);
						INPUT(CR_T,3);
						INPUT(CR_T,4);
						INPUT(CR_T,5);
						INPUT(CR_T,6);
						INPUT(CR_T,7);

						OUTPUT(CR_T,0);
						OUTPUT(CR_T,1);
						OUTPUT(CR_T,2);
						OUTPUT(CR_T,3);
						OUTPUT(CR_T,4);
						OUTPUT(CR_T,5);
						OUTPUT(CR_T,6);
						OUTPUT(CR_T,7);
					}
#line 92099 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92105 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92108 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92113 "powerpc.tcc"
				> *DecodeOpMtcrf(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtcrf<
#line 38 "ppc.isa"
					CONFIG
#line 92119 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92126 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92129 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 92133 "powerpc.tcc"
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 92137 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 92141 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 92144 "powerpc.tcc"
				)
				{
#line 305 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						if(cpu->GetMSR_PR()) throw PrivilegeViolationException<CONFIG>();

						cpu->SetMSR(cpu->GetGPR(rs));
					}
#line 92153 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92158 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92161 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 92165 "powerpc.tcc"
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 92169 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 92173 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 92176 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 92180 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 92183 "powerpc.tcc"
				)
				{
#line 310 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtmsr r" << rs;
					}
#line 92190 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92198 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 92205 "powerpc.tcc"
				>::initialize_function()
				{
#line 164 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 92210 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92215 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92218 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 92225 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 260 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(1); }
#line 92230 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92235 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92238 "powerpc.tcc"
				>

				void
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 92245 "powerpc.tcc"
				>::initialize_operands()
				{
#line 672 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
					}
#line 92252 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92258 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92261 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92266 "powerpc.tcc"
				> *DecodeOpMtmsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtmsr<
#line 38 "ppc.isa"
					CONFIG
#line 92272 "powerpc.tcc"
					>(code, addr);
				}

				/**********************************************

				SEGMENT REGISTER MANIPULATION INSTRUCTIONS

				**********************************************/
				template <
#line 38 "ppc.isa"
				class
#line 92284 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92287 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 92291 "powerpc.tcc"
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 92295 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 92299 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 92302 "powerpc.tcc"
				)
				{
#line 320 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						if(cpu->GetMSR_PR()) throw PrivilegeViolationException<CONFIG>();

						cpu->SetGPR(rd,cpu->GetSR(sr));
					}
#line 92311 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92319 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 92323 "powerpc.tcc"
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 92327 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 92331 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 92334 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 92338 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 92341 "powerpc.tcc"
				)
				{
#line 325 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfsr r" << rd << ", " << sr;
					}
#line 92348 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92353 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92356 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 92363 "powerpc.tcc"
				>::initialize_function()
				{
#line 161 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegister; }
#line 92368 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92373 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92376 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 92383 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 262 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92388 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92393 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92396 "powerpc.tcc"
				>

				void
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 92403 "powerpc.tcc"
				>::initialize_operands()
				{
#line 737 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(SR_T, sr);
					}
#line 92411 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92417 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92420 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92425 "powerpc.tcc"
				> *DecodeOpMfsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfsr<
#line 38 "ppc.isa"
					CONFIG
#line 92431 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92441 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 92445 "powerpc.tcc"
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 92449 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 92453 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 92456 "powerpc.tcc"
				)
				{
#line 330 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						if(cpu->GetMSR_PR()) throw PrivilegeViolationException<CONFIG>();

						cpu->SetGPR(rd, cpu->GetSR((cpu->GetGPR(rb) >> 28) & 0xf));
					}
#line 92465 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92470 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92473 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 92477 "powerpc.tcc"
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 92481 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 92485 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 92488 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 92492 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 92495 "powerpc.tcc"
				)
				{
#line 335 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mfsrin r" << rd << ", r" << rb;
					}
#line 92502 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92507 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92510 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 92517 "powerpc.tcc"
				>::initialize_function()
				{
#line 162 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 92522 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92527 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92530 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 92537 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 263 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(3); }
#line 92542 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92547 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92550 "powerpc.tcc"
				>

				void
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 92557 "powerpc.tcc"
				>::initialize_operands()
				{
#line 584 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						OUTPUT(GPR_T, rd);
						INPUT(GPR_T, rb);
					}
#line 92565 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92571 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92574 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92579 "powerpc.tcc"
				> *DecodeOpMfsrin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfsrin<
#line 38 "ppc.isa"
					CONFIG
#line 92585 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92592 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92595 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 92599 "powerpc.tcc"
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 92603 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 92607 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 92610 "powerpc.tcc"
				)
				{
#line 340 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						if(cpu->GetMSR_PR()) throw PrivilegeViolationException<CONFIG>();

						cpu->SetSR(sr, cpu->GetGPR(rs));
					}
#line 92619 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92627 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 92631 "powerpc.tcc"
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 92635 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 92639 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 92642 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 92646 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 92649 "powerpc.tcc"
				)
				{
#line 345 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtsr " << sr << ", r" << rs;
					}
#line 92656 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92664 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 92671 "powerpc.tcc"
				>::initialize_function()
				{
#line 170 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 92676 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92681 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92684 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 92691 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 264 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 92696 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92701 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92704 "powerpc.tcc"
				>

				void
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 92711 "powerpc.tcc"
				>::initialize_operands()
				{
#line 731 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						OUTPUT(SR_T, sr);
					}
#line 92719 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92725 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92728 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92733 "powerpc.tcc"
				> *DecodeOpMtsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtsr<
#line 38 "ppc.isa"
					CONFIG
#line 92739 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92746 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92749 "powerpc.tcc"
				>
#line 44 "ppc.isa"
				void
#line 92753 "powerpc.tcc"
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 92757 "powerpc.tcc"
				>::execute(
#line 44 "ppc.isa"
				CPU<CONFIG> *
#line 92761 "powerpc.tcc"
#line 44 "ppc.isa"
				cpu
#line 92764 "powerpc.tcc"
				)
				{
#line 350 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						if(cpu->GetMSR_PR()) throw PrivilegeViolationException<CONFIG>();

						cpu->SetSR((cpu->GetGPR(rb) >> 28) & 0xf, cpu->GetGPR(rs));
					}
#line 92773 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92778 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92781 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 92785 "powerpc.tcc"
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 92789 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 92793 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 92796 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 92800 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 92803 "powerpc.tcc"
				)
				{
#line 355 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./misc.isa"
					{
						os << "mtsrin r" << rs << ", r" << rb;
					}
#line 92810 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92815 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92818 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 92825 "powerpc.tcc"
				>::initialize_function()
				{
#line 171 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
					{ Operation<CONFIG>::function = FnSysRegisterSerial; }
#line 92830 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92835 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92838 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 92845 "powerpc.tcc"
				>::initialize_latencies()
				{
#line 265 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
					{ LAT(2); }
#line 92850 "powerpc.tcc"
				}
				template <
#line 38 "ppc.isa"
				class
#line 92855 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92858 "powerpc.tcc"
				>

				void
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 92865 "powerpc.tcc"
				>::initialize_operands()
				{
#line 743 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
					{
						INPUT(GPR_T, rs);
						INPUT(GPR_T, rb);
					}
#line 92873 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92882 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92887 "powerpc.tcc"
				> *DecodeOpMtsrin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtsrin<
#line 38 "ppc.isa"
					CONFIG
#line 92893 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92903 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 92907 "powerpc.tcc"
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 92911 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 92915 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 92918 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 92922 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 92925 "powerpc.tcc"
				)
				{
#line 3 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dss " << strm << ", 0";
					}
#line 92932 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92941 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 92946 "powerpc.tcc"
				> *DecodeOpDss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDss<
#line 38 "ppc.isa"
					CONFIG
#line 92952 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 92959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 92962 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 92966 "powerpc.tcc"
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 92970 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 92974 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 92977 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 92981 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 92984 "powerpc.tcc"
				)
				{
#line 9 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dssall " << strm;
					}
#line 92991 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 92997 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93000 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93005 "powerpc.tcc"
				> *DecodeOpDssall(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDssall<
#line 38 "ppc.isa"
					CONFIG
#line 93011 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93018 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93021 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93025 "powerpc.tcc"
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 93029 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93033 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93036 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93040 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93043 "powerpc.tcc"
				)
				{
#line 15 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dst r" << ra << ", r" << rb << ", " << strm;
					}
#line 93050 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93056 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93059 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93064 "powerpc.tcc"
				> *DecodeOpDst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDst<
#line 38 "ppc.isa"
					CONFIG
#line 93070 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93080 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93084 "powerpc.tcc"
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 93088 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93092 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93095 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93099 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93102 "powerpc.tcc"
				)
				{
#line 21 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstst r" << ra << ", r" << rb << ", " << strm;
					}
#line 93109 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93115 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93118 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93123 "powerpc.tcc"
				> *DecodeOpDstst(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDstst<
#line 38 "ppc.isa"
					CONFIG
#line 93129 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93139 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93143 "powerpc.tcc"
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 93147 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93151 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93154 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93158 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93161 "powerpc.tcc"
				)
				{
#line 27 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstt r" << ra << ", r" << rb << ", " << strm;
					}
#line 93168 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93174 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93177 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93182 "powerpc.tcc"
				> *DecodeOpDststt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDststt<
#line 38 "ppc.isa"
					CONFIG
#line 93188 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93198 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93202 "powerpc.tcc"
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 93206 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93210 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93213 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93217 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93220 "powerpc.tcc"
				)
				{
#line 33 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "dstt r" << ra << ", r" << rb << ", " << strm;
					}
#line 93227 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93236 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93241 "powerpc.tcc"
				> *DecodeOpDstt(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpDstt<
#line 38 "ppc.isa"
					CONFIG
#line 93247 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93257 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93261 "powerpc.tcc"
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 93265 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93269 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93272 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93276 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93279 "powerpc.tcc"
				)
				{
#line 39 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvebx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 93286 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93292 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93295 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93300 "powerpc.tcc"
				> *DecodeOpLvebx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvebx<
#line 38 "ppc.isa"
					CONFIG
#line 93306 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93316 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93320 "powerpc.tcc"
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 93324 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93328 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93331 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93335 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93338 "powerpc.tcc"
				)
				{
#line 45 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvehx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 93345 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93354 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93359 "powerpc.tcc"
				> *DecodeOpLvehx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvehx<
#line 38 "ppc.isa"
					CONFIG
#line 93365 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93375 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93379 "powerpc.tcc"
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 93383 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93387 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93390 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93394 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93397 "powerpc.tcc"
				)
				{
#line 51 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvewx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 93404 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93410 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93413 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93418 "powerpc.tcc"
				> *DecodeOpLvewx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvewx<
#line 38 "ppc.isa"
					CONFIG
#line 93424 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93434 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93438 "powerpc.tcc"
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 93442 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93446 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93449 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93453 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93456 "powerpc.tcc"
				)
				{
#line 57 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvsl v" << vd << ", r" << ra << ", r" << rb;
					}
#line 93463 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93469 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93472 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93477 "powerpc.tcc"
				> *DecodeOpLvsl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvsl<
#line 38 "ppc.isa"
					CONFIG
#line 93483 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93493 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93497 "powerpc.tcc"
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 93501 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93505 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93508 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93512 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93515 "powerpc.tcc"
				)
				{
#line 63 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvsr v" << vd << ", r" << ra << ", r" << rb;
					}
#line 93522 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93531 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93536 "powerpc.tcc"
				> *DecodeOpLvsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvsr<
#line 38 "ppc.isa"
					CONFIG
#line 93542 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93549 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93552 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93556 "powerpc.tcc"
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 93560 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93564 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93567 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93571 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93574 "powerpc.tcc"
				)
				{
#line 69 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvx v" << vd << ", r" << ra << ", r" << rb;
					}
#line 93581 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93587 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93590 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93595 "powerpc.tcc"
				> *DecodeOpLvx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvx<
#line 38 "ppc.isa"
					CONFIG
#line 93601 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93611 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93615 "powerpc.tcc"
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 93619 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93623 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93626 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93630 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93633 "powerpc.tcc"
				)
				{
#line 75 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "lvxl v" << vd << ", r" << ra << ", r" << rb;
					}
#line 93640 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93646 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93649 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93654 "powerpc.tcc"
				> *DecodeOpLvxl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpLvxl<
#line 38 "ppc.isa"
					CONFIG
#line 93660 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93670 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93674 "powerpc.tcc"
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 93678 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93682 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93685 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93689 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93692 "powerpc.tcc"
				)
				{
#line 81 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "mfvscr v" << vd;
					}
#line 93699 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93708 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93713 "powerpc.tcc"
				> *DecodeOpMfvscr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMfvscr<
#line 38 "ppc.isa"
					CONFIG
#line 93719 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93729 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93733 "powerpc.tcc"
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 93737 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93741 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93744 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93748 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93751 "powerpc.tcc"
				)
				{
#line 87 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "mtvscr v" << vb;
					}
#line 93758 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93764 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93767 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93772 "powerpc.tcc"
				> *DecodeOpMtvscr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpMtvscr<
#line 38 "ppc.isa"
					CONFIG
#line 93778 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93788 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93792 "powerpc.tcc"
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 93796 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93800 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93803 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93807 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93810 "powerpc.tcc"
				)
				{
#line 93 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvebx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 93817 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93823 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93826 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93831 "powerpc.tcc"
				> *DecodeOpStvebx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvebx<
#line 38 "ppc.isa"
					CONFIG
#line 93837 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93847 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93851 "powerpc.tcc"
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 93855 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93859 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93862 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93866 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93869 "powerpc.tcc"
				)
				{
#line 99 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvehx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 93876 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93882 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93885 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93890 "powerpc.tcc"
				> *DecodeOpStvehx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvehx<
#line 38 "ppc.isa"
					CONFIG
#line 93896 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93906 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93910 "powerpc.tcc"
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 93914 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93918 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93921 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93925 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93928 "powerpc.tcc"
				)
				{
#line 105 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvewx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 93935 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 93941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93944 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 93949 "powerpc.tcc"
				> *DecodeOpStvewx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvewx<
#line 38 "ppc.isa"
					CONFIG
#line 93955 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 93962 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 93965 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 93969 "powerpc.tcc"
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 93973 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 93977 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 93980 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 93984 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 93987 "powerpc.tcc"
				)
				{
#line 111 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvx v" << vs << ", r" << ra << ", r" << rb;
					}
#line 93994 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94000 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94003 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94008 "powerpc.tcc"
				> *DecodeOpStvx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvx<
#line 38 "ppc.isa"
					CONFIG
#line 94014 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94024 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94028 "powerpc.tcc"
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 94032 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94036 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94039 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94043 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94046 "powerpc.tcc"
				)
				{
#line 117 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "stvxl v" << vs << ", r" << ra << ", r" << rb;
					}
#line 94053 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94059 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94062 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94067 "powerpc.tcc"
				> *DecodeOpStvxl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpStvxl<
#line 38 "ppc.isa"
					CONFIG
#line 94073 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94083 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94087 "powerpc.tcc"
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 94091 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94095 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94098 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94102 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94105 "powerpc.tcc"
				)
				{
#line 123 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddcuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 94112 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94118 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94121 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94126 "powerpc.tcc"
				> *DecodeOpVaddcuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddcuw<
#line 38 "ppc.isa"
					CONFIG
#line 94132 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94142 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94146 "powerpc.tcc"
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 94150 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94154 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94157 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94161 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94164 "powerpc.tcc"
				)
				{
#line 129 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 94171 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94177 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94180 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94185 "powerpc.tcc"
				> *DecodeOpVaddfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 94191 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94201 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94205 "powerpc.tcc"
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 94209 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94213 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94216 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94220 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94223 "powerpc.tcc"
				)
				{
#line 135 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddsbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 94230 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94239 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94244 "powerpc.tcc"
				> *DecodeOpVaddsbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddsbs<
#line 38 "ppc.isa"
					CONFIG
#line 94250 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94260 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94264 "powerpc.tcc"
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 94268 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94272 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94275 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94279 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94282 "powerpc.tcc"
				)
				{
#line 141 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddshs v" << vd << ", v" << va << ", v" << vb;
					}
#line 94289 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94295 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94298 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94303 "powerpc.tcc"
				> *DecodeOpVaddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 94309 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94319 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94323 "powerpc.tcc"
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 94327 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94331 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94334 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94338 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94341 "powerpc.tcc"
				)
				{
#line 147 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 94348 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94354 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94357 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94362 "powerpc.tcc"
				> *DecodeOpVaddsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddsws<
#line 38 "ppc.isa"
					CONFIG
#line 94368 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94378 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94382 "powerpc.tcc"
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 94386 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94390 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94393 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94397 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94400 "powerpc.tcc"
				)
				{
#line 153 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddubm v" << vd << ", v" << va << ", v" << vb;
					}
#line 94407 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94413 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94416 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94421 "powerpc.tcc"
				> *DecodeOpVaddubm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddubm<
#line 38 "ppc.isa"
					CONFIG
#line 94427 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94434 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94437 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94441 "powerpc.tcc"
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 94445 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94449 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94452 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94456 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94459 "powerpc.tcc"
				)
				{
#line 159 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vaddubs v" << vd << ", v" << va << ", v" << vb;
					}
#line 94466 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94472 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94475 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94480 "powerpc.tcc"
				> *DecodeOpVaddubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVaddubs<
#line 38 "ppc.isa"
					CONFIG
#line 94486 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94496 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94500 "powerpc.tcc"
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 94504 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94508 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94511 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94515 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94518 "powerpc.tcc"
				)
				{
#line 165 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduhm v" << vd << ", v" << va << ", v" << vb;
					}
#line 94525 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94534 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94539 "powerpc.tcc"
				> *DecodeOpVadduhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduhm<
#line 38 "ppc.isa"
					CONFIG
#line 94545 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94555 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94559 "powerpc.tcc"
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 94563 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94567 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94570 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94574 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94577 "powerpc.tcc"
				)
				{
#line 171 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduhs v" << vd << ", v" << va << ", v" << vb;
					}
#line 94584 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94593 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94598 "powerpc.tcc"
				> *DecodeOpVadduhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduhs<
#line 38 "ppc.isa"
					CONFIG
#line 94604 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94614 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94618 "powerpc.tcc"
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 94622 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94626 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94629 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94633 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94636 "powerpc.tcc"
				)
				{
#line 177 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduwm v" << vd << ", v" << va << ", v" << vb;
					}
#line 94643 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94652 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94657 "powerpc.tcc"
				> *DecodeOpVadduwm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduwm<
#line 38 "ppc.isa"
					CONFIG
#line 94663 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94673 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94677 "powerpc.tcc"
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 94681 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94685 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94688 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94692 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94695 "powerpc.tcc"
				)
				{
#line 183 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vadduws v" << vd << ", v" << va << ", v" << vb;
					}
#line 94702 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94708 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94711 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94716 "powerpc.tcc"
				> *DecodeOpVadduws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVadduws<
#line 38 "ppc.isa"
					CONFIG
#line 94722 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94729 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94732 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94736 "powerpc.tcc"
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 94740 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94744 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94747 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94751 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94754 "powerpc.tcc"
				)
				{
#line 189 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vand v" << vd << ", v" << va << ", v" << vb;
					}
#line 94761 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94770 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94775 "powerpc.tcc"
				> *DecodeOpVand(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVand<
#line 38 "ppc.isa"
					CONFIG
#line 94781 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94788 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94791 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94795 "powerpc.tcc"
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 94799 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94803 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94806 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94810 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94813 "powerpc.tcc"
				)
				{
#line 195 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vandc v" << vd << ", v" << va << ", v" << vb;
					}
#line 94820 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94826 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94829 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94834 "powerpc.tcc"
				> *DecodeOpVandc(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVandc<
#line 38 "ppc.isa"
					CONFIG
#line 94840 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94850 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94854 "powerpc.tcc"
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 94858 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94862 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94865 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94869 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94872 "powerpc.tcc"
				)
				{
#line 201 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 94879 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94885 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94888 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94893 "powerpc.tcc"
				> *DecodeOpVavgsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsb<
#line 38 "ppc.isa"
					CONFIG
#line 94899 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94909 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94913 "powerpc.tcc"
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 94917 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94921 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94924 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94928 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94931 "powerpc.tcc"
				)
				{
#line 207 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 94938 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 94944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94947 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 94952 "powerpc.tcc"
				> *DecodeOpVavgsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsh<
#line 38 "ppc.isa"
					CONFIG
#line 94958 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 94965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 94968 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 94972 "powerpc.tcc"
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 94976 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 94980 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 94983 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 94987 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 94990 "powerpc.tcc"
				)
				{
#line 213 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 94997 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95003 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95006 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95011 "powerpc.tcc"
				> *DecodeOpVavgsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgsw<
#line 38 "ppc.isa"
					CONFIG
#line 95017 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95027 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95031 "powerpc.tcc"
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 95035 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95039 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95042 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95046 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95049 "powerpc.tcc"
				)
				{
#line 219 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavgub v" << vd << ", v" << va << ", v" << vb;
					}
#line 95056 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95062 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95065 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95070 "powerpc.tcc"
				> *DecodeOpVavgub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavgub<
#line 38 "ppc.isa"
					CONFIG
#line 95076 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95086 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95090 "powerpc.tcc"
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 95094 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95098 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95101 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95105 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95108 "powerpc.tcc"
				)
				{
#line 225 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavguh v" << vd << ", v" << va << ", v" << vb;
					}
#line 95115 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95121 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95124 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95129 "powerpc.tcc"
				> *DecodeOpVavguh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavguh<
#line 38 "ppc.isa"
					CONFIG
#line 95135 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95145 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95149 "powerpc.tcc"
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 95153 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95157 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95160 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95164 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95167 "powerpc.tcc"
				)
				{
#line 231 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vavguw v" << vd << ", v" << va << ", v" << vb;
					}
#line 95174 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95180 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95183 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95188 "powerpc.tcc"
				> *DecodeOpVavguw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVavguw<
#line 38 "ppc.isa"
					CONFIG
#line 95194 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95204 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95208 "powerpc.tcc"
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 95212 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95216 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95219 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95223 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95226 "powerpc.tcc"
				)
				{
#line 237 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcfsx v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 95233 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95239 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95242 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95247 "powerpc.tcc"
				> *DecodeOpVcfsx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcfsx<
#line 38 "ppc.isa"
					CONFIG
#line 95253 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95263 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95267 "powerpc.tcc"
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 95271 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95275 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95278 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95282 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95285 "powerpc.tcc"
				)
				{
#line 243 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcfux v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 95292 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95298 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95301 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95306 "powerpc.tcc"
				> *DecodeOpVcfux(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcfux<
#line 38 "ppc.isa"
					CONFIG
#line 95312 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95322 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95326 "powerpc.tcc"
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 95330 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95334 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95337 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95341 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95344 "powerpc.tcc"
				)
				{
#line 249 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpbfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 95351 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95360 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95365 "powerpc.tcc"
				> *DecodeOpVcmpbfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpbfp<
#line 38 "ppc.isa"
					CONFIG
#line 95371 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95378 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95381 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95385 "powerpc.tcc"
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 95389 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95393 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95396 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95400 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95403 "powerpc.tcc"
				)
				{
#line 255 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpeqfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 95410 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95419 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95424 "powerpc.tcc"
				> *DecodeOpVcmpeqfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpeqfp<
#line 38 "ppc.isa"
					CONFIG
#line 95430 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95440 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95444 "powerpc.tcc"
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 95448 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95452 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95455 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95459 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95462 "powerpc.tcc"
				)
				{
#line 261 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequb" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 95469 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95478 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95483 "powerpc.tcc"
				> *DecodeOpVcmpequb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequb<
#line 38 "ppc.isa"
					CONFIG
#line 95489 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95496 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95499 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95503 "powerpc.tcc"
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 95507 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95511 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95514 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95518 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95521 "powerpc.tcc"
				)
				{
#line 267 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 95528 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95534 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95537 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95542 "powerpc.tcc"
				> *DecodeOpVcmpequh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequh<
#line 38 "ppc.isa"
					CONFIG
#line 95548 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95558 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95562 "powerpc.tcc"
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 95566 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95570 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95573 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95577 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95580 "powerpc.tcc"
				)
				{
#line 273 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpequw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 95587 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95593 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95596 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95601 "powerpc.tcc"
				> *DecodeOpVcmpequw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpequw<
#line 38 "ppc.isa"
					CONFIG
#line 95607 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95614 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95617 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95621 "powerpc.tcc"
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 95625 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95629 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95632 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95636 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95639 "powerpc.tcc"
				)
				{
#line 279 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgefp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 95646 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95655 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95660 "powerpc.tcc"
				> *DecodeOpVcmpgefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgefp<
#line 38 "ppc.isa"
					CONFIG
#line 95666 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95676 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95680 "powerpc.tcc"
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 95684 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95688 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95691 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95695 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95698 "powerpc.tcc"
				)
				{
#line 285 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtfp" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 95705 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95711 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95714 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95719 "powerpc.tcc"
				> *DecodeOpVcmpgtfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtfp<
#line 38 "ppc.isa"
					CONFIG
#line 95725 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95732 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95735 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95739 "powerpc.tcc"
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 95743 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95747 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95750 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95754 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95757 "powerpc.tcc"
				)
				{
#line 291 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsb" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 95764 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95770 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95773 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95778 "powerpc.tcc"
				> *DecodeOpVcmpgtsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsb<
#line 38 "ppc.isa"
					CONFIG
#line 95784 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95794 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95798 "powerpc.tcc"
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 95802 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95806 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95809 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95813 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95816 "powerpc.tcc"
				)
				{
#line 297 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 95823 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95829 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95832 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95837 "powerpc.tcc"
				> *DecodeOpVcmpgtsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsh<
#line 38 "ppc.isa"
					CONFIG
#line 95843 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95853 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95857 "powerpc.tcc"
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 95861 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95865 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95868 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95872 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95875 "powerpc.tcc"
				)
				{
#line 303 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtsw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 95882 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95888 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95891 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95896 "powerpc.tcc"
				> *DecodeOpVcmpgtsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtsw<
#line 38 "ppc.isa"
					CONFIG
#line 95902 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95909 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95912 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95916 "powerpc.tcc"
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 95920 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95924 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95927 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95931 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95934 "powerpc.tcc"
				)
				{
#line 309 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtub" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 95941 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 95947 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95950 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 95955 "powerpc.tcc"
				> *DecodeOpVcmpgtub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtub<
#line 38 "ppc.isa"
					CONFIG
#line 95961 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 95968 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 95971 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 95975 "powerpc.tcc"
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 95979 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 95983 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 95986 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 95990 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 95993 "powerpc.tcc"
				)
				{
#line 315 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtuh" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 96000 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96006 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96009 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96014 "powerpc.tcc"
				> *DecodeOpVcmpgtuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtuh<
#line 38 "ppc.isa"
					CONFIG
#line 96020 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96027 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96030 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96034 "powerpc.tcc"
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 96038 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96042 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96045 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96049 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96052 "powerpc.tcc"
				)
				{
#line 321 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vcmpgtuw" << (rc ? "." : "") << " v" << vd << ", v" << va << ", v" << vb;
					}
#line 96059 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96065 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96068 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96073 "powerpc.tcc"
				> *DecodeOpVcmpgtuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVcmpgtuw<
#line 38 "ppc.isa"
					CONFIG
#line 96079 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96086 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96089 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96093 "powerpc.tcc"
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 96097 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96101 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96104 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96108 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96111 "powerpc.tcc"
				)
				{
#line 327 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vctsxs v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 96118 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96124 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96127 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96132 "powerpc.tcc"
				> *DecodeOpVctsxs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVctsxs<
#line 38 "ppc.isa"
					CONFIG
#line 96138 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96148 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96152 "powerpc.tcc"
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 96156 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96160 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96163 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96167 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96170 "powerpc.tcc"
				)
				{
#line 333 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vctuxs v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 96177 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96186 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96191 "powerpc.tcc"
				> *DecodeOpVctuxs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVctuxs<
#line 38 "ppc.isa"
					CONFIG
#line 96197 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96204 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96207 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96211 "powerpc.tcc"
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 96215 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96219 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96222 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96226 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96229 "powerpc.tcc"
				)
				{
#line 339 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vexptefp v" << vd << ", v" << vb;
					}
#line 96236 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96245 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96250 "powerpc.tcc"
				> *DecodeOpVexptefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVexptefp<
#line 38 "ppc.isa"
					CONFIG
#line 96256 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96263 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96266 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96270 "powerpc.tcc"
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 96274 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96278 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96281 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96285 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96288 "powerpc.tcc"
				)
				{
#line 345 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vlogefp v" << vd << ", v" << vb;
					}
#line 96295 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96301 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96304 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96309 "powerpc.tcc"
				> *DecodeOpVlogefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVlogefp<
#line 38 "ppc.isa"
					CONFIG
#line 96315 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96322 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96325 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96329 "powerpc.tcc"
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 96333 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96337 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96340 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96344 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96347 "powerpc.tcc"
				)
				{
#line 351 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaddfp v" << vd << ", v" << va << ", v" << vc << ", v" << vb;
					}
#line 96354 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96363 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96368 "powerpc.tcc"
				> *DecodeOpVmaddfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 96374 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96381 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96384 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96388 "powerpc.tcc"
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 96392 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96396 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96399 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96403 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96406 "powerpc.tcc"
				)
				{
#line 357 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 96413 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96419 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96422 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96427 "powerpc.tcc"
				> *DecodeOpVmaxfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxfp<
#line 38 "ppc.isa"
					CONFIG
#line 96433 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96443 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96447 "powerpc.tcc"
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 96451 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96455 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96458 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96462 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96465 "powerpc.tcc"
				)
				{
#line 363 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 96472 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96478 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96481 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96486 "powerpc.tcc"
				> *DecodeOpVmaxsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsb<
#line 38 "ppc.isa"
					CONFIG
#line 96492 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96499 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96502 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96506 "powerpc.tcc"
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 96510 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96514 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96517 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96521 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96524 "powerpc.tcc"
				)
				{
#line 369 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 96531 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96537 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96540 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96545 "powerpc.tcc"
				> *DecodeOpVmaxsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsh<
#line 38 "ppc.isa"
					CONFIG
#line 96551 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96561 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96565 "powerpc.tcc"
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 96569 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96573 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96576 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96580 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96583 "powerpc.tcc"
				)
				{
#line 375 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 96590 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96596 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96599 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96604 "powerpc.tcc"
				> *DecodeOpVmaxsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxsw<
#line 38 "ppc.isa"
					CONFIG
#line 96610 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96617 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96620 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96624 "powerpc.tcc"
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 96628 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96632 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96635 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96639 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96642 "powerpc.tcc"
				)
				{
#line 381 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxub v" << vd << ", v" << va << ", v" << vb;
					}
#line 96649 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96655 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96658 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96663 "powerpc.tcc"
				> *DecodeOpVmaxub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxub<
#line 38 "ppc.isa"
					CONFIG
#line 96669 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96676 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96679 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96683 "powerpc.tcc"
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 96687 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96691 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96694 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96698 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96701 "powerpc.tcc"
				)
				{
#line 387 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 96708 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96714 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96717 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96722 "powerpc.tcc"
				> *DecodeOpVmaxuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxuh<
#line 38 "ppc.isa"
					CONFIG
#line 96728 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96735 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96738 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96742 "powerpc.tcc"
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 96746 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96750 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96753 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96757 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96760 "powerpc.tcc"
				)
				{
#line 393 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmaxuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 96767 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96773 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96776 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96781 "powerpc.tcc"
				> *DecodeOpVmaxuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmaxuw<
#line 38 "ppc.isa"
					CONFIG
#line 96787 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96797 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96801 "powerpc.tcc"
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 96805 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96809 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96812 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96816 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96819 "powerpc.tcc"
				)
				{
#line 399 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmhaddshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 96826 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96832 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96835 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96840 "powerpc.tcc"
				> *DecodeOpVmhaddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmhaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 96846 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96853 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96856 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96860 "powerpc.tcc"
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 96864 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96868 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96871 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96875 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96878 "powerpc.tcc"
				)
				{
#line 405 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmhraddshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 96885 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96891 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96894 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96899 "powerpc.tcc"
				> *DecodeOpVmhraddshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmhraddshs<
#line 38 "ppc.isa"
					CONFIG
#line 96905 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96912 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96915 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96919 "powerpc.tcc"
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 96923 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96927 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96930 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96934 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96937 "powerpc.tcc"
				)
				{
#line 411 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 96944 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 96950 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96953 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 96958 "powerpc.tcc"
				> *DecodeOpVminfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminfp<
#line 38 "ppc.isa"
					CONFIG
#line 96964 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 96971 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 96974 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 96978 "powerpc.tcc"
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 96982 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 96986 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 96989 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 96993 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 96996 "powerpc.tcc"
				)
				{
#line 417 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsb v" << vd << ", v" << va << ", v" << vb;
					}
#line 97003 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97009 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97012 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97017 "powerpc.tcc"
				> *DecodeOpVminsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsb<
#line 38 "ppc.isa"
					CONFIG
#line 97023 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97033 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97037 "powerpc.tcc"
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 97041 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97045 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97048 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97052 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97055 "powerpc.tcc"
				)
				{
#line 423 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsh v" << vd << ", v" << va << ", v" << vb;
					}
#line 97062 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97068 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97071 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97076 "powerpc.tcc"
				> *DecodeOpVminsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsh<
#line 38 "ppc.isa"
					CONFIG
#line 97082 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97089 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97092 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97096 "powerpc.tcc"
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 97100 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97104 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97107 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97111 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97114 "powerpc.tcc"
				)
				{
#line 429 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminsw v" << vd << ", v" << va << ", v" << vb;
					}
#line 97121 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97127 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97130 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97135 "powerpc.tcc"
				> *DecodeOpVminsw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminsw<
#line 38 "ppc.isa"
					CONFIG
#line 97141 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97148 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97151 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97155 "powerpc.tcc"
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 97159 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97163 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97166 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97170 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97173 "powerpc.tcc"
				)
				{
#line 435 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminub v" << vd << ", v" << va << ", v" << vb;
					}
#line 97180 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97186 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97189 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97194 "powerpc.tcc"
				> *DecodeOpVminub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminub<
#line 38 "ppc.isa"
					CONFIG
#line 97200 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97207 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97210 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97214 "powerpc.tcc"
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 97218 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97222 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97225 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97229 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97232 "powerpc.tcc"
				)
				{
#line 441 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 97239 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97248 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97253 "powerpc.tcc"
				> *DecodeOpVminuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminuh<
#line 38 "ppc.isa"
					CONFIG
#line 97259 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97266 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97269 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97273 "powerpc.tcc"
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 97277 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97281 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97284 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97288 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97291 "powerpc.tcc"
				)
				{
#line 447 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vminuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 97298 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97304 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97307 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97312 "powerpc.tcc"
				> *DecodeOpVminuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVminuw<
#line 38 "ppc.isa"
					CONFIG
#line 97318 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97328 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97332 "powerpc.tcc"
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 97336 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97340 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97343 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97347 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97350 "powerpc.tcc"
				)
				{
#line 453 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmladduhm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 97357 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97363 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97366 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97371 "powerpc.tcc"
				> *DecodeOpVmladduhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmladduhm<
#line 38 "ppc.isa"
					CONFIG
#line 97377 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97384 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97387 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97391 "powerpc.tcc"
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 97395 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97399 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97402 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97406 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97409 "powerpc.tcc"
				)
				{
#line 459 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghb v" << vd << ", v" << va << ", v" << vb;
					}
#line 97416 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97422 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97425 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97430 "powerpc.tcc"
				> *DecodeOpVmrghb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghb<
#line 38 "ppc.isa"
					CONFIG
#line 97436 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97443 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97446 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97450 "powerpc.tcc"
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 97454 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97458 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97461 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97465 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97468 "powerpc.tcc"
				)
				{
#line 465 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghh v" << vd << ", v" << va << ", v" << vb;
					}
#line 97475 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97481 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97484 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97489 "powerpc.tcc"
				> *DecodeOpVmrghh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghh<
#line 38 "ppc.isa"
					CONFIG
#line 97495 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97502 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97505 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97509 "powerpc.tcc"
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 97513 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97517 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97520 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97524 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97527 "powerpc.tcc"
				)
				{
#line 471 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrghw v" << vd << ", v" << va << ", v" << vb;
					}
#line 97534 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97540 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97543 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97548 "powerpc.tcc"
				> *DecodeOpVmrghw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrghw<
#line 38 "ppc.isa"
					CONFIG
#line 97554 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97561 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97564 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97568 "powerpc.tcc"
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 97572 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97576 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97579 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97583 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97586 "powerpc.tcc"
				)
				{
#line 477 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglb v" << vd << ", v" << va << ", v" << vb;
					}
#line 97593 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97599 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97602 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97607 "powerpc.tcc"
				> *DecodeOpVmrglb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglb<
#line 38 "ppc.isa"
					CONFIG
#line 97613 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97623 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97627 "powerpc.tcc"
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 97631 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97635 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97638 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97642 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97645 "powerpc.tcc"
				)
				{
#line 483 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglh v" << vd << ", v" << va << ", v" << vb;
					}
#line 97652 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97661 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97666 "powerpc.tcc"
				> *DecodeOpVmrglh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglh<
#line 38 "ppc.isa"
					CONFIG
#line 97672 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97679 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97682 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97686 "powerpc.tcc"
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 97690 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97694 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97697 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97701 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97704 "powerpc.tcc"
				)
				{
#line 489 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmrglw v" << vd << ", v" << va << ", v" << vb;
					}
#line 97711 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97720 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97725 "powerpc.tcc"
				> *DecodeOpVmrglw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmrglw<
#line 38 "ppc.isa"
					CONFIG
#line 97731 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97738 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97741 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97745 "powerpc.tcc"
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 97749 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97753 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97756 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97760 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97763 "powerpc.tcc"
				)
				{
#line 495 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsummbm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 97770 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97776 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97779 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97784 "powerpc.tcc"
				> *DecodeOpVmsummbm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsummbm<
#line 38 "ppc.isa"
					CONFIG
#line 97790 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97800 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97804 "powerpc.tcc"
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 97808 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97812 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97815 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97819 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97822 "powerpc.tcc"
				)
				{
#line 501 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumshm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 97829 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97835 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97838 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97843 "powerpc.tcc"
				> *DecodeOpVmsumshm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumshm<
#line 38 "ppc.isa"
					CONFIG
#line 97849 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97856 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97859 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97863 "powerpc.tcc"
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 97867 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97871 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97874 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97878 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97881 "powerpc.tcc"
				)
				{
#line 507 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumshs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 97888 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97894 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97897 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97902 "powerpc.tcc"
				> *DecodeOpVmsumshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumshs<
#line 38 "ppc.isa"
					CONFIG
#line 97908 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97918 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97922 "powerpc.tcc"
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 97926 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97930 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97933 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97937 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97940 "powerpc.tcc"
				)
				{
#line 513 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumubm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 97947 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 97953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97956 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 97961 "powerpc.tcc"
				> *DecodeOpVmsumubm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumubm<
#line 38 "ppc.isa"
					CONFIG
#line 97967 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 97974 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 97977 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 97981 "powerpc.tcc"
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 97985 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 97989 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 97992 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 97996 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 97999 "powerpc.tcc"
				)
				{
#line 519 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumuhm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 98006 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98015 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98020 "powerpc.tcc"
				> *DecodeOpVmsumuhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumuhm<
#line 38 "ppc.isa"
					CONFIG
#line 98026 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98033 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98036 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98040 "powerpc.tcc"
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 98044 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98048 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98051 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98055 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98058 "powerpc.tcc"
				)
				{
#line 525 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmsumuhs v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 98065 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98071 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98074 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98079 "powerpc.tcc"
				> *DecodeOpVmsumuhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmsumuhs<
#line 38 "ppc.isa"
					CONFIG
#line 98085 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98095 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98099 "powerpc.tcc"
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 98103 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98107 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98110 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98114 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98117 "powerpc.tcc"
				)
				{
#line 531 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulesb v" << vd << ", v" << va << ", v" << vb;
					}
#line 98124 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98130 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98133 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98138 "powerpc.tcc"
				> *DecodeOpVmulesb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulesb<
#line 38 "ppc.isa"
					CONFIG
#line 98144 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98151 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98154 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98158 "powerpc.tcc"
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 98162 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98166 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98169 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98173 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98176 "powerpc.tcc"
				)
				{
#line 537 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulesh v" << vd << ", v" << va << ", v" << vb;
					}
#line 98183 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98189 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98192 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98197 "powerpc.tcc"
				> *DecodeOpVmulesh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulesh<
#line 38 "ppc.isa"
					CONFIG
#line 98203 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98213 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98217 "powerpc.tcc"
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 98221 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98225 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98228 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98232 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98235 "powerpc.tcc"
				)
				{
#line 543 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuleub v" << vd << ", v" << va << ", v" << vb;
					}
#line 98242 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98248 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98251 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98256 "powerpc.tcc"
				> *DecodeOpVmuleub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuleub<
#line 38 "ppc.isa"
					CONFIG
#line 98262 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98272 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98276 "powerpc.tcc"
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 98280 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98284 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98287 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98291 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98294 "powerpc.tcc"
				)
				{
#line 549 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuleuh v" << vd << ", v" << va << ", v" << vb;
					}
#line 98301 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98307 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98310 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98315 "powerpc.tcc"
				> *DecodeOpVmuleuh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuleuh<
#line 38 "ppc.isa"
					CONFIG
#line 98321 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98328 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98331 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98335 "powerpc.tcc"
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 98339 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98343 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98346 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98350 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98353 "powerpc.tcc"
				)
				{
#line 555 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulosb v" << vd << ", v" << va << ", v" << vb;
					}
#line 98360 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98366 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98369 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98374 "powerpc.tcc"
				> *DecodeOpVmulosb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulosb<
#line 38 "ppc.isa"
					CONFIG
#line 98380 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98387 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98390 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98394 "powerpc.tcc"
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 98398 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98402 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98405 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98409 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98412 "powerpc.tcc"
				)
				{
#line 561 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulosh v" << vd << ", v" << va << ", v" << vb;
					}
#line 98419 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98425 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98428 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98433 "powerpc.tcc"
				> *DecodeOpVmulosh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulosh<
#line 38 "ppc.isa"
					CONFIG
#line 98439 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98446 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98449 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98453 "powerpc.tcc"
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 98457 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98461 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98464 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98468 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98471 "powerpc.tcc"
				)
				{
#line 567 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmuloub v" << vd << ", v" << va << ", v" << vb;
					}
#line 98478 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98487 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98492 "powerpc.tcc"
				> *DecodeOpVmuloub(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmuloub<
#line 38 "ppc.isa"
					CONFIG
#line 98498 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98508 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98512 "powerpc.tcc"
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 98516 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98520 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98523 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98527 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98530 "powerpc.tcc"
				)
				{
#line 573 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vmulouh v" << vd << ", v" << va << ", v" << vb;
					}
#line 98537 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98543 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98546 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98551 "powerpc.tcc"
				> *DecodeOpVmulouh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVmulouh<
#line 38 "ppc.isa"
					CONFIG
#line 98557 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98564 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98567 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98571 "powerpc.tcc"
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 98575 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98579 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98582 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98586 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98589 "powerpc.tcc"
				)
				{
#line 579 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vnmsubfp v" << vd << ", v" << va << ", v" << vc << ", v" << vb;
					}
#line 98596 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98605 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98610 "powerpc.tcc"
				> *DecodeOpVnmsubfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVnmsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 98616 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98623 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98626 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98630 "powerpc.tcc"
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 98634 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98638 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98641 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98645 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98648 "powerpc.tcc"
				)
				{
#line 585 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vnor v" << vd << ", v" << va << ", v" << vb;
					}
#line 98655 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98661 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98664 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98669 "powerpc.tcc"
				> *DecodeOpVnor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVnor<
#line 38 "ppc.isa"
					CONFIG
#line 98675 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98685 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98689 "powerpc.tcc"
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 98693 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98697 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98700 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98704 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98707 "powerpc.tcc"
				)
				{
#line 591 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vor v" << vd << ", v" << va << ", v" << vb;
					}
#line 98714 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98723 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98728 "powerpc.tcc"
				> *DecodeOpVor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVor<
#line 38 "ppc.isa"
					CONFIG
#line 98734 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98744 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98748 "powerpc.tcc"
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 98752 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98756 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98759 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98763 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98766 "powerpc.tcc"
				)
				{
#line 597 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vperm v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 98773 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98779 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98782 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98787 "powerpc.tcc"
				> *DecodeOpVperm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVperm<
#line 38 "ppc.isa"
					CONFIG
#line 98793 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98800 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98803 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98807 "powerpc.tcc"
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 98811 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98815 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98818 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98822 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98825 "powerpc.tcc"
				)
				{
#line 603 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkpx v" << vd << ", v" << va << ", v" << vb;
					}
#line 98832 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98838 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98841 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98846 "powerpc.tcc"
				> *DecodeOpVpkpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkpx<
#line 38 "ppc.isa"
					CONFIG
#line 98852 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98859 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98862 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98866 "powerpc.tcc"
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 98870 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98874 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98877 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98881 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98884 "powerpc.tcc"
				)
				{
#line 609 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkshss v" << vd << ", v" << va << ", v" << vb;
					}
#line 98891 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98900 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98905 "powerpc.tcc"
				> *DecodeOpVpkshss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkshss<
#line 38 "ppc.isa"
					CONFIG
#line 98911 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98918 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98921 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98925 "powerpc.tcc"
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 98929 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98933 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98936 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98940 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 98943 "powerpc.tcc"
				)
				{
#line 615 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkshus v" << vd << ", v" << va << ", v" << vb;
					}
#line 98950 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 98956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98959 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 98964 "powerpc.tcc"
				> *DecodeOpVpkshus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkshus<
#line 38 "ppc.isa"
					CONFIG
#line 98970 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 98977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 98980 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 98984 "powerpc.tcc"
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 98988 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 98992 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 98995 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 98999 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99002 "powerpc.tcc"
				)
				{
#line 621 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkswss v" << vd << ", v" << va << ", v" << vb;
					}
#line 99009 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99018 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99023 "powerpc.tcc"
				> *DecodeOpVpkswss(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkswss<
#line 38 "ppc.isa"
					CONFIG
#line 99029 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99036 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99039 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99043 "powerpc.tcc"
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 99047 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99051 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99054 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99058 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99061 "powerpc.tcc"
				)
				{
#line 627 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkswus v" << vd << ", v" << va << ", v" << vb;
					}
#line 99068 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99074 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99077 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99082 "powerpc.tcc"
				> *DecodeOpVpkswus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkswus<
#line 38 "ppc.isa"
					CONFIG
#line 99088 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99098 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99102 "powerpc.tcc"
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 99106 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99110 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99113 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99117 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99120 "powerpc.tcc"
				)
				{
#line 633 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuhum v" << vd << ", v" << va << ", v" << vb;
					}
#line 99127 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99133 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99136 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99141 "powerpc.tcc"
				> *DecodeOpVpkuhum(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuhum<
#line 38 "ppc.isa"
					CONFIG
#line 99147 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99154 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99157 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99161 "powerpc.tcc"
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 99165 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99169 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99172 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99176 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99179 "powerpc.tcc"
				)
				{
#line 639 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuhus v" << vd << ", v" << va << ", v" << vb;
					}
#line 99186 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99192 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99195 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99200 "powerpc.tcc"
				> *DecodeOpVpkuhus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuhus<
#line 38 "ppc.isa"
					CONFIG
#line 99206 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99216 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99220 "powerpc.tcc"
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 99224 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99228 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99231 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99235 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99238 "powerpc.tcc"
				)
				{
#line 645 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuwum v" << vd << ", v" << va << ", v" << vb;
					}
#line 99245 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99251 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99254 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99259 "powerpc.tcc"
				> *DecodeOpVpkuwum(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuwum<
#line 38 "ppc.isa"
					CONFIG
#line 99265 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99275 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99279 "powerpc.tcc"
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 99283 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99287 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99290 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99294 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99297 "powerpc.tcc"
				)
				{
#line 651 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vpkuwus v" << vd << ", v" << va << ", v" << vb;
					}
#line 99304 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99313 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99318 "powerpc.tcc"
				> *DecodeOpVpkuwus(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVpkuwus<
#line 38 "ppc.isa"
					CONFIG
#line 99324 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99334 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99338 "powerpc.tcc"
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 99342 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99346 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99349 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99353 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99356 "powerpc.tcc"
				)
				{
#line 657 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrefp v" << vd << ", v" << vb;
					}
#line 99363 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99369 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99372 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99377 "powerpc.tcc"
				> *DecodeOpVrefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrefp<
#line 38 "ppc.isa"
					CONFIG
#line 99383 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99390 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99393 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99397 "powerpc.tcc"
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 99401 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99405 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99408 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99412 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99415 "powerpc.tcc"
				)
				{
#line 663 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfim v" << vd << ", v" << vb;
					}
#line 99422 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99428 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99431 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99436 "powerpc.tcc"
				> *DecodeOpVrfim(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfim<
#line 38 "ppc.isa"
					CONFIG
#line 99442 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99449 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99452 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99456 "powerpc.tcc"
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 99460 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99464 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99467 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99471 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99474 "powerpc.tcc"
				)
				{
#line 669 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfin v" << vd << ", v" << vb;
					}
#line 99481 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99487 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99490 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99495 "powerpc.tcc"
				> *DecodeOpVrfin(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfin<
#line 38 "ppc.isa"
					CONFIG
#line 99501 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99511 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99515 "powerpc.tcc"
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 99519 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99523 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99526 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99530 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99533 "powerpc.tcc"
				)
				{
#line 675 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfip v" << vd << ", v" << vb;
					}
#line 99540 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99546 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99549 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99554 "powerpc.tcc"
				> *DecodeOpVrfip(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfip<
#line 38 "ppc.isa"
					CONFIG
#line 99560 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99570 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99574 "powerpc.tcc"
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 99578 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99582 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99585 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99589 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99592 "powerpc.tcc"
				)
				{
#line 681 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrfiz v" << vd << ", v" << vb;
					}
#line 99599 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99608 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99613 "powerpc.tcc"
				> *DecodeOpVrfiz(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrfiz<
#line 38 "ppc.isa"
					CONFIG
#line 99619 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99626 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99629 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99633 "powerpc.tcc"
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 99637 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99641 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99644 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99648 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99651 "powerpc.tcc"
				)
				{
#line 687 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlb v" << vd << ", v" << va << ", v" << vb;
					}
#line 99658 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99664 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99667 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99672 "powerpc.tcc"
				> *DecodeOpVrlb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlb<
#line 38 "ppc.isa"
					CONFIG
#line 99678 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99685 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99688 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99692 "powerpc.tcc"
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 99696 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99700 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99703 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99707 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99710 "powerpc.tcc"
				)
				{
#line 693 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlh v" << vd << ", v" << va << ", v" << vb;
					}
#line 99717 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99726 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99731 "powerpc.tcc"
				> *DecodeOpVrlh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlh<
#line 38 "ppc.isa"
					CONFIG
#line 99737 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99744 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99747 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99751 "powerpc.tcc"
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 99755 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99759 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99762 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99766 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99769 "powerpc.tcc"
				)
				{
#line 699 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrlw v" << vd << ", v" << va << ", v" << vb;
					}
#line 99776 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99785 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99790 "powerpc.tcc"
				> *DecodeOpVrlw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrlw<
#line 38 "ppc.isa"
					CONFIG
#line 99796 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99803 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99806 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99810 "powerpc.tcc"
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 99814 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99818 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99821 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99825 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99828 "powerpc.tcc"
				)
				{
#line 705 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vrsqrtefp v" << vd << ", v" << vb;
					}
#line 99835 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99841 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99844 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99849 "powerpc.tcc"
				> *DecodeOpVrsqrtefp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVrsqrtefp<
#line 38 "ppc.isa"
					CONFIG
#line 99855 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99865 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99869 "powerpc.tcc"
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 99873 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99877 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99880 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99884 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99887 "powerpc.tcc"
				)
				{
#line 711 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsel v" << vd << ", v" << va << ", v" << vb << ", v" << vc;
					}
#line 99894 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99903 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99908 "powerpc.tcc"
				> *DecodeOpVsel(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsel<
#line 38 "ppc.isa"
					CONFIG
#line 99914 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99924 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99928 "powerpc.tcc"
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 99932 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99936 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99939 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 99943 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 99946 "powerpc.tcc"
				)
				{
#line 717 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsl v" << vd << ", v" << va << ", v" << vb;
					}
#line 99953 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 99959 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99962 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 99967 "powerpc.tcc"
				> *DecodeOpVsl(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsl<
#line 38 "ppc.isa"
					CONFIG
#line 99973 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 99980 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 99983 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 99987 "powerpc.tcc"
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 99991 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 99995 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 99998 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100002 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100005 "powerpc.tcc"
				)
				{
#line 723 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslb v" << vd << ", v" << va << ", v" << vb;
					}
#line 100012 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100018 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100021 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100026 "powerpc.tcc"
				> *DecodeOpVslb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslb<
#line 38 "ppc.isa"
					CONFIG
#line 100032 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100039 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100042 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100046 "powerpc.tcc"
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 100050 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100054 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100057 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100061 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100064 "powerpc.tcc"
				)
				{
#line 729 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsldoi v" << vd << ", v" << va << ", v" << vb;
					}
#line 100071 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100077 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100080 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100085 "powerpc.tcc"
				> *DecodeOpVsldoi(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsldoi<
#line 38 "ppc.isa"
					CONFIG
#line 100091 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100098 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100101 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100105 "powerpc.tcc"
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 100109 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100113 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100116 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100120 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100123 "powerpc.tcc"
				)
				{
#line 735 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslh v" << vd << ", v" << va << ", v" << vb;
					}
#line 100130 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100136 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100139 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100144 "powerpc.tcc"
				> *DecodeOpVslh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslh<
#line 38 "ppc.isa"
					CONFIG
#line 100150 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100157 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100160 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100164 "powerpc.tcc"
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 100168 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100172 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100175 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100179 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100182 "powerpc.tcc"
				)
				{
#line 741 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslo v" << vd << ", v" << va << ", v" << vb;
					}
#line 100189 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100195 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100198 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100203 "powerpc.tcc"
				> *DecodeOpVslo(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslo<
#line 38 "ppc.isa"
					CONFIG
#line 100209 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100216 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100219 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100223 "powerpc.tcc"
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 100227 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100231 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100234 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100238 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100241 "powerpc.tcc"
				)
				{
#line 747 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vslw v" << vd << ", v" << va << ", v" << vb;
					}
#line 100248 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100254 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100257 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100262 "powerpc.tcc"
				> *DecodeOpVslw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVslw<
#line 38 "ppc.isa"
					CONFIG
#line 100268 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100275 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100278 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100282 "powerpc.tcc"
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 100286 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100290 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100293 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100297 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100300 "powerpc.tcc"
				)
				{
#line 753 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltb v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 100307 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100313 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100316 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100321 "powerpc.tcc"
				> *DecodeOpVspltb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltb<
#line 38 "ppc.isa"
					CONFIG
#line 100327 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100334 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100337 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100341 "powerpc.tcc"
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 100345 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100349 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100352 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100356 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100359 "powerpc.tcc"
				)
				{
#line 759 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsplth v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 100366 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100375 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100380 "powerpc.tcc"
				> *DecodeOpVsplth(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsplth<
#line 38 "ppc.isa"
					CONFIG
#line 100386 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100393 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100396 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100400 "powerpc.tcc"
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 100404 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100408 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100411 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100415 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100418 "powerpc.tcc"
				)
				{
#line 765 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltisb v" << vd << ", v" << vb << ", " << (int) simm;
					}
#line 100425 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100431 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100434 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100439 "powerpc.tcc"
				> *DecodeOpVspltisb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltisb<
#line 38 "ppc.isa"
					CONFIG
#line 100445 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100455 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100459 "powerpc.tcc"
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 100463 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100467 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100470 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100474 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100477 "powerpc.tcc"
				)
				{
#line 771 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltish v" << vd << ", v" << vb << ", " << simm;
					}
#line 100484 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100490 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100493 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100498 "powerpc.tcc"
				> *DecodeOpVspltish(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltish<
#line 38 "ppc.isa"
					CONFIG
#line 100504 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100514 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100518 "powerpc.tcc"
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 100522 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100526 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100529 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100533 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100536 "powerpc.tcc"
				)
				{
#line 777 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltisw v" << vd << ", v" << vb << ", " << simm;
					}
#line 100543 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100549 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100552 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100557 "powerpc.tcc"
				> *DecodeOpVspltisw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltisw<
#line 38 "ppc.isa"
					CONFIG
#line 100563 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100570 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100573 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100577 "powerpc.tcc"
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 100581 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100585 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100588 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100592 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100595 "powerpc.tcc"
				)
				{
#line 783 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vspltiw v" << vd << ", v" << vb << ", 0x" << std::hex << uimm << std::dec;
					}
#line 100602 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100608 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100611 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100616 "powerpc.tcc"
				> *DecodeOpVspltw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVspltw<
#line 38 "ppc.isa"
					CONFIG
#line 100622 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100629 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100632 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100636 "powerpc.tcc"
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 100640 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100644 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100647 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100651 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100654 "powerpc.tcc"
				)
				{
#line 789 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsr v" << vd << ", v" << va << ", v" << vb;
					}
#line 100661 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100670 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100675 "powerpc.tcc"
				> *DecodeOpVsr(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsr<
#line 38 "ppc.isa"
					CONFIG
#line 100681 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100688 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100691 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100695 "powerpc.tcc"
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 100699 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100703 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100706 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100710 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100713 "powerpc.tcc"
				)
				{
#line 795 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrab v" << vd << ", v" << va << ", v" << vb;
					}
#line 100720 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100726 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100729 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100734 "powerpc.tcc"
				> *DecodeOpVsrab(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrab<
#line 38 "ppc.isa"
					CONFIG
#line 100740 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100750 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100754 "powerpc.tcc"
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 100758 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100762 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100765 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100769 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100772 "powerpc.tcc"
				)
				{
#line 801 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrah v" << vd << ", v" << va << ", v" << vb;
					}
#line 100779 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100788 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100793 "powerpc.tcc"
				> *DecodeOpVsrah(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrah<
#line 38 "ppc.isa"
					CONFIG
#line 100799 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100809 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100813 "powerpc.tcc"
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 100817 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100821 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100824 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100828 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100831 "powerpc.tcc"
				)
				{
#line 807 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsraw v" << vd << ", v" << va << ", v" << vb;
					}
#line 100838 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100844 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100847 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100852 "powerpc.tcc"
				> *DecodeOpVsraw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsraw<
#line 38 "ppc.isa"
					CONFIG
#line 100858 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100865 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100868 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100872 "powerpc.tcc"
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 100876 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100880 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100883 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100887 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100890 "powerpc.tcc"
				)
				{
#line 813 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrb v" << vd << ", v" << va << ", v" << vb;
					}
#line 100897 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100903 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100906 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100911 "powerpc.tcc"
				> *DecodeOpVsrb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrb<
#line 38 "ppc.isa"
					CONFIG
#line 100917 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100924 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100927 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100931 "powerpc.tcc"
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 100935 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100939 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 100942 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 100946 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 100949 "powerpc.tcc"
				)
				{
#line 819 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrh v" << vd << ", v" << va << ", v" << vb;
					}
#line 100956 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 100962 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100965 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 100970 "powerpc.tcc"
				> *DecodeOpVsrh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrh<
#line 38 "ppc.isa"
					CONFIG
#line 100976 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 100983 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 100986 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 100990 "powerpc.tcc"
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 100994 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 100998 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101001 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101005 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101008 "powerpc.tcc"
				)
				{
#line 825 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsro v" << vd << ", v" << va << ", v" << vb;
					}
#line 101015 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101021 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101024 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101029 "powerpc.tcc"
				> *DecodeOpVsro(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsro<
#line 38 "ppc.isa"
					CONFIG
#line 101035 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101045 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101049 "powerpc.tcc"
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 101053 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101057 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101060 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101064 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101067 "powerpc.tcc"
				)
				{
#line 831 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsrw v" << vd << ", v" << va << ", v" << vb;
					}
#line 101074 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101080 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101083 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101088 "powerpc.tcc"
				> *DecodeOpVsrw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsrw<
#line 38 "ppc.isa"
					CONFIG
#line 101094 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101101 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101104 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101108 "powerpc.tcc"
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 101112 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101116 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101119 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101123 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101126 "powerpc.tcc"
				)
				{
#line 837 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubcuw v" << vd << ", v" << va << ", v" << vb;
					}
#line 101133 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101142 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101147 "powerpc.tcc"
				> *DecodeOpVsubcuw(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubcuw<
#line 38 "ppc.isa"
					CONFIG
#line 101153 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101160 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101163 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101167 "powerpc.tcc"
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 101171 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101175 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101178 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101182 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101185 "powerpc.tcc"
				)
				{
#line 843 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubfp v" << vd << ", v" << va << ", v" << vb;
					}
#line 101192 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101198 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101201 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101206 "powerpc.tcc"
				> *DecodeOpVsubfp(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 101212 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101222 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101226 "powerpc.tcc"
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 101230 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101234 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101237 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101241 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101244 "powerpc.tcc"
				)
				{
#line 849 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubsbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 101251 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101260 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101265 "powerpc.tcc"
				> *DecodeOpVsubsbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubsbs<
#line 38 "ppc.isa"
					CONFIG
#line 101271 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101278 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101281 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101285 "powerpc.tcc"
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 101289 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101293 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101296 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101300 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101303 "powerpc.tcc"
				)
				{
#line 855 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubshs v" << vd << ", v" << va << ", v" << vb;
					}
#line 101310 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101316 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101319 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101324 "powerpc.tcc"
				> *DecodeOpVsubshs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubshs<
#line 38 "ppc.isa"
					CONFIG
#line 101330 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101340 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101344 "powerpc.tcc"
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 101348 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101352 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101355 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101359 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101362 "powerpc.tcc"
				)
				{
#line 861 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 101369 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101378 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101383 "powerpc.tcc"
				> *DecodeOpVsubsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubsws<
#line 38 "ppc.isa"
					CONFIG
#line 101389 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101399 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101403 "powerpc.tcc"
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 101407 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101411 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101414 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101418 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101421 "powerpc.tcc"
				)
				{
#line 867 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsububm v" << vd << ", v" << va << ", v" << vb;
					}
#line 101428 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101434 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101437 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101442 "powerpc.tcc"
				> *DecodeOpVsububm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsububm<
#line 38 "ppc.isa"
					CONFIG
#line 101448 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101455 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101458 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101462 "powerpc.tcc"
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 101466 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101470 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101473 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101477 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101480 "powerpc.tcc"
				)
				{
#line 873 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsububs v" << vd << ", v" << va << ", v" << vb;
					}
#line 101487 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101493 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101496 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101501 "powerpc.tcc"
				> *DecodeOpVsububs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsububs<
#line 38 "ppc.isa"
					CONFIG
#line 101507 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101514 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101517 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101521 "powerpc.tcc"
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 101525 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101529 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101532 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101536 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101539 "powerpc.tcc"
				)
				{
#line 879 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuhm v" << vd << ", v" << va << ", v" << vb;
					}
#line 101546 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101552 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101555 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101560 "powerpc.tcc"
				> *DecodeOpVsubuhm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuhm<
#line 38 "ppc.isa"
					CONFIG
#line 101566 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101576 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101580 "powerpc.tcc"
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 101584 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101588 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101591 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101595 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101598 "powerpc.tcc"
				)
				{
#line 885 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuhs v" << vd << ", v" << va << ", v" << vb;
					}
#line 101605 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101614 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101619 "powerpc.tcc"
				> *DecodeOpVsubuhs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuhs<
#line 38 "ppc.isa"
					CONFIG
#line 101625 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101635 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101639 "powerpc.tcc"
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 101643 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101647 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101650 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101654 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101657 "powerpc.tcc"
				)
				{
#line 891 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuwm v" << vd << ", v" << va << ", v" << vb;
					}
#line 101664 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101673 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101678 "powerpc.tcc"
				> *DecodeOpVsubuwm(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuwm<
#line 38 "ppc.isa"
					CONFIG
#line 101684 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101691 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101694 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101698 "powerpc.tcc"
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 101702 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101706 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101709 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101713 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101716 "powerpc.tcc"
				)
				{
#line 897 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsubuws v" << vd << ", v" << va << ", v" << vb;
					}
#line 101723 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101729 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101732 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101737 "powerpc.tcc"
				> *DecodeOpVsubuws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsubuws<
#line 38 "ppc.isa"
					CONFIG
#line 101743 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101750 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101753 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101757 "powerpc.tcc"
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 101761 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101765 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101768 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101772 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101775 "powerpc.tcc"
				)
				{
#line 903 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsumsws v" << vd << ", v" << va << ", v" << vb;
					}
#line 101782 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101788 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101791 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101796 "powerpc.tcc"
				> *DecodeOpVsumsws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsumsws<
#line 38 "ppc.isa"
					CONFIG
#line 101802 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101812 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101816 "powerpc.tcc"
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 101820 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101824 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101827 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101831 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101834 "powerpc.tcc"
				)
				{
#line 909 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum2sws v" << vd << ", v" << va << ", v" << vb;
					}
#line 101841 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101847 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101850 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101855 "powerpc.tcc"
				> *DecodeOpVsum2sws(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum2sws<
#line 38 "ppc.isa"
					CONFIG
#line 101861 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101871 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101875 "powerpc.tcc"
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 101879 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101883 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101886 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101890 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101893 "powerpc.tcc"
				)
				{
#line 915 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4sbs v" << vd << ", v" << va << ", v" << vb;
					}
#line 101900 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101906 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101909 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101914 "powerpc.tcc"
				> *DecodeOpVsum4sbs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4sbs<
#line 38 "ppc.isa"
					CONFIG
#line 101920 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101927 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101930 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101934 "powerpc.tcc"
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 101938 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 101942 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 101945 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 101949 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 101952 "powerpc.tcc"
				)
				{
#line 921 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4shs v" << vd << ", v" << va << ", v" << vb;
					}
#line 101959 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 101965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101968 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 101973 "powerpc.tcc"
				> *DecodeOpVsum4shs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4shs<
#line 38 "ppc.isa"
					CONFIG
#line 101979 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 101986 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 101989 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 101993 "powerpc.tcc"
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 101997 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 102001 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 102004 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 102008 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 102011 "powerpc.tcc"
				)
				{
#line 927 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vsum4ubs v" << vd << ", v" << va << ", v" << vb;
					}
#line 102018 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102024 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102027 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102032 "powerpc.tcc"
				> *DecodeOpVsum4ubs(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVsum4ubs<
#line 38 "ppc.isa"
					CONFIG
#line 102038 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102045 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102048 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 102052 "powerpc.tcc"
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 102056 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 102060 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 102063 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 102067 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 102070 "powerpc.tcc"
				)
				{
#line 933 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhpx v" << vd << ", v" << vb;
					}
#line 102077 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102083 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102086 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102091 "powerpc.tcc"
				> *DecodeOpVupkhpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhpx<
#line 38 "ppc.isa"
					CONFIG
#line 102097 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102107 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 102111 "powerpc.tcc"
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 102115 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 102119 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 102122 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 102126 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 102129 "powerpc.tcc"
				)
				{
#line 939 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhsb v" << vd << ", v" << vb;
					}
#line 102136 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102145 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102150 "powerpc.tcc"
				> *DecodeOpVupkhsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhsb<
#line 38 "ppc.isa"
					CONFIG
#line 102156 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102163 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102166 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 102170 "powerpc.tcc"
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 102174 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 102178 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 102181 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 102185 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 102188 "powerpc.tcc"
				)
				{
#line 945 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupkhsh v" << vd << ", v" << vb;
					}
#line 102195 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102201 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102204 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102209 "powerpc.tcc"
				> *DecodeOpVupkhsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupkhsh<
#line 38 "ppc.isa"
					CONFIG
#line 102215 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102222 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102225 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 102229 "powerpc.tcc"
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 102233 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 102237 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 102240 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 102244 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 102247 "powerpc.tcc"
				)
				{
#line 951 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklpx v" << vd << ", v" << vb;
					}
#line 102254 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102260 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102263 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102268 "powerpc.tcc"
				> *DecodeOpVupklpx(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklpx<
#line 38 "ppc.isa"
					CONFIG
#line 102274 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102281 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102284 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 102288 "powerpc.tcc"
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 102292 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 102296 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 102299 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 102303 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 102306 "powerpc.tcc"
				)
				{
#line 957 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklsb v" << vd << ", v" << vb;
					}
#line 102313 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102319 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102322 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102327 "powerpc.tcc"
				> *DecodeOpVupklsb(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklsb<
#line 38 "ppc.isa"
					CONFIG
#line 102333 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102340 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102343 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 102347 "powerpc.tcc"
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 102351 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 102355 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 102358 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 102362 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 102365 "powerpc.tcc"
				)
				{
#line 963 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vupklsh v" << vd << ", v" << vb;
					}
#line 102372 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102378 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102381 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102386 "powerpc.tcc"
				> *DecodeOpVupklsh(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVupklsh<
#line 38 "ppc.isa"
					CONFIG
#line 102392 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102399 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102402 "powerpc.tcc"
				>
#line 48 "ppc.isa"
				void
#line 102406 "powerpc.tcc"
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 102410 "powerpc.tcc"
				>::disasm(
#line 48 "ppc.isa"
				CPU<CONFIG> *
#line 102414 "powerpc.tcc"
#line 48 "ppc.isa"
				cpu
#line 102417 "powerpc.tcc"
				,
#line 48 "ppc.isa"
				ostream&
#line 102421 "powerpc.tcc"
#line 48 "ppc.isa"
				os
#line 102424 "powerpc.tcc"
				)
				{
#line 969 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					{
						os << "vxor v" << vd << ", v" << va << ", v" << vb;
					}
#line 102431 "powerpc.tcc"
				}

				template <
#line 38 "ppc.isa"
				class
#line 102437 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102440 "powerpc.tcc"
				>
				static Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102445 "powerpc.tcc"
				> *DecodeOpVxor(CodeType code, typename CONFIG::address_t addr)
				{
					return new OpVxor<
#line 38 "ppc.isa"
					CONFIG
#line 102451 "powerpc.tcc"
					>(code, addr);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102458 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102461 "powerpc.tcc"
				>
				OpAdd<
#line 38 "ppc.isa"
				CONFIG
#line 102466 "powerpc.tcc"
				>::OpAdd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102470 "powerpc.tcc"
				>(code, addr, "add")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102483 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102486 "powerpc.tcc"
				>
				OpAddc<
#line 38 "ppc.isa"
				CONFIG
#line 102491 "powerpc.tcc"
				>::OpAddc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102495 "powerpc.tcc"
				>(code, addr, "addc")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102511 "powerpc.tcc"
				>
				OpAdde<
#line 38 "ppc.isa"
				CONFIG
#line 102516 "powerpc.tcc"
				>::OpAdde(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102520 "powerpc.tcc"
				>(code, addr, "adde")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102533 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102536 "powerpc.tcc"
				>
				OpAddi<
#line 38 "ppc.isa"
				CONFIG
#line 102541 "powerpc.tcc"
				>::OpAddi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102545 "powerpc.tcc"
				>(code, addr, "addi")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102559 "powerpc.tcc"
				>
				OpAddic<
#line 38 "ppc.isa"
				CONFIG
#line 102564 "powerpc.tcc"
				>::OpAddic(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102568 "powerpc.tcc"
				>(code, addr, "addic")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102582 "powerpc.tcc"
				>
				OpAddic_<
#line 38 "ppc.isa"
				CONFIG
#line 102587 "powerpc.tcc"
				>::OpAddic_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102591 "powerpc.tcc"
				>(code, addr, "addic_")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102605 "powerpc.tcc"
				>
				OpAddis<
#line 38 "ppc.isa"
				CONFIG
#line 102610 "powerpc.tcc"
				>::OpAddis(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102614 "powerpc.tcc"
				>(code, addr, "addis")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 102625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102628 "powerpc.tcc"
				>
				OpAddme<
#line 38 "ppc.isa"
				CONFIG
#line 102633 "powerpc.tcc"
				>::OpAddme(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102637 "powerpc.tcc"
				>(code, addr, "addme")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102649 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102652 "powerpc.tcc"
				>
				OpAddze<
#line 38 "ppc.isa"
				CONFIG
#line 102657 "powerpc.tcc"
				>::OpAddze(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102661 "powerpc.tcc"
				>(code, addr, "addze")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102673 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102676 "powerpc.tcc"
				>
				OpDivw<
#line 38 "ppc.isa"
				CONFIG
#line 102681 "powerpc.tcc"
				>::OpDivw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102685 "powerpc.tcc"
				>(code, addr, "divw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102698 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102701 "powerpc.tcc"
				>
				OpDivwu<
#line 38 "ppc.isa"
				CONFIG
#line 102706 "powerpc.tcc"
				>::OpDivwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102710 "powerpc.tcc"
				>(code, addr, "divwu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102723 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102726 "powerpc.tcc"
				>
				OpMulhw<
#line 38 "ppc.isa"
				CONFIG
#line 102731 "powerpc.tcc"
				>::OpMulhw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102735 "powerpc.tcc"
				>(code, addr, "mulhw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102747 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102750 "powerpc.tcc"
				>
				OpMulhwu<
#line 38 "ppc.isa"
				CONFIG
#line 102755 "powerpc.tcc"
				>::OpMulhwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102759 "powerpc.tcc"
				>(code, addr, "mulhwu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102771 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102774 "powerpc.tcc"
				>
				OpMulli<
#line 38 "ppc.isa"
				CONFIG
#line 102779 "powerpc.tcc"
				>::OpMulli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102783 "powerpc.tcc"
				>(code, addr, "mulli")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102794 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102797 "powerpc.tcc"
				>
				OpMullw<
#line 38 "ppc.isa"
				CONFIG
#line 102802 "powerpc.tcc"
				>::OpMullw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102806 "powerpc.tcc"
				>(code, addr, "mullw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102819 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102822 "powerpc.tcc"
				>
				OpNeg<
#line 38 "ppc.isa"
				CONFIG
#line 102827 "powerpc.tcc"
				>::OpNeg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102831 "powerpc.tcc"
				>(code, addr, "neg")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102846 "powerpc.tcc"
				>
				OpSubf<
#line 38 "ppc.isa"
				CONFIG
#line 102851 "powerpc.tcc"
				>::OpSubf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102855 "powerpc.tcc"
				>(code, addr, "subf")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102868 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102871 "powerpc.tcc"
				>
				OpSubfc<
#line 38 "ppc.isa"
				CONFIG
#line 102876 "powerpc.tcc"
				>::OpSubfc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102880 "powerpc.tcc"
				>(code, addr, "subfc")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102893 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102896 "powerpc.tcc"
				>
				OpSubfe<
#line 38 "ppc.isa"
				CONFIG
#line 102901 "powerpc.tcc"
				>::OpSubfe(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102905 "powerpc.tcc"
				>(code, addr, "subfe")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102918 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102921 "powerpc.tcc"
				>
				OpSubfic<
#line 38 "ppc.isa"
				CONFIG
#line 102926 "powerpc.tcc"
				>::OpSubfic(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102930 "powerpc.tcc"
				>(code, addr, "subfic")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102941 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102944 "powerpc.tcc"
				>
				OpSubfme<
#line 38 "ppc.isa"
				CONFIG
#line 102949 "powerpc.tcc"
				>::OpSubfme(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102953 "powerpc.tcc"
				>(code, addr, "subfme")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102965 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102968 "powerpc.tcc"
				>
				OpSubfze<
#line 38 "ppc.isa"
				CONFIG
#line 102973 "powerpc.tcc"
				>::OpSubfze(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 102977 "powerpc.tcc"
				>(code, addr, "subfze")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					oe = ((code >> 10) & 0x1);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 102989 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 102992 "powerpc.tcc"
				>
				OpCmp<
#line 38 "ppc.isa"
				CONFIG
#line 102997 "powerpc.tcc"
				>::OpCmp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103001 "powerpc.tcc"
				>(code, addr, "cmp")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103013 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103016 "powerpc.tcc"
				>
				OpCmpi<
#line 38 "ppc.isa"
				CONFIG
#line 103021 "powerpc.tcc"
				>::OpCmpi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103025 "powerpc.tcc"
				>(code, addr, "cmpi")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103037 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103040 "powerpc.tcc"
				>
				OpCmpl<
#line 38 "ppc.isa"
				CONFIG
#line 103045 "powerpc.tcc"
				>::OpCmpl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103049 "powerpc.tcc"
				>(code, addr, "cmpl")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103064 "powerpc.tcc"
				>
				OpCmpli<
#line 38 "ppc.isa"
				CONFIG
#line 103069 "powerpc.tcc"
				>::OpCmpli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103073 "powerpc.tcc"
				>(code, addr, "cmpli")
				{
					crfD = ((code >> 23) & 0x7);
					l = ((code >> 21) & 0x1);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103085 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103088 "powerpc.tcc"
				>
				OpAnd<
#line 38 "ppc.isa"
				CONFIG
#line 103093 "powerpc.tcc"
				>::OpAnd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103097 "powerpc.tcc"
				>(code, addr, "and")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103109 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103112 "powerpc.tcc"
				>
				OpAndc<
#line 38 "ppc.isa"
				CONFIG
#line 103117 "powerpc.tcc"
				>::OpAndc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103121 "powerpc.tcc"
				>(code, addr, "andc")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103133 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103136 "powerpc.tcc"
				>
				OpAndi_<
#line 38 "ppc.isa"
				CONFIG
#line 103141 "powerpc.tcc"
				>::OpAndi_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103145 "powerpc.tcc"
				>(code, addr, "andi_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103156 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103159 "powerpc.tcc"
				>
				OpAndis_<
#line 38 "ppc.isa"
				CONFIG
#line 103164 "powerpc.tcc"
				>::OpAndis_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103168 "powerpc.tcc"
				>(code, addr, "andis_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 103179 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103182 "powerpc.tcc"
				>
				OpCntlzw<
#line 38 "ppc.isa"
				CONFIG
#line 103187 "powerpc.tcc"
				>::OpCntlzw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103191 "powerpc.tcc"
				>(code, addr, "cntlzw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103202 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103205 "powerpc.tcc"
				>
				OpEqv<
#line 38 "ppc.isa"
				CONFIG
#line 103210 "powerpc.tcc"
				>::OpEqv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103214 "powerpc.tcc"
				>(code, addr, "eqv")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103226 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103229 "powerpc.tcc"
				>
				OpExtsb<
#line 38 "ppc.isa"
				CONFIG
#line 103234 "powerpc.tcc"
				>::OpExtsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103238 "powerpc.tcc"
				>(code, addr, "extsb")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103252 "powerpc.tcc"
				>
				OpExtsh<
#line 38 "ppc.isa"
				CONFIG
#line 103257 "powerpc.tcc"
				>::OpExtsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103261 "powerpc.tcc"
				>(code, addr, "extsh")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103272 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103275 "powerpc.tcc"
				>
				OpNand<
#line 38 "ppc.isa"
				CONFIG
#line 103280 "powerpc.tcc"
				>::OpNand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103284 "powerpc.tcc"
				>(code, addr, "nand")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103296 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103299 "powerpc.tcc"
				>
				OpNor<
#line 38 "ppc.isa"
				CONFIG
#line 103304 "powerpc.tcc"
				>::OpNor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103308 "powerpc.tcc"
				>(code, addr, "nor")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103320 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103323 "powerpc.tcc"
				>
				OpOr<
#line 38 "ppc.isa"
				CONFIG
#line 103328 "powerpc.tcc"
				>::OpOr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103332 "powerpc.tcc"
				>(code, addr, "or")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103344 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103347 "powerpc.tcc"
				>
				OpOrc<
#line 38 "ppc.isa"
				CONFIG
#line 103352 "powerpc.tcc"
				>::OpOrc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103356 "powerpc.tcc"
				>(code, addr, "orc")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103368 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103371 "powerpc.tcc"
				>
				OpOri<
#line 38 "ppc.isa"
				CONFIG
#line 103376 "powerpc.tcc"
				>::OpOri(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103380 "powerpc.tcc"
				>(code, addr, "ori")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103391 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103394 "powerpc.tcc"
				>
				OpOris<
#line 38 "ppc.isa"
				CONFIG
#line 103399 "powerpc.tcc"
				>::OpOris(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103403 "powerpc.tcc"
				>(code, addr, "oris")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 103414 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103417 "powerpc.tcc"
				>
				OpXor<
#line 38 "ppc.isa"
				CONFIG
#line 103422 "powerpc.tcc"
				>::OpXor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103426 "powerpc.tcc"
				>(code, addr, "xor")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103441 "powerpc.tcc"
				>
				OpXori<
#line 38 "ppc.isa"
				CONFIG
#line 103446 "powerpc.tcc"
				>::OpXori(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103450 "powerpc.tcc"
				>(code, addr, "xori")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103464 "powerpc.tcc"
				>
				OpXoris<
#line 38 "ppc.isa"
				CONFIG
#line 103469 "powerpc.tcc"
				>::OpXoris(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103473 "powerpc.tcc"
				>(code, addr, "xoris")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					uimm = ((code >> 0) & 0xffff) << 16;
				}

				template <
#line 38 "ppc.isa"
				class
#line 103484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103487 "powerpc.tcc"
				>
				OpRlwimi<
#line 38 "ppc.isa"
				CONFIG
#line 103492 "powerpc.tcc"
				>::OpRlwimi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103496 "powerpc.tcc"
				>(code, addr, "rlwimi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103510 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103513 "powerpc.tcc"
				>
				OpRlwinm<
#line 38 "ppc.isa"
				CONFIG
#line 103518 "powerpc.tcc"
				>::OpRlwinm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103522 "powerpc.tcc"
				>(code, addr, "rlwinm")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103536 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103539 "powerpc.tcc"
				>
				OpRlwnm<
#line 38 "ppc.isa"
				CONFIG
#line 103544 "powerpc.tcc"
				>::OpRlwnm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103548 "powerpc.tcc"
				>(code, addr, "rlwnm")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					mb = ((code >> 6) & 0x1f);
					me = ((code >> 1) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103562 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103565 "powerpc.tcc"
				>
				OpSlw<
#line 38 "ppc.isa"
				CONFIG
#line 103570 "powerpc.tcc"
				>::OpSlw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103574 "powerpc.tcc"
				>(code, addr, "slw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103586 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103589 "powerpc.tcc"
				>
				OpSraw<
#line 38 "ppc.isa"
				CONFIG
#line 103594 "powerpc.tcc"
				>::OpSraw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103598 "powerpc.tcc"
				>(code, addr, "sraw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103610 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103613 "powerpc.tcc"
				>
				OpSrawi<
#line 38 "ppc.isa"
				CONFIG
#line 103618 "powerpc.tcc"
				>::OpSrawi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103622 "powerpc.tcc"
				>(code, addr, "srawi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					sh = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103634 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103637 "powerpc.tcc"
				>
				OpSrw<
#line 38 "ppc.isa"
				CONFIG
#line 103642 "powerpc.tcc"
				>::OpSrw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103646 "powerpc.tcc"
				>(code, addr, "srw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103658 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103661 "powerpc.tcc"
				>
				OpFadd<
#line 38 "ppc.isa"
				CONFIG
#line 103666 "powerpc.tcc"
				>::OpFadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103670 "powerpc.tcc"
				>(code, addr, "fadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103685 "powerpc.tcc"
				>
				OpFadds<
#line 38 "ppc.isa"
				CONFIG
#line 103690 "powerpc.tcc"
				>::OpFadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103694 "powerpc.tcc"
				>(code, addr, "fadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103706 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103709 "powerpc.tcc"
				>
				OpFdiv<
#line 38 "ppc.isa"
				CONFIG
#line 103714 "powerpc.tcc"
				>::OpFdiv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103718 "powerpc.tcc"
				>(code, addr, "fdiv")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103730 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103733 "powerpc.tcc"
				>
				OpFdivs<
#line 38 "ppc.isa"
				CONFIG
#line 103738 "powerpc.tcc"
				>::OpFdivs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103742 "powerpc.tcc"
				>(code, addr, "fdivs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103754 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103757 "powerpc.tcc"
				>
				OpFmul<
#line 38 "ppc.isa"
				CONFIG
#line 103762 "powerpc.tcc"
				>::OpFmul(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103766 "powerpc.tcc"
				>(code, addr, "fmul")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103778 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103781 "powerpc.tcc"
				>
				OpFmuls<
#line 38 "ppc.isa"
				CONFIG
#line 103786 "powerpc.tcc"
				>::OpFmuls(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103790 "powerpc.tcc"
				>(code, addr, "fmuls")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103802 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103805 "powerpc.tcc"
				>
				OpFres<
#line 38 "ppc.isa"
				CONFIG
#line 103810 "powerpc.tcc"
				>::OpFres(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103814 "powerpc.tcc"
				>(code, addr, "fres")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103825 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103828 "powerpc.tcc"
				>
				OpFrsqrte<
#line 38 "ppc.isa"
				CONFIG
#line 103833 "powerpc.tcc"
				>::OpFrsqrte(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103837 "powerpc.tcc"
				>(code, addr, "frsqrte")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103848 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103851 "powerpc.tcc"
				>
				OpFsub<
#line 38 "ppc.isa"
				CONFIG
#line 103856 "powerpc.tcc"
				>::OpFsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103860 "powerpc.tcc"
				>(code, addr, "fsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103872 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103875 "powerpc.tcc"
				>
				OpFsubs<
#line 38 "ppc.isa"
				CONFIG
#line 103880 "powerpc.tcc"
				>::OpFsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103884 "powerpc.tcc"
				>(code, addr, "fsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103896 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103899 "powerpc.tcc"
				>
				OpFsel<
#line 38 "ppc.isa"
				CONFIG
#line 103904 "powerpc.tcc"
				>::OpFsel(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103908 "powerpc.tcc"
				>(code, addr, "fsel")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103921 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103924 "powerpc.tcc"
				>
				OpFsqrt<
#line 38 "ppc.isa"
				CONFIG
#line 103929 "powerpc.tcc"
				>::OpFsqrt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103933 "powerpc.tcc"
				>(code, addr, "fsqrt")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103944 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103947 "powerpc.tcc"
				>
				OpFsqrts<
#line 38 "ppc.isa"
				CONFIG
#line 103952 "powerpc.tcc"
				>::OpFsqrts(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103956 "powerpc.tcc"
				>(code, addr, "fsqrts")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103967 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103970 "powerpc.tcc"
				>
				OpFmadd<
#line 38 "ppc.isa"
				CONFIG
#line 103975 "powerpc.tcc"
				>::OpFmadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 103979 "powerpc.tcc"
				>(code, addr, "fmadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 103992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 103995 "powerpc.tcc"
				>
				OpFmadds<
#line 38 "ppc.isa"
				CONFIG
#line 104000 "powerpc.tcc"
				>::OpFmadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104004 "powerpc.tcc"
				>(code, addr, "fmadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104017 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104020 "powerpc.tcc"
				>
				OpFmsub<
#line 38 "ppc.isa"
				CONFIG
#line 104025 "powerpc.tcc"
				>::OpFmsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104029 "powerpc.tcc"
				>(code, addr, "fmsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104042 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104045 "powerpc.tcc"
				>
				OpFmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 104050 "powerpc.tcc"
				>::OpFmsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104054 "powerpc.tcc"
				>(code, addr, "fmsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104067 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104070 "powerpc.tcc"
				>
				OpFnmadd<
#line 38 "ppc.isa"
				CONFIG
#line 104075 "powerpc.tcc"
				>::OpFnmadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104079 "powerpc.tcc"
				>(code, addr, "fnmadd")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104092 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104095 "powerpc.tcc"
				>
				OpFnmadds<
#line 38 "ppc.isa"
				CONFIG
#line 104100 "powerpc.tcc"
				>::OpFnmadds(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104104 "powerpc.tcc"
				>(code, addr, "fnmadds")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104120 "powerpc.tcc"
				>
				OpFnmsub<
#line 38 "ppc.isa"
				CONFIG
#line 104125 "powerpc.tcc"
				>::OpFnmsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104129 "powerpc.tcc"
				>(code, addr, "fnmsub")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104142 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104145 "powerpc.tcc"
				>
				OpFnmsubs<
#line 38 "ppc.isa"
				CONFIG
#line 104150 "powerpc.tcc"
				>::OpFnmsubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104154 "powerpc.tcc"
				>(code, addr, "fnmsubs")
				{
					fd = ((code >> 21) & 0x1f);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					fc = ((code >> 6) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104167 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104170 "powerpc.tcc"
				>
				OpFcmpo<
#line 38 "ppc.isa"
				CONFIG
#line 104175 "powerpc.tcc"
				>::OpFcmpo(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104179 "powerpc.tcc"
				>(code, addr, "fcmpo")
				{
					crfD = ((code >> 23) & 0x7);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104190 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104193 "powerpc.tcc"
				>
				OpFcmpu<
#line 38 "ppc.isa"
				CONFIG
#line 104198 "powerpc.tcc"
				>::OpFcmpu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104202 "powerpc.tcc"
				>(code, addr, "fcmpu")
				{
					crfD = ((code >> 23) & 0x7);
					fa = ((code >> 16) & 0x1f);
					fb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104213 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104216 "powerpc.tcc"
				>
				OpFctiw<
#line 38 "ppc.isa"
				CONFIG
#line 104221 "powerpc.tcc"
				>::OpFctiw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104225 "powerpc.tcc"
				>(code, addr, "fctiw")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104236 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104239 "powerpc.tcc"
				>
				OpFctiwz<
#line 38 "ppc.isa"
				CONFIG
#line 104244 "powerpc.tcc"
				>::OpFctiwz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104248 "powerpc.tcc"
				>(code, addr, "fctiwz")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104259 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104262 "powerpc.tcc"
				>
				OpFrsp<
#line 38 "ppc.isa"
				CONFIG
#line 104267 "powerpc.tcc"
				>::OpFrsp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104271 "powerpc.tcc"
				>(code, addr, "frsp")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104282 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104285 "powerpc.tcc"
				>
				OpFabs<
#line 38 "ppc.isa"
				CONFIG
#line 104290 "powerpc.tcc"
				>::OpFabs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104294 "powerpc.tcc"
				>(code, addr, "fabs")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104305 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104308 "powerpc.tcc"
				>
				OpFmr<
#line 38 "ppc.isa"
				CONFIG
#line 104313 "powerpc.tcc"
				>::OpFmr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104317 "powerpc.tcc"
				>(code, addr, "fmr")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104328 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104331 "powerpc.tcc"
				>
				OpFnabs<
#line 38 "ppc.isa"
				CONFIG
#line 104336 "powerpc.tcc"
				>::OpFnabs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104340 "powerpc.tcc"
				>(code, addr, "fnabs")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104351 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104354 "powerpc.tcc"
				>
				OpFneg<
#line 38 "ppc.isa"
				CONFIG
#line 104359 "powerpc.tcc"
				>::OpFneg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104363 "powerpc.tcc"
				>(code, addr, "fneg")
				{
					fd = ((code >> 21) & 0x1f);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104374 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104377 "powerpc.tcc"
				>
				OpMcrfs<
#line 38 "ppc.isa"
				CONFIG
#line 104382 "powerpc.tcc"
				>::OpMcrfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104386 "powerpc.tcc"
				>(code, addr, "mcrfs")
				{
					crfD = ((code >> 23) & 0x7);
					crfS = ((code >> 18) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104399 "powerpc.tcc"
				>
				OpMffs<
#line 38 "ppc.isa"
				CONFIG
#line 104404 "powerpc.tcc"
				>::OpMffs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104408 "powerpc.tcc"
				>(code, addr, "mffs")
				{
					fd = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104421 "powerpc.tcc"
				>
				OpMtfsb0<
#line 38 "ppc.isa"
				CONFIG
#line 104426 "powerpc.tcc"
				>::OpMtfsb0(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104430 "powerpc.tcc"
				>(code, addr, "mtfsb0")
				{
					crbD = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104443 "powerpc.tcc"
				>
				OpMtfsb1<
#line 38 "ppc.isa"
				CONFIG
#line 104448 "powerpc.tcc"
				>::OpMtfsb1(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104452 "powerpc.tcc"
				>(code, addr, "mtfsb1")
				{
					crbD = ((code >> 21) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104462 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104465 "powerpc.tcc"
				>
				OpMtfsf<
#line 38 "ppc.isa"
				CONFIG
#line 104470 "powerpc.tcc"
				>::OpMtfsf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104474 "powerpc.tcc"
				>(code, addr, "mtfsf")
				{
					fm = ((code >> 17) & 0xff);
					fb = ((code >> 11) & 0x1f);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104485 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104488 "powerpc.tcc"
				>
				OpMtfsfi<
#line 38 "ppc.isa"
				CONFIG
#line 104493 "powerpc.tcc"
				>::OpMtfsfi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104497 "powerpc.tcc"
				>(code, addr, "mtfsfi")
				{
					crfD = ((code >> 23) & 0x7);
					imm = ((code >> 12) & 0xf);
					rc = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104508 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104511 "powerpc.tcc"
				>
				OpB<
#line 38 "ppc.isa"
				CONFIG
#line 104516 "powerpc.tcc"
				>::OpB(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104520 "powerpc.tcc"
				>(code, addr, "b")
				{
					li = (((((int32_t)(code >> 2)) & 0xffffff) << 8) >> 8) << 2;
					aa = ((code >> 1) & 0x1);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104531 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104534 "powerpc.tcc"
				>
				OpBc<
#line 38 "ppc.isa"
				CONFIG
#line 104539 "powerpc.tcc"
				>::OpBc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104543 "powerpc.tcc"
				>(code, addr, "bc")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					bd = (((((int32_t)(code >> 2)) & 0x3fff) << 18) >> 18) << 2;
					aa = ((code >> 1) & 0x1);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104556 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104559 "powerpc.tcc"
				>
				OpBcctr<
#line 38 "ppc.isa"
				CONFIG
#line 104564 "powerpc.tcc"
				>::OpBcctr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104568 "powerpc.tcc"
				>(code, addr, "bcctr")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104579 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104582 "powerpc.tcc"
				>
				OpBclr<
#line 38 "ppc.isa"
				CONFIG
#line 104587 "powerpc.tcc"
				>::OpBclr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104591 "powerpc.tcc"
				>(code, addr, "bclr")
				{
					bo = ((code >> 21) & 0x1f);
					bi = ((code >> 16) & 0x1f);
					lk = ((code >> 0) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104602 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104605 "powerpc.tcc"
				>
				OpCrand<
#line 38 "ppc.isa"
				CONFIG
#line 104610 "powerpc.tcc"
				>::OpCrand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104614 "powerpc.tcc"
				>(code, addr, "crand")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104625 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104628 "powerpc.tcc"
				>
				OpCrandc<
#line 38 "ppc.isa"
				CONFIG
#line 104633 "powerpc.tcc"
				>::OpCrandc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104637 "powerpc.tcc"
				>(code, addr, "crandc")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104648 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104651 "powerpc.tcc"
				>
				OpCreqv<
#line 38 "ppc.isa"
				CONFIG
#line 104656 "powerpc.tcc"
				>::OpCreqv(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104660 "powerpc.tcc"
				>(code, addr, "creqv")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104671 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104674 "powerpc.tcc"
				>
				OpCrnand<
#line 38 "ppc.isa"
				CONFIG
#line 104679 "powerpc.tcc"
				>::OpCrnand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104683 "powerpc.tcc"
				>(code, addr, "crnand")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104694 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104697 "powerpc.tcc"
				>
				OpCrnor<
#line 38 "ppc.isa"
				CONFIG
#line 104702 "powerpc.tcc"
				>::OpCrnor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104706 "powerpc.tcc"
				>(code, addr, "crnor")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104717 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104720 "powerpc.tcc"
				>
				OpCror<
#line 38 "ppc.isa"
				CONFIG
#line 104725 "powerpc.tcc"
				>::OpCror(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104729 "powerpc.tcc"
				>(code, addr, "cror")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104740 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104743 "powerpc.tcc"
				>
				OpCrorc<
#line 38 "ppc.isa"
				CONFIG
#line 104748 "powerpc.tcc"
				>::OpCrorc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104752 "powerpc.tcc"
				>(code, addr, "crorc")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104763 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104766 "powerpc.tcc"
				>
				OpCrxor<
#line 38 "ppc.isa"
				CONFIG
#line 104771 "powerpc.tcc"
				>::OpCrxor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104775 "powerpc.tcc"
				>(code, addr, "crxor")
				{
					crbD = ((code >> 21) & 0x1f);
					crbA = ((code >> 16) & 0x1f);
					crbB = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104786 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104789 "powerpc.tcc"
				>
				OpMcrf<
#line 38 "ppc.isa"
				CONFIG
#line 104794 "powerpc.tcc"
				>::OpMcrf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104798 "powerpc.tcc"
				>(code, addr, "mcrf")
				{
					crfD = ((code >> 23) & 0x7);
					crfS = ((code >> 18) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104811 "powerpc.tcc"
				>
				OpLbz<
#line 38 "ppc.isa"
				CONFIG
#line 104816 "powerpc.tcc"
				>::OpLbz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104820 "powerpc.tcc"
				>(code, addr, "lbz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104831 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104834 "powerpc.tcc"
				>
				OpLbzu<
#line 38 "ppc.isa"
				CONFIG
#line 104839 "powerpc.tcc"
				>::OpLbzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104843 "powerpc.tcc"
				>(code, addr, "lbzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104854 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104857 "powerpc.tcc"
				>
				OpLbzux<
#line 38 "ppc.isa"
				CONFIG
#line 104862 "powerpc.tcc"
				>::OpLbzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104866 "powerpc.tcc"
				>(code, addr, "lbzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104877 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104880 "powerpc.tcc"
				>
				OpLbzx<
#line 38 "ppc.isa"
				CONFIG
#line 104885 "powerpc.tcc"
				>::OpLbzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104889 "powerpc.tcc"
				>(code, addr, "lbzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104900 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104903 "powerpc.tcc"
				>
				OpLha<
#line 38 "ppc.isa"
				CONFIG
#line 104908 "powerpc.tcc"
				>::OpLha(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104912 "powerpc.tcc"
				>(code, addr, "lha")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104923 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104926 "powerpc.tcc"
				>
				OpLhau<
#line 38 "ppc.isa"
				CONFIG
#line 104931 "powerpc.tcc"
				>::OpLhau(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104935 "powerpc.tcc"
				>(code, addr, "lhau")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104946 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104949 "powerpc.tcc"
				>
				OpLhaux<
#line 38 "ppc.isa"
				CONFIG
#line 104954 "powerpc.tcc"
				>::OpLhaux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104958 "powerpc.tcc"
				>(code, addr, "lhaux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104969 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104972 "powerpc.tcc"
				>
				OpLhax<
#line 38 "ppc.isa"
				CONFIG
#line 104977 "powerpc.tcc"
				>::OpLhax(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 104981 "powerpc.tcc"
				>(code, addr, "lhax")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 104992 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 104995 "powerpc.tcc"
				>
				OpLhz<
#line 38 "ppc.isa"
				CONFIG
#line 105000 "powerpc.tcc"
				>::OpLhz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105004 "powerpc.tcc"
				>(code, addr, "lhz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105015 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105018 "powerpc.tcc"
				>
				OpLhzu<
#line 38 "ppc.isa"
				CONFIG
#line 105023 "powerpc.tcc"
				>::OpLhzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105027 "powerpc.tcc"
				>(code, addr, "lhzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105038 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105041 "powerpc.tcc"
				>
				OpLhzux<
#line 38 "ppc.isa"
				CONFIG
#line 105046 "powerpc.tcc"
				>::OpLhzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105050 "powerpc.tcc"
				>(code, addr, "lhzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105061 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105064 "powerpc.tcc"
				>
				OpLhzx<
#line 38 "ppc.isa"
				CONFIG
#line 105069 "powerpc.tcc"
				>::OpLhzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105073 "powerpc.tcc"
				>(code, addr, "lhzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105084 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105087 "powerpc.tcc"
				>
				OpLwz<
#line 38 "ppc.isa"
				CONFIG
#line 105092 "powerpc.tcc"
				>::OpLwz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105096 "powerpc.tcc"
				>(code, addr, "lwz")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105107 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105110 "powerpc.tcc"
				>
				OpLwzu<
#line 38 "ppc.isa"
				CONFIG
#line 105115 "powerpc.tcc"
				>::OpLwzu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105119 "powerpc.tcc"
				>(code, addr, "lwzu")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105130 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105133 "powerpc.tcc"
				>
				OpLwzux<
#line 38 "ppc.isa"
				CONFIG
#line 105138 "powerpc.tcc"
				>::OpLwzux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105142 "powerpc.tcc"
				>(code, addr, "lwzux")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105153 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105156 "powerpc.tcc"
				>
				OpLwzx<
#line 38 "ppc.isa"
				CONFIG
#line 105161 "powerpc.tcc"
				>::OpLwzx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105165 "powerpc.tcc"
				>(code, addr, "lwzx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105176 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105179 "powerpc.tcc"
				>
				OpStb<
#line 38 "ppc.isa"
				CONFIG
#line 105184 "powerpc.tcc"
				>::OpStb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105188 "powerpc.tcc"
				>(code, addr, "stb")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105199 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105202 "powerpc.tcc"
				>
				OpStbu<
#line 38 "ppc.isa"
				CONFIG
#line 105207 "powerpc.tcc"
				>::OpStbu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105211 "powerpc.tcc"
				>(code, addr, "stbu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105222 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105225 "powerpc.tcc"
				>
				OpStbux<
#line 38 "ppc.isa"
				CONFIG
#line 105230 "powerpc.tcc"
				>::OpStbux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105234 "powerpc.tcc"
				>(code, addr, "stbux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105245 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105248 "powerpc.tcc"
				>
				OpStbx<
#line 38 "ppc.isa"
				CONFIG
#line 105253 "powerpc.tcc"
				>::OpStbx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105257 "powerpc.tcc"
				>(code, addr, "stbx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105268 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105271 "powerpc.tcc"
				>
				OpSth<
#line 38 "ppc.isa"
				CONFIG
#line 105276 "powerpc.tcc"
				>::OpSth(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105280 "powerpc.tcc"
				>(code, addr, "sth")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105291 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105294 "powerpc.tcc"
				>
				OpSthu<
#line 38 "ppc.isa"
				CONFIG
#line 105299 "powerpc.tcc"
				>::OpSthu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105303 "powerpc.tcc"
				>(code, addr, "sthu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105314 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105317 "powerpc.tcc"
				>
				OpSthux<
#line 38 "ppc.isa"
				CONFIG
#line 105322 "powerpc.tcc"
				>::OpSthux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105326 "powerpc.tcc"
				>(code, addr, "sthux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105337 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105340 "powerpc.tcc"
				>
				OpSthx<
#line 38 "ppc.isa"
				CONFIG
#line 105345 "powerpc.tcc"
				>::OpSthx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105349 "powerpc.tcc"
				>(code, addr, "sthx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105360 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105363 "powerpc.tcc"
				>
				OpStw<
#line 38 "ppc.isa"
				CONFIG
#line 105368 "powerpc.tcc"
				>::OpStw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105372 "powerpc.tcc"
				>(code, addr, "stw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105383 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105386 "powerpc.tcc"
				>
				OpStwu<
#line 38 "ppc.isa"
				CONFIG
#line 105391 "powerpc.tcc"
				>::OpStwu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105395 "powerpc.tcc"
				>(code, addr, "stwu")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105406 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105409 "powerpc.tcc"
				>
				OpStwux<
#line 38 "ppc.isa"
				CONFIG
#line 105414 "powerpc.tcc"
				>::OpStwux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105418 "powerpc.tcc"
				>(code, addr, "stwux")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105429 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105432 "powerpc.tcc"
				>
				OpStwx<
#line 38 "ppc.isa"
				CONFIG
#line 105437 "powerpc.tcc"
				>::OpStwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105441 "powerpc.tcc"
				>(code, addr, "stwx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105452 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105455 "powerpc.tcc"
				>
				OpLhbrx<
#line 38 "ppc.isa"
				CONFIG
#line 105460 "powerpc.tcc"
				>::OpLhbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105464 "powerpc.tcc"
				>(code, addr, "lhbrx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105475 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105478 "powerpc.tcc"
				>
				OpLwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 105483 "powerpc.tcc"
				>::OpLwbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105487 "powerpc.tcc"
				>(code, addr, "lwbrx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105498 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105501 "powerpc.tcc"
				>
				OpSthbrx<
#line 38 "ppc.isa"
				CONFIG
#line 105506 "powerpc.tcc"
				>::OpSthbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105510 "powerpc.tcc"
				>(code, addr, "sthbrx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105521 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105524 "powerpc.tcc"
				>
				OpStwbrx<
#line 38 "ppc.isa"
				CONFIG
#line 105529 "powerpc.tcc"
				>::OpStwbrx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105533 "powerpc.tcc"
				>(code, addr, "stwbrx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105544 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105547 "powerpc.tcc"
				>
				OpLswi<
#line 38 "ppc.isa"
				CONFIG
#line 105552 "powerpc.tcc"
				>::OpLswi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105556 "powerpc.tcc"
				>(code, addr, "lswi")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					nb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105570 "powerpc.tcc"
				>
				OpLswx<
#line 38 "ppc.isa"
				CONFIG
#line 105575 "powerpc.tcc"
				>::OpLswx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105579 "powerpc.tcc"
				>(code, addr, "lswx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105593 "powerpc.tcc"
				>
				OpStswi<
#line 38 "ppc.isa"
				CONFIG
#line 105598 "powerpc.tcc"
				>::OpStswi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105602 "powerpc.tcc"
				>(code, addr, "stswi")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					nb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105613 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105616 "powerpc.tcc"
				>
				OpStswx<
#line 38 "ppc.isa"
				CONFIG
#line 105621 "powerpc.tcc"
				>::OpStswx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105625 "powerpc.tcc"
				>(code, addr, "stswx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105636 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105639 "powerpc.tcc"
				>
				OpLmw<
#line 38 "ppc.isa"
				CONFIG
#line 105644 "powerpc.tcc"
				>::OpLmw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105648 "powerpc.tcc"
				>(code, addr, "lmw")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105659 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105662 "powerpc.tcc"
				>
				OpStmw<
#line 38 "ppc.isa"
				CONFIG
#line 105667 "powerpc.tcc"
				>::OpStmw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105671 "powerpc.tcc"
				>(code, addr, "stmw")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105682 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105685 "powerpc.tcc"
				>
				OpLfd<
#line 38 "ppc.isa"
				CONFIG
#line 105690 "powerpc.tcc"
				>::OpLfd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105694 "powerpc.tcc"
				>(code, addr, "lfd")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105705 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105708 "powerpc.tcc"
				>
				OpLfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105713 "powerpc.tcc"
				>::OpLfdu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105717 "powerpc.tcc"
				>(code, addr, "lfdu")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105728 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105731 "powerpc.tcc"
				>
				OpLfdux<
#line 38 "ppc.isa"
				CONFIG
#line 105736 "powerpc.tcc"
				>::OpLfdux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105740 "powerpc.tcc"
				>(code, addr, "lfdux")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105751 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105754 "powerpc.tcc"
				>
				OpLfdx<
#line 38 "ppc.isa"
				CONFIG
#line 105759 "powerpc.tcc"
				>::OpLfdx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105763 "powerpc.tcc"
				>(code, addr, "lfdx")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105774 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105777 "powerpc.tcc"
				>
				OpLfs<
#line 38 "ppc.isa"
				CONFIG
#line 105782 "powerpc.tcc"
				>::OpLfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105786 "powerpc.tcc"
				>(code, addr, "lfs")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105797 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105800 "powerpc.tcc"
				>
				OpLfsu<
#line 38 "ppc.isa"
				CONFIG
#line 105805 "powerpc.tcc"
				>::OpLfsu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105809 "powerpc.tcc"
				>(code, addr, "lfsu")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105820 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105823 "powerpc.tcc"
				>
				OpLfsux<
#line 38 "ppc.isa"
				CONFIG
#line 105828 "powerpc.tcc"
				>::OpLfsux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105832 "powerpc.tcc"
				>(code, addr, "lfsux")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105843 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105846 "powerpc.tcc"
				>
				OpLfsx<
#line 38 "ppc.isa"
				CONFIG
#line 105851 "powerpc.tcc"
				>::OpLfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105855 "powerpc.tcc"
				>(code, addr, "lfsx")
				{
					fd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105866 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105869 "powerpc.tcc"
				>
				OpStfd<
#line 38 "ppc.isa"
				CONFIG
#line 105874 "powerpc.tcc"
				>::OpStfd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105878 "powerpc.tcc"
				>(code, addr, "stfd")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105889 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105892 "powerpc.tcc"
				>
				OpStfdu<
#line 38 "ppc.isa"
				CONFIG
#line 105897 "powerpc.tcc"
				>::OpStfdu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105901 "powerpc.tcc"
				>(code, addr, "stfdu")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105912 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105915 "powerpc.tcc"
				>
				OpStfdux<
#line 38 "ppc.isa"
				CONFIG
#line 105920 "powerpc.tcc"
				>::OpStfdux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105924 "powerpc.tcc"
				>(code, addr, "stfdux")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105935 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105938 "powerpc.tcc"
				>
				OpStfdx<
#line 38 "ppc.isa"
				CONFIG
#line 105943 "powerpc.tcc"
				>::OpStfdx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105947 "powerpc.tcc"
				>(code, addr, "stfdx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105958 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105961 "powerpc.tcc"
				>
				OpStfiwx<
#line 38 "ppc.isa"
				CONFIG
#line 105966 "powerpc.tcc"
				>::OpStfiwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105970 "powerpc.tcc"
				>(code, addr, "stfiwx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 105981 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 105984 "powerpc.tcc"
				>
				OpStfs<
#line 38 "ppc.isa"
				CONFIG
#line 105989 "powerpc.tcc"
				>::OpStfs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 105993 "powerpc.tcc"
				>(code, addr, "stfs")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106004 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106007 "powerpc.tcc"
				>
				OpStfsu<
#line 38 "ppc.isa"
				CONFIG
#line 106012 "powerpc.tcc"
				>::OpStfsu(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106016 "powerpc.tcc"
				>(code, addr, "stfsu")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					d = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106027 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106030 "powerpc.tcc"
				>
				OpStfsux<
#line 38 "ppc.isa"
				CONFIG
#line 106035 "powerpc.tcc"
				>::OpStfsux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106039 "powerpc.tcc"
				>(code, addr, "stfsux")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106050 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106053 "powerpc.tcc"
				>
				OpStfsx<
#line 38 "ppc.isa"
				CONFIG
#line 106058 "powerpc.tcc"
				>::OpStfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106062 "powerpc.tcc"
				>(code, addr, "stfsx")
				{
					fs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106073 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106076 "powerpc.tcc"
				>
				OpDcba<
#line 38 "ppc.isa"
				CONFIG
#line 106081 "powerpc.tcc"
				>::OpDcba(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106085 "powerpc.tcc"
				>(code, addr, "dcba")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106098 "powerpc.tcc"
				>
				OpDcbf<
#line 38 "ppc.isa"
				CONFIG
#line 106103 "powerpc.tcc"
				>::OpDcbf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106107 "powerpc.tcc"
				>(code, addr, "dcbf")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106117 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106120 "powerpc.tcc"
				>
				OpDcbi<
#line 38 "ppc.isa"
				CONFIG
#line 106125 "powerpc.tcc"
				>::OpDcbi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106129 "powerpc.tcc"
				>(code, addr, "dcbi")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106139 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106142 "powerpc.tcc"
				>
				OpDcbst<
#line 38 "ppc.isa"
				CONFIG
#line 106147 "powerpc.tcc"
				>::OpDcbst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106151 "powerpc.tcc"
				>(code, addr, "dcbst")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106161 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106164 "powerpc.tcc"
				>
				OpDcbt<
#line 38 "ppc.isa"
				CONFIG
#line 106169 "powerpc.tcc"
				>::OpDcbt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106173 "powerpc.tcc"
				>(code, addr, "dcbt")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106183 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106186 "powerpc.tcc"
				>
				OpDcbtst<
#line 38 "ppc.isa"
				CONFIG
#line 106191 "powerpc.tcc"
				>::OpDcbtst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106195 "powerpc.tcc"
				>(code, addr, "dcbtst")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106205 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106208 "powerpc.tcc"
				>
				OpDcbz<
#line 38 "ppc.isa"
				CONFIG
#line 106213 "powerpc.tcc"
				>::OpDcbz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106217 "powerpc.tcc"
				>(code, addr, "dcbz")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106227 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106230 "powerpc.tcc"
				>
				OpIcbi<
#line 38 "ppc.isa"
				CONFIG
#line 106235 "powerpc.tcc"
				>::OpIcbi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106239 "powerpc.tcc"
				>(code, addr, "icbi")
				{
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106249 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106252 "powerpc.tcc"
				>
				OpTlbia<
#line 38 "ppc.isa"
				CONFIG
#line 106257 "powerpc.tcc"
				>::OpTlbia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106261 "powerpc.tcc"
				>(code, addr, "tlbia")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 106269 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106272 "powerpc.tcc"
				>
				OpTlbie<
#line 38 "ppc.isa"
				CONFIG
#line 106277 "powerpc.tcc"
				>::OpTlbie(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106281 "powerpc.tcc"
				>(code, addr, "tlbie")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106290 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106293 "powerpc.tcc"
				>
				OpTlbsync<
#line 38 "ppc.isa"
				CONFIG
#line 106298 "powerpc.tcc"
				>::OpTlbsync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106302 "powerpc.tcc"
				>(code, addr, "tlbsync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 106310 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106313 "powerpc.tcc"
				>
				OpTlbld<
#line 38 "ppc.isa"
				CONFIG
#line 106318 "powerpc.tcc"
				>::OpTlbld(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106322 "powerpc.tcc"
				>(code, addr, "tlbld")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106331 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106334 "powerpc.tcc"
				>
				OpTlbli<
#line 38 "ppc.isa"
				CONFIG
#line 106339 "powerpc.tcc"
				>::OpTlbli(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106343 "powerpc.tcc"
				>(code, addr, "tlbli")
				{
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106352 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106355 "powerpc.tcc"
				>
				OpEciwx<
#line 38 "ppc.isa"
				CONFIG
#line 106360 "powerpc.tcc"
				>::OpEciwx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106364 "powerpc.tcc"
				>(code, addr, "eciwx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106375 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106378 "powerpc.tcc"
				>
				OpEcowx<
#line 38 "ppc.isa"
				CONFIG
#line 106383 "powerpc.tcc"
				>::OpEcowx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106387 "powerpc.tcc"
				>(code, addr, "ecowx")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106398 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106401 "powerpc.tcc"
				>
				OpEieio<
#line 38 "ppc.isa"
				CONFIG
#line 106406 "powerpc.tcc"
				>::OpEieio(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106410 "powerpc.tcc"
				>(code, addr, "eieio")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 106418 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106421 "powerpc.tcc"
				>
				OpIsync<
#line 38 "ppc.isa"
				CONFIG
#line 106426 "powerpc.tcc"
				>::OpIsync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106430 "powerpc.tcc"
				>(code, addr, "isync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 106438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106441 "powerpc.tcc"
				>
				OpLwarx<
#line 38 "ppc.isa"
				CONFIG
#line 106446 "powerpc.tcc"
				>::OpLwarx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106450 "powerpc.tcc"
				>(code, addr, "lwarx")
				{
					rd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106461 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106464 "powerpc.tcc"
				>
				OpStwcx_<
#line 38 "ppc.isa"
				CONFIG
#line 106469 "powerpc.tcc"
				>::OpStwcx_(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106473 "powerpc.tcc"
				>(code, addr, "stwcx_")
				{
					rs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106484 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106487 "powerpc.tcc"
				>
				OpSync<
#line 38 "ppc.isa"
				CONFIG
#line 106492 "powerpc.tcc"
				>::OpSync(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106496 "powerpc.tcc"
				>(code, addr, "sync")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 106504 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106507 "powerpc.tcc"
				>
				OpSc<
#line 38 "ppc.isa"
				CONFIG
#line 106512 "powerpc.tcc"
				>::OpSc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106516 "powerpc.tcc"
				>(code, addr, "sc")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 106524 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106527 "powerpc.tcc"
				>
				OpRfi<
#line 38 "ppc.isa"
				CONFIG
#line 106532 "powerpc.tcc"
				>::OpRfi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106536 "powerpc.tcc"
				>(code, addr, "rfi")
				{
				}

				template <
#line 38 "ppc.isa"
				class
#line 106544 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106547 "powerpc.tcc"
				>
				OpTw<
#line 38 "ppc.isa"
				CONFIG
#line 106552 "powerpc.tcc"
				>::OpTw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106556 "powerpc.tcc"
				>(code, addr, "tw")
				{
					to = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106567 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106570 "powerpc.tcc"
				>
				OpTwi<
#line 38 "ppc.isa"
				CONFIG
#line 106575 "powerpc.tcc"
				>::OpTwi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106579 "powerpc.tcc"
				>(code, addr, "twi")
				{
					to = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					simm = (((((int32_t)(code >> 0)) & 0xffff) << 16) >> 16);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106590 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106593 "powerpc.tcc"
				>
				OpMcrxr<
#line 38 "ppc.isa"
				CONFIG
#line 106598 "powerpc.tcc"
				>::OpMcrxr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106602 "powerpc.tcc"
				>(code, addr, "mcrxr")
				{
					crfD = ((code >> 23) & 0x7);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106611 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106614 "powerpc.tcc"
				>
				OpMfcr<
#line 38 "ppc.isa"
				CONFIG
#line 106619 "powerpc.tcc"
				>::OpMfcr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106623 "powerpc.tcc"
				>(code, addr, "mfcr")
				{
					rd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106632 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106635 "powerpc.tcc"
				>
				OpMfmsr<
#line 38 "ppc.isa"
				CONFIG
#line 106640 "powerpc.tcc"
				>::OpMfmsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106644 "powerpc.tcc"
				>(code, addr, "mfmsr")
				{
					rd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106653 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106656 "powerpc.tcc"
				>
				OpMfspr<
#line 38 "ppc.isa"
				CONFIG
#line 106661 "powerpc.tcc"
				>::OpMfspr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106665 "powerpc.tcc"
				>(code, addr, "mfspr")
				{
					rd = ((code >> 21) & 0x1f);
					spr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106675 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106678 "powerpc.tcc"
				>
				OpMtspr<
#line 38 "ppc.isa"
				CONFIG
#line 106683 "powerpc.tcc"
				>::OpMtspr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106687 "powerpc.tcc"
				>(code, addr, "mtspr")
				{
					rs = ((code >> 21) & 0x1f);
					spr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106700 "powerpc.tcc"
				>
				OpMftb<
#line 38 "ppc.isa"
				CONFIG
#line 106705 "powerpc.tcc"
				>::OpMftb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106709 "powerpc.tcc"
				>(code, addr, "mftb")
				{
					rd = ((code >> 21) & 0x1f);
					tbr = ((code >> 11) & 0x3ff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106719 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106722 "powerpc.tcc"
				>
				OpMtcrf<
#line 38 "ppc.isa"
				CONFIG
#line 106727 "powerpc.tcc"
				>::OpMtcrf(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106731 "powerpc.tcc"
				>(code, addr, "mtcrf")
				{
					rs = ((code >> 21) & 0x1f);
					crm = ((code >> 12) & 0xff);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106741 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106744 "powerpc.tcc"
				>
				OpMtmsr<
#line 38 "ppc.isa"
				CONFIG
#line 106749 "powerpc.tcc"
				>::OpMtmsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106753 "powerpc.tcc"
				>(code, addr, "mtmsr")
				{
					rs = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106765 "powerpc.tcc"
				>
				OpMfsr<
#line 38 "ppc.isa"
				CONFIG
#line 106770 "powerpc.tcc"
				>::OpMfsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106774 "powerpc.tcc"
				>(code, addr, "mfsr")
				{
					rd = ((code >> 21) & 0x1f);
					sr = ((code >> 16) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106784 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106787 "powerpc.tcc"
				>
				OpMfsrin<
#line 38 "ppc.isa"
				CONFIG
#line 106792 "powerpc.tcc"
				>::OpMfsrin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106796 "powerpc.tcc"
				>(code, addr, "mfsrin")
				{
					rd = ((code >> 21) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106806 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106809 "powerpc.tcc"
				>
				OpMtsr<
#line 38 "ppc.isa"
				CONFIG
#line 106814 "powerpc.tcc"
				>::OpMtsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106818 "powerpc.tcc"
				>(code, addr, "mtsr")
				{
					rs = ((code >> 21) & 0x1f);
					sr = ((code >> 16) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106831 "powerpc.tcc"
				>
				OpMtsrin<
#line 38 "ppc.isa"
				CONFIG
#line 106836 "powerpc.tcc"
				>::OpMtsrin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106840 "powerpc.tcc"
				>(code, addr, "mtsrin")
				{
					rs = ((code >> 21) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106850 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106853 "powerpc.tcc"
				>
				OpDss<
#line 38 "ppc.isa"
				CONFIG
#line 106858 "powerpc.tcc"
				>::OpDss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106862 "powerpc.tcc"
				>(code, addr, "dss")
				{
					strm = ((code >> 21) & 0x3);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106871 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106874 "powerpc.tcc"
				>
				OpDssall<
#line 38 "ppc.isa"
				CONFIG
#line 106879 "powerpc.tcc"
				>::OpDssall(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106883 "powerpc.tcc"
				>(code, addr, "dssall")
				{
					strm = ((code >> 21) & 0x3);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106892 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106895 "powerpc.tcc"
				>
				OpDst<
#line 38 "ppc.isa"
				CONFIG
#line 106900 "powerpc.tcc"
				>::OpDst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106904 "powerpc.tcc"
				>(code, addr, "dst")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106915 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106918 "powerpc.tcc"
				>
				OpDstst<
#line 38 "ppc.isa"
				CONFIG
#line 106923 "powerpc.tcc"
				>::OpDstst(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106927 "powerpc.tcc"
				>(code, addr, "dstst")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106938 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106941 "powerpc.tcc"
				>
				OpDststt<
#line 38 "ppc.isa"
				CONFIG
#line 106946 "powerpc.tcc"
				>::OpDststt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106950 "powerpc.tcc"
				>(code, addr, "dststt")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106961 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106964 "powerpc.tcc"
				>
				OpDstt<
#line 38 "ppc.isa"
				CONFIG
#line 106969 "powerpc.tcc"
				>::OpDstt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106973 "powerpc.tcc"
				>(code, addr, "dstt")
				{
					strm = ((code >> 21) & 0x3);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 106984 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 106987 "powerpc.tcc"
				>
				OpLvebx<
#line 38 "ppc.isa"
				CONFIG
#line 106992 "powerpc.tcc"
				>::OpLvebx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 106996 "powerpc.tcc"
				>(code, addr, "lvebx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107007 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107010 "powerpc.tcc"
				>
				OpLvehx<
#line 38 "ppc.isa"
				CONFIG
#line 107015 "powerpc.tcc"
				>::OpLvehx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107019 "powerpc.tcc"
				>(code, addr, "lvehx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107030 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107033 "powerpc.tcc"
				>
				OpLvewx<
#line 38 "ppc.isa"
				CONFIG
#line 107038 "powerpc.tcc"
				>::OpLvewx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107042 "powerpc.tcc"
				>(code, addr, "lvewx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107053 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107056 "powerpc.tcc"
				>
				OpLvsl<
#line 38 "ppc.isa"
				CONFIG
#line 107061 "powerpc.tcc"
				>::OpLvsl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107065 "powerpc.tcc"
				>(code, addr, "lvsl")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107076 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107079 "powerpc.tcc"
				>
				OpLvsr<
#line 38 "ppc.isa"
				CONFIG
#line 107084 "powerpc.tcc"
				>::OpLvsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107088 "powerpc.tcc"
				>(code, addr, "lvsr")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107099 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107102 "powerpc.tcc"
				>
				OpLvx<
#line 38 "ppc.isa"
				CONFIG
#line 107107 "powerpc.tcc"
				>::OpLvx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107111 "powerpc.tcc"
				>(code, addr, "lvx")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107122 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107125 "powerpc.tcc"
				>
				OpLvxl<
#line 38 "ppc.isa"
				CONFIG
#line 107130 "powerpc.tcc"
				>::OpLvxl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107134 "powerpc.tcc"
				>(code, addr, "lvxl")
				{
					vd = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107145 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107148 "powerpc.tcc"
				>
				OpMfvscr<
#line 38 "ppc.isa"
				CONFIG
#line 107153 "powerpc.tcc"
				>::OpMfvscr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107157 "powerpc.tcc"
				>(code, addr, "mfvscr")
				{
					vd = ((code >> 21) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107166 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107169 "powerpc.tcc"
				>
				OpMtvscr<
#line 38 "ppc.isa"
				CONFIG
#line 107174 "powerpc.tcc"
				>::OpMtvscr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107178 "powerpc.tcc"
				>(code, addr, "mtvscr")
				{
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107190 "powerpc.tcc"
				>
				OpStvebx<
#line 38 "ppc.isa"
				CONFIG
#line 107195 "powerpc.tcc"
				>::OpStvebx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107199 "powerpc.tcc"
				>(code, addr, "stvebx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107210 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107213 "powerpc.tcc"
				>
				OpStvehx<
#line 38 "ppc.isa"
				CONFIG
#line 107218 "powerpc.tcc"
				>::OpStvehx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107222 "powerpc.tcc"
				>(code, addr, "stvehx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107233 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107236 "powerpc.tcc"
				>
				OpStvewx<
#line 38 "ppc.isa"
				CONFIG
#line 107241 "powerpc.tcc"
				>::OpStvewx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107245 "powerpc.tcc"
				>(code, addr, "stvewx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107256 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107259 "powerpc.tcc"
				>
				OpStvx<
#line 38 "ppc.isa"
				CONFIG
#line 107264 "powerpc.tcc"
				>::OpStvx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107268 "powerpc.tcc"
				>(code, addr, "stvx")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107279 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107282 "powerpc.tcc"
				>
				OpStvxl<
#line 38 "ppc.isa"
				CONFIG
#line 107287 "powerpc.tcc"
				>::OpStvxl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107291 "powerpc.tcc"
				>(code, addr, "stvxl")
				{
					vs = ((code >> 21) & 0x1f);
					ra = ((code >> 16) & 0x1f);
					rb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107302 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107305 "powerpc.tcc"
				>
				OpVaddcuw<
#line 38 "ppc.isa"
				CONFIG
#line 107310 "powerpc.tcc"
				>::OpVaddcuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107314 "powerpc.tcc"
				>(code, addr, "vaddcuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107325 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107328 "powerpc.tcc"
				>
				OpVaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 107333 "powerpc.tcc"
				>::OpVaddfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107337 "powerpc.tcc"
				>(code, addr, "vaddfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107348 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107351 "powerpc.tcc"
				>
				OpVaddsbs<
#line 38 "ppc.isa"
				CONFIG
#line 107356 "powerpc.tcc"
				>::OpVaddsbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107360 "powerpc.tcc"
				>(code, addr, "vaddsbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107371 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107374 "powerpc.tcc"
				>
				OpVaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 107379 "powerpc.tcc"
				>::OpVaddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107383 "powerpc.tcc"
				>(code, addr, "vaddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107397 "powerpc.tcc"
				>
				OpVaddsws<
#line 38 "ppc.isa"
				CONFIG
#line 107402 "powerpc.tcc"
				>::OpVaddsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107406 "powerpc.tcc"
				>(code, addr, "vaddsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107417 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107420 "powerpc.tcc"
				>
				OpVaddubm<
#line 38 "ppc.isa"
				CONFIG
#line 107425 "powerpc.tcc"
				>::OpVaddubm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107429 "powerpc.tcc"
				>(code, addr, "vaddubm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107440 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107443 "powerpc.tcc"
				>
				OpVaddubs<
#line 38 "ppc.isa"
				CONFIG
#line 107448 "powerpc.tcc"
				>::OpVaddubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107452 "powerpc.tcc"
				>(code, addr, "vaddubs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107463 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107466 "powerpc.tcc"
				>
				OpVadduhm<
#line 38 "ppc.isa"
				CONFIG
#line 107471 "powerpc.tcc"
				>::OpVadduhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107475 "powerpc.tcc"
				>(code, addr, "vadduhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107486 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107489 "powerpc.tcc"
				>
				OpVadduhs<
#line 38 "ppc.isa"
				CONFIG
#line 107494 "powerpc.tcc"
				>::OpVadduhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107498 "powerpc.tcc"
				>(code, addr, "vadduhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107509 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107512 "powerpc.tcc"
				>
				OpVadduwm<
#line 38 "ppc.isa"
				CONFIG
#line 107517 "powerpc.tcc"
				>::OpVadduwm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107521 "powerpc.tcc"
				>(code, addr, "vadduwm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107532 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107535 "powerpc.tcc"
				>
				OpVadduws<
#line 38 "ppc.isa"
				CONFIG
#line 107540 "powerpc.tcc"
				>::OpVadduws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107544 "powerpc.tcc"
				>(code, addr, "vadduws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107555 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107558 "powerpc.tcc"
				>
				OpVand<
#line 38 "ppc.isa"
				CONFIG
#line 107563 "powerpc.tcc"
				>::OpVand(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107567 "powerpc.tcc"
				>(code, addr, "vand")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107578 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107581 "powerpc.tcc"
				>
				OpVandc<
#line 38 "ppc.isa"
				CONFIG
#line 107586 "powerpc.tcc"
				>::OpVandc(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107590 "powerpc.tcc"
				>(code, addr, "vandc")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107601 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107604 "powerpc.tcc"
				>
				OpVavgsb<
#line 38 "ppc.isa"
				CONFIG
#line 107609 "powerpc.tcc"
				>::OpVavgsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107613 "powerpc.tcc"
				>(code, addr, "vavgsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107624 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107627 "powerpc.tcc"
				>
				OpVavgsh<
#line 38 "ppc.isa"
				CONFIG
#line 107632 "powerpc.tcc"
				>::OpVavgsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107636 "powerpc.tcc"
				>(code, addr, "vavgsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107647 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107650 "powerpc.tcc"
				>
				OpVavgsw<
#line 38 "ppc.isa"
				CONFIG
#line 107655 "powerpc.tcc"
				>::OpVavgsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107659 "powerpc.tcc"
				>(code, addr, "vavgsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107670 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107673 "powerpc.tcc"
				>
				OpVavgub<
#line 38 "ppc.isa"
				CONFIG
#line 107678 "powerpc.tcc"
				>::OpVavgub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107682 "powerpc.tcc"
				>(code, addr, "vavgub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107693 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107696 "powerpc.tcc"
				>
				OpVavguh<
#line 38 "ppc.isa"
				CONFIG
#line 107701 "powerpc.tcc"
				>::OpVavguh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107705 "powerpc.tcc"
				>(code, addr, "vavguh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107716 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107719 "powerpc.tcc"
				>
				OpVavguw<
#line 38 "ppc.isa"
				CONFIG
#line 107724 "powerpc.tcc"
				>::OpVavguw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107728 "powerpc.tcc"
				>(code, addr, "vavguw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107739 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107742 "powerpc.tcc"
				>
				OpVcfsx<
#line 38 "ppc.isa"
				CONFIG
#line 107747 "powerpc.tcc"
				>::OpVcfsx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107751 "powerpc.tcc"
				>(code, addr, "vcfsx")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107762 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107765 "powerpc.tcc"
				>
				OpVcfux<
#line 38 "ppc.isa"
				CONFIG
#line 107770 "powerpc.tcc"
				>::OpVcfux(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107774 "powerpc.tcc"
				>(code, addr, "vcfux")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107785 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107788 "powerpc.tcc"
				>
				OpVcmpbfp<
#line 38 "ppc.isa"
				CONFIG
#line 107793 "powerpc.tcc"
				>::OpVcmpbfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107797 "powerpc.tcc"
				>(code, addr, "vcmpbfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107809 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107812 "powerpc.tcc"
				>
				OpVcmpeqfp<
#line 38 "ppc.isa"
				CONFIG
#line 107817 "powerpc.tcc"
				>::OpVcmpeqfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107821 "powerpc.tcc"
				>(code, addr, "vcmpeqfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107833 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107836 "powerpc.tcc"
				>
				OpVcmpequb<
#line 38 "ppc.isa"
				CONFIG
#line 107841 "powerpc.tcc"
				>::OpVcmpequb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107845 "powerpc.tcc"
				>(code, addr, "vcmpequb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107857 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107860 "powerpc.tcc"
				>
				OpVcmpequh<
#line 38 "ppc.isa"
				CONFIG
#line 107865 "powerpc.tcc"
				>::OpVcmpequh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107869 "powerpc.tcc"
				>(code, addr, "vcmpequh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107881 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107884 "powerpc.tcc"
				>
				OpVcmpequw<
#line 38 "ppc.isa"
				CONFIG
#line 107889 "powerpc.tcc"
				>::OpVcmpequw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107893 "powerpc.tcc"
				>(code, addr, "vcmpequw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107905 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107908 "powerpc.tcc"
				>
				OpVcmpgefp<
#line 38 "ppc.isa"
				CONFIG
#line 107913 "powerpc.tcc"
				>::OpVcmpgefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107917 "powerpc.tcc"
				>(code, addr, "vcmpgefp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107929 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107932 "powerpc.tcc"
				>
				OpVcmpgtfp<
#line 38 "ppc.isa"
				CONFIG
#line 107937 "powerpc.tcc"
				>::OpVcmpgtfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107941 "powerpc.tcc"
				>(code, addr, "vcmpgtfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107953 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107956 "powerpc.tcc"
				>
				OpVcmpgtsb<
#line 38 "ppc.isa"
				CONFIG
#line 107961 "powerpc.tcc"
				>::OpVcmpgtsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107965 "powerpc.tcc"
				>(code, addr, "vcmpgtsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 107977 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 107980 "powerpc.tcc"
				>
				OpVcmpgtsh<
#line 38 "ppc.isa"
				CONFIG
#line 107985 "powerpc.tcc"
				>::OpVcmpgtsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 107989 "powerpc.tcc"
				>(code, addr, "vcmpgtsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108001 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108004 "powerpc.tcc"
				>
				OpVcmpgtsw<
#line 38 "ppc.isa"
				CONFIG
#line 108009 "powerpc.tcc"
				>::OpVcmpgtsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108013 "powerpc.tcc"
				>(code, addr, "vcmpgtsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108028 "powerpc.tcc"
				>
				OpVcmpgtub<
#line 38 "ppc.isa"
				CONFIG
#line 108033 "powerpc.tcc"
				>::OpVcmpgtub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108037 "powerpc.tcc"
				>(code, addr, "vcmpgtub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108049 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108052 "powerpc.tcc"
				>
				OpVcmpgtuh<
#line 38 "ppc.isa"
				CONFIG
#line 108057 "powerpc.tcc"
				>::OpVcmpgtuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108061 "powerpc.tcc"
				>(code, addr, "vcmpgtuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108073 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108076 "powerpc.tcc"
				>
				OpVcmpgtuw<
#line 38 "ppc.isa"
				CONFIG
#line 108081 "powerpc.tcc"
				>::OpVcmpgtuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108085 "powerpc.tcc"
				>(code, addr, "vcmpgtuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					rc = ((code >> 10) & 0x1);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108097 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108100 "powerpc.tcc"
				>
				OpVctsxs<
#line 38 "ppc.isa"
				CONFIG
#line 108105 "powerpc.tcc"
				>::OpVctsxs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108109 "powerpc.tcc"
				>(code, addr, "vctsxs")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108120 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108123 "powerpc.tcc"
				>
				OpVctuxs<
#line 38 "ppc.isa"
				CONFIG
#line 108128 "powerpc.tcc"
				>::OpVctuxs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108132 "powerpc.tcc"
				>(code, addr, "vctuxs")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108143 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108146 "powerpc.tcc"
				>
				OpVexptefp<
#line 38 "ppc.isa"
				CONFIG
#line 108151 "powerpc.tcc"
				>::OpVexptefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108155 "powerpc.tcc"
				>(code, addr, "vexptefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108168 "powerpc.tcc"
				>
				OpVlogefp<
#line 38 "ppc.isa"
				CONFIG
#line 108173 "powerpc.tcc"
				>::OpVlogefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108177 "powerpc.tcc"
				>(code, addr, "vlogefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108187 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108190 "powerpc.tcc"
				>
				OpVmaddfp<
#line 38 "ppc.isa"
				CONFIG
#line 108195 "powerpc.tcc"
				>::OpVmaddfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108199 "powerpc.tcc"
				>(code, addr, "vmaddfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108214 "powerpc.tcc"
				>
				OpVmaxfp<
#line 38 "ppc.isa"
				CONFIG
#line 108219 "powerpc.tcc"
				>::OpVmaxfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108223 "powerpc.tcc"
				>(code, addr, "vmaxfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108234 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108237 "powerpc.tcc"
				>
				OpVmaxsb<
#line 38 "ppc.isa"
				CONFIG
#line 108242 "powerpc.tcc"
				>::OpVmaxsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108246 "powerpc.tcc"
				>(code, addr, "vmaxsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108260 "powerpc.tcc"
				>
				OpVmaxsh<
#line 38 "ppc.isa"
				CONFIG
#line 108265 "powerpc.tcc"
				>::OpVmaxsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108269 "powerpc.tcc"
				>(code, addr, "vmaxsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108283 "powerpc.tcc"
				>
				OpVmaxsw<
#line 38 "ppc.isa"
				CONFIG
#line 108288 "powerpc.tcc"
				>::OpVmaxsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108292 "powerpc.tcc"
				>(code, addr, "vmaxsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108303 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108306 "powerpc.tcc"
				>
				OpVmaxub<
#line 38 "ppc.isa"
				CONFIG
#line 108311 "powerpc.tcc"
				>::OpVmaxub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108315 "powerpc.tcc"
				>(code, addr, "vmaxub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108329 "powerpc.tcc"
				>
				OpVmaxuh<
#line 38 "ppc.isa"
				CONFIG
#line 108334 "powerpc.tcc"
				>::OpVmaxuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108338 "powerpc.tcc"
				>(code, addr, "vmaxuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108352 "powerpc.tcc"
				>
				OpVmaxuw<
#line 38 "ppc.isa"
				CONFIG
#line 108357 "powerpc.tcc"
				>::OpVmaxuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108361 "powerpc.tcc"
				>(code, addr, "vmaxuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108375 "powerpc.tcc"
				>
				OpVmhaddshs<
#line 38 "ppc.isa"
				CONFIG
#line 108380 "powerpc.tcc"
				>::OpVmhaddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108384 "powerpc.tcc"
				>(code, addr, "vmhaddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108396 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108399 "powerpc.tcc"
				>
				OpVmhraddshs<
#line 38 "ppc.isa"
				CONFIG
#line 108404 "powerpc.tcc"
				>::OpVmhraddshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108408 "powerpc.tcc"
				>(code, addr, "vmhraddshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108420 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108423 "powerpc.tcc"
				>
				OpVminfp<
#line 38 "ppc.isa"
				CONFIG
#line 108428 "powerpc.tcc"
				>::OpVminfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108432 "powerpc.tcc"
				>(code, addr, "vminfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108443 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108446 "powerpc.tcc"
				>
				OpVminsb<
#line 38 "ppc.isa"
				CONFIG
#line 108451 "powerpc.tcc"
				>::OpVminsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108455 "powerpc.tcc"
				>(code, addr, "vminsb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108466 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108469 "powerpc.tcc"
				>
				OpVminsh<
#line 38 "ppc.isa"
				CONFIG
#line 108474 "powerpc.tcc"
				>::OpVminsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108478 "powerpc.tcc"
				>(code, addr, "vminsh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108489 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108492 "powerpc.tcc"
				>
				OpVminsw<
#line 38 "ppc.isa"
				CONFIG
#line 108497 "powerpc.tcc"
				>::OpVminsw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108501 "powerpc.tcc"
				>(code, addr, "vminsw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108512 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108515 "powerpc.tcc"
				>
				OpVminub<
#line 38 "ppc.isa"
				CONFIG
#line 108520 "powerpc.tcc"
				>::OpVminub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108524 "powerpc.tcc"
				>(code, addr, "vminub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108535 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108538 "powerpc.tcc"
				>
				OpVminuh<
#line 38 "ppc.isa"
				CONFIG
#line 108543 "powerpc.tcc"
				>::OpVminuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108547 "powerpc.tcc"
				>(code, addr, "vminuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108561 "powerpc.tcc"
				>
				OpVminuw<
#line 38 "ppc.isa"
				CONFIG
#line 108566 "powerpc.tcc"
				>::OpVminuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108570 "powerpc.tcc"
				>(code, addr, "vminuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108584 "powerpc.tcc"
				>
				OpVmladduhm<
#line 38 "ppc.isa"
				CONFIG
#line 108589 "powerpc.tcc"
				>::OpVmladduhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108593 "powerpc.tcc"
				>(code, addr, "vmladduhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108605 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108608 "powerpc.tcc"
				>
				OpVmrghb<
#line 38 "ppc.isa"
				CONFIG
#line 108613 "powerpc.tcc"
				>::OpVmrghb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108617 "powerpc.tcc"
				>(code, addr, "vmrghb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108628 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108631 "powerpc.tcc"
				>
				OpVmrghh<
#line 38 "ppc.isa"
				CONFIG
#line 108636 "powerpc.tcc"
				>::OpVmrghh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108640 "powerpc.tcc"
				>(code, addr, "vmrghh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108651 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108654 "powerpc.tcc"
				>
				OpVmrghw<
#line 38 "ppc.isa"
				CONFIG
#line 108659 "powerpc.tcc"
				>::OpVmrghw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108663 "powerpc.tcc"
				>(code, addr, "vmrghw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108674 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108677 "powerpc.tcc"
				>
				OpVmrglb<
#line 38 "ppc.isa"
				CONFIG
#line 108682 "powerpc.tcc"
				>::OpVmrglb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108686 "powerpc.tcc"
				>(code, addr, "vmrglb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108697 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108700 "powerpc.tcc"
				>
				OpVmrglh<
#line 38 "ppc.isa"
				CONFIG
#line 108705 "powerpc.tcc"
				>::OpVmrglh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108709 "powerpc.tcc"
				>(code, addr, "vmrglh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108720 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108723 "powerpc.tcc"
				>
				OpVmrglw<
#line 38 "ppc.isa"
				CONFIG
#line 108728 "powerpc.tcc"
				>::OpVmrglw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108732 "powerpc.tcc"
				>(code, addr, "vmrglw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108743 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108746 "powerpc.tcc"
				>
				OpVmsummbm<
#line 38 "ppc.isa"
				CONFIG
#line 108751 "powerpc.tcc"
				>::OpVmsummbm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108755 "powerpc.tcc"
				>(code, addr, "vmsummbm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108767 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108770 "powerpc.tcc"
				>
				OpVmsumshm<
#line 38 "ppc.isa"
				CONFIG
#line 108775 "powerpc.tcc"
				>::OpVmsumshm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108779 "powerpc.tcc"
				>(code, addr, "vmsumshm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108791 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108794 "powerpc.tcc"
				>
				OpVmsumshs<
#line 38 "ppc.isa"
				CONFIG
#line 108799 "powerpc.tcc"
				>::OpVmsumshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108803 "powerpc.tcc"
				>(code, addr, "vmsumshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108815 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108818 "powerpc.tcc"
				>
				OpVmsumubm<
#line 38 "ppc.isa"
				CONFIG
#line 108823 "powerpc.tcc"
				>::OpVmsumubm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108827 "powerpc.tcc"
				>(code, addr, "vmsumubm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108839 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108842 "powerpc.tcc"
				>
				OpVmsumuhm<
#line 38 "ppc.isa"
				CONFIG
#line 108847 "powerpc.tcc"
				>::OpVmsumuhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108851 "powerpc.tcc"
				>(code, addr, "vmsumuhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108863 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108866 "powerpc.tcc"
				>
				OpVmsumuhs<
#line 38 "ppc.isa"
				CONFIG
#line 108871 "powerpc.tcc"
				>::OpVmsumuhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108875 "powerpc.tcc"
				>(code, addr, "vmsumuhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108887 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108890 "powerpc.tcc"
				>
				OpVmulesb<
#line 38 "ppc.isa"
				CONFIG
#line 108895 "powerpc.tcc"
				>::OpVmulesb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108899 "powerpc.tcc"
				>(code, addr, "vmulesb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108910 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108913 "powerpc.tcc"
				>
				OpVmulesh<
#line 38 "ppc.isa"
				CONFIG
#line 108918 "powerpc.tcc"
				>::OpVmulesh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108922 "powerpc.tcc"
				>(code, addr, "vmulesh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108933 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108936 "powerpc.tcc"
				>
				OpVmuleub<
#line 38 "ppc.isa"
				CONFIG
#line 108941 "powerpc.tcc"
				>::OpVmuleub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108945 "powerpc.tcc"
				>(code, addr, "vmuleub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108956 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108959 "powerpc.tcc"
				>
				OpVmuleuh<
#line 38 "ppc.isa"
				CONFIG
#line 108964 "powerpc.tcc"
				>::OpVmuleuh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108968 "powerpc.tcc"
				>(code, addr, "vmuleuh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 108979 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 108982 "powerpc.tcc"
				>
				OpVmulosb<
#line 38 "ppc.isa"
				CONFIG
#line 108987 "powerpc.tcc"
				>::OpVmulosb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 108991 "powerpc.tcc"
				>(code, addr, "vmulosb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109002 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109005 "powerpc.tcc"
				>
				OpVmulosh<
#line 38 "ppc.isa"
				CONFIG
#line 109010 "powerpc.tcc"
				>::OpVmulosh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109014 "powerpc.tcc"
				>(code, addr, "vmulosh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109025 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109028 "powerpc.tcc"
				>
				OpVmuloub<
#line 38 "ppc.isa"
				CONFIG
#line 109033 "powerpc.tcc"
				>::OpVmuloub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109037 "powerpc.tcc"
				>(code, addr, "vmuloub")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109048 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109051 "powerpc.tcc"
				>
				OpVmulouh<
#line 38 "ppc.isa"
				CONFIG
#line 109056 "powerpc.tcc"
				>::OpVmulouh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109060 "powerpc.tcc"
				>(code, addr, "vmulouh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109071 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109074 "powerpc.tcc"
				>
				OpVnmsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 109079 "powerpc.tcc"
				>::OpVnmsubfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109083 "powerpc.tcc"
				>(code, addr, "vnmsubfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109095 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109098 "powerpc.tcc"
				>
				OpVnor<
#line 38 "ppc.isa"
				CONFIG
#line 109103 "powerpc.tcc"
				>::OpVnor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109107 "powerpc.tcc"
				>(code, addr, "vnor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109118 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109121 "powerpc.tcc"
				>
				OpVor<
#line 38 "ppc.isa"
				CONFIG
#line 109126 "powerpc.tcc"
				>::OpVor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109130 "powerpc.tcc"
				>(code, addr, "vor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109141 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109144 "powerpc.tcc"
				>
				OpVperm<
#line 38 "ppc.isa"
				CONFIG
#line 109149 "powerpc.tcc"
				>::OpVperm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109153 "powerpc.tcc"
				>(code, addr, "vperm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109165 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109168 "powerpc.tcc"
				>
				OpVpkpx<
#line 38 "ppc.isa"
				CONFIG
#line 109173 "powerpc.tcc"
				>::OpVpkpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109177 "powerpc.tcc"
				>(code, addr, "vpkpx")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109188 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109191 "powerpc.tcc"
				>
				OpVpkshss<
#line 38 "ppc.isa"
				CONFIG
#line 109196 "powerpc.tcc"
				>::OpVpkshss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109200 "powerpc.tcc"
				>(code, addr, "vpkshss")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109211 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109214 "powerpc.tcc"
				>
				OpVpkshus<
#line 38 "ppc.isa"
				CONFIG
#line 109219 "powerpc.tcc"
				>::OpVpkshus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109223 "powerpc.tcc"
				>(code, addr, "vpkshus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109234 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109237 "powerpc.tcc"
				>
				OpVpkswss<
#line 38 "ppc.isa"
				CONFIG
#line 109242 "powerpc.tcc"
				>::OpVpkswss(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109246 "powerpc.tcc"
				>(code, addr, "vpkswss")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109257 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109260 "powerpc.tcc"
				>
				OpVpkswus<
#line 38 "ppc.isa"
				CONFIG
#line 109265 "powerpc.tcc"
				>::OpVpkswus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109269 "powerpc.tcc"
				>(code, addr, "vpkswus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109280 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109283 "powerpc.tcc"
				>
				OpVpkuhum<
#line 38 "ppc.isa"
				CONFIG
#line 109288 "powerpc.tcc"
				>::OpVpkuhum(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109292 "powerpc.tcc"
				>(code, addr, "vpkuhum")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109303 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109306 "powerpc.tcc"
				>
				OpVpkuhus<
#line 38 "ppc.isa"
				CONFIG
#line 109311 "powerpc.tcc"
				>::OpVpkuhus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109315 "powerpc.tcc"
				>(code, addr, "vpkuhus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109326 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109329 "powerpc.tcc"
				>
				OpVpkuwum<
#line 38 "ppc.isa"
				CONFIG
#line 109334 "powerpc.tcc"
				>::OpVpkuwum(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109338 "powerpc.tcc"
				>(code, addr, "vpkuwum")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109349 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109352 "powerpc.tcc"
				>
				OpVpkuwus<
#line 38 "ppc.isa"
				CONFIG
#line 109357 "powerpc.tcc"
				>::OpVpkuwus(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109361 "powerpc.tcc"
				>(code, addr, "vpkuwus")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109372 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109375 "powerpc.tcc"
				>
				OpVrefp<
#line 38 "ppc.isa"
				CONFIG
#line 109380 "powerpc.tcc"
				>::OpVrefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109384 "powerpc.tcc"
				>(code, addr, "vrefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109394 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109397 "powerpc.tcc"
				>
				OpVrfim<
#line 38 "ppc.isa"
				CONFIG
#line 109402 "powerpc.tcc"
				>::OpVrfim(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109406 "powerpc.tcc"
				>(code, addr, "vrfim")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109416 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109419 "powerpc.tcc"
				>
				OpVrfin<
#line 38 "ppc.isa"
				CONFIG
#line 109424 "powerpc.tcc"
				>::OpVrfin(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109428 "powerpc.tcc"
				>(code, addr, "vrfin")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109438 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109441 "powerpc.tcc"
				>
				OpVrfip<
#line 38 "ppc.isa"
				CONFIG
#line 109446 "powerpc.tcc"
				>::OpVrfip(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109450 "powerpc.tcc"
				>(code, addr, "vrfip")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109460 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109463 "powerpc.tcc"
				>
				OpVrfiz<
#line 38 "ppc.isa"
				CONFIG
#line 109468 "powerpc.tcc"
				>::OpVrfiz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109472 "powerpc.tcc"
				>(code, addr, "vrfiz")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109482 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109485 "powerpc.tcc"
				>
				OpVrlb<
#line 38 "ppc.isa"
				CONFIG
#line 109490 "powerpc.tcc"
				>::OpVrlb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109494 "powerpc.tcc"
				>(code, addr, "vrlb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109505 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109508 "powerpc.tcc"
				>
				OpVrlh<
#line 38 "ppc.isa"
				CONFIG
#line 109513 "powerpc.tcc"
				>::OpVrlh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109517 "powerpc.tcc"
				>(code, addr, "vrlh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109528 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109531 "powerpc.tcc"
				>
				OpVrlw<
#line 38 "ppc.isa"
				CONFIG
#line 109536 "powerpc.tcc"
				>::OpVrlw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109540 "powerpc.tcc"
				>(code, addr, "vrlw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109551 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109554 "powerpc.tcc"
				>
				OpVrsqrtefp<
#line 38 "ppc.isa"
				CONFIG
#line 109559 "powerpc.tcc"
				>::OpVrsqrtefp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109563 "powerpc.tcc"
				>(code, addr, "vrsqrtefp")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109573 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109576 "powerpc.tcc"
				>
				OpVsel<
#line 38 "ppc.isa"
				CONFIG
#line 109581 "powerpc.tcc"
				>::OpVsel(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109585 "powerpc.tcc"
				>(code, addr, "vsel")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					vc = ((code >> 6) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109597 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109600 "powerpc.tcc"
				>
				OpVsl<
#line 38 "ppc.isa"
				CONFIG
#line 109605 "powerpc.tcc"
				>::OpVsl(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109609 "powerpc.tcc"
				>(code, addr, "vsl")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109620 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109623 "powerpc.tcc"
				>
				OpVslb<
#line 38 "ppc.isa"
				CONFIG
#line 109628 "powerpc.tcc"
				>::OpVslb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109632 "powerpc.tcc"
				>(code, addr, "vslb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109643 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109646 "powerpc.tcc"
				>
				OpVsldoi<
#line 38 "ppc.isa"
				CONFIG
#line 109651 "powerpc.tcc"
				>::OpVsldoi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109655 "powerpc.tcc"
				>(code, addr, "vsldoi")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
					sh = ((code >> 6) & 0xf);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109667 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109670 "powerpc.tcc"
				>
				OpVslh<
#line 38 "ppc.isa"
				CONFIG
#line 109675 "powerpc.tcc"
				>::OpVslh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109679 "powerpc.tcc"
				>(code, addr, "vslh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109690 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109693 "powerpc.tcc"
				>
				OpVslo<
#line 38 "ppc.isa"
				CONFIG
#line 109698 "powerpc.tcc"
				>::OpVslo(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109702 "powerpc.tcc"
				>(code, addr, "vslo")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109713 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109716 "powerpc.tcc"
				>
				OpVslw<
#line 38 "ppc.isa"
				CONFIG
#line 109721 "powerpc.tcc"
				>::OpVslw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109725 "powerpc.tcc"
				>(code, addr, "vslw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109736 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109739 "powerpc.tcc"
				>
				OpVspltb<
#line 38 "ppc.isa"
				CONFIG
#line 109744 "powerpc.tcc"
				>::OpVspltb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109748 "powerpc.tcc"
				>(code, addr, "vspltb")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109759 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109762 "powerpc.tcc"
				>
				OpVsplth<
#line 38 "ppc.isa"
				CONFIG
#line 109767 "powerpc.tcc"
				>::OpVsplth(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109771 "powerpc.tcc"
				>(code, addr, "vsplth")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109782 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109785 "powerpc.tcc"
				>
				OpVspltisb<
#line 38 "ppc.isa"
				CONFIG
#line 109790 "powerpc.tcc"
				>::OpVspltisb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109794 "powerpc.tcc"
				>(code, addr, "vspltisb")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109805 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109808 "powerpc.tcc"
				>
				OpVspltish<
#line 38 "ppc.isa"
				CONFIG
#line 109813 "powerpc.tcc"
				>::OpVspltish(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109817 "powerpc.tcc"
				>(code, addr, "vspltish")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109828 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109831 "powerpc.tcc"
				>
				OpVspltisw<
#line 38 "ppc.isa"
				CONFIG
#line 109836 "powerpc.tcc"
				>::OpVspltisw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109840 "powerpc.tcc"
				>(code, addr, "vspltisw")
				{
					vd = ((code >> 21) & 0x1f);
					simm = (((((int32_t)(code >> 16)) & 0x1f) << 27) >> 27);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109851 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109854 "powerpc.tcc"
				>
				OpVspltw<
#line 38 "ppc.isa"
				CONFIG
#line 109859 "powerpc.tcc"
				>::OpVspltw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109863 "powerpc.tcc"
				>(code, addr, "vspltw")
				{
					vd = ((code >> 21) & 0x1f);
					uimm = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109874 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109877 "powerpc.tcc"
				>
				OpVsr<
#line 38 "ppc.isa"
				CONFIG
#line 109882 "powerpc.tcc"
				>::OpVsr(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109886 "powerpc.tcc"
				>(code, addr, "vsr")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109897 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109900 "powerpc.tcc"
				>
				OpVsrab<
#line 38 "ppc.isa"
				CONFIG
#line 109905 "powerpc.tcc"
				>::OpVsrab(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109909 "powerpc.tcc"
				>(code, addr, "vsrab")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109920 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109923 "powerpc.tcc"
				>
				OpVsrah<
#line 38 "ppc.isa"
				CONFIG
#line 109928 "powerpc.tcc"
				>::OpVsrah(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109932 "powerpc.tcc"
				>(code, addr, "vsrah")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109943 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109946 "powerpc.tcc"
				>
				OpVsraw<
#line 38 "ppc.isa"
				CONFIG
#line 109951 "powerpc.tcc"
				>::OpVsraw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109955 "powerpc.tcc"
				>(code, addr, "vsraw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109966 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109969 "powerpc.tcc"
				>
				OpVsrb<
#line 38 "ppc.isa"
				CONFIG
#line 109974 "powerpc.tcc"
				>::OpVsrb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 109978 "powerpc.tcc"
				>(code, addr, "vsrb")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 109989 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 109992 "powerpc.tcc"
				>
				OpVsrh<
#line 38 "ppc.isa"
				CONFIG
#line 109997 "powerpc.tcc"
				>::OpVsrh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110001 "powerpc.tcc"
				>(code, addr, "vsrh")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110012 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110015 "powerpc.tcc"
				>
				OpVsro<
#line 38 "ppc.isa"
				CONFIG
#line 110020 "powerpc.tcc"
				>::OpVsro(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110024 "powerpc.tcc"
				>(code, addr, "vsro")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110035 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110038 "powerpc.tcc"
				>
				OpVsrw<
#line 38 "ppc.isa"
				CONFIG
#line 110043 "powerpc.tcc"
				>::OpVsrw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110047 "powerpc.tcc"
				>(code, addr, "vsrw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110058 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110061 "powerpc.tcc"
				>
				OpVsubcuw<
#line 38 "ppc.isa"
				CONFIG
#line 110066 "powerpc.tcc"
				>::OpVsubcuw(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110070 "powerpc.tcc"
				>(code, addr, "vsubcuw")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110081 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110084 "powerpc.tcc"
				>
				OpVsubfp<
#line 38 "ppc.isa"
				CONFIG
#line 110089 "powerpc.tcc"
				>::OpVsubfp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110093 "powerpc.tcc"
				>(code, addr, "vsubfp")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110104 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110107 "powerpc.tcc"
				>
				OpVsubsbs<
#line 38 "ppc.isa"
				CONFIG
#line 110112 "powerpc.tcc"
				>::OpVsubsbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110116 "powerpc.tcc"
				>(code, addr, "vsubsbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110127 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110130 "powerpc.tcc"
				>
				OpVsubshs<
#line 38 "ppc.isa"
				CONFIG
#line 110135 "powerpc.tcc"
				>::OpVsubshs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110139 "powerpc.tcc"
				>(code, addr, "vsubshs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110150 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110153 "powerpc.tcc"
				>
				OpVsubsws<
#line 38 "ppc.isa"
				CONFIG
#line 110158 "powerpc.tcc"
				>::OpVsubsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110162 "powerpc.tcc"
				>(code, addr, "vsubsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110173 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110176 "powerpc.tcc"
				>
				OpVsububm<
#line 38 "ppc.isa"
				CONFIG
#line 110181 "powerpc.tcc"
				>::OpVsububm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110185 "powerpc.tcc"
				>(code, addr, "vsububm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110196 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110199 "powerpc.tcc"
				>
				OpVsububs<
#line 38 "ppc.isa"
				CONFIG
#line 110204 "powerpc.tcc"
				>::OpVsububs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110208 "powerpc.tcc"
				>(code, addr, "vsububs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110219 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110222 "powerpc.tcc"
				>
				OpVsubuhm<
#line 38 "ppc.isa"
				CONFIG
#line 110227 "powerpc.tcc"
				>::OpVsubuhm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110231 "powerpc.tcc"
				>(code, addr, "vsubuhm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110242 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110245 "powerpc.tcc"
				>
				OpVsubuhs<
#line 38 "ppc.isa"
				CONFIG
#line 110250 "powerpc.tcc"
				>::OpVsubuhs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110254 "powerpc.tcc"
				>(code, addr, "vsubuhs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110265 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110268 "powerpc.tcc"
				>
				OpVsubuwm<
#line 38 "ppc.isa"
				CONFIG
#line 110273 "powerpc.tcc"
				>::OpVsubuwm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110277 "powerpc.tcc"
				>(code, addr, "vsubuwm")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110288 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110291 "powerpc.tcc"
				>
				OpVsubuws<
#line 38 "ppc.isa"
				CONFIG
#line 110296 "powerpc.tcc"
				>::OpVsubuws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110300 "powerpc.tcc"
				>(code, addr, "vsubuws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110311 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110314 "powerpc.tcc"
				>
				OpVsumsws<
#line 38 "ppc.isa"
				CONFIG
#line 110319 "powerpc.tcc"
				>::OpVsumsws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110323 "powerpc.tcc"
				>(code, addr, "vsumsws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110334 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110337 "powerpc.tcc"
				>
				OpVsum2sws<
#line 38 "ppc.isa"
				CONFIG
#line 110342 "powerpc.tcc"
				>::OpVsum2sws(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110346 "powerpc.tcc"
				>(code, addr, "vsum2sws")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110357 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110360 "powerpc.tcc"
				>
				OpVsum4sbs<
#line 38 "ppc.isa"
				CONFIG
#line 110365 "powerpc.tcc"
				>::OpVsum4sbs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110369 "powerpc.tcc"
				>(code, addr, "vsum4sbs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110380 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110383 "powerpc.tcc"
				>
				OpVsum4shs<
#line 38 "ppc.isa"
				CONFIG
#line 110388 "powerpc.tcc"
				>::OpVsum4shs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110392 "powerpc.tcc"
				>(code, addr, "vsum4shs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110403 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110406 "powerpc.tcc"
				>
				OpVsum4ubs<
#line 38 "ppc.isa"
				CONFIG
#line 110411 "powerpc.tcc"
				>::OpVsum4ubs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110415 "powerpc.tcc"
				>(code, addr, "vsum4ubs")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110426 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110429 "powerpc.tcc"
				>
				OpVupkhpx<
#line 38 "ppc.isa"
				CONFIG
#line 110434 "powerpc.tcc"
				>::OpVupkhpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110438 "powerpc.tcc"
				>(code, addr, "vupkhpx")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110448 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110451 "powerpc.tcc"
				>
				OpVupkhsb<
#line 38 "ppc.isa"
				CONFIG
#line 110456 "powerpc.tcc"
				>::OpVupkhsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110460 "powerpc.tcc"
				>(code, addr, "vupkhsb")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110470 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110473 "powerpc.tcc"
				>
				OpVupkhsh<
#line 38 "ppc.isa"
				CONFIG
#line 110478 "powerpc.tcc"
				>::OpVupkhsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110482 "powerpc.tcc"
				>(code, addr, "vupkhsh")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110492 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110495 "powerpc.tcc"
				>
				OpVupklpx<
#line 38 "ppc.isa"
				CONFIG
#line 110500 "powerpc.tcc"
				>::OpVupklpx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110504 "powerpc.tcc"
				>(code, addr, "vupklpx")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110514 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110517 "powerpc.tcc"
				>
				OpVupklsb<
#line 38 "ppc.isa"
				CONFIG
#line 110522 "powerpc.tcc"
				>::OpVupklsb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110526 "powerpc.tcc"
				>(code, addr, "vupklsb")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110536 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110539 "powerpc.tcc"
				>
				OpVupklsh<
#line 38 "ppc.isa"
				CONFIG
#line 110544 "powerpc.tcc"
				>::OpVupklsh(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110548 "powerpc.tcc"
				>(code, addr, "vupklsh")
				{
					vd = ((code >> 21) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110558 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110561 "powerpc.tcc"
				>
				OpVxor<
#line 38 "ppc.isa"
				CONFIG
#line 110566 "powerpc.tcc"
				>::OpVxor(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110570 "powerpc.tcc"
				>(code, addr, "vxor")
				{
					vd = ((code >> 21) & 0x1f);
					va = ((code >> 16) & 0x1f);
					vb = ((code >> 11) & 0x1f);
				}

				template <
#line 38 "ppc.isa"
				class
#line 110581 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110584 "powerpc.tcc"
				>
				DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 110589 "powerpc.tcc"
				>::DecodeMapPage(typename CONFIG::address_t key)
				{
					this->key = key;
					memset(operation, 0, sizeof(operation));
					next = 0;
				}

				template <
#line 38 "ppc.isa"
				class
#line 110600 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110603 "powerpc.tcc"
				>
				DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 110608 "powerpc.tcc"
				>::~DecodeMapPage()
				{
					unsigned int idx;
					for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
					delete operation[idx];
				}

				template <
#line 38 "ppc.isa"
				class
#line 110619 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110622 "powerpc.tcc"
				>
				DecodeTableEntry<
#line 38 "ppc.isa"
				CONFIG
#line 110627 "powerpc.tcc"
				>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 38 "ppc.isa"
				CONFIG
#line 110631 "powerpc.tcc"
				> *(*decode)(CodeType, typename CONFIG::address_t))
				{
					this->opcode = opcode;
					this->opcode_mask = opcode_mask;
					this->decode = decode;
				}

				template <
#line 38 "ppc.isa"
				class
#line 110642 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 110645 "powerpc.tcc"
				>
				Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 110650 "powerpc.tcc"
				>::Decoder()
				{
					little_endian = false;
					mru_page = 0;
					memset(decode_hash_table, 0, sizeof(decode_hash_table));
					if(
#line 967 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110659 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110663 "powerpc.tcc"
					>(0x100004c4UL, 0xfc0007ffUL, DecodeOpVxor<
#line 38 "ppc.isa"
					CONFIG
#line 110667 "powerpc.tcc"
					>));
					if(
#line 961 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110672 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110676 "powerpc.tcc"
					>(0x100002ceUL, 0xfc1f07ffUL, DecodeOpVupklsh<
#line 38 "ppc.isa"
					CONFIG
#line 110680 "powerpc.tcc"
					>));
					if(
#line 955 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110685 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110689 "powerpc.tcc"
					>(0x1000028eUL, 0xfc1f07ffUL, DecodeOpVupklsb<
#line 38 "ppc.isa"
					CONFIG
#line 110693 "powerpc.tcc"
					>));
					if(
#line 949 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110698 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110702 "powerpc.tcc"
					>(0x100003ceUL, 0xfc1f07ffUL, DecodeOpVupklpx<
#line 38 "ppc.isa"
					CONFIG
#line 110706 "powerpc.tcc"
					>));
					if(
#line 943 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110711 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110715 "powerpc.tcc"
					>(0x1000024eUL, 0xfc1f07ffUL, DecodeOpVupkhsh<
#line 38 "ppc.isa"
					CONFIG
#line 110719 "powerpc.tcc"
					>));
					if(
#line 937 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110724 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110728 "powerpc.tcc"
					>(0x1000020eUL, 0xfc1f07ffUL, DecodeOpVupkhsb<
#line 38 "ppc.isa"
					CONFIG
#line 110732 "powerpc.tcc"
					>));
					if(
#line 931 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110737 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110741 "powerpc.tcc"
					>(0x1000034eUL, 0xfc1f07ffUL, DecodeOpVupkhpx<
#line 38 "ppc.isa"
					CONFIG
#line 110745 "powerpc.tcc"
					>));
					if(
#line 925 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110750 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110754 "powerpc.tcc"
					>(0x10000608UL, 0xfc0007ffUL, DecodeOpVsum4ubs<
#line 38 "ppc.isa"
					CONFIG
#line 110758 "powerpc.tcc"
					>));
					if(
#line 919 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110763 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110767 "powerpc.tcc"
					>(0x10000648UL, 0xfc0007ffUL, DecodeOpVsum4shs<
#line 38 "ppc.isa"
					CONFIG
#line 110771 "powerpc.tcc"
					>));
					if(
#line 913 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110776 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110780 "powerpc.tcc"
					>(0x10000708UL, 0xfc0007ffUL, DecodeOpVsum4sbs<
#line 38 "ppc.isa"
					CONFIG
#line 110784 "powerpc.tcc"
					>));
					if(
#line 907 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110789 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110793 "powerpc.tcc"
					>(0x10000688UL, 0xfc0007ffUL, DecodeOpVsum2sws<
#line 38 "ppc.isa"
					CONFIG
#line 110797 "powerpc.tcc"
					>));
					if(
#line 901 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110802 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110806 "powerpc.tcc"
					>(0x10000788UL, 0xfc0007ffUL, DecodeOpVsumsws<
#line 38 "ppc.isa"
					CONFIG
#line 110810 "powerpc.tcc"
					>));
					if(
#line 895 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110815 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110819 "powerpc.tcc"
					>(0x10000680UL, 0xfc0007ffUL, DecodeOpVsubuws<
#line 38 "ppc.isa"
					CONFIG
#line 110823 "powerpc.tcc"
					>));
					if(
#line 889 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110828 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110832 "powerpc.tcc"
					>(0x10000480UL, 0xfc0007ffUL, DecodeOpVsubuwm<
#line 38 "ppc.isa"
					CONFIG
#line 110836 "powerpc.tcc"
					>));
					if(
#line 883 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110841 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110845 "powerpc.tcc"
					>(0x10000640UL, 0xfc0007ffUL, DecodeOpVsubuhs<
#line 38 "ppc.isa"
					CONFIG
#line 110849 "powerpc.tcc"
					>));
					if(
#line 877 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110854 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110858 "powerpc.tcc"
					>(0x10000440UL, 0xfc0007ffUL, DecodeOpVsubuhm<
#line 38 "ppc.isa"
					CONFIG
#line 110862 "powerpc.tcc"
					>));
					if(
#line 871 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110867 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110871 "powerpc.tcc"
					>(0x10000600UL, 0xfc0007ffUL, DecodeOpVsububs<
#line 38 "ppc.isa"
					CONFIG
#line 110875 "powerpc.tcc"
					>));
					if(
#line 865 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110880 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110884 "powerpc.tcc"
					>(0x10000400UL, 0xfc0007ffUL, DecodeOpVsububm<
#line 38 "ppc.isa"
					CONFIG
#line 110888 "powerpc.tcc"
					>));
					if(
#line 859 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110893 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110897 "powerpc.tcc"
					>(0x10000780UL, 0xfc0007ffUL, DecodeOpVsubsws<
#line 38 "ppc.isa"
					CONFIG
#line 110901 "powerpc.tcc"
					>));
					if(
#line 853 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110906 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110910 "powerpc.tcc"
					>(0x10000740UL, 0xfc0007ffUL, DecodeOpVsubshs<
#line 38 "ppc.isa"
					CONFIG
#line 110914 "powerpc.tcc"
					>));
					if(
#line 847 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110919 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110923 "powerpc.tcc"
					>(0x10000700UL, 0xfc0007ffUL, DecodeOpVsubsbs<
#line 38 "ppc.isa"
					CONFIG
#line 110927 "powerpc.tcc"
					>));
					if(
#line 841 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110932 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110936 "powerpc.tcc"
					>(0x1000004aUL, 0xfc0007ffUL, DecodeOpVsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 110940 "powerpc.tcc"
					>));
					if(
#line 835 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110945 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110949 "powerpc.tcc"
					>(0x10000580UL, 0xfc0007ffUL, DecodeOpVsubcuw<
#line 38 "ppc.isa"
					CONFIG
#line 110953 "powerpc.tcc"
					>));
					if(
#line 829 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110958 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110962 "powerpc.tcc"
					>(0x10000284UL, 0xfc0007ffUL, DecodeOpVsrw<
#line 38 "ppc.isa"
					CONFIG
#line 110966 "powerpc.tcc"
					>));
					if(
#line 823 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110971 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110975 "powerpc.tcc"
					>(0x1000044cUL, 0xfc0007ffUL, DecodeOpVsro<
#line 38 "ppc.isa"
					CONFIG
#line 110979 "powerpc.tcc"
					>));
					if(
#line 817 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110984 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 110988 "powerpc.tcc"
					>(0x10000244UL, 0xfc0007ffUL, DecodeOpVsrh<
#line 38 "ppc.isa"
					CONFIG
#line 110992 "powerpc.tcc"
					>));
					if(
#line 811 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 110997 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111001 "powerpc.tcc"
					>(0x10000204UL, 0xfc0007ffUL, DecodeOpVsrb<
#line 38 "ppc.isa"
					CONFIG
#line 111005 "powerpc.tcc"
					>));
					if(
#line 805 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111010 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111014 "powerpc.tcc"
					>(0x10000384UL, 0xfc0007ffUL, DecodeOpVsraw<
#line 38 "ppc.isa"
					CONFIG
#line 111018 "powerpc.tcc"
					>));
					if(
#line 799 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111023 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111027 "powerpc.tcc"
					>(0x10000344UL, 0xfc0007ffUL, DecodeOpVsrah<
#line 38 "ppc.isa"
					CONFIG
#line 111031 "powerpc.tcc"
					>));
					if(
#line 793 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111036 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111040 "powerpc.tcc"
					>(0x10000304UL, 0xfc0007ffUL, DecodeOpVsrab<
#line 38 "ppc.isa"
					CONFIG
#line 111044 "powerpc.tcc"
					>));
					if(
#line 787 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111049 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111053 "powerpc.tcc"
					>(0x100002c4UL, 0xfc0007ffUL, DecodeOpVsr<
#line 38 "ppc.isa"
					CONFIG
#line 111057 "powerpc.tcc"
					>));
					if(
#line 781 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111062 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111066 "powerpc.tcc"
					>(0x1000028cUL, 0xfc0007ffUL, DecodeOpVspltw<
#line 38 "ppc.isa"
					CONFIG
#line 111070 "powerpc.tcc"
					>));
					if(
#line 775 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111075 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111079 "powerpc.tcc"
					>(0x1000038cUL, 0xfc0007ffUL, DecodeOpVspltisw<
#line 38 "ppc.isa"
					CONFIG
#line 111083 "powerpc.tcc"
					>));
					if(
#line 769 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111088 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111092 "powerpc.tcc"
					>(0x1000034cUL, 0xfc0007ffUL, DecodeOpVspltish<
#line 38 "ppc.isa"
					CONFIG
#line 111096 "powerpc.tcc"
					>));
					if(
#line 763 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111101 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111105 "powerpc.tcc"
					>(0x1000030cUL, 0xfc0007ffUL, DecodeOpVspltisb<
#line 38 "ppc.isa"
					CONFIG
#line 111109 "powerpc.tcc"
					>));
					if(
#line 757 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111114 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111118 "powerpc.tcc"
					>(0x1000024cUL, 0xfc0007ffUL, DecodeOpVsplth<
#line 38 "ppc.isa"
					CONFIG
#line 111122 "powerpc.tcc"
					>));
					if(
#line 751 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111127 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111131 "powerpc.tcc"
					>(0x1000020cUL, 0xfc0007ffUL, DecodeOpVspltb<
#line 38 "ppc.isa"
					CONFIG
#line 111135 "powerpc.tcc"
					>));
					if(
#line 745 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111140 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111144 "powerpc.tcc"
					>(0x10000184UL, 0xfc0007ffUL, DecodeOpVslw<
#line 38 "ppc.isa"
					CONFIG
#line 111148 "powerpc.tcc"
					>));
					if(
#line 739 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111153 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111157 "powerpc.tcc"
					>(0x1000040cUL, 0xfc0007ffUL, DecodeOpVslo<
#line 38 "ppc.isa"
					CONFIG
#line 111161 "powerpc.tcc"
					>));
					if(
#line 733 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111166 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111170 "powerpc.tcc"
					>(0x10000144UL, 0xfc0007ffUL, DecodeOpVslh<
#line 38 "ppc.isa"
					CONFIG
#line 111174 "powerpc.tcc"
					>));
					if(
#line 727 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111179 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111183 "powerpc.tcc"
					>(0x1000002cUL, 0xfc00043fUL, DecodeOpVsldoi<
#line 38 "ppc.isa"
					CONFIG
#line 111187 "powerpc.tcc"
					>));
					if(
#line 721 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111192 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111196 "powerpc.tcc"
					>(0x10000104UL, 0xfc0007ffUL, DecodeOpVslb<
#line 38 "ppc.isa"
					CONFIG
#line 111200 "powerpc.tcc"
					>));
					if(
#line 715 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111205 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111209 "powerpc.tcc"
					>(0x100001c4UL, 0xfc0007ffUL, DecodeOpVsl<
#line 38 "ppc.isa"
					CONFIG
#line 111213 "powerpc.tcc"
					>));
					if(
#line 709 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111218 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111222 "powerpc.tcc"
					>(0x1000002aUL, 0xfc00003fUL, DecodeOpVsel<
#line 38 "ppc.isa"
					CONFIG
#line 111226 "powerpc.tcc"
					>));
					if(
#line 703 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111231 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111235 "powerpc.tcc"
					>(0x1000014aUL, 0xfc1f07ffUL, DecodeOpVrsqrtefp<
#line 38 "ppc.isa"
					CONFIG
#line 111239 "powerpc.tcc"
					>));
					if(
#line 697 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111244 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111248 "powerpc.tcc"
					>(0x10000084UL, 0xfc0007ffUL, DecodeOpVrlw<
#line 38 "ppc.isa"
					CONFIG
#line 111252 "powerpc.tcc"
					>));
					if(
#line 691 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111257 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111261 "powerpc.tcc"
					>(0x10000044UL, 0xfc0007ffUL, DecodeOpVrlh<
#line 38 "ppc.isa"
					CONFIG
#line 111265 "powerpc.tcc"
					>));
					if(
#line 685 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111270 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111274 "powerpc.tcc"
					>(0x10000004UL, 0xfc0007ffUL, DecodeOpVrlb<
#line 38 "ppc.isa"
					CONFIG
#line 111278 "powerpc.tcc"
					>));
					if(
#line 679 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111283 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111287 "powerpc.tcc"
					>(0x1000024aUL, 0xfc1f07ffUL, DecodeOpVrfiz<
#line 38 "ppc.isa"
					CONFIG
#line 111291 "powerpc.tcc"
					>));
					if(
#line 673 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111296 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111300 "powerpc.tcc"
					>(0x1000028aUL, 0xfc1f07ffUL, DecodeOpVrfip<
#line 38 "ppc.isa"
					CONFIG
#line 111304 "powerpc.tcc"
					>));
					if(
#line 667 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111309 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111313 "powerpc.tcc"
					>(0x1000020aUL, 0xfc1f07ffUL, DecodeOpVrfin<
#line 38 "ppc.isa"
					CONFIG
#line 111317 "powerpc.tcc"
					>));
					if(
#line 661 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111322 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111326 "powerpc.tcc"
					>(0x100002caUL, 0xfc1f07ffUL, DecodeOpVrfim<
#line 38 "ppc.isa"
					CONFIG
#line 111330 "powerpc.tcc"
					>));
					if(
#line 655 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111335 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111339 "powerpc.tcc"
					>(0x1000010aUL, 0xfc1f07ffUL, DecodeOpVrefp<
#line 38 "ppc.isa"
					CONFIG
#line 111343 "powerpc.tcc"
					>));
					if(
#line 649 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111348 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111352 "powerpc.tcc"
					>(0x100000ceUL, 0xfc0007ffUL, DecodeOpVpkuwus<
#line 38 "ppc.isa"
					CONFIG
#line 111356 "powerpc.tcc"
					>));
					if(
#line 643 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111361 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111365 "powerpc.tcc"
					>(0x1000004eUL, 0xfc0007ffUL, DecodeOpVpkuwum<
#line 38 "ppc.isa"
					CONFIG
#line 111369 "powerpc.tcc"
					>));
					if(
#line 637 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111374 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111378 "powerpc.tcc"
					>(0x1000008eUL, 0xfc0007ffUL, DecodeOpVpkuhus<
#line 38 "ppc.isa"
					CONFIG
#line 111382 "powerpc.tcc"
					>));
					if(
#line 631 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111387 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111391 "powerpc.tcc"
					>(0x1000000eUL, 0xfc0007ffUL, DecodeOpVpkuhum<
#line 38 "ppc.isa"
					CONFIG
#line 111395 "powerpc.tcc"
					>));
					if(
#line 625 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111400 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111404 "powerpc.tcc"
					>(0x1000014eUL, 0xfc0007ffUL, DecodeOpVpkswus<
#line 38 "ppc.isa"
					CONFIG
#line 111408 "powerpc.tcc"
					>));
					if(
#line 619 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111413 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111417 "powerpc.tcc"
					>(0x100001ceUL, 0xfc0007ffUL, DecodeOpVpkswss<
#line 38 "ppc.isa"
					CONFIG
#line 111421 "powerpc.tcc"
					>));
					if(
#line 613 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111426 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111430 "powerpc.tcc"
					>(0x1000010eUL, 0xfc0007ffUL, DecodeOpVpkshus<
#line 38 "ppc.isa"
					CONFIG
#line 111434 "powerpc.tcc"
					>));
					if(
#line 607 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111439 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111443 "powerpc.tcc"
					>(0x1000018eUL, 0xfc0007ffUL, DecodeOpVpkshss<
#line 38 "ppc.isa"
					CONFIG
#line 111447 "powerpc.tcc"
					>));
					if(
#line 601 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111452 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111456 "powerpc.tcc"
					>(0x1000030eUL, 0xfc0007ffUL, DecodeOpVpkpx<
#line 38 "ppc.isa"
					CONFIG
#line 111460 "powerpc.tcc"
					>));
					if(
#line 595 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111465 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111469 "powerpc.tcc"
					>(0x1000002bUL, 0xfc00003fUL, DecodeOpVperm<
#line 38 "ppc.isa"
					CONFIG
#line 111473 "powerpc.tcc"
					>));
					if(
#line 589 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111478 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111482 "powerpc.tcc"
					>(0x10000484UL, 0xfc0007ffUL, DecodeOpVor<
#line 38 "ppc.isa"
					CONFIG
#line 111486 "powerpc.tcc"
					>));
					if(
#line 583 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111491 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111495 "powerpc.tcc"
					>(0x10000504UL, 0xfc0007ffUL, DecodeOpVnor<
#line 38 "ppc.isa"
					CONFIG
#line 111499 "powerpc.tcc"
					>));
					if(
#line 577 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111504 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111508 "powerpc.tcc"
					>(0x1000002fUL, 0xfc00003fUL, DecodeOpVnmsubfp<
#line 38 "ppc.isa"
					CONFIG
#line 111512 "powerpc.tcc"
					>));
					if(
#line 571 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111517 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111521 "powerpc.tcc"
					>(0x10000048UL, 0xfc0007ffUL, DecodeOpVmulouh<
#line 38 "ppc.isa"
					CONFIG
#line 111525 "powerpc.tcc"
					>));
					if(
#line 565 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111530 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111534 "powerpc.tcc"
					>(0x10000008UL, 0xfc0007ffUL, DecodeOpVmuloub<
#line 38 "ppc.isa"
					CONFIG
#line 111538 "powerpc.tcc"
					>));
					if(
#line 559 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111543 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111547 "powerpc.tcc"
					>(0x10000148UL, 0xfc0007ffUL, DecodeOpVmulosh<
#line 38 "ppc.isa"
					CONFIG
#line 111551 "powerpc.tcc"
					>));
					if(
#line 553 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111556 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111560 "powerpc.tcc"
					>(0x10000108UL, 0xfc0007ffUL, DecodeOpVmulosb<
#line 38 "ppc.isa"
					CONFIG
#line 111564 "powerpc.tcc"
					>));
					if(
#line 547 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111569 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111573 "powerpc.tcc"
					>(0x10000248UL, 0xfc0007ffUL, DecodeOpVmuleuh<
#line 38 "ppc.isa"
					CONFIG
#line 111577 "powerpc.tcc"
					>));
					if(
#line 541 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111582 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111586 "powerpc.tcc"
					>(0x10000208UL, 0xfc0007ffUL, DecodeOpVmuleub<
#line 38 "ppc.isa"
					CONFIG
#line 111590 "powerpc.tcc"
					>));
					if(
#line 535 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111595 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111599 "powerpc.tcc"
					>(0x10000348UL, 0xfc0007ffUL, DecodeOpVmulesh<
#line 38 "ppc.isa"
					CONFIG
#line 111603 "powerpc.tcc"
					>));
					if(
#line 529 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111608 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111612 "powerpc.tcc"
					>(0x10000308UL, 0xfc0007ffUL, DecodeOpVmulesb<
#line 38 "ppc.isa"
					CONFIG
#line 111616 "powerpc.tcc"
					>));
					if(
#line 523 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111621 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111625 "powerpc.tcc"
					>(0x10000027UL, 0xfc00003fUL, DecodeOpVmsumuhs<
#line 38 "ppc.isa"
					CONFIG
#line 111629 "powerpc.tcc"
					>));
					if(
#line 517 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111634 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111638 "powerpc.tcc"
					>(0x10000026UL, 0xfc00003fUL, DecodeOpVmsumuhm<
#line 38 "ppc.isa"
					CONFIG
#line 111642 "powerpc.tcc"
					>));
					if(
#line 511 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111647 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111651 "powerpc.tcc"
					>(0x10000024UL, 0xfc00003fUL, DecodeOpVmsumubm<
#line 38 "ppc.isa"
					CONFIG
#line 111655 "powerpc.tcc"
					>));
					if(
#line 505 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111660 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111664 "powerpc.tcc"
					>(0x10000029UL, 0xfc00003fUL, DecodeOpVmsumshs<
#line 38 "ppc.isa"
					CONFIG
#line 111668 "powerpc.tcc"
					>));
					if(
#line 499 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111673 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111677 "powerpc.tcc"
					>(0x10000028UL, 0xfc00003fUL, DecodeOpVmsumshm<
#line 38 "ppc.isa"
					CONFIG
#line 111681 "powerpc.tcc"
					>));
					if(
#line 493 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111686 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111690 "powerpc.tcc"
					>(0x10000025UL, 0xfc00003fUL, DecodeOpVmsummbm<
#line 38 "ppc.isa"
					CONFIG
#line 111694 "powerpc.tcc"
					>));
					if(
#line 487 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111699 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111703 "powerpc.tcc"
					>(0x1000018cUL, 0xfc0007ffUL, DecodeOpVmrglw<
#line 38 "ppc.isa"
					CONFIG
#line 111707 "powerpc.tcc"
					>));
					if(
#line 481 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111712 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111716 "powerpc.tcc"
					>(0x1000014cUL, 0xfc0007ffUL, DecodeOpVmrglh<
#line 38 "ppc.isa"
					CONFIG
#line 111720 "powerpc.tcc"
					>));
					if(
#line 475 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111725 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111729 "powerpc.tcc"
					>(0x1000010cUL, 0xfc0007ffUL, DecodeOpVmrglb<
#line 38 "ppc.isa"
					CONFIG
#line 111733 "powerpc.tcc"
					>));
					if(
#line 469 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111738 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111742 "powerpc.tcc"
					>(0x1000008cUL, 0xfc0007ffUL, DecodeOpVmrghw<
#line 38 "ppc.isa"
					CONFIG
#line 111746 "powerpc.tcc"
					>));
					if(
#line 463 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111751 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111755 "powerpc.tcc"
					>(0x1000004cUL, 0xfc0007ffUL, DecodeOpVmrghh<
#line 38 "ppc.isa"
					CONFIG
#line 111759 "powerpc.tcc"
					>));
					if(
#line 457 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111764 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111768 "powerpc.tcc"
					>(0x1000000cUL, 0xfc0007ffUL, DecodeOpVmrghb<
#line 38 "ppc.isa"
					CONFIG
#line 111772 "powerpc.tcc"
					>));
					if(
#line 451 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111777 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111781 "powerpc.tcc"
					>(0x10000022UL, 0xfc00003fUL, DecodeOpVmladduhm<
#line 38 "ppc.isa"
					CONFIG
#line 111785 "powerpc.tcc"
					>));
					if(
#line 445 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111790 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111794 "powerpc.tcc"
					>(0x10000282UL, 0xfc0007ffUL, DecodeOpVminuw<
#line 38 "ppc.isa"
					CONFIG
#line 111798 "powerpc.tcc"
					>));
					if(
#line 439 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111803 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111807 "powerpc.tcc"
					>(0x10000242UL, 0xfc0007ffUL, DecodeOpVminuh<
#line 38 "ppc.isa"
					CONFIG
#line 111811 "powerpc.tcc"
					>));
					if(
#line 433 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111816 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111820 "powerpc.tcc"
					>(0x10000202UL, 0xfc0007ffUL, DecodeOpVminub<
#line 38 "ppc.isa"
					CONFIG
#line 111824 "powerpc.tcc"
					>));
					if(
#line 427 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111829 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111833 "powerpc.tcc"
					>(0x10000382UL, 0xfc0007ffUL, DecodeOpVminsw<
#line 38 "ppc.isa"
					CONFIG
#line 111837 "powerpc.tcc"
					>));
					if(
#line 421 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111842 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111846 "powerpc.tcc"
					>(0x10000342UL, 0xfc0007ffUL, DecodeOpVminsh<
#line 38 "ppc.isa"
					CONFIG
#line 111850 "powerpc.tcc"
					>));
					if(
#line 415 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111855 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111859 "powerpc.tcc"
					>(0x10000302UL, 0xfc0007ffUL, DecodeOpVminsb<
#line 38 "ppc.isa"
					CONFIG
#line 111863 "powerpc.tcc"
					>));
					if(
#line 409 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111868 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111872 "powerpc.tcc"
					>(0x1000044aUL, 0xfc0007ffUL, DecodeOpVminfp<
#line 38 "ppc.isa"
					CONFIG
#line 111876 "powerpc.tcc"
					>));
					if(
#line 403 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111881 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111885 "powerpc.tcc"
					>(0x10000021UL, 0xfc00003fUL, DecodeOpVmhraddshs<
#line 38 "ppc.isa"
					CONFIG
#line 111889 "powerpc.tcc"
					>));
					if(
#line 397 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111894 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111898 "powerpc.tcc"
					>(0x10000020UL, 0xfc00003fUL, DecodeOpVmhaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 111902 "powerpc.tcc"
					>));
					if(
#line 391 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111907 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111911 "powerpc.tcc"
					>(0x10000082UL, 0xfc0007ffUL, DecodeOpVmaxuw<
#line 38 "ppc.isa"
					CONFIG
#line 111915 "powerpc.tcc"
					>));
					if(
#line 385 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111920 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111924 "powerpc.tcc"
					>(0x10000042UL, 0xfc0007ffUL, DecodeOpVmaxuh<
#line 38 "ppc.isa"
					CONFIG
#line 111928 "powerpc.tcc"
					>));
					if(
#line 379 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111933 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111937 "powerpc.tcc"
					>(0x10000002UL, 0xfc0007ffUL, DecodeOpVmaxub<
#line 38 "ppc.isa"
					CONFIG
#line 111941 "powerpc.tcc"
					>));
					if(
#line 373 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111946 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111950 "powerpc.tcc"
					>(0x10000182UL, 0xfc0007ffUL, DecodeOpVmaxsw<
#line 38 "ppc.isa"
					CONFIG
#line 111954 "powerpc.tcc"
					>));
					if(
#line 367 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111959 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111963 "powerpc.tcc"
					>(0x10000142UL, 0xfc0007ffUL, DecodeOpVmaxsh<
#line 38 "ppc.isa"
					CONFIG
#line 111967 "powerpc.tcc"
					>));
					if(
#line 361 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111972 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111976 "powerpc.tcc"
					>(0x10000102UL, 0xfc0007ffUL, DecodeOpVmaxsb<
#line 38 "ppc.isa"
					CONFIG
#line 111980 "powerpc.tcc"
					>));
					if(
#line 355 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111985 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 111989 "powerpc.tcc"
					>(0x1000040aUL, 0xfc0007ffUL, DecodeOpVmaxfp<
#line 38 "ppc.isa"
					CONFIG
#line 111993 "powerpc.tcc"
					>));
					if(
#line 349 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 111998 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112002 "powerpc.tcc"
					>(0x1000002eUL, 0xfc00003fUL, DecodeOpVmaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 112006 "powerpc.tcc"
					>));
					if(
#line 343 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112011 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112015 "powerpc.tcc"
					>(0x100001caUL, 0xfc1f07ffUL, DecodeOpVlogefp<
#line 38 "ppc.isa"
					CONFIG
#line 112019 "powerpc.tcc"
					>));
					if(
#line 337 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112024 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112028 "powerpc.tcc"
					>(0x1000018aUL, 0xfc1f07ffUL, DecodeOpVexptefp<
#line 38 "ppc.isa"
					CONFIG
#line 112032 "powerpc.tcc"
					>));
					if(
#line 331 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112037 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112041 "powerpc.tcc"
					>(0x1000038aUL, 0xfc0007ffUL, DecodeOpVctuxs<
#line 38 "ppc.isa"
					CONFIG
#line 112045 "powerpc.tcc"
					>));
					if(
#line 325 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112050 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112054 "powerpc.tcc"
					>(0x100003caUL, 0xfc0007ffUL, DecodeOpVctsxs<
#line 38 "ppc.isa"
					CONFIG
#line 112058 "powerpc.tcc"
					>));
					if(
#line 319 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112063 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112067 "powerpc.tcc"
					>(0x10000286UL, 0xfc0003ffUL, DecodeOpVcmpgtuw<
#line 38 "ppc.isa"
					CONFIG
#line 112071 "powerpc.tcc"
					>));
					if(
#line 313 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112076 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112080 "powerpc.tcc"
					>(0x10000246UL, 0xfc0003ffUL, DecodeOpVcmpgtuh<
#line 38 "ppc.isa"
					CONFIG
#line 112084 "powerpc.tcc"
					>));
					if(
#line 307 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112089 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112093 "powerpc.tcc"
					>(0x10000206UL, 0xfc0003ffUL, DecodeOpVcmpgtub<
#line 38 "ppc.isa"
					CONFIG
#line 112097 "powerpc.tcc"
					>));
					if(
#line 301 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112102 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112106 "powerpc.tcc"
					>(0x10000386UL, 0xfc0003ffUL, DecodeOpVcmpgtsw<
#line 38 "ppc.isa"
					CONFIG
#line 112110 "powerpc.tcc"
					>));
					if(
#line 295 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112115 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112119 "powerpc.tcc"
					>(0x10000346UL, 0xfc0003ffUL, DecodeOpVcmpgtsh<
#line 38 "ppc.isa"
					CONFIG
#line 112123 "powerpc.tcc"
					>));
					if(
#line 289 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112128 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112132 "powerpc.tcc"
					>(0x10000306UL, 0xfc0003ffUL, DecodeOpVcmpgtsb<
#line 38 "ppc.isa"
					CONFIG
#line 112136 "powerpc.tcc"
					>));
					if(
#line 283 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112141 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112145 "powerpc.tcc"
					>(0x100002c6UL, 0xfc0003ffUL, DecodeOpVcmpgtfp<
#line 38 "ppc.isa"
					CONFIG
#line 112149 "powerpc.tcc"
					>));
					if(
#line 277 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112154 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112158 "powerpc.tcc"
					>(0x100001c6UL, 0xfc0003ffUL, DecodeOpVcmpgefp<
#line 38 "ppc.isa"
					CONFIG
#line 112162 "powerpc.tcc"
					>));
					if(
#line 271 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112167 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112171 "powerpc.tcc"
					>(0x10000086UL, 0xfc0003ffUL, DecodeOpVcmpequw<
#line 38 "ppc.isa"
					CONFIG
#line 112175 "powerpc.tcc"
					>));
					if(
#line 265 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112180 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112184 "powerpc.tcc"
					>(0x10000046UL, 0xfc0003ffUL, DecodeOpVcmpequh<
#line 38 "ppc.isa"
					CONFIG
#line 112188 "powerpc.tcc"
					>));
					if(
#line 259 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112193 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112197 "powerpc.tcc"
					>(0x10000006UL, 0xfc0003ffUL, DecodeOpVcmpequb<
#line 38 "ppc.isa"
					CONFIG
#line 112201 "powerpc.tcc"
					>));
					if(
#line 253 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112206 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112210 "powerpc.tcc"
					>(0x100000c6UL, 0xfc0003ffUL, DecodeOpVcmpeqfp<
#line 38 "ppc.isa"
					CONFIG
#line 112214 "powerpc.tcc"
					>));
					if(
#line 247 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112219 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112223 "powerpc.tcc"
					>(0x100003c6UL, 0xfc0003ffUL, DecodeOpVcmpbfp<
#line 38 "ppc.isa"
					CONFIG
#line 112227 "powerpc.tcc"
					>));
					if(
#line 241 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112232 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112236 "powerpc.tcc"
					>(0x1000030aUL, 0xfc0007ffUL, DecodeOpVcfux<
#line 38 "ppc.isa"
					CONFIG
#line 112240 "powerpc.tcc"
					>));
					if(
#line 235 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112245 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112249 "powerpc.tcc"
					>(0x1000034aUL, 0xfc0007ffUL, DecodeOpVcfsx<
#line 38 "ppc.isa"
					CONFIG
#line 112253 "powerpc.tcc"
					>));
					if(
#line 229 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112258 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112262 "powerpc.tcc"
					>(0x10000482UL, 0xfc0007ffUL, DecodeOpVavguw<
#line 38 "ppc.isa"
					CONFIG
#line 112266 "powerpc.tcc"
					>));
					if(
#line 223 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112271 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112275 "powerpc.tcc"
					>(0x10000442UL, 0xfc0007ffUL, DecodeOpVavguh<
#line 38 "ppc.isa"
					CONFIG
#line 112279 "powerpc.tcc"
					>));
					if(
#line 217 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112284 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112288 "powerpc.tcc"
					>(0x10000402UL, 0xfc0007ffUL, DecodeOpVavgub<
#line 38 "ppc.isa"
					CONFIG
#line 112292 "powerpc.tcc"
					>));
					if(
#line 211 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112297 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112301 "powerpc.tcc"
					>(0x10000582UL, 0xfc0007ffUL, DecodeOpVavgsw<
#line 38 "ppc.isa"
					CONFIG
#line 112305 "powerpc.tcc"
					>));
					if(
#line 205 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112310 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112314 "powerpc.tcc"
					>(0x10000542UL, 0xfc0007ffUL, DecodeOpVavgsh<
#line 38 "ppc.isa"
					CONFIG
#line 112318 "powerpc.tcc"
					>));
					if(
#line 199 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112323 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112327 "powerpc.tcc"
					>(0x10000502UL, 0xfc0007ffUL, DecodeOpVavgsb<
#line 38 "ppc.isa"
					CONFIG
#line 112331 "powerpc.tcc"
					>));
					if(
#line 193 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112336 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112340 "powerpc.tcc"
					>(0x10000444UL, 0xfc0007ffUL, DecodeOpVandc<
#line 38 "ppc.isa"
					CONFIG
#line 112344 "powerpc.tcc"
					>));
					if(
#line 187 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112349 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112353 "powerpc.tcc"
					>(0x10000404UL, 0xfc0007ffUL, DecodeOpVand<
#line 38 "ppc.isa"
					CONFIG
#line 112357 "powerpc.tcc"
					>));
					if(
#line 181 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112362 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112366 "powerpc.tcc"
					>(0x10000280UL, 0xfc0007ffUL, DecodeOpVadduws<
#line 38 "ppc.isa"
					CONFIG
#line 112370 "powerpc.tcc"
					>));
					if(
#line 175 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112375 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112379 "powerpc.tcc"
					>(0x10000080UL, 0xfc0007ffUL, DecodeOpVadduwm<
#line 38 "ppc.isa"
					CONFIG
#line 112383 "powerpc.tcc"
					>));
					if(
#line 169 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112388 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112392 "powerpc.tcc"
					>(0x10000240UL, 0xfc0007ffUL, DecodeOpVadduhs<
#line 38 "ppc.isa"
					CONFIG
#line 112396 "powerpc.tcc"
					>));
					if(
#line 163 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112401 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112405 "powerpc.tcc"
					>(0x10000040UL, 0xfc0007ffUL, DecodeOpVadduhm<
#line 38 "ppc.isa"
					CONFIG
#line 112409 "powerpc.tcc"
					>));
					if(
#line 157 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112414 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112418 "powerpc.tcc"
					>(0x10000200UL, 0xfc0007ffUL, DecodeOpVaddubs<
#line 38 "ppc.isa"
					CONFIG
#line 112422 "powerpc.tcc"
					>));
					if(
#line 151 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112427 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112431 "powerpc.tcc"
					>(0x10000000UL, 0xfc0007ffUL, DecodeOpVaddubm<
#line 38 "ppc.isa"
					CONFIG
#line 112435 "powerpc.tcc"
					>));
					if(
#line 145 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112440 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112444 "powerpc.tcc"
					>(0x10000380UL, 0xfc0007ffUL, DecodeOpVaddsws<
#line 38 "ppc.isa"
					CONFIG
#line 112448 "powerpc.tcc"
					>));
					if(
#line 139 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112453 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112457 "powerpc.tcc"
					>(0x10000340UL, 0xfc0007ffUL, DecodeOpVaddshs<
#line 38 "ppc.isa"
					CONFIG
#line 112461 "powerpc.tcc"
					>));
					if(
#line 133 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112466 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112470 "powerpc.tcc"
					>(0x10000300UL, 0xfc0007ffUL, DecodeOpVaddsbs<
#line 38 "ppc.isa"
					CONFIG
#line 112474 "powerpc.tcc"
					>));
					if(
#line 127 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112479 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112483 "powerpc.tcc"
					>(0x1000000aUL, 0xfc0007ffUL, DecodeOpVaddfp<
#line 38 "ppc.isa"
					CONFIG
#line 112487 "powerpc.tcc"
					>));
					if(
#line 121 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112492 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112496 "powerpc.tcc"
					>(0x10000180UL, 0xfc0007ffUL, DecodeOpVaddcuw<
#line 38 "ppc.isa"
					CONFIG
#line 112500 "powerpc.tcc"
					>));
					if(
#line 115 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112505 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112509 "powerpc.tcc"
					>(0x7c0003ceUL, 0xfc0007ffUL, DecodeOpStvxl<
#line 38 "ppc.isa"
					CONFIG
#line 112513 "powerpc.tcc"
					>));
					if(
#line 109 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112518 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112522 "powerpc.tcc"
					>(0x7c0001ceUL, 0xfc0007ffUL, DecodeOpStvx<
#line 38 "ppc.isa"
					CONFIG
#line 112526 "powerpc.tcc"
					>));
					if(
#line 103 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112531 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112535 "powerpc.tcc"
					>(0x7c00018eUL, 0xfc0007ffUL, DecodeOpStvewx<
#line 38 "ppc.isa"
					CONFIG
#line 112539 "powerpc.tcc"
					>));
					if(
#line 97 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112544 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112548 "powerpc.tcc"
					>(0x7c00014eUL, 0xfc0007ffUL, DecodeOpStvehx<
#line 38 "ppc.isa"
					CONFIG
#line 112552 "powerpc.tcc"
					>));
					if(
#line 91 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112557 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112561 "powerpc.tcc"
					>(0x7c00010eUL, 0xfc0007ffUL, DecodeOpStvebx<
#line 38 "ppc.isa"
					CONFIG
#line 112565 "powerpc.tcc"
					>));
					if(
#line 85 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112570 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112574 "powerpc.tcc"
					>(0x10000644UL, 0xffff07ffUL, DecodeOpMtvscr<
#line 38 "ppc.isa"
					CONFIG
#line 112578 "powerpc.tcc"
					>));
					if(
#line 79 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112583 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112587 "powerpc.tcc"
					>(0x10000604UL, 0xfc1fffffUL, DecodeOpMfvscr<
#line 38 "ppc.isa"
					CONFIG
#line 112591 "powerpc.tcc"
					>));
					if(
#line 73 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112596 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112600 "powerpc.tcc"
					>(0x7c0002ceUL, 0xfc0007ffUL, DecodeOpLvxl<
#line 38 "ppc.isa"
					CONFIG
#line 112604 "powerpc.tcc"
					>));
					if(
#line 67 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112609 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112613 "powerpc.tcc"
					>(0x7c0000ceUL, 0xfc0007ffUL, DecodeOpLvx<
#line 38 "ppc.isa"
					CONFIG
#line 112617 "powerpc.tcc"
					>));
					if(
#line 61 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112622 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112626 "powerpc.tcc"
					>(0x7c00004cUL, 0xfc0007ffUL, DecodeOpLvsr<
#line 38 "ppc.isa"
					CONFIG
#line 112630 "powerpc.tcc"
					>));
					if(
#line 55 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112635 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112639 "powerpc.tcc"
					>(0x7c00000cUL, 0xfc0007ffUL, DecodeOpLvsl<
#line 38 "ppc.isa"
					CONFIG
#line 112643 "powerpc.tcc"
					>));
					if(
#line 49 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112648 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112652 "powerpc.tcc"
					>(0x7c00008eUL, 0xfc0007ffUL, DecodeOpLvewx<
#line 38 "ppc.isa"
					CONFIG
#line 112656 "powerpc.tcc"
					>));
					if(
#line 43 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112661 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112665 "powerpc.tcc"
					>(0x7c00004eUL, 0xfc0007ffUL, DecodeOpLvehx<
#line 38 "ppc.isa"
					CONFIG
#line 112669 "powerpc.tcc"
					>));
					if(
#line 37 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112674 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112678 "powerpc.tcc"
					>(0x7c00000eUL, 0xfc0007ffUL, DecodeOpLvebx<
#line 38 "ppc.isa"
					CONFIG
#line 112682 "powerpc.tcc"
					>));
					if(
#line 31 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112687 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112691 "powerpc.tcc"
					>(0x7e0002acUL, 0xff8007ffUL, DecodeOpDstt<
#line 38 "ppc.isa"
					CONFIG
#line 112695 "powerpc.tcc"
					>));
					if(
#line 25 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112700 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112704 "powerpc.tcc"
					>(0x7e0002ecUL, 0xff8007ffUL, DecodeOpDststt<
#line 38 "ppc.isa"
					CONFIG
#line 112708 "powerpc.tcc"
					>));
					if(
#line 19 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112713 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112717 "powerpc.tcc"
					>(0x7c0002ecUL, 0xff8007ffUL, DecodeOpDstst<
#line 38 "ppc.isa"
					CONFIG
#line 112721 "powerpc.tcc"
					>));
					if(
#line 13 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112726 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112730 "powerpc.tcc"
					>(0x7c0002acUL, 0xff8007ffUL, DecodeOpDst<
#line 38 "ppc.isa"
					CONFIG
#line 112734 "powerpc.tcc"
					>));
					if(
#line 7 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112739 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112743 "powerpc.tcc"
					>(0x7e00066cUL, 0xff9fffffUL, DecodeOpDssall<
#line 38 "ppc.isa"
					CONFIG
#line 112747 "powerpc.tcc"
					>));
					if(
#line 1 "/local/home/gracia/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./altivec.isa"
					CONFIG::HAS_ALTIVEC
#line 112752 "powerpc.tcc"
					) decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112756 "powerpc.tcc"
					>(0x7c00066cUL, 0xff9fffffUL, DecodeOpDss<
#line 38 "ppc.isa"
					CONFIG
#line 112760 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112765 "powerpc.tcc"
					>(0x7c0001e4UL, 0xfc0007feUL, DecodeOpMtsrin<
#line 38 "ppc.isa"
					CONFIG
#line 112769 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112774 "powerpc.tcc"
					>(0x7c0001a4UL, 0xfc0007feUL, DecodeOpMtsr<
#line 38 "ppc.isa"
					CONFIG
#line 112778 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112783 "powerpc.tcc"
					>(0x7c000526UL, 0xfc0007feUL, DecodeOpMfsrin<
#line 38 "ppc.isa"
					CONFIG
#line 112787 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112792 "powerpc.tcc"
					>(0x7c0004a6UL, 0xfc0007feUL, DecodeOpMfsr<
#line 38 "ppc.isa"
					CONFIG
#line 112796 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112801 "powerpc.tcc"
					>(0x7c000124UL, 0xfc0007feUL, DecodeOpMtmsr<
#line 38 "ppc.isa"
					CONFIG
#line 112805 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112810 "powerpc.tcc"
					>(0x7c000120UL, 0xfc0007feUL, DecodeOpMtcrf<
#line 38 "ppc.isa"
					CONFIG
#line 112814 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112819 "powerpc.tcc"
					>(0x7c0002e6UL, 0xfc0007feUL, DecodeOpMftb<
#line 38 "ppc.isa"
					CONFIG
#line 112823 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112828 "powerpc.tcc"
					>(0x7c0003a6UL, 0xfc0007feUL, DecodeOpMtspr<
#line 38 "ppc.isa"
					CONFIG
#line 112832 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112837 "powerpc.tcc"
					>(0x7c0002a6UL, 0xfc0007feUL, DecodeOpMfspr<
#line 38 "ppc.isa"
					CONFIG
#line 112841 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112846 "powerpc.tcc"
					>(0x7c0000a6UL, 0xfc0007feUL, DecodeOpMfmsr<
#line 38 "ppc.isa"
					CONFIG
#line 112850 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112855 "powerpc.tcc"
					>(0x7c000026UL, 0xfc0007feUL, DecodeOpMfcr<
#line 38 "ppc.isa"
					CONFIG
#line 112859 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112864 "powerpc.tcc"
					>(0x7c000400UL, 0xfc0007feUL, DecodeOpMcrxr<
#line 38 "ppc.isa"
					CONFIG
#line 112868 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112873 "powerpc.tcc"
					>(0xc000000UL, 0xfc000000UL, DecodeOpTwi<
#line 38 "ppc.isa"
					CONFIG
#line 112877 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112882 "powerpc.tcc"
					>(0x7c000008UL, 0xfc0007feUL, DecodeOpTw<
#line 38 "ppc.isa"
					CONFIG
#line 112886 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112891 "powerpc.tcc"
					>(0x4c000064UL, 0xfc0007feUL, DecodeOpRfi<
#line 38 "ppc.isa"
					CONFIG
#line 112895 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112900 "powerpc.tcc"
					>(0x44000002UL, 0xfc000002UL, DecodeOpSc<
#line 38 "ppc.isa"
					CONFIG
#line 112904 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112909 "powerpc.tcc"
					>(0x7c0004acUL, 0xfc0007feUL, DecodeOpSync<
#line 38 "ppc.isa"
					CONFIG
#line 112913 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112918 "powerpc.tcc"
					>(0x7c00012dUL, 0xfc0007ffUL, DecodeOpStwcx_<
#line 38 "ppc.isa"
					CONFIG
#line 112922 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112927 "powerpc.tcc"
					>(0x7c000028UL, 0xfc0007feUL, DecodeOpLwarx<
#line 38 "ppc.isa"
					CONFIG
#line 112931 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112936 "powerpc.tcc"
					>(0x4c00012cUL, 0xfc0007feUL, DecodeOpIsync<
#line 38 "ppc.isa"
					CONFIG
#line 112940 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112945 "powerpc.tcc"
					>(0x7c0006acUL, 0xfc0007feUL, DecodeOpEieio<
#line 38 "ppc.isa"
					CONFIG
#line 112949 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112954 "powerpc.tcc"
					>(0x7c00036cUL, 0xfc0007feUL, DecodeOpEcowx<
#line 38 "ppc.isa"
					CONFIG
#line 112958 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112963 "powerpc.tcc"
					>(0x7c00026cUL, 0xfc0007feUL, DecodeOpEciwx<
#line 38 "ppc.isa"
					CONFIG
#line 112967 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112972 "powerpc.tcc"
					>(0x7c0007e4UL, 0xffff07ffUL, DecodeOpTlbli<
#line 38 "ppc.isa"
					CONFIG
#line 112976 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112981 "powerpc.tcc"
					>(0x7c0007a4UL, 0xffff07ffUL, DecodeOpTlbld<
#line 38 "ppc.isa"
					CONFIG
#line 112985 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112990 "powerpc.tcc"
					>(0x7c00046cUL, 0xfc0007feUL, DecodeOpTlbsync<
#line 38 "ppc.isa"
					CONFIG
#line 112994 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 112999 "powerpc.tcc"
					>(0x7c000264UL, 0xfc0007feUL, DecodeOpTlbie<
#line 38 "ppc.isa"
					CONFIG
#line 113003 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113008 "powerpc.tcc"
					>(0x7c0002e4UL, 0xfc0007feUL, DecodeOpTlbia<
#line 38 "ppc.isa"
					CONFIG
#line 113012 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113017 "powerpc.tcc"
					>(0x7c0007acUL, 0xfc0007feUL, DecodeOpIcbi<
#line 38 "ppc.isa"
					CONFIG
#line 113021 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113026 "powerpc.tcc"
					>(0x7c0007ecUL, 0xfc0007feUL, DecodeOpDcbz<
#line 38 "ppc.isa"
					CONFIG
#line 113030 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113035 "powerpc.tcc"
					>(0x7c0001ecUL, 0xfc0007feUL, DecodeOpDcbtst<
#line 38 "ppc.isa"
					CONFIG
#line 113039 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113044 "powerpc.tcc"
					>(0x7c00022cUL, 0xfc0007feUL, DecodeOpDcbt<
#line 38 "ppc.isa"
					CONFIG
#line 113048 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113053 "powerpc.tcc"
					>(0x7c00006cUL, 0xfc0007feUL, DecodeOpDcbst<
#line 38 "ppc.isa"
					CONFIG
#line 113057 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113062 "powerpc.tcc"
					>(0x7c0003acUL, 0xfc0007feUL, DecodeOpDcbi<
#line 38 "ppc.isa"
					CONFIG
#line 113066 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113071 "powerpc.tcc"
					>(0x7c0000acUL, 0xfc0007feUL, DecodeOpDcbf<
#line 38 "ppc.isa"
					CONFIG
#line 113075 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113080 "powerpc.tcc"
					>(0x7c0005ecUL, 0xfc0007feUL, DecodeOpDcba<
#line 38 "ppc.isa"
					CONFIG
#line 113084 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113089 "powerpc.tcc"
					>(0x7c00052eUL, 0xfc0007feUL, DecodeOpStfsx<
#line 38 "ppc.isa"
					CONFIG
#line 113093 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113098 "powerpc.tcc"
					>(0x7c00056eUL, 0xfc0007feUL, DecodeOpStfsux<
#line 38 "ppc.isa"
					CONFIG
#line 113102 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113107 "powerpc.tcc"
					>(0xd4000000UL, 0xfc000000UL, DecodeOpStfsu<
#line 38 "ppc.isa"
					CONFIG
#line 113111 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113116 "powerpc.tcc"
					>(0xd0000000UL, 0xfc000000UL, DecodeOpStfs<
#line 38 "ppc.isa"
					CONFIG
#line 113120 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113125 "powerpc.tcc"
					>(0x7c0007aeUL, 0xfc0007feUL, DecodeOpStfiwx<
#line 38 "ppc.isa"
					CONFIG
#line 113129 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113134 "powerpc.tcc"
					>(0x7c0005aeUL, 0xfc0007feUL, DecodeOpStfdx<
#line 38 "ppc.isa"
					CONFIG
#line 113138 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113143 "powerpc.tcc"
					>(0x7c0005eeUL, 0xfc0007feUL, DecodeOpStfdux<
#line 38 "ppc.isa"
					CONFIG
#line 113147 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113152 "powerpc.tcc"
					>(0xdc000000UL, 0xfc000000UL, DecodeOpStfdu<
#line 38 "ppc.isa"
					CONFIG
#line 113156 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113161 "powerpc.tcc"
					>(0xd8000000UL, 0xfc000000UL, DecodeOpStfd<
#line 38 "ppc.isa"
					CONFIG
#line 113165 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113170 "powerpc.tcc"
					>(0x7c00042eUL, 0xfc0007feUL, DecodeOpLfsx<
#line 38 "ppc.isa"
					CONFIG
#line 113174 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113179 "powerpc.tcc"
					>(0x7c00046eUL, 0xfc0007feUL, DecodeOpLfsux<
#line 38 "ppc.isa"
					CONFIG
#line 113183 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113188 "powerpc.tcc"
					>(0xc4000000UL, 0xfc000000UL, DecodeOpLfsu<
#line 38 "ppc.isa"
					CONFIG
#line 113192 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113197 "powerpc.tcc"
					>(0xc0000000UL, 0xfc000000UL, DecodeOpLfs<
#line 38 "ppc.isa"
					CONFIG
#line 113201 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113206 "powerpc.tcc"
					>(0x7c0004aeUL, 0xfc0007feUL, DecodeOpLfdx<
#line 38 "ppc.isa"
					CONFIG
#line 113210 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113215 "powerpc.tcc"
					>(0x7c0004eeUL, 0xfc0007feUL, DecodeOpLfdux<
#line 38 "ppc.isa"
					CONFIG
#line 113219 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113224 "powerpc.tcc"
					>(0xcc000000UL, 0xfc000000UL, DecodeOpLfdu<
#line 38 "ppc.isa"
					CONFIG
#line 113228 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113233 "powerpc.tcc"
					>(0xc8000000UL, 0xfc000000UL, DecodeOpLfd<
#line 38 "ppc.isa"
					CONFIG
#line 113237 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113242 "powerpc.tcc"
					>(0xbc000000UL, 0xfc000000UL, DecodeOpStmw<
#line 38 "ppc.isa"
					CONFIG
#line 113246 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113251 "powerpc.tcc"
					>(0xb8000000UL, 0xfc000000UL, DecodeOpLmw<
#line 38 "ppc.isa"
					CONFIG
#line 113255 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113260 "powerpc.tcc"
					>(0x7c00052aUL, 0xfc0007feUL, DecodeOpStswx<
#line 38 "ppc.isa"
					CONFIG
#line 113264 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113269 "powerpc.tcc"
					>(0x7c0005aaUL, 0xfc0007feUL, DecodeOpStswi<
#line 38 "ppc.isa"
					CONFIG
#line 113273 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113278 "powerpc.tcc"
					>(0x7c00042aUL, 0xfc0007feUL, DecodeOpLswx<
#line 38 "ppc.isa"
					CONFIG
#line 113282 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113287 "powerpc.tcc"
					>(0x7c0004aaUL, 0xfc0007feUL, DecodeOpLswi<
#line 38 "ppc.isa"
					CONFIG
#line 113291 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113296 "powerpc.tcc"
					>(0x7c00052cUL, 0xfc0007feUL, DecodeOpStwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 113300 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113305 "powerpc.tcc"
					>(0x7c00072cUL, 0xfc0007feUL, DecodeOpSthbrx<
#line 38 "ppc.isa"
					CONFIG
#line 113309 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113314 "powerpc.tcc"
					>(0x7c00042cUL, 0xfc0007feUL, DecodeOpLwbrx<
#line 38 "ppc.isa"
					CONFIG
#line 113318 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113323 "powerpc.tcc"
					>(0x7c00062cUL, 0xfc0007feUL, DecodeOpLhbrx<
#line 38 "ppc.isa"
					CONFIG
#line 113327 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113332 "powerpc.tcc"
					>(0x7c00012eUL, 0xfc0007feUL, DecodeOpStwx<
#line 38 "ppc.isa"
					CONFIG
#line 113336 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113341 "powerpc.tcc"
					>(0x7c00016eUL, 0xfc0007feUL, DecodeOpStwux<
#line 38 "ppc.isa"
					CONFIG
#line 113345 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113350 "powerpc.tcc"
					>(0x94000000UL, 0xfc000000UL, DecodeOpStwu<
#line 38 "ppc.isa"
					CONFIG
#line 113354 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113359 "powerpc.tcc"
					>(0x90000000UL, 0xfc000000UL, DecodeOpStw<
#line 38 "ppc.isa"
					CONFIG
#line 113363 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113368 "powerpc.tcc"
					>(0x7c00032eUL, 0xfc0007feUL, DecodeOpSthx<
#line 38 "ppc.isa"
					CONFIG
#line 113372 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113377 "powerpc.tcc"
					>(0x7c00036eUL, 0xfc0007feUL, DecodeOpSthux<
#line 38 "ppc.isa"
					CONFIG
#line 113381 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113386 "powerpc.tcc"
					>(0xb4000000UL, 0xfc000000UL, DecodeOpSthu<
#line 38 "ppc.isa"
					CONFIG
#line 113390 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113395 "powerpc.tcc"
					>(0xb0000000UL, 0xfc000000UL, DecodeOpSth<
#line 38 "ppc.isa"
					CONFIG
#line 113399 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113404 "powerpc.tcc"
					>(0x7c0001aeUL, 0xfc0007feUL, DecodeOpStbx<
#line 38 "ppc.isa"
					CONFIG
#line 113408 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113413 "powerpc.tcc"
					>(0x7c0001eeUL, 0xfc0007feUL, DecodeOpStbux<
#line 38 "ppc.isa"
					CONFIG
#line 113417 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113422 "powerpc.tcc"
					>(0x9c000000UL, 0xfc000000UL, DecodeOpStbu<
#line 38 "ppc.isa"
					CONFIG
#line 113426 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113431 "powerpc.tcc"
					>(0x98000000UL, 0xfc000000UL, DecodeOpStb<
#line 38 "ppc.isa"
					CONFIG
#line 113435 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113440 "powerpc.tcc"
					>(0x7c00002eUL, 0xfc0007feUL, DecodeOpLwzx<
#line 38 "ppc.isa"
					CONFIG
#line 113444 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113449 "powerpc.tcc"
					>(0x7c00006eUL, 0xfc0007feUL, DecodeOpLwzux<
#line 38 "ppc.isa"
					CONFIG
#line 113453 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113458 "powerpc.tcc"
					>(0x84000000UL, 0xfc000000UL, DecodeOpLwzu<
#line 38 "ppc.isa"
					CONFIG
#line 113462 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113467 "powerpc.tcc"
					>(0x80000000UL, 0xfc000000UL, DecodeOpLwz<
#line 38 "ppc.isa"
					CONFIG
#line 113471 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113476 "powerpc.tcc"
					>(0x7c00022eUL, 0xfc0007feUL, DecodeOpLhzx<
#line 38 "ppc.isa"
					CONFIG
#line 113480 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113485 "powerpc.tcc"
					>(0x7c00026eUL, 0xfc0007feUL, DecodeOpLhzux<
#line 38 "ppc.isa"
					CONFIG
#line 113489 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113494 "powerpc.tcc"
					>(0xa4000000UL, 0xfc000000UL, DecodeOpLhzu<
#line 38 "ppc.isa"
					CONFIG
#line 113498 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113503 "powerpc.tcc"
					>(0xa0000000UL, 0xfc000000UL, DecodeOpLhz<
#line 38 "ppc.isa"
					CONFIG
#line 113507 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113512 "powerpc.tcc"
					>(0x7c0002aeUL, 0xfc0007feUL, DecodeOpLhax<
#line 38 "ppc.isa"
					CONFIG
#line 113516 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113521 "powerpc.tcc"
					>(0x7c0002eeUL, 0xfc0007feUL, DecodeOpLhaux<
#line 38 "ppc.isa"
					CONFIG
#line 113525 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113530 "powerpc.tcc"
					>(0xac000000UL, 0xfc000000UL, DecodeOpLhau<
#line 38 "ppc.isa"
					CONFIG
#line 113534 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113539 "powerpc.tcc"
					>(0xa8000000UL, 0xfc000000UL, DecodeOpLha<
#line 38 "ppc.isa"
					CONFIG
#line 113543 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113548 "powerpc.tcc"
					>(0x7c0000aeUL, 0xfc0007feUL, DecodeOpLbzx<
#line 38 "ppc.isa"
					CONFIG
#line 113552 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113557 "powerpc.tcc"
					>(0x7c0000eeUL, 0xfc0007feUL, DecodeOpLbzux<
#line 38 "ppc.isa"
					CONFIG
#line 113561 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113566 "powerpc.tcc"
					>(0x8c000000UL, 0xfc000000UL, DecodeOpLbzu<
#line 38 "ppc.isa"
					CONFIG
#line 113570 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113575 "powerpc.tcc"
					>(0x88000000UL, 0xfc000000UL, DecodeOpLbz<
#line 38 "ppc.isa"
					CONFIG
#line 113579 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113584 "powerpc.tcc"
					>(0x4c000000UL, 0xfc0007feUL, DecodeOpMcrf<
#line 38 "ppc.isa"
					CONFIG
#line 113588 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113593 "powerpc.tcc"
					>(0x4c000182UL, 0xfc0007feUL, DecodeOpCrxor<
#line 38 "ppc.isa"
					CONFIG
#line 113597 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113602 "powerpc.tcc"
					>(0x4c000342UL, 0xfc0007feUL, DecodeOpCrorc<
#line 38 "ppc.isa"
					CONFIG
#line 113606 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113611 "powerpc.tcc"
					>(0x4c000382UL, 0xfc0007feUL, DecodeOpCror<
#line 38 "ppc.isa"
					CONFIG
#line 113615 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113620 "powerpc.tcc"
					>(0x4c000042UL, 0xfc0007feUL, DecodeOpCrnor<
#line 38 "ppc.isa"
					CONFIG
#line 113624 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113629 "powerpc.tcc"
					>(0x4c0001c2UL, 0xfc0007feUL, DecodeOpCrnand<
#line 38 "ppc.isa"
					CONFIG
#line 113633 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113638 "powerpc.tcc"
					>(0x4c000242UL, 0xfc0007feUL, DecodeOpCreqv<
#line 38 "ppc.isa"
					CONFIG
#line 113642 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113647 "powerpc.tcc"
					>(0x4c000102UL, 0xfc0007feUL, DecodeOpCrandc<
#line 38 "ppc.isa"
					CONFIG
#line 113651 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113656 "powerpc.tcc"
					>(0x4c000202UL, 0xfc0007feUL, DecodeOpCrand<
#line 38 "ppc.isa"
					CONFIG
#line 113660 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113665 "powerpc.tcc"
					>(0x4c000020UL, 0xfc0007feUL, DecodeOpBclr<
#line 38 "ppc.isa"
					CONFIG
#line 113669 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113674 "powerpc.tcc"
					>(0x4c000420UL, 0xfc0007feUL, DecodeOpBcctr<
#line 38 "ppc.isa"
					CONFIG
#line 113678 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113683 "powerpc.tcc"
					>(0x40000000UL, 0xfc000000UL, DecodeOpBc<
#line 38 "ppc.isa"
					CONFIG
#line 113687 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113692 "powerpc.tcc"
					>(0x48000000UL, 0xfc000000UL, DecodeOpB<
#line 38 "ppc.isa"
					CONFIG
#line 113696 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113701 "powerpc.tcc"
					>(0xfc00010cUL, 0xfc0007feUL, DecodeOpMtfsfi<
#line 38 "ppc.isa"
					CONFIG
#line 113705 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113710 "powerpc.tcc"
					>(0xfc00058eUL, 0xfc0007feUL, DecodeOpMtfsf<
#line 38 "ppc.isa"
					CONFIG
#line 113714 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113719 "powerpc.tcc"
					>(0xfc00004cUL, 0xfc0007feUL, DecodeOpMtfsb1<
#line 38 "ppc.isa"
					CONFIG
#line 113723 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113728 "powerpc.tcc"
					>(0xfc00008cUL, 0xfc0007feUL, DecodeOpMtfsb0<
#line 38 "ppc.isa"
					CONFIG
#line 113732 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113737 "powerpc.tcc"
					>(0xfc00048eUL, 0xfc0007feUL, DecodeOpMffs<
#line 38 "ppc.isa"
					CONFIG
#line 113741 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113746 "powerpc.tcc"
					>(0xfc000080UL, 0xfc0007feUL, DecodeOpMcrfs<
#line 38 "ppc.isa"
					CONFIG
#line 113750 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113755 "powerpc.tcc"
					>(0xfc000050UL, 0xfc0007feUL, DecodeOpFneg<
#line 38 "ppc.isa"
					CONFIG
#line 113759 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113764 "powerpc.tcc"
					>(0xfc000110UL, 0xfc0007feUL, DecodeOpFnabs<
#line 38 "ppc.isa"
					CONFIG
#line 113768 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113773 "powerpc.tcc"
					>(0xfc000090UL, 0xfc0007feUL, DecodeOpFmr<
#line 38 "ppc.isa"
					CONFIG
#line 113777 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113782 "powerpc.tcc"
					>(0xfc000210UL, 0xfc0007feUL, DecodeOpFabs<
#line 38 "ppc.isa"
					CONFIG
#line 113786 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113791 "powerpc.tcc"
					>(0xfc000018UL, 0xfc0007feUL, DecodeOpFrsp<
#line 38 "ppc.isa"
					CONFIG
#line 113795 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113800 "powerpc.tcc"
					>(0xfc00001eUL, 0xfc0007feUL, DecodeOpFctiwz<
#line 38 "ppc.isa"
					CONFIG
#line 113804 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113809 "powerpc.tcc"
					>(0xfc00001cUL, 0xfc0007feUL, DecodeOpFctiw<
#line 38 "ppc.isa"
					CONFIG
#line 113813 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113818 "powerpc.tcc"
					>(0xfc000000UL, 0xfc0007feUL, DecodeOpFcmpu<
#line 38 "ppc.isa"
					CONFIG
#line 113822 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113827 "powerpc.tcc"
					>(0xfc000040UL, 0xfc0007feUL, DecodeOpFcmpo<
#line 38 "ppc.isa"
					CONFIG
#line 113831 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113836 "powerpc.tcc"
					>(0xec00003cUL, 0xfc00003eUL, DecodeOpFnmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 113840 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113845 "powerpc.tcc"
					>(0xfc00003cUL, 0xfc00003eUL, DecodeOpFnmsub<
#line 38 "ppc.isa"
					CONFIG
#line 113849 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113854 "powerpc.tcc"
					>(0xec00003eUL, 0xfc00003eUL, DecodeOpFnmadds<
#line 38 "ppc.isa"
					CONFIG
#line 113858 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113863 "powerpc.tcc"
					>(0xfc00003eUL, 0xfc00003eUL, DecodeOpFnmadd<
#line 38 "ppc.isa"
					CONFIG
#line 113867 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113872 "powerpc.tcc"
					>(0xec000038UL, 0xfc00003eUL, DecodeOpFmsubs<
#line 38 "ppc.isa"
					CONFIG
#line 113876 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113881 "powerpc.tcc"
					>(0xfc000038UL, 0xfc00003eUL, DecodeOpFmsub<
#line 38 "ppc.isa"
					CONFIG
#line 113885 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113890 "powerpc.tcc"
					>(0xec00003aUL, 0xfc00003eUL, DecodeOpFmadds<
#line 38 "ppc.isa"
					CONFIG
#line 113894 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113899 "powerpc.tcc"
					>(0xfc00003aUL, 0xfc00003eUL, DecodeOpFmadd<
#line 38 "ppc.isa"
					CONFIG
#line 113903 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113908 "powerpc.tcc"
					>(0xec00002cUL, 0xfc00003eUL, DecodeOpFsqrts<
#line 38 "ppc.isa"
					CONFIG
#line 113912 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113917 "powerpc.tcc"
					>(0xfc00002cUL, 0xfc00003eUL, DecodeOpFsqrt<
#line 38 "ppc.isa"
					CONFIG
#line 113921 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113926 "powerpc.tcc"
					>(0xfc00002eUL, 0xfc00003eUL, DecodeOpFsel<
#line 38 "ppc.isa"
					CONFIG
#line 113930 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113935 "powerpc.tcc"
					>(0xec000028UL, 0xfc00003eUL, DecodeOpFsubs<
#line 38 "ppc.isa"
					CONFIG
#line 113939 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113944 "powerpc.tcc"
					>(0xfc000028UL, 0xfc00003eUL, DecodeOpFsub<
#line 38 "ppc.isa"
					CONFIG
#line 113948 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113953 "powerpc.tcc"
					>(0xfc000034UL, 0xfc00003eUL, DecodeOpFrsqrte<
#line 38 "ppc.isa"
					CONFIG
#line 113957 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113962 "powerpc.tcc"
					>(0xec000030UL, 0xfc00003eUL, DecodeOpFres<
#line 38 "ppc.isa"
					CONFIG
#line 113966 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113971 "powerpc.tcc"
					>(0xec000032UL, 0xfc00003eUL, DecodeOpFmuls<
#line 38 "ppc.isa"
					CONFIG
#line 113975 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113980 "powerpc.tcc"
					>(0xfc000032UL, 0xfc00003eUL, DecodeOpFmul<
#line 38 "ppc.isa"
					CONFIG
#line 113984 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113989 "powerpc.tcc"
					>(0xec000024UL, 0xfc00003eUL, DecodeOpFdivs<
#line 38 "ppc.isa"
					CONFIG
#line 113993 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 113998 "powerpc.tcc"
					>(0xfc000024UL, 0xfc00003eUL, DecodeOpFdiv<
#line 38 "ppc.isa"
					CONFIG
#line 114002 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114007 "powerpc.tcc"
					>(0xec00002aUL, 0xfc00003eUL, DecodeOpFadds<
#line 38 "ppc.isa"
					CONFIG
#line 114011 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114016 "powerpc.tcc"
					>(0xfc00002aUL, 0xfc00003eUL, DecodeOpFadd<
#line 38 "ppc.isa"
					CONFIG
#line 114020 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114025 "powerpc.tcc"
					>(0x7c000430UL, 0xfc0007feUL, DecodeOpSrw<
#line 38 "ppc.isa"
					CONFIG
#line 114029 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114034 "powerpc.tcc"
					>(0x7c000670UL, 0xfc0007feUL, DecodeOpSrawi<
#line 38 "ppc.isa"
					CONFIG
#line 114038 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114043 "powerpc.tcc"
					>(0x7c000630UL, 0xfc0007feUL, DecodeOpSraw<
#line 38 "ppc.isa"
					CONFIG
#line 114047 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114052 "powerpc.tcc"
					>(0x7c000030UL, 0xfc0007feUL, DecodeOpSlw<
#line 38 "ppc.isa"
					CONFIG
#line 114056 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114061 "powerpc.tcc"
					>(0x5c000000UL, 0xfc000000UL, DecodeOpRlwnm<
#line 38 "ppc.isa"
					CONFIG
#line 114065 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114070 "powerpc.tcc"
					>(0x54000000UL, 0xfc000000UL, DecodeOpRlwinm<
#line 38 "ppc.isa"
					CONFIG
#line 114074 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114079 "powerpc.tcc"
					>(0x50000000UL, 0xfc000000UL, DecodeOpRlwimi<
#line 38 "ppc.isa"
					CONFIG
#line 114083 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114088 "powerpc.tcc"
					>(0x6c000000UL, 0xfc000000UL, DecodeOpXoris<
#line 38 "ppc.isa"
					CONFIG
#line 114092 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114097 "powerpc.tcc"
					>(0x68000000UL, 0xfc000000UL, DecodeOpXori<
#line 38 "ppc.isa"
					CONFIG
#line 114101 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114106 "powerpc.tcc"
					>(0x7c000278UL, 0xfc0007feUL, DecodeOpXor<
#line 38 "ppc.isa"
					CONFIG
#line 114110 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114115 "powerpc.tcc"
					>(0x64000000UL, 0xfc000000UL, DecodeOpOris<
#line 38 "ppc.isa"
					CONFIG
#line 114119 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114124 "powerpc.tcc"
					>(0x60000000UL, 0xfc000000UL, DecodeOpOri<
#line 38 "ppc.isa"
					CONFIG
#line 114128 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114133 "powerpc.tcc"
					>(0x7c000338UL, 0xfc0007feUL, DecodeOpOrc<
#line 38 "ppc.isa"
					CONFIG
#line 114137 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114142 "powerpc.tcc"
					>(0x7c000378UL, 0xfc0007feUL, DecodeOpOr<
#line 38 "ppc.isa"
					CONFIG
#line 114146 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114151 "powerpc.tcc"
					>(0x7c0000f8UL, 0xfc0007feUL, DecodeOpNor<
#line 38 "ppc.isa"
					CONFIG
#line 114155 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114160 "powerpc.tcc"
					>(0x7c0003b8UL, 0xfc0007feUL, DecodeOpNand<
#line 38 "ppc.isa"
					CONFIG
#line 114164 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114169 "powerpc.tcc"
					>(0x7c000734UL, 0xfc0007feUL, DecodeOpExtsh<
#line 38 "ppc.isa"
					CONFIG
#line 114173 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114178 "powerpc.tcc"
					>(0x7c000774UL, 0xfc0007feUL, DecodeOpExtsb<
#line 38 "ppc.isa"
					CONFIG
#line 114182 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114187 "powerpc.tcc"
					>(0x7c000238UL, 0xfc0007feUL, DecodeOpEqv<
#line 38 "ppc.isa"
					CONFIG
#line 114191 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114196 "powerpc.tcc"
					>(0x7c000034UL, 0xfc0007feUL, DecodeOpCntlzw<
#line 38 "ppc.isa"
					CONFIG
#line 114200 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114205 "powerpc.tcc"
					>(0x74000000UL, 0xfc000000UL, DecodeOpAndis_<
#line 38 "ppc.isa"
					CONFIG
#line 114209 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114214 "powerpc.tcc"
					>(0x70000000UL, 0xfc000000UL, DecodeOpAndi_<
#line 38 "ppc.isa"
					CONFIG
#line 114218 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114223 "powerpc.tcc"
					>(0x7c000078UL, 0xfc0007feUL, DecodeOpAndc<
#line 38 "ppc.isa"
					CONFIG
#line 114227 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114232 "powerpc.tcc"
					>(0x7c000038UL, 0xfc0007feUL, DecodeOpAnd<
#line 38 "ppc.isa"
					CONFIG
#line 114236 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114241 "powerpc.tcc"
					>(0x28000000UL, 0xfc000000UL, DecodeOpCmpli<
#line 38 "ppc.isa"
					CONFIG
#line 114245 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114250 "powerpc.tcc"
					>(0x7c000040UL, 0xfc0007feUL, DecodeOpCmpl<
#line 38 "ppc.isa"
					CONFIG
#line 114254 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114259 "powerpc.tcc"
					>(0x2c000000UL, 0xfc000000UL, DecodeOpCmpi<
#line 38 "ppc.isa"
					CONFIG
#line 114263 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114268 "powerpc.tcc"
					>(0x7c000000UL, 0xfc0007feUL, DecodeOpCmp<
#line 38 "ppc.isa"
					CONFIG
#line 114272 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114277 "powerpc.tcc"
					>(0x7c000190UL, 0xfc0003feUL, DecodeOpSubfze<
#line 38 "ppc.isa"
					CONFIG
#line 114281 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114286 "powerpc.tcc"
					>(0x7c0001d0UL, 0xfc0003feUL, DecodeOpSubfme<
#line 38 "ppc.isa"
					CONFIG
#line 114290 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114295 "powerpc.tcc"
					>(0x20000000UL, 0xfc000000UL, DecodeOpSubfic<
#line 38 "ppc.isa"
					CONFIG
#line 114299 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114304 "powerpc.tcc"
					>(0x7c000110UL, 0xfc0003feUL, DecodeOpSubfe<
#line 38 "ppc.isa"
					CONFIG
#line 114308 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114313 "powerpc.tcc"
					>(0x7c000010UL, 0xfc0003feUL, DecodeOpSubfc<
#line 38 "ppc.isa"
					CONFIG
#line 114317 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114322 "powerpc.tcc"
					>(0x7c000050UL, 0xfc0003feUL, DecodeOpSubf<
#line 38 "ppc.isa"
					CONFIG
#line 114326 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114331 "powerpc.tcc"
					>(0x7c0000d0UL, 0xfc0003feUL, DecodeOpNeg<
#line 38 "ppc.isa"
					CONFIG
#line 114335 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114340 "powerpc.tcc"
					>(0x7c0001d6UL, 0xfc0003feUL, DecodeOpMullw<
#line 38 "ppc.isa"
					CONFIG
#line 114344 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114349 "powerpc.tcc"
					>(0x1c000000UL, 0xfc000000UL, DecodeOpMulli<
#line 38 "ppc.isa"
					CONFIG
#line 114353 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114358 "powerpc.tcc"
					>(0x7c000016UL, 0xfc0003feUL, DecodeOpMulhwu<
#line 38 "ppc.isa"
					CONFIG
#line 114362 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114367 "powerpc.tcc"
					>(0x7c000096UL, 0xfc0003feUL, DecodeOpMulhw<
#line 38 "ppc.isa"
					CONFIG
#line 114371 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114376 "powerpc.tcc"
					>(0x7c000396UL, 0xfc0003feUL, DecodeOpDivwu<
#line 38 "ppc.isa"
					CONFIG
#line 114380 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114385 "powerpc.tcc"
					>(0x7c0003d6UL, 0xfc0003feUL, DecodeOpDivw<
#line 38 "ppc.isa"
					CONFIG
#line 114389 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114394 "powerpc.tcc"
					>(0x7c000194UL, 0xfc0003feUL, DecodeOpAddze<
#line 38 "ppc.isa"
					CONFIG
#line 114398 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114403 "powerpc.tcc"
					>(0x7c0001d4UL, 0xfc0003feUL, DecodeOpAddme<
#line 38 "ppc.isa"
					CONFIG
#line 114407 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114412 "powerpc.tcc"
					>(0x3c000000UL, 0xfc000000UL, DecodeOpAddis<
#line 38 "ppc.isa"
					CONFIG
#line 114416 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114421 "powerpc.tcc"
					>(0x34000000UL, 0xfc000000UL, DecodeOpAddic_<
#line 38 "ppc.isa"
					CONFIG
#line 114425 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114430 "powerpc.tcc"
					>(0x30000000UL, 0xfc000000UL, DecodeOpAddic<
#line 38 "ppc.isa"
					CONFIG
#line 114434 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114439 "powerpc.tcc"
					>(0x38000000UL, 0xfc000000UL, DecodeOpAddi<
#line 38 "ppc.isa"
					CONFIG
#line 114443 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114448 "powerpc.tcc"
					>(0x7c000114UL, 0xfc0003feUL, DecodeOpAdde<
#line 38 "ppc.isa"
					CONFIG
#line 114452 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114457 "powerpc.tcc"
					>(0x7c000014UL, 0xfc0003feUL, DecodeOpAddc<
#line 38 "ppc.isa"
					CONFIG
#line 114461 "powerpc.tcc"
					>));
					decode_table.push_back(DecodeTableEntry<
#line 38 "ppc.isa"
					CONFIG
#line 114466 "powerpc.tcc"
					>(0x7c000214UL, 0xfc0003feUL, DecodeOpAdd<
#line 38 "ppc.isa"
					CONFIG
#line 114470 "powerpc.tcc"
					>));
				}

				template <
#line 38 "ppc.isa"
				class
#line 114477 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114480 "powerpc.tcc"
				>
				Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 114485 "powerpc.tcc"
				>::~Decoder()
				{
					InvalidateDecodingCache();
				}

				template <
#line 38 "ppc.isa"
				class
#line 114494 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114497 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 114502 "powerpc.tcc"
				>::Fetch(void *, typename CONFIG::address_t, uint32_t)
				{
					assert( ! "Calling unimplemented virtual method Fetch" );
				}

				template <
#line 38 "ppc.isa"
				class
#line 114511 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114514 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114519 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 114523 "powerpc.tcc"
				>::NCDecode(typename CONFIG::address_t addr)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 114529 "powerpc.tcc"
					> *operation;
					CodeType code;
					Fetch(&code, addr, sizeof(code));
#if BYTE_ORDER == LITTLE_ENDIAN
					if(!little_endian)
#else
					if(little_endian)
#endif
					{
						code = ((code & 0xff000000UL) >> 24) | ((code & 0x00ff0000UL) >> 8) | ((code & 0x0000ff00UL) << 8) | ((code & 0x000000ffUL) << 24);
					}
					unsigned int count = decode_table.size();
					unsigned int idx;
					for(idx = 0; idx < count; idx++)
					{
						if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
						{
							operation = decode_table[idx].decode(code, addr);
							operation->initialize_operands();
							operation->initialize_latencies();
							operation->initialize_function();
							return operation;
						}
					}
					operation = new Operation<
#line 38 "ppc.isa"
					CONFIG
#line 114557 "powerpc.tcc"
					>(code, addr, "???");
					operation->initialize_operands();
					operation->initialize_latencies();
					operation->initialize_function();
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 114568 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114571 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114576 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 114580 "powerpc.tcc"
				>::NCDecode(typename CONFIG::address_t addr, CodeType code)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 114586 "powerpc.tcc"
					> *operation;
					unsigned int count = decode_table.size();
					unsigned int idx;
					for(idx = 0; idx < count; idx++)
					{
						if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
						{
							operation = decode_table[idx].decode(code, addr);
							operation->initialize_operands();
							operation->initialize_latencies();
							operation->initialize_function();
							return operation;
						}
					}
					operation = new Operation<
#line 38 "ppc.isa"
					CONFIG
#line 114604 "powerpc.tcc"
					>(code, addr, "???");
					operation->initialize_operands();
					operation->initialize_latencies();
					operation->initialize_function();
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 114615 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114618 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 114623 "powerpc.tcc"
				>::InvalidateDecodingCache()
				{
					uint32_t index;
					mru_page = 0;
					for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
					{
						DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 114633 "powerpc.tcc"
						> *page, *next_page;
						page = decode_hash_table[index];
						if(page)
						{
							do
							{
								next_page = page->next;
								delete page;
								page = next_page;
							} while(page);
							decode_hash_table[index] = 0;
						}
					}
				}

				template <
#line 38 "ppc.isa"
				class
#line 114652 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114655 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 114660 "powerpc.tcc"
				>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
				{
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					if(mru_page && mru_page->key == page_key) mru_page = 0;
					uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 114669 "powerpc.tcc"
					> *prev, *cur;
					cur = decode_hash_table[index];
					if(cur)
					{
						if(cur->key == page_key)
						{
							decode_hash_table[index] = cur->next;
							delete cur;
							return;
						}
						prev = cur;
						cur = cur->next;
						if(cur)
						{
							do
							{
								if(cur->key == page_key)
								{
									prev->next = cur->next;
									cur->next = 0;
									delete cur;
									return;
								}
								prev = cur;
							} while((cur = cur->next) != 0);
						}
					}
				}

				template <
#line 38 "ppc.isa"
				class
#line 114702 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114705 "powerpc.tcc"
				>
				inline DecodeMapPage<
#line 38 "ppc.isa"
				CONFIG
#line 114710 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 114714 "powerpc.tcc"
				>::FindPage(typename CONFIG::address_t page_key)
				{
					if(mru_page && mru_page->key == page_key) return mru_page;
					uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 114722 "powerpc.tcc"
					> *prev, *cur;
					cur = decode_hash_table[index];
					if(cur)
					{
						if(cur->key == page_key)
						{
							mru_page = cur;
							return cur;
						}
						prev = cur;
						cur = cur->next;
						if(cur)
						{
							do
							{
								if(cur->key == page_key)
								{
									prev->next = cur->next;
									cur->next= decode_hash_table[index];
									decode_hash_table[index] = cur;
									mru_page = cur;
									return cur;
								}
								prev = cur;
							} while((cur = cur->next) != 0);
						}
					}
					return 0;
				}

				template <
#line 38 "ppc.isa"
				class
#line 114756 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114759 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114764 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 114768 "powerpc.tcc"
				>::Decode(typename CONFIG::address_t addr)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 114774 "powerpc.tcc"
					> *operation;
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 114780 "powerpc.tcc"
					> *page;
					page = FindPage(page_key);
					if(!page)
					{
						page = new DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 114788 "powerpc.tcc"
						>(page_key);
						uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
						page->next = decode_hash_table[index];
						decode_hash_table[index] = page;
						mru_page = page;
					}
					operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
					if(operation)
					{
						return operation;
					}
					operation = NCDecode(addr);
					page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 114808 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114811 "powerpc.tcc"
				>
				Operation<
#line 38 "ppc.isa"
				CONFIG
#line 114816 "powerpc.tcc"
				> *Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 114820 "powerpc.tcc"
				>::Decode(typename CONFIG::address_t addr, CodeType insn)
				{
					Operation<
#line 38 "ppc.isa"
					CONFIG
#line 114826 "powerpc.tcc"
					> *operation;
					typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
					DecodeMapPage<
#line 38 "ppc.isa"
					CONFIG
#line 114832 "powerpc.tcc"
					> *page;
					page = FindPage(page_key);
					if(!page)
					{
						page = new DecodeMapPage<
#line 38 "ppc.isa"
						CONFIG
#line 114840 "powerpc.tcc"
						> (page_key);
						uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
						page->next = decode_hash_table[index];
						decode_hash_table[index] = page;
						mru_page = page;
					}
					operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
					if(operation)
					{
						if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
						return operation;
						delete operation;
					}
					operation = NCDecode(addr, insn);
					page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
					return operation;
				}

				template <
#line 38 "ppc.isa"
				class
#line 114862 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114865 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 114870 "powerpc.tcc"
				>::SetLittleEndian()
				{
					little_endian = true;
				}

				template <
#line 38 "ppc.isa"
				class
#line 114879 "powerpc.tcc"
#line 38 "ppc.isa"
				CONFIG
#line 114882 "powerpc.tcc"
				>
				void Decoder<
#line 38 "ppc.isa"
				CONFIG
#line 114887 "powerpc.tcc"
				>::SetBigEndian()
				{
					little_endian = false;
				}

} } } } }
