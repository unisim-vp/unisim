/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

var num_uops : {unsigned int} = {1}
var num_insn_operands : {unsigned int} = {0}
var insn_operands : {typename CONFIG::operands_t}
var execution_unit : {typename CONFIG::execution_unit_type_t} = {CONFIG::NO_UNIT_T}
var serialization : {typename CONFIG::serialization_t} = {CONFIG::NO_SERIALIZATION}
var insn_latency : {unsigned int} = {1}
var insn_inv_thoughput : {unsigned int} = {1}

action {void} resolve({typename CONFIG::STATE *} {cpu}, {unsigned int} {uop_num}) {
	assert(uop_num == 0);
}

action {void} uop_execute({typename CONFIG::STATE *} {cpu}, {unsigned int} {uop_num}) {
	assert(uop_num == 0);
	execute(cpu);
}

constructor action initialize_unit() {}

constructor action initialize_serialization() {}

constructor action initialize_read_ra() {}

constructor action initialize_read_rb() {}

constructor action initialize_read_rs() {}

constructor action initialize_read_fa() {}

constructor action initialize_read_fb() {}

constructor action initialize_read_fc() {}

constructor action initialize_read_fs() {}

constructor action initialize_read_lr() {}

constructor action initialize_read_ctr() {}

constructor action initialize_write_fd() {}

constructor action initialize_write_rd() {}

constructor action initialize_write_ra() {}

constructor action initialize_write_ear() {}

constructor action initialize_write_lr() {}

constructor action initialize_write_ctr() {}

constructor action initialize_read_cr() {}

constructor action initialize_read_crba() {}

constructor action initialize_read_crbb() {}

constructor action initialize_write_cr() {}

constructor action initialize_write_crbd() {}

constructor action initialize_write_xer() {}

constructor action initialize_read_xer() {}

constructor action initialize_write_fpscr() {}

action {unsigned int} get_num_uops({typename CONFIG::STATE *} {cpu}) { return 1; }

group group_read_ra(add, addc, adde, addi, addic, addic_, addis, addme, addze, divw, divwu, mulhw, mulhwu, mulli, mullw, neg, subf, subfc, subfe, subfic, subfme, subfze, cmp, cmpi, cmpl, cmpli, rlwimi, lbz, lbzu, lbzux, lbzx, lha, lhau, lhaux, lhax, lhz, lhzu, lhzux, lhzx, lwz, lwzu, lwzux, lwzx, stb, stbu, stbux, stbx, sth, sthu, sthux, sthx, stw, stwu, stwux, stwx, lhbrx, lwbrx, sthbrx, stwbrx, lswi, lswx, stswi, stswx, lmw, stmw, lfd, lfdu, lfdux, lfdx, lfs, lfsu, lfsux, lfsx, stfd, stfdu, stfdux, stfdx, stfiwx, stfs, stfsu, stfsux, stfsx, dcba, dcbf, dcbi, dcbst, dcbt, dcbtst, dcbz, icbi, eciwx, ecowx, lwarx, stwcx_)

group group_read_rb(add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, cmp, cmpl, and, andc, eqv, nand, nor, or, orc, xor, rlwnm, slw, sraw, srw, lbzux, lbzx, lhaux, lhax, lhzux, lhzx, lwzux, lwzx, stbux, stbx, sthux, sthx, stwux, stwx, lhbrx, lwbrx, sthbrx, stwbrx, lswx, stswx, lfdux, lfdx, lfsux, lfsx, stfdux, stfdx, stfiwx, stfsux, stfsx, dcba, dcbf, dcbi, dcbst, dcbz, icbi, tlbie, tlbld, tlbli, lwarx, stwcx_)

group group_read_rs(and, andc, andi_, andis_, cntlzw, eqv, extsb, extsh, nand, nor, or, orc, ori, oris, xor, xori, xoris, rlwimi, rlwinm, rlwnm, slw, sraw, srawi, srw)

group group_read_rs_store(stb, stbu, stbux, stbx, sth, sthu, sthux, sthx, stw, stwu, stwux, stwx, sthbrx, stwbrx, stwcx_)

group group_read_fa(fadd, fadds, fdiv, fdivs, fmul, fmuls, fsub, fsubs, fsel, fmadd, fmadds, fmsub, fmsubs, fnmadd, fnmadds, fnmsub, fnmsubs, fcmpo, fcmpu)

group group_read_fb(fadd, fadds, fdiv, fdivs, fres, frsqrte, fsub, fsubs, fsel, fsqrt, fsqrts, fmadd, fmadds, fmsub, fmsubs, fnmadd, fnmadds, fnmsub, fnmsubs, fcmpo, fcmpu, fctiw, fctiwz, frsp, fabs, fmr, fnabs, fneg, mtfsf)

group group_read_fc(fmul, fmuls, fsel, fmadd, fmadds, fmsub, fmsubs, fnmadd, fnmadds, fnmsub, fnmsubs)

group group_read_fs_store(stfd, stfdu, stfdux, stfdx, stfiwx, stfs, stfsu, stfsux, stfsx)

group group_read_lr(bclr)

group group_read_ctr(bcctr)

group group_read_ctr_if_not_bo4(bc, bclr)

group group_read_cr_bi_if_not_bo16(bc, bcctr, bclr)

group group_read_crba(crand, crandc, creqv, crnand, crnor, cror, crorc, crxor)

group group_read_crbb(crand, crandc, creqv, crnand, crnor, cror, crorc, crxor)

group group_read_xer_ca(adde, addme, addze, subfe, subfme, subfze)

group group_read_crfs(mcrf)

group group_write_ctr_if_not_bo4(bc, bclr)

group group_write_lr_if_lk(b, bc, bcctr, bclr)

group group_write_rd(add, addc, adde, addi, addic, addic_, addis, addme, addze, divw, divwu, mulhw, mulhwu, mulli, mullw, neg, subf, subfc, subfe, subfic, subfme, subfze)

group group_write_ra(lbzu, lbzux, lhau, lhaux, lhzu, lhzux, lwzu, lwzux, stbu, stbux, sthu, sthux, stwu, stwux, lfdu, lfdux, lfsu, lfsux, stfdu, stfdux, stfsu, stfsux)

group group_write_fd(fadd, fadds, fdiv, fdivs, fmul, fmuls, fres, frsqrte, fsub, fsubs, fsel, fsqrt, fsqrts, fmadd, fmadds, fmsub, fmsubs, fnmadd, fnmadds, fnmsub, fnmsubs, fctiw, fctiwz, frsp, fabs, fmr, fnabs, fneg, mffs, lfd, lfdu, lfdux, lfdx, lfs, lfsu, lfsux, lfsx)

group group_write_fpscr(fadd, fadds, fdiv, fdivs, fmul, fmuls, fres, frsqrte, fsub, fsubs, fsel, fsqrt, fsqrts, fmadd, fmadds, fmsub, fmsubs, fnmadd, fnmadds, fnmsub, fnmsubs, fctiw, fctiwz, frsp, fabs, fmr, fnabs, fneg, fcmpo, fcmpu, mffs, lfd, lfdu, lfdux, lfdx, lfs, lfsu, lfsux, lfsx)

group group_write_cr0_if_rc(add, addc, adde, addze, divw, divwu, mulhw, mulhwu, mullw)

group group_write_cr1_if_rc(fadd, fadds, fdiv, fdivs, fmul, fmuls, fres, frsqrte, fsub, fsubs, fsel, fmadd, fmadds, fmsub, fmsubs, fnmadd, fnmadds, fnmsub, fnmsubs, fctiw, fctiwz, frsp, fabs, fmr, fnabs, fneg, mffs, mtfsb0, mtfsb1, mtfsfi)

group group_write_crfd(cmp, fcmpo, fcmpu, mcrf)

group group_write_crbd(crand, crandc, creqv, crnand, crnor, cror, crorc, crxor)

group group_write_xer_ov_so_if_oe(add, divw, divwu, mullw, neg, subf)

group group_write_xer_ca_and_ov_so_if_oe(addc, adde, addme, addze, subfc, subfe, subfme, subfze)

group group_write_xer_ca(addic, addic_, subfic, sraw)

group group_iu1(add, addc, adde, addi, addic, addic_, addis, addme, addze, neg, subf, subfc, subfe, subfic, subfme, subfze, cmp, cmpi, cmpl, cmpli, and, andc, andi_, andis_, cntlzw, eqv, extsb, extsh, nand, nor, or, orc, ori, oris, xor, xori, xoris, rlwimi, rlwinm, rlwnm, slw, sraw, srawi, srw, tw, twi)

group group_iu2(divw, divwu, mulhw, mulhwu, mulli, mullw, crand, crandc, creqv, crnand, crnor, cror, crorc, crxor, mcrf, mcrxr, mfcr, mfmsr, mfspr, mtspr, mftb, mtcrf, mtmsr, mfsr, mfsrin, mtsr, mtsrin)

group group_fpu(fadd, fadds, fdiv, fmul, fmuls, fres, frsqrte, fsub, fsubs, fsel, fsqrt, fsqrts, fmadd, fmadds, fmsub, fmsubs, fnmadd, fnmadds, fnmsub, fnmsubs, fcmpo, fcmpu, fctiw, fctiwz, frsp, fabs, fmr, fnabs, fneg, mcrfs, mffs, mtfsb0, mtfsb1, mtfsf, mtfsfi)

group group_bpu(b, bc, bcctr, bclr)

group group_lsu(lbz, lbzu, lbzux, lbzx, lha, lhau, lhaux, lhax, lhz, lhzu, lhzux, lhzx, lwz, lwzu, lwzux, lwzx, stb, stbu, stbux, stbx, sth, sthu, sthux, sthx, stw, stwu, stwux, stwx, lhbrx, lwbrx, sthbrx, stwbrx, lswi, lswx, stswi, stswx, lmw, stmw, lfd, lfdu, lfdux, lfdx, lfs, lfsu, lfsux, lfsx, stfd, stfdu, stfdux, stfdx, stfiwx, stfs, stfsu, stfsux, stfsx, dcba, dcbf, dcbi, dcbst, dcbt, dcbtst, dcbz, icbi, tlbia, tlbie, tlbsync, tlbld, tlbli, eciwx, ecowx, eieio, lwarx, stwcx_, sync, dss, dssall, dst, dstst, dststt, dstt, lvebx, lvehx, lvewx, lvsl, lvsr, lvx, lvxl, stvebx, stvehx, stvewx, stvx, stvxl)

group group_vfpu(mfvscr, mtvscr, vaddfp, vcfsx, vcfux, vcmpbfp, vcmpeqfp, vcmpgefp, vcmpgtfp, vctsxs, vctuxs, vexptefp, vlogefp, vmaddfp, vmaxfp, vminfp, vnmsubfp, vrefp, vrfim, vrfin, vrfip, vrfiz, vrsqrtefp, vsubfp)

group group_vpu(vmrghb, vmrghh, vmrghw, vmrglb, vmrglh, vmrglw, vperm, vpkpx, vpkshss, vpkshus, vpkswss, vpkswus, vpkuhum, vpkuhus, vpkuwum, vpkuwus, vsl, vsldoi, vslo, vspltb, vsplth, vspltisb, vspltish, vspltisw, vspltw, vsr, vsro, vupkhpx, vupkhsb, vupkhsh, vupklpx, vupklsb, vupklsh)

group group_viu1(vaddcuw, vaddsbs, vaddshs, vaddsws, vaddubm, vaddubs, vadduhm, vadduhs, vadduwm, vadduws, vand, vandc, vavgsb, vavgsh, vavgsw, vavgub, vavguh, vavguw, vcmpequb, vcmpequh, vcmpequw, vcmpgtsb, vcmpgtsh, vcmpgtsw, vcmpgtub, vcmpgtuh, vcmpgtuw, vmaxsb, vmaxsh, vmaxsw, vmaxub, vmaxuh, vmaxuw, vminsb, vminsh, vminsw, vminub, vminuh, vminuw, vnor, vor, vrlb, vrlh, vrlw, vsel, vslb, vslh, vslw, vsrab, vsrah, vsraw, vsrb, vsrh, vsrw, vsubcuw, vsubsbs, vsubshs, vsubsws, vsububm, vsububs, vsubuhm, vsubuhs, vsubuwm, vsubuws, vxor)

group group_viu2(vmhaddshs, vmhraddshs, vmladduhm, vmsummbm, vmsumshm, vmsumshs, vmsumubm, vmsumuhm, vmsumuhs, vmulesb, vmulesh, vmuleub, vmuleuh, vmulosb, vmulosh, vmuloub, vmulouh, vsumsws, vsum2sws, vsum4sbs, vsum4shs, vsum4ubs)

group group_execution_serialization(mtsr, mtsrin, mftb, crand, crandc, creqv, crnand, crnor, cror, crorc, crxor, mfcr, adde, addme, addze, subfe, subfme, subfze, mcrfs, mffs, mtfsb0, mtfsb1, mtfsfi, mtfsf, lwarx, tlbld, tlbli, mfvscr, mtvscr)

group group_store_serialization(eieio, tlbsync, dcba, dcbf, dcbst, dcbz, icbi, stb, stbu, stbux, stbx, stfd, stfdu, stfdux, stfdx, stfiwx, stfs, stfsu, stfsux, stfsx, sth, sthbrx, sthu, stmw, stswi, stswx, stvebx, stvehx, stvewx, stvx, stvxl, stw, stwbrx, stwcx_, stwu, stwux, stwx, tlbie)

group group_refetch_serialization(isync)

group_iu1.initialize_unit = { Operation<CONFIG>::execution_unit = CONFIG::IU1_T; }

group_iu2.initialize_unit = { Operation<CONFIG>::execution_unit = CONFIG::IU2_T; }

group_fpu.initialize_unit = { Operation<CONFIG>::execution_unit = CONFIG::FPU_T; }

group_bpu.initialize_unit = { Operation<CONFIG>::execution_unit = CONFIG::BPU_T; }

group_lsu.initialize_unit = { Operation<CONFIG>::execution_unit = CONFIG::LSU_T; }

group_vfpu.initialize_unit = { Operation<CONFIG>::execution_unit = CONFIG::VFPU_T; }

group_vpu.initialize_unit = { Operation<CONFIG>::execution_unit = CONFIG::VPU_T; }

group_viu1.initialize_unit = { Operation<CONFIG>::execution_unit = CONFIG::VIU1_T; }

group_viu2.initialize_unit = { Operation<CONFIG>::execution_unit = CONFIG::VIU2_T; }

mfspr.initialize_serialization = {
	uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
	switch(n)
	{
		case 528: // IBAT0U
		case 529: // IBAT0L
		case 530: // IBAT1U
		case 531: // IBAT1L
		case 532: // IBAT2U
		case 533: // IBAT2L
		case 534: // IBAT3U
		case 535: // IBAT3L
			Operation<CONFIG>::serialization = CONFIG::NO_SERIALIZATION;
			return;
	}

	if(CPU<CONFIG>::IsMPC7X5() || CPU<CONFIG>::IsMPC7XXX())
	{
		switch(n)
		{
			case 560: // IBAT4U
			case 561: // IBAT4L
			case 562: // IBAT5U
			case 563: // IBAT5L
			case 564: // IBAT6U
			case 565: // IBAT6L
			case 566: // IBAT7U
			case 567: // IBAT7L
				Operation<CONFIG>::serialization = CONFIG::NO_SERIALIZATION;
				return;
		}
	}

	if(CPU<CONFIG>::IsMPC7XXX())
	{
		switch(n)
		{
			case 256: // VRSAVE
				Operation<CONFIG>::serialization = CONFIG::NO_SERIALIZATION;
				return;
		}
	}

	// mtspr (DBAT, MSS, Time Base, other)
	Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
}

mtspr.initialize_serialization = {
	uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
	switch(n)
	{
		case 1: // XER
			Operation<CONFIG>::serialization = (typename CONFIG::serialization_t)(CONFIG::EXECUTION_SERIALIZATION | CONFIG::REFETCH_SERIALIZATION);
			return;
	}
	// mtspr (DBATs, IBATs, MSS, other)
	Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
}

sync.initialize_serialization = {
	Operation<CONFIG>::serialization = (typename CONFIG::serialization_t)(CONFIG::EXECUTION_SERIALIZATION | CONFIG::STORE_SERIALIZATION);
}

group_execution_serialization.initialize_serialization = {
	Operation<CONFIG>::serialization = CONFIG::EXECUTION_SERIALIZATION;
}

group_store_serialization.initialize_serialization = {
	Operation<CONFIG>::serialization = CONFIG::STORE_SERIALIZATION;
}

group_refetch_serialization.initialize_serialization = {
	Operation<CONFIG>::serialization = CONFIG::REFETCH_SERIALIZATION;
}

group_read_ra.initialize_read_ra = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_rb.initialize_read_rb = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rb;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_rs.initialize_read_rs = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_rs_store.initialize_read_rs = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_ST_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rs;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_fa.initialize_read_fa = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fa;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_fb.initialize_read_fb = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fb;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_fc.initialize_read_fc = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fc;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_fs_store.initialize_read_fs = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_ST_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fs;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_xer_ca.initialize_read_xer = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_lr.initialize_read_lr = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_ctr.initialize_read_ctr = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_ctr_if_not_bo4.initialize_read_ctr = {
	if((bo & 4) == 0)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
		Operation<CONFIG>::num_insn_operands++;
	}
}

group_read_cr_bi_if_not_bo16.initialize_read_cr = {
	if((bo & 16) == 0)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
		Operation<CONFIG>::num_insn_operands++;
	}
}

group_read_crba.initialize_read_crba = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_crbb.initialize_read_crbb = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::num_insn_operands++;
}

group_read_crfs.initialize_read_cr = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::num_insn_operands++;
}

group_write_rd.initialize_write_rd = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = rd;
	Operation<CONFIG>::num_insn_operands++;
}

group_write_ra.initialize_write_ra = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = ra;
	Operation<CONFIG>::num_insn_operands++;
}

group_write_fd.initialize_write_fd = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].reg_num = fd;
	Operation<CONFIG>::num_insn_operands++;
}

group_write_fpscr.initialize_write_fpscr = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::FPSCR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
	Operation<CONFIG>::num_insn_operands++;
}

group_write_lr_if_lk.initialize_write_lr = {
	if(lk)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::LR_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
		Operation<CONFIG>::num_insn_operands++;
	}
}

group_write_ctr_if_not_bo4.initialize_write_ctr = {
	if((bo & 4) == 0)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CTR_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
		Operation<CONFIG>::num_insn_operands++;
	}
}

group_write_crbd.initialize_write_crbd = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
	Operation<CONFIG>::num_insn_operands++;
}

group_write_xer_ca.initialize_write_xer = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
	Operation<CONFIG>::num_insn_operands++;
}

group_write_cr0_if_rc.initialize_write_cr = {
	if(rc)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::INPUT_T;
		Operation<CONFIG>::num_insn_operands++;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
		Operation<CONFIG>::num_insn_operands++;
	}
}

group_write_xer_ca_and_ov_so_if_oe.initialize_write_xer = {
	if(oe)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
		Operation<CONFIG>::num_insn_operands++;
	}
	else
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::XER_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
		Operation<CONFIG>::num_insn_operands++;
	}
}

group_write_cr1_if_rc.initialize_write_cr = {
	if(rc)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
		Operation<CONFIG>::num_insn_operands++;
	}
}

group_write_crfd.initialize_write_cr = {
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].type = CONFIG::CR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands].dir = CONFIG::OUTPUT_T;
	Operation<CONFIG>::num_insn_operands++;
}

lmw.resolve = {
	Operation<CONFIG>::num_uops = 32 - rd;
	assert(uop_num < Operation<CONFIG>::num_uops);

	Operation<CONFIG>::num_insn_operands = 0;

	if(ra)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
	}
	
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;

}

stmw.resolve = {
	Operation<CONFIG>::num_uops = 32 - rs;
	assert(uop_num < Operation<CONFIG>::num_uops);

	Operation<CONFIG>::num_insn_operands = 0;

	if(ra)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
	}
	
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;
}

lswi.resolve = {
	Operation<CONFIG>::num_uops = ((nb ? nb : 32) + 3) / 4;
	assert(uop_num < Operation<CONFIG>::num_uops);

	Operation<CONFIG>::num_insn_operands = 0;

	if(ra)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
	}
	
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;
}

lswx.resolve = {
	uint32_t xer = cpu->GetXER();
	uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
	Operation<CONFIG>::num_uops = (n + 3) / 4;
	assert(uop_num < Operation<CONFIG>::num_uops);

	Operation<CONFIG>::num_insn_operands = 0;

	if(ra)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
	}

	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = rb;
	
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::OUTPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rd + uop_num) & 31;

}

stswi.resolve = {
	Operation<CONFIG>::num_uops = ((nb ? nb : 32) + 3) / 4;
	assert(uop_num < Operation<CONFIG>::num_uops);

	Operation<CONFIG>::num_insn_operands = 0;

	if(ra)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
	}
	
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;

}

stswx.resolve = {
	uint32_t xer = cpu->GetXER();
	uint8_t n = (xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET;
	Operation<CONFIG>::num_uops = (n + 3) / 4;
	assert(uop_num < Operation<CONFIG>::num_uops);

	Operation<CONFIG>::num_insn_operands = 0;

	if(ra)
	{
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
		Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = ra;
	}

	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = rb;
	
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].type = CONFIG::GPR_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].dir = CONFIG::INPUT_T;
	Operation<CONFIG>::insn_operands[Operation<CONFIG>::num_insn_operands++].reg_num = (rs + uop_num) & 31;

}

lswi.uop_execute = {
	typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) : 0) + (uop_num * 4);

	if(cpu->GetMSR_LE())
	{
		if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);
	}

	uint8_t n = (nb ? nb : 32) - (uop_num * 4);
	unsigned int r = (rd + uop_num) & 31;

	uint32_t sz = (n > 4) ? 4 : n;
	cpu->IntLoadMSBFirst(r, ea, sz);
}

lswx.uop_execute = {
	if(rd == ra ||
	   rd == rb ||
	   (rd == 0 && ra == 0)) throw IllegalInstructionException<CONFIG>();

	typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb)) + (uop_num * 4);

	if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

	uint32_t xer = cpu->GetXER();
	uint8_t n = ((xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET) - (uop_num * 4);
	unsigned int r = (rd + uop_num) & 31;

	uint32_t sz = (n > 4) ? 4 : n;
	cpu->IntLoadMSBFirst(r, ea, sz);
}

stswi.uop_execute = {
	typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) : 0) + (uop_num * 4);

	if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

	uint8_t n = (nb ? nb : 32) - (uop_num * 4);
	unsigned int r = (rs + uop_num) & 31;

	uint32_t sz = (n > 4) ? 4 : n;
	cpu->IntStoreMSBFirst(r, ea, sz);
}

stswx.uop_execute = {
	typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb)) + (uop_num * 4);

	if(cpu->GetMSR_LE()) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

	uint32_t xer = cpu->GetXER();
	uint8_t n = ((xer & CONFIG::XER_BYTE_COUNT_MASK) >> CONFIG::XER_BYTE_COUNT_OFFSET) - (uop_num * 4);
	unsigned int r = (rs + uop_num) & 31;

	uint32_t sz = (n > 4) ? 4 : n;
	cpu->IntStoreMSBFirst(r, ea, sz);
}

lmw.uop_execute = {
	if(ra >= rd) throw IllegalInstructionException<CONFIG>();
	typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d) + (uop_num * 4);

	if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

	unsigned int r = rd + uop_num;
	cpu->Int32Load(r, ea);
}

stmw.uop_execute = {
	typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + d : d) + (uop_num * 4);

	if(ea & 3) if(!cpu->linux_os_import) throw AlignmentException<CONFIG>(ea);

	unsigned int r = rs + uop_num;
	cpu->Int32Store(r, ea);
}


