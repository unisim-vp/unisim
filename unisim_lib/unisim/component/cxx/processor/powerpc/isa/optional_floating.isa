/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

/***************************************************

	FLOATING-POINT OPTIONAL INSTRUCTIONS

****************************************************/

op fres(59[6]:fd[5]:?[5]:fb[5]:?[5]:24[5]:rc[1])
fres.execute = {
	if(!CONFIG::HAS_FPU || !CONFIG::HAS_FLOATING_POINT_GRAPHICS_INSTRUCTIONS) throw UnimplementedInstructionException<CONFIG>();
	// Check if FPU is enabled
	uint32_t msr = cpu->GetMSR();
	if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
	{
		throw FloatingPointUnavailableException<CONFIG>();
	}

	// Read the input operands
	uint32_t fpscr = cpu->GetFPSCR();
	uint32_t old_fpscr = fpscr;
	Flags flags;
	flags.setRoundingMode(RN_NEAREST);
	SoftFloat b(cpu->GetFPR(fb), flags);
	flags.clear();

	if(unlikely(b.isSNaN()))
	{
		// b = SNaN
		if(!(fpscr & CONFIG::FPSCR_VE_MASK))
		{
			// Write back result
			SoftFloat result(b.queryValue() | 0x400000UL);// QNaN (b with high order bit of mantissa set)
			cpu->SetFPR(fd, SoftDouble(result, flags)); 
			// Generate FPRF
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
		}
		// Generate VXSNAN
		fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
	}
	else if(unlikely(b.isQNaN()))
	{
		// b = QNaN
		// Write back result
		cpu->SetFPR(fd, SoftDouble(b, flags)); // QNaN (b)
		// Generate FPRF
		fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
	}
	else if(unlikely(b.isZero()))
	{
		// Generate ZX
		fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;

		if(!(fpscr & CONFIG::FPSCR_ZE_MASK))
		{
			if(b.isNegative())
			{
				// b = -0
				// Write back result
				cpu->SetFPR(fd, SoftDouble(0xfff0000000000000ULL)); // -infinity
				// Generate FPRF
				fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
			}
			else
			{
				// b = +0
				// Write back result
				cpu->SetFPR(fd, SoftDouble(0x7ff0000000000000ULL)); // +infinity
				// Generate FPRF
				fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
			}
		}
	}
	else if(unlikely(b.isInfty()))
	{
		if(b.isNegative())
		{
			// b = -infinity
			cpu->SetFPR(fd, SoftDouble(0x8000000000000000ULL)); // -0
			// Generate FPRF
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
		}
		else
		{
			// b = +infinity
			cpu->SetFPR(fd, SoftDouble(0x0000000000000000ULL)); // +0
			// Generate FPRF
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
		}
	}
	else
	{
		SoftFloat result(0x3f800000ULL); // 1.0

		// Compute the result
		result.divAssign(b, flags);

		// Generate OX, UX, ZX, VXSNAN, FR, FI, FPRF
		GenFPSCR_OX<CONFIG>(fpscr, flags);
		GenFPSCR_UX<CONFIG>(fpscr, flags);
		GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);

		// Write back the result
		cpu->SetFPR(fd, SoftDouble(result, flags));
	}

	// Generate XX, FX, VX, FEX
	GenFPSCR_XX<CONFIG>(fpscr);
	GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
	GenFPSCR_VX<CONFIG>(fpscr);
	GenFPSCR_FEX<CONFIG>(fpscr);

	// Update FPSCR
	cpu->SetFPSCR(fpscr);

	// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
	if(unlikely(((msr & CONFIG::MSR_FE0_MASK) |
	            (msr & CONFIG::MSR_FE1_MASK)) &&
	            (fpscr & CONFIG::FPSCR_FEX_MASK)))
	{
		// Raise a floating point exception
		throw FloatingPointException<CONFIG>();
	}

	// Copy FX, FEX, VX, OX to CR1
	if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
}
fres.disasm = {
	os << "fres" << (rc ? "." : "") << " f" << (unsigned int) fd << ", f" << (unsigned int) fb;
}

op frsqrte(63[6]:fd[5]:?[5]:fb[5]:?[5]:26[5]:rc[1])
frsqrte.execute = {
	if(!CONFIG::HAS_FPU || !CONFIG::HAS_FLOATING_POINT_GRAPHICS_INSTRUCTIONS) throw UnimplementedInstructionException<CONFIG>();
	// Check if FPU is enabled
	uint32_t msr = cpu->GetMSR();
	if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
	{
		throw FloatingPointUnavailableException<CONFIG>();
	}

	// Read the input operands
	uint32_t fpscr = cpu->GetFPSCR();
	uint32_t old_fpscr = fpscr;
	Flags flags;
	flags.setRoundingMode(RN_NEAREST);
	const SoftDouble& b = cpu->GetFPR(fb);

	if(unlikely(b.isSNaN()))
	{
		// b = SNaN
		if(!(fpscr & CONFIG::FPSCR_VE_MASK))
		{
			// Generate FPRF
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
			// Write back result
			cpu->SetFPR(fd, SoftDouble(b.queryValue() | 0x0008000000000000ULL)); // QNaN (b with high order bit of mantissa set)
		}
		// Generate VXSNAN
		fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
	}
	else if(unlikely(b.isQNaN()))
	{
		// b = QNaN
		// Generate FPRF
		fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
		// Write back result
		cpu->SetFPR(fd, b); // QNaN (b)
	}
	else if(unlikely(b.isZero()))
	{
		// Generate ZX
		fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;

		if(!(fpscr & CONFIG::FPSCR_ZE_MASK))
		{
			if(b.isNegative())
			{
				// b = -0
				// Write back result
				cpu->SetFPR(fd, SoftDouble(0xfff0000000000000ULL)); // -infinity
				// Generate FPRF
				fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
			}
			else
			{
				// b = +0
				// Write back result
				cpu->SetFPR(fd, SoftDouble(0x7ff0000000000000ULL)); // +infinity
				// Generate FPRF
				fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
			}
		}
	}
	else if(unlikely(b.isNegative()))
	{
		// -infinity <= b < 0
		if(!(fpscr & CONFIG::FPSCR_VE_MASK))
		{
			// Write back result
			cpu->SetFPR(fd, SoftDouble(0x7ff8000000000000ULL)); // Positive QNaN
			// Generate FPRF
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
		}
		// Generate VXSQRT
		fpscr = fpscr | CONFIG::FPSCR_VXSQRT_MASK;
	}
	else if(unlikely(b.isInfty()))
	{
		// b = +infinity
		cpu->SetFPR(fd, SoftDouble(0x0000000000000000ULL)); // +0
		// Generate FPRF
		fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
	}
	else
	{
		// 0 < b < infinity

		// First estimation of 1/sqrt(b), seed of Newton-Raphson algorithm
		// see http://www.mceniry.net/papers/Fast%20Inverse%20Square%20Root.pdf
		// mirror: http://www.daxia.com/bibis/upload/406Fast_Inverse_Square_Root.pdf
		// see also: http://www.azillionmonkeys.com/qed/sqroot.html
		SoftDouble u((0xbfcdd6a18f6a6f55ULL - b.queryValue()) >> 1);

		// Newton-Raphson method:  u = u * (3 - b * u²) / 2
		SoftDouble half(0x3fe0000000000000ULL); // 0.5
		SoftDouble one_and_half(0x3ff8000000000000ULL); // 1.5

		SoftDouble v(b);
		v.multAssign(half, flags); // v = b / 2 => u = (3 * u / 2) - u² * u * v
		
		unsigned int i;
		// five iterations are sufficient with 64-bit floating point numbers
		for(i = 0; i < 5; i++)
		{
			// Newton-Raphson iteration
			
			// w = u² * u * b / 2
			SoftDouble w(u);
			w.multAssign(u, flags);
			w.multAssign(u, flags);
			w.multAssign(v, flags);
			
			// u = (3 * u / 2) - (u² * u * b / 2)
			u.multAssign(one_and_half, flags);
			u.minusAssign(w, flags);
		}

		// Write back result
		cpu->SetFPR(fd, u);

		// Generate ZX, VXSNAN, FR, FI, FPRF
		GenFPSCR_ZX<CONFIG>(fpscr, flags);
		GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
		GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, u);
	}

	// Generate XX, FX, VX, FEX
	GenFPSCR_XX<CONFIG>(fpscr);
	GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
	GenFPSCR_VX<CONFIG>(fpscr);
	GenFPSCR_FEX<CONFIG>(fpscr);

	// Update FPSCR
	cpu->SetFPSCR(fpscr);

	// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
	if(unlikely(((msr & CONFIG::MSR_FE0_MASK) |
	            (msr & CONFIG::MSR_FE1_MASK)) &&
	            (fpscr & CONFIG::FPSCR_FEX_MASK)))
	{
		// Raise a floating point exception
		throw FloatingPointException<CONFIG>();
	}

	// Copy FX, FEX, VX, OX to CR1
	if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
}
frsqrte.disasm = {
	os << "frsqrte" << (rc ? "." : "") << " f" << (unsigned int) fd << ", f" << (unsigned int) fb;
}

op fsel(63[6]:fd[5]:fa[5]:fb[5]:fc[5]:23[5]:rc[1])
fsel.execute = {
	if(!CONFIG::HAS_FPU || !CONFIG::HAS_FLOATING_POINT_GRAPHICS_INSTRUCTIONS) throw UnimplementedInstructionException<CONFIG>();
	// Check if FPU is enabled
	uint32_t msr = cpu->GetMSR();
	if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
	{
		throw FloatingPointUnavailableException<CONFIG>();
	}

	// Read the input operands
	uint32_t fpscr = cpu->GetFPSCR();
	const SoftDouble& a = cpu->GetFPR(fa);
	const SoftDouble& b = cpu->GetFPR(fb);
	const SoftDouble& c = cpu->GetFPR(fc);

	// Compute and write the result
	cpu->SetFPR(fd, ((!a.isZero() && a.isNegative()) || a.isNaN()) ? b : c);

	// Copy FX, FEX, VX, OX to CR1
	if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
}
fsel.disasm = {
	os << "fsel" << (rc ? "." : "") << " f" << (unsigned int) fd << ", f" << (unsigned int) fa << ", f" << (unsigned int) fc << ", f" << (unsigned int) fb;
}

op fsqrt(63[6]:fd[5]:?[5]:fb[5]:?[5]:22[5]:rc[1])
fsqrt.execute = {
	if(!CONFIG::HAS_FPU || !CONFIG::HAS_FLOATING_POINT_SQRT) throw UnimplementedInstructionException<CONFIG>();
	// Check if FPU is enabled
	uint32_t msr = cpu->GetMSR();
	if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
	{
		throw FloatingPointUnavailableException<CONFIG>();
	}

	// Read the input operands
	uint32_t fpscr = cpu->GetFPSCR();
	uint32_t old_fpscr = fpscr;
	Flags flags;
	flags.setRoundingMode(RN_NEAREST);
	const SoftDouble& b = cpu->GetFPR(fb);

	if(unlikely(b.isSNaN()))
	{
		// b = SNaN
		if(!(fpscr & CONFIG::FPSCR_VE_MASK))
		{
			// Generate FPRF
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
			// Write back result
			cpu->SetFPR(fd, SoftDouble(b.queryValue() | 0x0008000000000000ULL)); // QNaN (b with high order bit of mantissa set)
		}
		// Generate VXSNAN
		fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
	}
	else if(unlikely(b.isQNaN()))
	{
		// b = QNaN
		// Generate FPRF
		fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
		// Write back result
		cpu->SetFPR(fd, b); // QNaN (b)
	}
	else if(unlikely(b.isZero()))
	{
		// Write back result
		cpu->SetFPR(fd, b); // 0 (b)

		// Generate FPRF
		if(b.isNegative())
		{
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
		}
		else
		{
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
		}
	}
	else if(unlikely(b.isNegative()))
	{
		// -infinity <= b < 0
		if(!(fpscr & CONFIG::FPSCR_VE_MASK))
		{
			// Write back result
			cpu->SetFPR(fd, SoftDouble(0x7ff8000000000000ULL)); // Positive QNaN
			// Generate FPRF
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
		}
		// Generate VXSQRT
		fpscr = fpscr | CONFIG::FPSCR_VXSQRT_MASK;
	}
	else if(unlikely(b.isInfty()))
	{
		// b = +infinity
		cpu->SetFPR(fd, b); // +infinity
		// Generate FPRF
		fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
	}
	else
	{
		// 0 < b < +infinity

		// First estimation of 1/sqrt(b), seed of Newton-Raphson algorithm
		// see http://www.mceniry.net/papers/Fast%20Inverse%20Square%20Root.pdf
		// mirror: http://www.daxia.com/bibis/upload/406Fast_Inverse_Square_Root.pdf
		// see also: http://www.azillionmonkeys.com/qed/sqroot.html
		SoftDouble u((0xbfcdd6a18f6a6f55ULL - b.queryValue()) >> 1);

		// Newton-Raphson method:  u = u * (3 - b * u²) / 2
		SoftDouble half(0x3fe0000000000000ULL); // 0.5
		SoftDouble one_and_half(0x3ff8000000000000ULL); // 1.5

		SoftDouble v(b);
		v.multAssign(half, flags); // v = b / 2 => u = (3 * u / 2) - u² * u * v
		
		unsigned int i;
		// five iterations are sufficient with 64-bit floating point numbers
		for(i = 0; i < 5; i++)
		{
			// Newton-Raphson iteration
			
			// w = u² * u * b / 2
			SoftDouble w(u);
			w.multAssign(u, flags);
			w.multAssign(u, flags);
			w.multAssign(v, flags);
			
			// u = (3 * u / 2) - (u² * u * b / 2)
			u.multAssign(one_and_half, flags);
			u.minusAssign(w, flags);
		}
		
		// at this point u = 1 / sqrt(b)
		u.multAssign(b, flags); // u = sqrt(b) = (1 / sqrt(b)) * b;

		// Write back result
		cpu->SetFPR(fd, u);

		// Generate ZX, VXSNAN, FR, FI, FPRF
		GenFPSCR_ZX<CONFIG>(fpscr, flags);
		GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
		GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, u);
	}

	// Generate XX, FX, VX, FEX
	GenFPSCR_XX<CONFIG>(fpscr);
	GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
	GenFPSCR_VX<CONFIG>(fpscr);
	GenFPSCR_FEX<CONFIG>(fpscr);

	// Update FPSCR
	cpu->SetFPSCR(fpscr);

	// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
	if(unlikely(((msr & CONFIG::MSR_FE0_MASK) |
	            (msr & CONFIG::MSR_FE1_MASK)) &&
	            (fpscr & CONFIG::FPSCR_FEX_MASK)))
	{
		// Raise a floating point exception
		throw FloatingPointException<CONFIG>();
	}

	// Copy FX, FEX, VX, OX to CR1
	if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
}
fsqrt.disasm = {
	os << "fsqrt" << (rc ? "." : "") << " f" << (unsigned int) fd << ", f" << (unsigned int) fb;
}

op fsqrts(59[6]:fd[5]:?[5]:fb[5]:?[5]:22[5]:rc[1])
fsqrts.execute = {
	if(!CONFIG::HAS_FPU || !CONFIG::HAS_FLOATING_POINT_SQRT) throw UnimplementedInstructionException<CONFIG>();
	// Check if FPU is enabled
	uint32_t msr = cpu->GetMSR();
	if(unlikely(!(msr & CONFIG::MSR_FP_MASK)))
	{
		throw FloatingPointUnavailableException<CONFIG>();
	}

	// Read the input operands
	uint32_t fpscr = cpu->GetFPSCR();
	uint32_t old_fpscr = fpscr;
	Flags flags;
	flags.setRoundingMode(RN_NEAREST);
	SoftFloat b(cpu->GetFPR(fb), flags);
	flags.clear();

	if(unlikely(b.isSNaN()))
	{
		// b = SNaN
		if(!(fpscr & CONFIG::FPSCR_VE_MASK))
		{
			// Generate FPRF
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
			// Write back result
			cpu->SetFPR(fd, SoftDouble(SoftFloat(b.queryValue() | 0x00400000ULL), flags)); // QNaN (b with high order bit of mantissa set)
		}
		// Generate VXSNAN
		fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
	}
	else if(unlikely(b.isQNaN()))
	{
		// b = QNaN
		// Generate FPRF
		fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
		// Write back result
		cpu->SetFPR(fd, SoftDouble(b, flags)); // QNaN (b)
	}
	else if(unlikely(b.isZero()))
	{
		// Write back result
		cpu->SetFPR(fd, SoftDouble(b, flags)); // 0 (b)

		// Generate FPRF
		if(b.isNegative())
		{
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
		}
		else
		{
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
		}
	}
	else if(unlikely(b.isNegative()))
	{
		// -infinity <= b < 0
		if(!(fpscr & CONFIG::FPSCR_VE_MASK))
		{
			// Write back result
			cpu->SetFPR(fd, SoftDouble(SoftFloat(0x7fc00000UL), flags)); // Positive QNaN
			// Generate FPRF
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
		}
		// Generate VXSQRT
		fpscr = fpscr | CONFIG::FPSCR_VXSQRT_MASK;
	}
	else if(unlikely(b.isInfty()))
	{
		// b = +infinity
		cpu->SetFPR(fd, SoftDouble(b, flags)); // +infinity
		// Generate FPRF
		fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
	}
	else
	{
		// 0 < b < +infinity

		// First estimation of 1/sqrt(b), seed of Newton-Raphson algorithm
		// see http://www.mceniry.net/papers/Fast%20Inverse%20Square%20Root.pdf
		// mirror: http://www.daxia.com/bibis/upload/406Fast_Inverse_Square_Root.pdf
		// see also: http://www.azillionmonkeys.com/qed/sqroot.html
		SoftFloat u((0xbe6eb50cUL - b.queryValue()) >> 1);

		// Newton-Raphson method:  u = u * (3 - b * u²) / 2
		SoftFloat half(0x3f000000UL); // 0.5
		SoftFloat one_and_half(0x3fc00000UL); // 1.5

		SoftFloat v(b);
		v.multAssign(half, flags); // v = b / 2 => u = (3 * u / 2) - u² * u * v
		
		unsigned int i;
		// four iterations are sufficient with 32-bit floating point numbers
		for(i = 0; i < 4; i++)
		{
			// Newton-Raphson iteration
			
			// w = u² * u * b / 2
			SoftFloat w(u);
			w.multAssign(u, flags);
			w.multAssign(u, flags);
			w.multAssign(v, flags);
			
			// u = (3 * u / 2) - (u² * u * b / 2)
			u.multAssign(one_and_half, flags);
			u.minusAssign(w, flags);
		}
		
		// at this point u = 1 / sqrt(b)
		u.multAssign(b, flags); // u = sqrt(b) = (1 / sqrt(b)) * b;

		// Write back result
		cpu->SetFPR(fd, SoftDouble(u, flags));

		// Generate ZX, VXSNAN, FR, FI, FPRF
		GenFPSCR_ZX<CONFIG>(fpscr, flags);
		GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
		GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, u);
	}

	// Generate XX, FX, VX, FEX
	GenFPSCR_XX<CONFIG>(fpscr);
	GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
	GenFPSCR_VX<CONFIG>(fpscr);
	GenFPSCR_FEX<CONFIG>(fpscr);

	// Update FPSCR
	cpu->SetFPSCR(fpscr);

	// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
	if(unlikely(((msr & CONFIG::MSR_FE0_MASK) |
	            (msr & CONFIG::MSR_FE1_MASK)) &&
	            (fpscr & CONFIG::FPSCR_FEX_MASK)))
	{
		// Raise a floating point exception
		throw FloatingPointException<CONFIG>();
	}

	// Copy FX, FEX, VX, OX to CR1
	if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
}
fsqrts.disasm = {
	os << "fsqrts" << (rc ? "." : "") << " f" << (unsigned int) fd << ", f" << (unsigned int) fb;
}
