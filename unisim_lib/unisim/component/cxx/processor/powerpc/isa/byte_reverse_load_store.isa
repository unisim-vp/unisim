/**************************************************

INTEGER LOAD STORE w BYTE REVERSE INSTRUCTIONS

***************************************************/

op lhbrx(31[6]:rd[5]:ra[5]:rb[5]:790[10]:?[1])
lhbrx.execute = {
	// compute the effective address
	typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
	// do the memory access
	cpu->Int16LoadByteReverse(rd, ea); // 16-bit load/byte reverse/no signe extend
}
lhbrx.disasm = {
	os << "lhbrx r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
	if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
	{
		typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
		os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
	}
}

op lwbrx(31[6]:rd[5]:ra[5]:rb[5]:534[10]:?[1])
lwbrx.execute = {
	// compute the effective address
	typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
	// do the memory access
	cpu->Int32LoadByteReverse(rd, ea); // 32-bit load/byte reverse/no signe extend
}
lwbrx.disasm = {
	os << "lwbrx r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
	if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
	{
		typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
		os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
	}
}

op sthbrx(31[6]:rs[5]:ra[5]:rb[5]:918[10]:?[1])
sthbrx.execute = {
	// compute the effective address
	typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
	// do the memory access
	cpu->Int16StoreByteReverse(rs, ea); // 16-bit load/byte reverse
}
sthbrx.disasm = {
	os << "sthbrx r" << (unsigned int) rs << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
	if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
	{
		typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
		os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
	}
}

op stwbrx(31[6]:rs[5]:ra[5]:rb[5]:662[10]:?[1])
stwbrx.execute = {
	// compute the effective address
	typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
	// do the memory access
	cpu->Int32StoreByteReverse(rs, ea); // 32-bit load/byte reverse
}
stwbrx.disasm = {
	os << "stwbrx r" << (unsigned int) rs << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
	if(cpu && cpu->GetCIA() == Operation<CONFIG>::GetAddr())
	{
		typename CONFIG::address_t ea = (ra ? cpu->GetGPR(ra) + cpu->GetGPR(rb) : cpu->GetGPR(rb));
		os << " <" << cpu->GetObjectFriendlyName(ea) << ">";
	}
}
