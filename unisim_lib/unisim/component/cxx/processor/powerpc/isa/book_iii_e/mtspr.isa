/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */
 
op mtspr(31[6]:rs[5]:spr[10]:467[10]:?[1])
mtspr.execute = {
	unsigned n =((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
	uint32_t result = cpu->GetGPR(rs);
	switch(n)
	{
		case 0x001:
		{
			XER& xer = cpu->GetXER();
			xer = result;
			break;
		}
		case 0x008:
			cpu->SetLR(result);
			break;
		case 0x009:
			cpu->SetCTR(result);
			break;
		default:
			return cpu->MoveToSPR(n, result);
	}
	
	return true;
}
mtspr.disasm = {
	unsigned n =((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
	switch(n)
	{
		case 1: os << "mtxer r" << (unsigned int) rs; return;
		case 8: os << "mtlr r" << (unsigned int) rs; return;
		case 9: os << "mtctr r" << (unsigned int) rs; return;
	}

	os << "mtspr " << n << ", r" << (unsigned int) rs;
}
