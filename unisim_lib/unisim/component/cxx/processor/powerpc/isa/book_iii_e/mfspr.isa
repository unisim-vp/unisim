/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */
 
op mfspr(31[6]:rd[5]:spr[10]:339[10]:?[1])
mfspr.execute = {
	uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
	uint32_t result;
	switch(n)
	{
		case 0x001:
			result = cpu->GetXER();
			break;
		case 0x008:
			result = cpu->GetLR();
			break;
		case 0x009:
			result = cpu->GetCTR();
			break;
		default:
			if(unlikely(!cpu->GetSPR(n, result))) return false;
			break;
	}
	
	cpu->SetGPR(rd, result);
	
	return true;
}
mfspr.disasm = {
	uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
	switch(n)
	{
		case 1: os << "mfxer r" << (unsigned int) rd; return;
		case 8: os << "mflr r" << (unsigned int) rd; return;
		case 9: os << "mfctr r" << (unsigned int) rd; return;
		case 22: os << "mfdec r" << (unsigned int) rd; return;
		case 528: os << "mfibatu r" << (unsigned int) rd << ", 0"; return;
		case 529: os << "mfibatl r" << (unsigned int) rd << ", 0"; return;
		case 530: os << "mfibatu r" << (unsigned int) rd << ", 1"; return;
		case 531: os << "mfibatl r" << (unsigned int) rd << ", 1"; return;
		case 532: os << "mfibatu r" << (unsigned int) rd << ", 2"; return;
		case 533: os << "mfibatl r" << (unsigned int) rd << ", 2"; return;
		case 534: os << "mfibatu r" << (unsigned int) rd << ", 3"; return;
		case 535: os << "mfibatl r" << (unsigned int) rd << ", 3"; return;
		case 536: os << "mfdbatu r" << (unsigned int) rd << ", 0"; return;
		case 537: os << "mfdbatl r" << (unsigned int) rd << ", 0"; return;
		case 538: os << "mfdbatu r" << (unsigned int) rd << ", 1"; return;
		case 539: os << "mfdbatl r" << (unsigned int) rd << ", 1"; return;
		case 540: os << "mfdbatu r" << (unsigned int) rd << ", 2"; return;
		case 541: os << "mfdbatl r" << (unsigned int) rd << ", 2"; return;
		case 542: os << "mfdbatu r" << (unsigned int) rd << ", 3"; return;
		case 543: os << "mfdbatl r" << (unsigned int) rd << ", 3"; return;
		case 560: os << "mfibatu r" << (unsigned int) rd << ", 4"; return;
		case 561: os << "mfibatl r" << (unsigned int) rd << ", 4"; return;
		case 562: os << "mfibatu r" << (unsigned int) rd << ", 5"; return;
		case 563: os << "mfibatl r" << (unsigned int) rd << ", 5"; return;
		case 564: os << "mfibatu r" << (unsigned int) rd << ", 6"; return;
		case 565: os << "mfibatl r" << (unsigned int) rd << ", 6"; return;
		case 566: os << "mfibatu r" << (unsigned int) rd << ", 7"; return;
		case 567: os << "mfibatl r" << (unsigned int) rd << ", 7"; return;
		case 568: os << "mfdbatu r" << (unsigned int) rd << ", 4"; return;
		case 569: os << "mfdbatl r" << (unsigned int) rd << ", 4"; return;
		case 570: os << "mfdbatu r" << (unsigned int) rd << ", 5"; return;
		case 571: os << "mfdbatl r" << (unsigned int) rd << ", 5"; return;
		case 572: os << "mfdbatu r" << (unsigned int) rd << ", 6"; return;
		case 573: os << "mfdbatl r" << (unsigned int) rd << ", 6"; return;
		case 574: os << "mfdbatu r" << (unsigned int) rd << ", 7"; return;
		case 575: os << "mfdbatl r" << (unsigned int) rd << ", 7"; return;
	}

	os << "mfspr r" << (unsigned int) rd << ", " << n;
}

specialize mfspr(spr=0x20)
specialize mfspr(spr=0x100)
specialize mfspr(spr=0x120)
