/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

impl {
#include <unisim/component/cxx/processor/powerpc/isa/book_i/fixed_point/integer.hh>
}

op subfme(31[6]:rd[5]:ra[5]:?[5]:oe[1]:232[9]:rc[1])
subfme.execute = {
	uint8_t carry; // carry out
	uint8_t overflow; // overflow
	uint8_t sign; // sign
	uint32_t result;
	
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	XER& xer = cpu->GetXER();
	uint8_t carry_in = uint8_t(xer.Get<XER::CA>());
	
	// Compute the result
	SignedAdd32(result, carry, overflow, sign, ~a, uint32_t(0xFFFFFFFF), carry_in);
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	// Generate XER[CA]
	xer.Set<XER::CA>(carry);
	
	if(unlikely(oe))
	{
		// Generate XER[OV] and XER[SO]
		xer.Set<XER::OV>(overflow);
		xer.Set<XER::SO>(xer.Get<XER::SO>() | uint32_t(overflow));
	}
	
	if(unlikely(rc))
	{
		// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
		CR& cr = cpu->GetCR();
		cr.Set<CR::CR0::SO>(xer.Get<XER::SO>());
		cr.Set<CR::CR0::LT>(int32_t(result) < int32_t(0));
		cr.Set<CR::CR0::GT>(int32_t(result) > int32_t(0));
		cr.Set<CR::CR0::EQ>(result == uint32_t(0));
	}
	
	return true;
}
subfme.disasm = {
	os << "subfme" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra;
}

specialize subfme(rc=0,oe=0)
specialize subfme(rc=0,oe=1)
specialize subfme(rc=1,oe=0)
specialize subfme(rc=1,oe=1)
