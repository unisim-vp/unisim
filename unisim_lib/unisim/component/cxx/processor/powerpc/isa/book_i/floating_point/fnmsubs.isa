/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */
 
impl {
#include <unisim/component/cxx/processor/powerpc/isa/book_i/floating_point/floating.hh>
}

op fnmsubs(59[6]:fd[5]:fa[5]:fb[5]:fc[5]:30[5]:rc[1])
fnmsubs.execute = {
	if(not CONFIG::HAS_FPU)
	{
		cpu->SetException(CONFIG::EXC_PROGRAM_UNIMPLEMENTED_INSTRUCTION);
		return false;
	}
	// Check if FPU is enabled
	uint32_t msr = cpu->GetMSR();
	if(unlikely(not (msr & CONFIG::MSR_FP_MASK)))
	{
		cpu->SetException(CONFIG::EXC_FLOATING_POINT_UNAVAILABLE);
		return false;
	}

	// Read the input operands
	uint32_t fpscr = cpu->GetFPSCR();
	uint32_t old_fpscr = fpscr;
	Flags flags;
	flags.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
	SoftDouble intermediate_result = cpu->GetFPR(fa);
	const SoftDouble& b = cpu->GetFPR(fb);
	const SoftDouble& c = cpu->GetFPR(fc);

	// Compute the intermediate result before rounding and opposite
	intermediate_result.multAndSubAssign(c, b, flags);
	
	// Round the result
	Flags flags_conv;
	flags_conv.setRoundingMode((fpscr & CONFIG::FPSCR_RN_MASK) >> CONFIG::FPSCR_RN_OFFSET);
    flags_conv.clearKeepSignalingConversion();
	flags_conv.setUpApproximateInfty();
	SoftFloat result(intermediate_result, flags_conv);
	if(not flags_conv.isApproximate())
	{
		if(flags.isUpApproximate())
		{
			flags_conv.setApproximate(Flags::Up);
		}
		if(flags.isDownApproximate())
		{
			flags_conv.setApproximate(Flags::Down);
		}
	}
	flags_conv.mergeException(flags);

	// Generate FR
	GenFPSCR_FR<CONFIG, SoftFloat>(fpscr, result, flags_conv);

	// Compute the final result
	if(likely(not result.isQNaN())) result.opposite();
	
	// Generate OX, UX, VXSNAN, VXISI, VXIMZ, FI, FPRF, XX, FX, VX, FEX
	GenFPSCR_OX<CONFIG>(fpscr, flags_conv);
	GenFPSCR_UX<CONFIG>(fpscr, flags_conv);
	GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
	GenFPSCR_VXISI<CONFIG>(fpscr, flags);
	GenFPSCR_VXIMZ<CONFIG>(fpscr, flags);
	GenFPSCR_FI<CONFIG>(fpscr, flags_conv);
	GenFPSCR_FPRF<CONFIG, SoftFloat>(fpscr, result);
	GenFPSCR_XX<CONFIG>(fpscr);
	GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
	GenFPSCR_VX<CONFIG>(fpscr);
	GenFPSCR_FEX<CONFIG>(fpscr);

	// Update FPSCR
	cpu->SetFPSCR(fpscr);

	// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
	if(unlikely(((msr & CONFIG::MSR_FE0_MASK) |
	            (msr & CONFIG::MSR_FE1_MASK)) &&
	            (fpscr & CONFIG::FPSCR_FEX_MASK)))
	{
		// Raise a floating point exception
		cpu->SetException(CONFIG::EXC_PROGRAM_FLOATING_POINT);
		return false;
	}

	// Write back the result
	cpu->SetFPR(fd, SoftDouble(result, flags));

	// Copy FX, FEX, VX, OX to CR1
	if(unlikely(rc)) cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> 4)) | ((fpscr >> 4) & (CONFIG::CR0_MASK >> 4)));
	
	return true;
}
fnmsubs.disasm = {
	os << "fnmsubs" << (rc ? "." : "") << " f" << (unsigned int) fd << ", f" << (unsigned int) fa << ", f" << (unsigned int) fc << ", f" << (unsigned int) fb;
}

specialize fnmsubs(rc=0)
specialize fnmsubs(rc=1)
