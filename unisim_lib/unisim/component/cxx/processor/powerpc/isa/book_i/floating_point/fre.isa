/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

/* Floating Reciprocal Estimate */
op fre(63[6]:fd[5]:?[5]:fb[5]:?[5]:24[5]:rc[1]);

fre.execute = {
	if(not CONFIG::HAS_FPU or not CONFIG::HAS_FLOATING_POINT_GRAPHICS_INSTRUCTIONS)
	{
		cpu->ThrowException<CPU::ProgramInterrupt::UnimplementedInstruction>();
		return false;
	}
	if(unlikely(not cpu->GetMSR_FP()))
	{
		cpu->ThrowException<CPU::FloatingPointUnavailableInterrupt::FloatingPointUnavailable>();
		return false;
	}

	// Read the input operands
	UINT fpscr = cpu->GetFPSCR(), old_fpscr = fpscr;
	SoftDouble const& b(cpu->GetFPR(fb));

        // Compute the result
        Flags flags( Flags::RoundingMode(cpu->GetFPSCR().Get<FPSCR::RN>()) );
        SoftDouble result;
        
	if (unlikely(b.isNaN()))
          {
            if (unlikely(b.isSNaN()))
              {
		// Generate VXSNAN
		FPSCR::VXSNAN::Set(fpscr, UINT(1));
                if(bool(FPSCR::VE::Get(fpscr)))
                  {
                    // TODO: Check behavior of SNaN exception
                    cpu->ThrowException<CPU::ProgramInterrupt::FloatingPoint>();
                    return false;
                  }
              }

            result = a;
            result.quiet();
            
            // Generate FPRF
            FPSCR::FPRF::Set(fpscr,FPSCR::FPRF::QNAN());
          }
	else if(unlikely(b.isZero()))
          {
            // Generate ZX
            FPSCR::ZX::Set(fpscr, UINT(1));

            bool neg( b.negative() ); // -infinity or +infinity
            result.fromRawBitsAssign( neg ? 0xfff0000000000000ULL : 0x7ff0000000000000ULL );
            FPSCR::FPRF::Set( fpscr, UINT( neg ? FPSCR::FPRF::NEGATIVE_INFINITY() : FPSCR::FPRF::POSITIVE_INFINITY() ) );
          }
	else if(unlikely(b.isInfty()))
          {
            bool neg( b.negative() ); // -0 or +0
            result.fromRawBitsAssign( neg ? 0x8000000000000000ULL : 0x0000000000000000ULL );
            FPSCR::FPRF::Set( fpscr, UINT( neg ? FPSCR::FPRF::NEGATIVE_ZERO() : FPSCR::FPRF::POSITIVE_ZERO()));
          }
	else
          {
            result.fromRawBitsAssign( 0x3ff0000000000000ULL ); // 1.0
            result.divAssign(b, flags);

            // Generate OX, UX, ZX, VXSNAN, FR, FI, FPRF
            GenFPSCR_OX<FPSCR>(fpscr, flags);
            GenFPSCR_UX<FPSCR>(fpscr, flags);
            GenFPSCR_FPRF<FPSCR, SoftDouble>(fpscr, result);
          }

	// Generate XX, FX, VX, FEX
	GenFPSCR_XX<FPSCR>(fpscr);
	GenFPSCR_FX<FPSCR>(fpscr, old_fpscr);
	GenFPSCR_VX<FPSCR>(fpscr);
	GenFPSCR_FEX<FPSCR>(fpscr);

	// Update FPSCR
	cpu->SetFPSCR(fpscr);

	// Write back the result
	cpu->SetFPR(fd, result);
	
	if (not cpu->CheckFloatingPointException())
		return false;

	// Copy FX, FEX, VX, OX to CR1
	if(unlikely(rc)) { cpu->GetCR().Set<CR::CR1>( cpu->GetFPSCR().Get<FPSCR::_0_3>() ); }
	
	return true;
};

fre.disasm = {
	os << "fre" << (rc ? "." : "") << " " << FPRPrint(fd) << ", " << FPRPrint(fb);
};

specialize fre(rc=0);
specialize fre(rc=1);
