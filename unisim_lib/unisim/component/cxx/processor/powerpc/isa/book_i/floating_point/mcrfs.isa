/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */
 
impl {
#include <unisim/component/cxx/processor/powerpc/isa/book_i/floating_point/floating.hh>
}

/* Move to Condition Register from FPSCR */
op mcrfs(63[6]:crfD[3]:?[2]:crfS[3]:?[7]:64[10]:?[1]);

mcrfs.execute = {
	if(not CONFIG::HAS_FPU)
	{
		cpu->ThrowException<CPU::ProgramInterrupt::UnimplementedInstruction>();
		return false;
	}
	if(unlikely(not cpu->GetMSR_FP()))
	{
		cpu->ThrowException<CPU::FloatingPointUnavailableInterrupt::FloatingPointUnavailable>();
		return false;
	}

	// Read the input operands
	UINT fpscr = cpu->GetFPSCR();

	// Extract FPSCR source 4-bit field
	UINT c = (fpscr >> 4*crfS) & 0xf;
	
	// Clear copied bits if they are exception bits or FX
	switch(crfS)
	{
	case 0:
		FPSCR::FX::Set(fpscr,UINT(0));
		FPSCR::OX::Set(fpscr,UINT(0));
		break;
	case 1:
		FPSCR::UX::Set(fpscr,UINT(0));
		FPSCR::ZX::Set(fpscr,UINT(0));
		FPSCR::XX::Set(fpscr,UINT(0));
		FPSCR::VXSNAN::Set(fpscr,UINT(0));
	case 2:
		FPSCR::VXISI::Set(fpscr,UINT(0));
		FPSCR::VXIDI::Set(fpscr,UINT(0));
		FPSCR::VXZDZ::Set(fpscr,UINT(0));
		FPSCR::VXIMZ::Set(fpscr,UINT(0));
		break;
	case 3:
		FPSCR::VXVC::Set(fpscr,UINT(0));
		break;
	case 5:
		FPSCR::VXSOFT::Set(fpscr,UINT(0));
		FPSCR::VXSQRT::Set(fpscr,UINT(0));
		FPSCR::VXCVI::Set(fpscr,UINT(0));
		break;
	}
	
	// Copy it into CR 4-bit destination field
	CR& cr = cpu->GetCR();
	switch(crfD)
	{
	case 0: cr.Set<CR::CR0>(c); break;
	case 1: cr.Set<CR::CR1>(c); break;
	case 2: cr.Set<CR::CR2>(c); break;
	case 3: cr.Set<CR::CR3>(c); break;
	case 4: cr.Set<CR::CR4>(c); break;
	case 5: cr.Set<CR::CR5>(c); break;
	case 6: cr.Set<CR::CR6>(c); break;
	case 7: cr.Set<CR::CR7>(c); break;
	}
	
	return true;
};

mcrfs.disasm = {
	os << "mcrfs " << CRPrint(crfD) << ", " << CRPrint(crfS);
};

