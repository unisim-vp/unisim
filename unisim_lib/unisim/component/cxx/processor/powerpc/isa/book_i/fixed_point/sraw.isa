/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

impl {
#include <unisim/component/cxx/processor/powerpc/isa/book_i/fixed_point/integer.hh>
}

op sraw(31[6]:rs[5]:ra[5]:rb[5]:792[10]:rc[1])
sraw.execute = {
	// Read the input operands
	uint32_t s = cpu->GetGPR(rs);
	uint32_t b = cpu->GetGPR(rb);
	XER& xer = cpu->GetXER();
	
	// Compute the result
	int32_t result;

#if 0	
	uint32_t n = b & 0x3f;
	uint32_t r = RotateLeft(s, 32 - n);
	uint32_t m = Mask(n);
	result = (r & m) | (((int32_t) s >> 31) & ~m);
	xer.Set<XER::CA>(((int32_t) s < 0) && ((r & ~m) != 0)));
#else
	if(b & 0x20)
	{
		result = ((int32_t) s < 0) ? 0xffffffffUL : 0;
		xer.Set<XER::CA>(((int32_t) s < 0) && ((s & 0x7fffffffUL) != 0));
	}
	else
	{
		uint32_t n = b & 0x1f;
		if(n)
		{
			result = (int32_t) s >> n;
			xer.Set<XER::CA>(((int32_t) s < 0) && ((s << (32 - n)) != 0));
		}
		else
		{
			result = s;
			xer.Set<XER::CA>(0);
		}
	}
#endif
	
	// Write back the result
	cpu->SetGPR(ra, result);
	
	if(unlikely(rc))
	{
		// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
		CR& cr = cpu->GetCR();
		cr.Set<CR::CR0::SO>(xer.Get<XER::SO>());
		cr.Set<CR::CR0::LT>((int32_t) result < 0);
		cr.Set<CR::CR0::GT>((int32_t) result > 0);
		cr.Set<CR::CR0::EQ>((int32_t) result == 0);
	}
	
	return true;
}
sraw.disasm = {
	os << "sraw" << (rc ? "." : "") << " r" << (unsigned int) ra << ", r" << (unsigned int) rs << ", r" << (unsigned int) rb;
}

specialize sraw(rc=0)
specialize sraw(rc=1)
