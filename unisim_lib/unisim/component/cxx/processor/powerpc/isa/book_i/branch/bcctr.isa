/*
 *  Copyright (c) 2018,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

/* Branch Conditional to Count Register */
op bcctr(19[6]: bo[5]: bi[5]:?[5]:528[10]:lk[1]);

bcctr.execute = {
	if(unlikely(not (bo & 4)))
	{
		cpu->ThrowException<CPU::ProgramInterrupt::IllegalInstruction>();
		return false;
	}
	
	BOOL cond_ok = BOOL(true);
	
	if (((bo & 16) == 0)) {
		/* Conditional branch */
		UINT const msb = ~(UINT(-1)>>1);
		if(bo & 8) {
			/* Branch if condition is true */
			cond_ok = ((cpu->GetCR() << bi) & msb) != 0;
		}
		else {
			/* Branch if condition is false */
			cond_ok = ((cpu->GetCR() << bi) & msb) == 0;
		}
	}
	
	if (cond_ok) {
		ADDRESS target_addr = cpu->GetCTR() & UINT(-4);
		cpu->Branch(target_addr);
	}
	
	if (lk) cpu->GetLR() = (cpu->GetCIA() + 4);
	
	return true;
};

bcctr.disasm = {
	switch(bo)
	{
	case 4: case 5: case 6: case 7:     os << "bfctr"; break;
	case 12: case 13: case 14: case 15: os << "btctr"; break;
	case 20: if (bi == 0)             { os << "bctr";  break; }
	default:                            os << "bcctr"; break;
	}
	
	if (lk) os << "l";
	
	switch(bo)
	{
	case 4: case 5: case 6: case 7:
	case 12: case 13: case 14: case 15: os << " " << unsigned(bi); break;
	case 20: if (bi == 0) break;
	default: os << " " << unsigned(bo) << ", " << unsigned(bi); break;
	}
};

specialize bcctr(bo=0,aa=2,lk=0);
specialize bcctr(bo=0,aa=2,lk=1);
specialize bcctr(bo=1,aa=2,lk=0);
specialize bcctr(bo=1,aa=2,lk=1);
specialize bcctr(bo=2,aa=2,lk=0);
specialize bcctr(bo=2,aa=2,lk=1);
specialize bcctr(bo=3,aa=2,lk=0);
specialize bcctr(bo=3,aa=2,lk=1);
specialize bcctr(bo=4,aa=2,lk=0);
specialize bcctr(bo=4,aa=2,lk=1);
specialize bcctr(bo=5,aa=2,lk=0);
specialize bcctr(bo=5,aa=2,lk=1);
specialize bcctr(bo=6,aa=2,lk=0);
specialize bcctr(bo=6,aa=2,lk=1);
specialize bcctr(bo=7,aa=2,lk=0);
specialize bcctr(bo=7,aa=2,lk=1);
specialize bcctr(bo=8,aa=2,lk=0);
specialize bcctr(bo=8,aa=2,lk=1);
specialize bcctr(bo=9,aa=2,lk=0);
specialize bcctr(bo=9,aa=2,lk=1);
specialize bcctr(bo=10,aa=2,lk=0);
specialize bcctr(bo=10,aa=2,lk=1);
specialize bcctr(bo=11,aa=2,lk=0);
specialize bcctr(bo=11,aa=2,lk=1);
specialize bcctr(bo=12,aa=2,lk=0);
specialize bcctr(bo=12,aa=2,lk=1);
specialize bcctr(bo=13,aa=2,lk=0);
specialize bcctr(bo=13,aa=2,lk=1);
specialize bcctr(bo=14,aa=2,lk=0);
specialize bcctr(bo=14,aa=2,lk=1);
specialize bcctr(bo=15,aa=2,lk=0);
specialize bcctr(bo=15,aa=2,lk=1);
specialize bcctr(bo=16,aa=2,lk=0);
specialize bcctr(bo=16,aa=2,lk=1);
specialize bcctr(bo=17,aa=2,lk=0);
specialize bcctr(bo=17,aa=2,lk=1);
specialize bcctr(bo=18,aa=2,lk=0);
specialize bcctr(bo=18,aa=2,lk=1);
specialize bcctr(bo=19,aa=2,lk=0);
specialize bcctr(bo=19,aa=2,lk=1);
specialize bcctr(bo=20,aa=2,lk=0);
specialize bcctr(bo=20,aa=2,lk=1);
specialize bcctr(bo=21,aa=2,lk=0);
specialize bcctr(bo=21,aa=2,lk=1);
specialize bcctr(bo=22,aa=2,lk=0);
specialize bcctr(bo=22,aa=2,lk=1);
specialize bcctr(bo=23,aa=2,lk=0);
specialize bcctr(bo=23,aa=2,lk=1);
specialize bcctr(bo=24,aa=2,lk=0);
specialize bcctr(bo=24,aa=2,lk=1);
specialize bcctr(bo=25,aa=2,lk=0);
specialize bcctr(bo=25,aa=2,lk=1);
specialize bcctr(bo=26,aa=2,lk=0);
specialize bcctr(bo=26,aa=2,lk=1);
specialize bcctr(bo=27,aa=2,lk=0);
specialize bcctr(bo=27,aa=2,lk=1);
specialize bcctr(bo=28,aa=2,lk=0);
specialize bcctr(bo=28,aa=2,lk=1);
specialize bcctr(bo=29,aa=2,lk=0);
specialize bcctr(bo=29,aa=2,lk=1);
specialize bcctr(bo=30,aa=2,lk=0);
specialize bcctr(bo=30,aa=2,lk=1);
specialize bcctr(bo=31,aa=2,lk=0);
specialize bcctr(bo=31,aa=2,lk=1);
