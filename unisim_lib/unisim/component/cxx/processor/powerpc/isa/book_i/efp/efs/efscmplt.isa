/*
 *  Copyright (c) 2017,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr), Franck Vedrine (franck.vedrine@cea.fr)
 */

op efscmplt(4[6]:bf[3]:?[2]:ra[5]:rb[5]:717[11])
efscmplt.execute = {
	if (!HasGenSPEFSCR<CPU, CONFIG>(cpu))
		return false;

	// Read the input operands and update FPSCR
	CPU::SPEFSCR& spefscr = cpu->GetSPEFSCR();
	SoftFloat a(cpu->GetGPR(ra));
	SoftFloat b(cpu->GetGPR(rb));
	// Generate FINV
	GenSPEFSCR_FINV<CPU::SPEFSCR, CONFIG, SoftFloat>(spefscr, a, &b);

	// Compute the result
	bool result = a < b;

	if (!spefscr.Get<CPU::SPEFSCR::FINVE>() && spefscr.Get<CPU::SPEFSCR::FINV>())
		GenSPEFSCR_DefaultResults(spefscr, result);
	if(unlikely((DoesSPEFSCR_TriggerException<CPU::SPEFSCR, CONFIG>(spefscr)))) {
		GenSPEFSCR_TriggerException<CPU, CONFIG>(cpu);
		return false;
	};

	// Write back the result in CR[bf] bit field
	CR& cr = cpu->GetCR();
	switch(bf)
	{
		case 0:
			cr.Set<CR::CR0::LT>(result);
			break;
		case 1:
			cr.Set<CR::CR1::LT>(result);
			break;
		case 2:
			cr.Set<CR::CR2::LT>(result);
			break;
		case 3:
			cr.Set<CR::CR3::LT>(result);
			break;
		case 4:
			cr.Set<CR::CR4::LT>(result);
			break;
		case 5:
			cr.Set<CR::CR5::LT>(result);
			break;
		case 6:
			cr.Set<CR::CR6::LT>(result);
			break;
		case 7:
			cr.Set<CR::CR7::LT>(result);
			break;
	}

	return true;
}
efscmplt.disasm = {
	os << "efscmplt " << (unsigned int) bf << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}
