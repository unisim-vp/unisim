/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */
 
impl {
#include <unisim/component/cxx/processor/powerpc/isa/book_i/floating_point/floating.hh>
}

op fcmpu(63[6]:crfD[3]:?[2]:fa[5]:fb[5]:0[10]:?[1])
fcmpu.execute = {
	if(not CONFIG::HAS_FPU)
	{
		cpu->SetException(CONFIG::EXC_PROGRAM_UNIMPLEMENTED_INSTRUCTION);
		return false;
	}
	// Check if FPU is enabled
	uint32_t msr = cpu->GetMSR();
	if(unlikely(not (msr & CONFIG::MSR_FP_MASK)))
	{
		cpu->SetException(CONFIG::EXC_FLOATING_POINT_UNAVAILABLE);
		return false;
	}

	// Read the input operands
	uint32_t fpscr = cpu->GetFPSCR();
	uint32_t old_fpscr = fpscr;
	const SoftDouble& a = cpu->GetFPR(fa);
	const SoftDouble& b = cpu->GetFPR(fb);
	
	// Do the floating point comparison
	uint32_t c;
	switch(a.compare(b))
	{
		case SoftDouble::CRNaN: c = 1; break;
		case SoftDouble::CRLess: c = 8; break;
		case SoftDouble::CREqual: c = 2; break;
		case SoftDouble::CRGreater: c = 4; break;
		default:
			throw "Internal error";
	}

	// Generate FPCC
	fpscr = (fpscr & ~CONFIG::FPSCR_FPCC_MASK) | ((c << CONFIG::FPSCR_FPCC_OFFSET) & CONFIG::FPSCR_FPCC_MASK);

	// Generate VXSNAN
	if(unlikely(a.isSNaN() || b.isSNaN()))
	{
		fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
	}

	// Generate FX, VX, FEX
	GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
	GenFPSCR_VX<CONFIG>(fpscr);
	GenFPSCR_FEX<CONFIG>(fpscr);

	// Update FPSCR
	cpu->SetFPSCR(fpscr);

	// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
	if(unlikely(((msr & CONFIG::MSR_FE0_MASK) |
	            (msr & CONFIG::MSR_FE1_MASK)) &&
	            (fpscr & CONFIG::FPSCR_FEX_MASK)))
	{
		// Raise a floating point exception
		cpu->SetException(CONFIG::EXC_PROGRAM_FLOATING_POINT);
		return false;
	}
	
	// CR[crfD] <- c
	cpu->SetCR((cpu->GetCR() & ~(CONFIG::CR0_MASK >> (4 * crfD))) | (c << ((7 - crfD) * 4)));
	
	return true;
}
fcmpu.disasm = {
	os << "fcmpu " << CRPrint(crfD) << ", f" << (unsigned int) fa << ", f" << (unsigned int) fb;
}
