/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

op frsqrte(63[6]:fd[5]:?[5]:fb[5]:?[5]:26[5]:rc[1])
frsqrte.execute = {
	if(not CONFIG::HAS_FPU or not CONFIG::HAS_FLOATING_POINT_GRAPHICS_INSTRUCTIONS)
	{
		cpu->ThrowException<CPU::ProgramInterrupt::UnimplementedInstruction>();
		return false;
	}
	if(unlikely(not cpu->GetMSR_FP()))
	{
		cpu->ThrowException<CPU::FloatingPointUnavailableInterrupt::FloatingPointUnavailable>();
		return false;
	}

	// Read the input operands
	uint32_t fpscr = cpu->GetFPSCR();
	uint32_t old_fpscr = fpscr;
	Flags flags;
	flags.setRoundingMode(RN_NEAREST);
	const SoftDouble& b = cpu->GetFPR(fb);

	if(unlikely(b.isSNaN()))
	{
		// b = SNaN
		if(not (fpscr & CONFIG::FPSCR_VE_MASK))
		{
			// Generate FPRF
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
			// Write back result
			cpu->SetFPR(fd, SoftDouble(b.queryValue() | 0x0008000000000000ULL)); // QNaN (b with high order bit of mantissa set)
		}
		// Generate VXSNAN
		fpscr = fpscr | CONFIG::FPSCR_VXSNAN_MASK;
	}
	else if(unlikely(b.isQNaN()))
	{
		// b = QNaN
		// Generate FPRF
		fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
		// Write back result
		cpu->SetFPR(fd, b); // QNaN (b)
	}
	else if(unlikely(b.isZero()))
	{
		// Generate ZX
		fpscr = fpscr | CONFIG::FPSCR_ZX_MASK;

		if(not (fpscr & CONFIG::FPSCR_ZE_MASK))
		{
			if(b.isNegative())
			{
				// b = -0
				// Write back result
				cpu->SetFPR(fd, SoftDouble(0xfff0000000000000ULL)); // -infinity
				// Generate FPRF
				fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_NEGATIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
			}
			else
			{
				// b = +0
				// Write back result
				cpu->SetFPR(fd, SoftDouble(0x7ff0000000000000ULL)); // +infinity
				// Generate FPRF
				fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_INFINITY << CONFIG::FPSCR_FPRF_OFFSET);
			}
		}
	}
	else if(unlikely(b.isNegative()))
	{
		// -infinity <= b < 0
		if(not (fpscr & CONFIG::FPSCR_VE_MASK))
		{
			// Write back result
			cpu->SetFPR(fd, SoftDouble(0x7ff8000000000000ULL)); // Positive QNaN
			// Generate FPRF
			fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_QNAN << CONFIG::FPSCR_FPRF_OFFSET);
		}
		// Generate VXSQRT
		fpscr = fpscr | CONFIG::FPSCR_VXSQRT_MASK;
	}
	else if(unlikely(b.isInfty()))
	{
		// b = +infinity
		cpu->SetFPR(fd, SoftDouble(0x0000000000000000ULL)); // +0
		// Generate FPRF
		fpscr = (fpscr & ~CONFIG::FPSCR_FPRF_MASK) | (CONFIG::FPRF_FOR_POSITIVE_ZERO << CONFIG::FPSCR_FPRF_OFFSET);
	}
	else
	{
		// 0 < b < infinity

		// First estimation of 1/sqrt(b), seed of Newton-Raphson algorithm
		// see http://www.mceniry.net/papers/Fast%20Inverse%20Square%20Root.pdf
		// mirror: http://www.daxia.com/bibis/upload/406Fast_Inverse_Square_Root.pdf
		// see also: http://www.azillionmonkeys.com/qed/sqroot.html
		SoftDouble u((0xbfcdd6a18f6a6f55ULL - b.queryValue()) >> 1);

		// Newton-Raphson method:  u = u * (3 - b * u²) / 2
		SoftDouble half(0x3fe0000000000000ULL); // 0.5
		SoftDouble one_and_half(0x3ff8000000000000ULL); // 1.5

		SoftDouble v(b);
		v.multAssign(half, flags); // v = b / 2 => u = (3 * u / 2) - u² * u * v
		
		unsigned int i;
		// five iterations are sufficient with 64-bit floating point numbers
		for(i = 0; i < 5; i++)
		{
			// Newton-Raphson iteration
			
			// w = u² * u * b / 2
			SoftDouble w(u);
			w.multAssign(u, flags);
			w.multAssign(u, flags);
			w.multAssign(v, flags);
			
			// u = (3 * u / 2) - (u² * u * b / 2)
			u.multAssign(one_and_half, flags);
			u.minusAssign(w, flags);
		}

		// Write back result
		cpu->SetFPR(fd, u);

		// Generate ZX, VXSNAN, FR, FI, FPRF
		GenFPSCR_ZX<CONFIG>(fpscr, flags);
		GenFPSCR_VXSNAN<CONFIG>(fpscr, flags);
		GenFPSCR_FPRF<CONFIG, SoftDouble>(fpscr, u);
	}

	// Generate XX, FX, VX, FEX
	GenFPSCR_XX<CONFIG>(fpscr);
	GenFPSCR_FX<CONFIG>(fpscr, old_fpscr);
	GenFPSCR_VX<CONFIG>(fpscr);
	GenFPSCR_FEX<CONFIG>(fpscr);

	// Update FPSCR
	cpu->SetFPSCR(fpscr);

	// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
	if(unlikely((cpu->GetMSR().Get<MSR::FE0>() or cpu->GetMSR().Get<MSR::FE1>()) and (cpu->GetFPSCR().Get<FPSCR::FEX>())))
	{
		// Raise a floating point exception
		cpu->ThrowException<CPU::ProgramInterrupt::FloatingPoint>();
		return false;
	}

	// Copy FX, FEX, VX, OX to CR1
	if(unlikely(rc)) { cpu->GetCR().Set<CR::CR1>( cpu->GetFPSCR().Get<FPSCR::_0_3>() ); }
	
	return true;
}
frsqrte.disasm = {
	os << "frsqrte" << (rc ? "." : "") << " f" << (unsigned int) fd << ", f" << (unsigned int) fb;
}

specialize frsqrte(rc=0)
specialize frsqrte(rc=1)
