/*
 *  Copyright (c) 2017,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr), Franck Vedrine (franck.vedrine@cea.fr)
 */

op efsdiv(4[6]:rd[5]:ra[5]:rb[5]:713[11])
efsdiv.execute = {
	if (!cpu->CheckSPV())
		return false;

	// Read the input operands and update FPSCR
	CPU::SPEFSCR& spefscr = cpu->GetSPEFSCR();
	Flags flags;
	flags.setRoundingMode(spefscr.Get<CPU::SPEFSCR::FRMC>());

	SoftFloat result(cpu->GetGPR(ra));
	SoftFloat b(cpu->GetGPR(rb));
	// Generate FINV
	GenSPEFSCR_FINV(spefscr, result, &b, static_cast<SoftFloat*>(0) /*third */, true /* isDivideOperation */);

	// Compute the result
	result.divAssign(b, flags);

	if (unlikely(spefscr.Get<CPU::SPEFSCR::FINV>()))
	{
		if (likely(not spefscr.Get<CPU::SPEFSCR::FINVE>()))
			GenSPEFSCR_DefaultResults(spefscr, result);
	}
	else
		GenSPEFSCR_FDBZ(spefscr, flags);

	// Generate FOFV, FUNF, FINXS, FG, FX
	GenSPEFSCR_FOVF(spefscr, flags);
	GenSPEFSCR_FUNF(spefscr, flags);
	GenSPEFSCR_FINXS(spefscr, flags);
	GenSPEFSCR_FG(spefscr, flags);
	GenSPEFSCR_FX(spefscr, flags);

	// Check for floating point exception condition: (MSR[FE0] ^ MSR[FE1]) & FPSCR[FEX]
	if (unlikely((DoesSPEFSCR_TriggerException(spefscr))))
	{
		GenSPEFSCR_TriggerException(cpu);
		return false;
	};

	// Write back the result
	cpu->SetGPR(rd, result.queryValue());

	return true;
}
efsdiv.disasm = {
	os << "efsdiv r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}
