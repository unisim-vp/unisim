/*
 *  Copyright (c) 2007,
 *  INRIA Futurs
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 *          Eric Renard (erenard@lri.fr)
 *          Sylvain Girbal (sylvain.girbal@inria.fr)
 *          David Parello (david.parello@univ-perp.fr)
 */

{

#include <cstdio>
#include <cstdarg>

namespace unisim {
namespace component {
namespace cxx {
namespace processor {
namespace powerpc {

  //typedef uint32_t registers_written_t;

#define RegNone					0x00000000
#define RegCTR					0x00000001
#define RegLR					0x00000002

typedef uint32_t function_t;

#define FnInvalid				0x00000000
#define FnNop					0x00000001
#define FnIntBasic				0x00000002
#define FnIntBasicSerial			0x00000004
#define FnIntExtended				0x00000008
#define FnFpCommon				0x00000010
#define FnFpFPSCR				0x00000020
#define FnFpFPSCRSerial				0x00000040
#define FnCache					0x00000080
#define FnCacheSerial				0x00000100
#define FnBranch				0x00000200
#define FnConditionalBranch			0x00000400
#define FnBranchCountReg			0x00000800
#define FnBranchLinkReg				0x00001000
#define FnCondRegister				0x00002000
#define FnSysRegister				0x00004000
#define FnSysRegisterSerial			0x00008000
#define FnSysCall				0x00010000
#define FnMac					0x00020000

#define FnLoadInstruction			0x10000000
#define FnLoad					0x10000000
#define FnLoadByteReversed			0x11000000
#define FnLoadFloat				0x12000000
#define FnLoadMultiple				0x13000000
#define FnLoadMultipleRegList                   0x13100000
#define FnLoadString				0x14000000
#define FnLoadStringImm				0x15000000
#define FnLoadSerial				0x16000000

#define FnStore					0x20000000
#define FnStoreByteReversed			0x21000000
#define FnStoreFloat				0x22000000
#define FnStoreMultiple				0x23000000
#define FnStoreMultipleRegList                  0x23100000
#define FnStoreString				0x24000000
#define FnStoreStringImm			0x25000000
#define FnStoreSerial				0x26000000
#define FnDataCacheBA				0x27000000
#define FnDataCacheBF				0x28000000
#define FnDataCacheBI				0x29000000

//STF
#define FnAccelerator				0x40000000
#define FnAcceleratorInit			0x40000001
#define FnAcceleratorMTA			0x40000002
#define FnAcceleratorMFA			0x40000003
//EOSTF

#define FnPrefetchLoad                          0x80000000

  static char *get_function_name(function_t fn)
  { static char buffer[256];
    char *buf = buffer;
    *buf = 0;
    if(!fn) buf += sprintf(buf, "FnInvalid"); 
    else    buf += sprintf(buf, "FnValid");
    return buffer;
  }

} // end of namespace powerpc
} // end of namespace processor
} // end of namespace cxx
} // end of namespace component
} // end of namespace unisim

}

//var registers_written : {registers_written_t} = {0}

/** Functions **/
var function : {function_t} = { FnInvalid }

constructor action initialize_function() {
/*
  Operation<CONFIG>::function = FnInvalid;
  registers_written = RegNone;
*/
}



/** Branch (FnBranch | FnConditionalBranch | FnBranchCountReg | FnBranchLinkReg) **/
b.initialize_function = {
  Operation<CONFIG>::function = FnBranch;
  //  registers_written = (lk ? RegLR : RegNone);
}
bc.initialize_function = {
  Operation<CONFIG>::function = FnConditionalBranch;
  //  registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
}
bcctr.initialize_function = {
  Operation<CONFIG>::function = FnBranchCountReg;
  //  registers_written = (lk ? RegLR : RegNone);
}
bclr.initialize_function = {
  Operation<CONFIG>::function = FnBranchLinkReg;
  //  registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
}

/** System Register (FnSysRegister | FnSysRegisterSerial) **/
eieio.initialize_function =   { Operation<CONFIG>::function = FnSysRegister; }
isync.initialize_function =   { Operation<CONFIG>::function = FnSysRegisterSerial; }
mfmsr.initialize_function =   { Operation<CONFIG>::function = FnSysRegister; }
mfspr.initialize_function =   { Operation<CONFIG>::function = FnSysRegisterSerial; }
mfsr.initialize_function =    { Operation<CONFIG>::function = FnSysRegister; }
mfsrin.initialize_function =  { Operation<CONFIG>::function = FnSysRegisterSerial; }
mftb.initialize_function =    { Operation<CONFIG>::function = FnSysRegister; }
mtmsr.initialize_function =   { Operation<CONFIG>::function = FnSysRegisterSerial; }
mtspr.initialize_function = {
	Operation<CONFIG>::function = FnSysRegisterSerial;
	//uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
	//	registers_written = ((d == 8) ? RegLR : RegNone) | ((d == 9) ? RegCTR : RegNone);
}
mtsr.initialize_function =    { Operation<CONFIG>::function = FnSysRegisterSerial; }
mtsrin.initialize_function =  { Operation<CONFIG>::function = FnSysRegisterSerial; }
rfi.initialize_function =     { Operation<CONFIG>::function = FnSysRegisterSerial; }
sc.initialize_function =      { Operation<CONFIG>::function = FnSysCall; }
sync.initialize_function =    { Operation<CONFIG>::function = FnSysRegister; }
tlbsync.initialize_function = { Operation<CONFIG>::function = FnSysRegister; }
tlbia.initialize_function =   { Operation<CONFIG>::function = FnSysRegister; }
tlbie.initialize_function =   { Operation<CONFIG>::function = FnSysRegister; }

/** Condition Register **/
crand.initialize_function =   { Operation<CONFIG>::function = FnCondRegister; }
crandc.initialize_function =  { Operation<CONFIG>::function = FnCondRegister; }
creqv.initialize_function =   { Operation<CONFIG>::function = FnCondRegister; }
crnand.initialize_function =  { Operation<CONFIG>::function = FnCondRegister; }
crnor.initialize_function =   { Operation<CONFIG>::function = FnCondRegister; }
cror.initialize_function =    { Operation<CONFIG>::function = FnCondRegister; }
crorc.initialize_function =   { Operation<CONFIG>::function = FnCondRegister; }
crxor.initialize_function =   { Operation<CONFIG>::function = FnCondRegister; }
mcrf.initialize_function =    { Operation<CONFIG>::function = FnCondRegister; }
mcrxr.initialize_function =   { Operation<CONFIG>::function = FnCondRegister; }
mfcr.initialize_function =    { Operation<CONFIG>::function = FnCondRegister; }
mtcrf.initialize_function =   { Operation<CONFIG>::function = FnCondRegister; }

/** Integer (FnIntBasic | FnIntBasicSerial | FnIntExtended) **/
add.initialize_function =     { Operation<CONFIG>::function = FnIntBasic; }
addc.initialize_function =    { Operation<CONFIG>::function = FnIntBasic; }
adde.initialize_function =    { Operation<CONFIG>::function = FnIntBasicSerial; }
addi.initialize_function =    { Operation<CONFIG>::function = FnIntBasic; }
addic.initialize_function =   { Operation<CONFIG>::function = FnIntBasic; }
addic_.initialize_function =  { Operation<CONFIG>::function = FnIntBasic; }
addis.initialize_function =   { Operation<CONFIG>::function = FnIntBasic; }
addme.initialize_function =   { Operation<CONFIG>::function = FnIntBasicSerial; }
addze.initialize_function =   { Operation<CONFIG>::function = FnIntBasicSerial; }
divw.initialize_function =    { Operation<CONFIG>::function = FnIntExtended; }
divwu.initialize_function =   { Operation<CONFIG>::function = FnIntExtended; }
mulhw.initialize_function =   { Operation<CONFIG>::function = FnIntBasic; }
mulhwu.initialize_function =  { Operation<CONFIG>::function = FnIntBasic; }
mulli.initialize_function =   { Operation<CONFIG>::function = FnIntExtended; }
mullw.initialize_function =   { Operation<CONFIG>::function = FnIntExtended; }
neg.initialize_function =     { Operation<CONFIG>::function = FnIntBasic; }
subf.initialize_function =    { Operation<CONFIG>::function = FnIntBasic; }
subfc.initialize_function =   { Operation<CONFIG>::function = FnIntBasic; }
subfe.initialize_function =   { Operation<CONFIG>::function = FnIntBasicSerial; }
subfic.initialize_function =  { Operation<CONFIG>::function = FnIntBasic; }
subfme.initialize_function =  { Operation<CONFIG>::function = FnIntBasicSerial; }
subfze.initialize_function =  { Operation<CONFIG>::function = FnIntBasicSerial; }
cmp.initialize_function =     { Operation<CONFIG>::function = FnIntBasic; }
cmpi.initialize_function =    { Operation<CONFIG>::function = FnIntBasic; }
cmpl.initialize_function =    { Operation<CONFIG>::function = FnIntBasic; }
cmpli.initialize_function =   { Operation<CONFIG>::function = FnIntBasic; }
and.initialize_function =     { Operation<CONFIG>::function = FnIntBasic; }
andc.initialize_function =    { Operation<CONFIG>::function = FnIntBasic; }
andi_.initialize_function =   { Operation<CONFIG>::function = FnIntBasic; }
andis_.initialize_function =  { Operation<CONFIG>::function = FnIntBasic; }
cntlzw.initialize_function =  { Operation<CONFIG>::function = FnIntBasic; }
eqv.initialize_function =     { Operation<CONFIG>::function = FnIntBasic; }
extsb.initialize_function =   { Operation<CONFIG>::function = FnIntBasic; }
extsh.initialize_function =   { Operation<CONFIG>::function = FnIntBasic; }
nand.initialize_function =    { Operation<CONFIG>::function = FnIntBasic; }
nor.initialize_function =     { Operation<CONFIG>::function = FnIntBasic; }
or.initialize_function =      { Operation<CONFIG>::function = FnIntBasic; }
orc.initialize_function =     { Operation<CONFIG>::function = FnIntBasic; }
ori.initialize_function =     { Operation<CONFIG>::function = FnIntBasic; }
oris.initialize_function =    { Operation<CONFIG>::function = FnIntBasic; }
xor.initialize_function =     { Operation<CONFIG>::function = FnIntBasic; }
xori.initialize_function =    { Operation<CONFIG>::function = FnIntBasic; }
xoris.initialize_function =   { Operation<CONFIG>::function = FnIntBasic; }
rlwimi.initialize_function =  { Operation<CONFIG>::function = FnIntBasic; }
rlwinm.initialize_function =  { Operation<CONFIG>::function = FnIntBasic; }
rlwnm.initialize_function =   { Operation<CONFIG>::function = FnIntBasic; }
slw.initialize_function =     { Operation<CONFIG>::function = FnIntBasic; }
sraw.initialize_function =    { Operation<CONFIG>::function = FnIntBasic; }
srawi.initialize_function =   { Operation<CONFIG>::function = FnIntBasic; }
srw.initialize_function =     { Operation<CONFIG>::function = FnIntBasic; }
/*
tw.initialize_function =      { Operation<CONFIG>::function = FnIntBasicSerial; }
twi.initialize_function =     { Operation<CONFIG>::function = FnIntBasicSerial; }
*/
tw.initialize_function =      { Operation<CONFIG>::function = FnSysCall; }
twi.initialize_function =     { Operation<CONFIG>::function = FnSysCall; }

/** Floating (FnFpCommon |FnFpFPSCR | FnFpFPSCRSerial) **/
fadd.initialize_function =    { Operation<CONFIG>::function = FnFpCommon; }
fadds.initialize_function =   { Operation<CONFIG>::function = FnFpCommon; }
fdiv.initialize_function =    { Operation<CONFIG>::function = FnFpCommon; }
fdivs.initialize_function =   { Operation<CONFIG>::function = FnFpCommon; }
fmul.initialize_function =    { Operation<CONFIG>::function = FnFpCommon; }
fmuls.initialize_function =   { Operation<CONFIG>::function = FnFpCommon; }
fres.initialize_function =    { Operation<CONFIG>::function = FnFpCommon; }
frsqrte.initialize_function = { Operation<CONFIG>::function = FnFpCommon; }
fsub.initialize_function =    { Operation<CONFIG>::function = FnFpCommon; }
fsubs.initialize_function =   { Operation<CONFIG>::function = FnFpCommon; }
fsel.initialize_function =    { Operation<CONFIG>::function = FnFpCommon; }
fsqrt.initialize_function =   { Operation<CONFIG>::function = FnFpCommon; }
fsqrts.initialize_function =  { Operation<CONFIG>::function = FnFpCommon; }
fmadd.initialize_function =   { Operation<CONFIG>::function = FnFpCommon; }
fmadds.initialize_function =  { Operation<CONFIG>::function = FnFpCommon; }
fmsub.initialize_function =   { Operation<CONFIG>::function = FnFpCommon; }
fmsubs.initialize_function =  { Operation<CONFIG>::function = FnFpCommon; }
fnmadd.initialize_function =  { Operation<CONFIG>::function = FnFpCommon; }
fnmadds.initialize_function = { Operation<CONFIG>::function = FnFpCommon; }
fnmsub.initialize_function =  { Operation<CONFIG>::function = FnFpCommon; }
fnmsubs.initialize_function = { Operation<CONFIG>::function = FnFpCommon; }
fcmpo.initialize_function =   { Operation<CONFIG>::function = FnFpCommon; }
fcmpu.initialize_function =   { Operation<CONFIG>::function = FnFpCommon; }
fctiw.initialize_function =   { Operation<CONFIG>::function = FnFpCommon; }
fctiwz.initialize_function =  { Operation<CONFIG>::function = FnFpCommon; }
frsp.initialize_function =    { Operation<CONFIG>::function = FnFpCommon; }
fabs.initialize_function =    { Operation<CONFIG>::function = FnFpCommon; }
fmr.initialize_function =     { Operation<CONFIG>::function = FnFpCommon; }
fnabs.initialize_function =   { Operation<CONFIG>::function = FnFpCommon; }
fneg.initialize_function =    { Operation<CONFIG>::function = FnFpCommon; }
mcrfs.initialize_function =   { Operation<CONFIG>::function = FnFpFPSCRSerial; }
mffs.initialize_function =    { Operation<CONFIG>::function = FnFpFPSCRSerial; }
mtfsb0.initialize_function =  { Operation<CONFIG>::function = FnFpFPSCR; }
mtfsb1.initialize_function =  { Operation<CONFIG>::function = FnFpFPSCR; }
mtfsf.initialize_function =   { Operation<CONFIG>::function = FnFpFPSCR; }
mtfsfi.initialize_function =  { Operation<CONFIG>::function = FnFpFPSCR; }

/** Load Store (FnLoad | FnLoadFloat | FnLoadMultiple | FnLoadSerial | FnStore | FnStoreFloat | FnStoreMultiple | FnStoreSerial | FnCache | FnCacheSerial) **/
dcba.initialize_function =    { Operation<CONFIG>::function = FnDataCacheBA; }
dcbf.initialize_function =    { Operation<CONFIG>::function = FnDataCacheBF; }
dcbi.initialize_function =    { Operation<CONFIG>::function = FnDataCacheBI; }
dcbst.initialize_function =   { Operation<CONFIG>::function = FnCacheSerial; }
dcbt.initialize_function =    { Operation<CONFIG>::function = FnCache; }
dcbtst.initialize_function =  { Operation<CONFIG>::function = FnCache; }
dcbz.initialize_function =    { Operation<CONFIG>::function = FnCacheSerial; }
eciwx.initialize_function =   { Operation<CONFIG>::function = FnLoad; }
ecowx.initialize_function =   { Operation<CONFIG>::function = FnStore; }
icbi.initialize_function =    { Operation<CONFIG>::function = FnCacheSerial; }
lbz.initialize_function =     { Operation<CONFIG>::function = FnLoad; }
lbzu.initialize_function =    { Operation<CONFIG>::function = FnLoad; }
lbzux.initialize_function =   { Operation<CONFIG>::function = FnLoad; }
lbzx.initialize_function =    { Operation<CONFIG>::function = FnLoad; }
lha.initialize_function =     { Operation<CONFIG>::function = FnLoad; }
lhau.initialize_function =    { Operation<CONFIG>::function = FnLoad; }
lhaux.initialize_function =   { Operation<CONFIG>::function = FnLoad; }
lhax.initialize_function =    { Operation<CONFIG>::function = FnLoad; }
lhz.initialize_function =     { Operation<CONFIG>::function = FnLoad; }
lhzu.initialize_function =    { Operation<CONFIG>::function = FnLoad; }
lhzux.initialize_function =   { Operation<CONFIG>::function = FnLoad; }
lhzx.initialize_function =    { Operation<CONFIG>::function = FnLoad; }
lwz.initialize_function =     { Operation<CONFIG>::function = FnLoad; }
lwzu.initialize_function =    { Operation<CONFIG>::function = FnLoad; }
lwzux.initialize_function =   { Operation<CONFIG>::function = FnLoad; }
lwzx.initialize_function =    { Operation<CONFIG>::function = FnLoad; }
stb.initialize_function =     { Operation<CONFIG>::function = FnStore; }
stbu.initialize_function =    { Operation<CONFIG>::function = FnStore; }
stbux.initialize_function =   { Operation<CONFIG>::function = FnStore; }
stbx.initialize_function =    { Operation<CONFIG>::function = FnStore; }
sth.initialize_function =     { Operation<CONFIG>::function = FnStore; }
sthu.initialize_function =    { Operation<CONFIG>::function = FnStore; }
sthux.initialize_function =   { Operation<CONFIG>::function = FnStore; }
sthx.initialize_function =    { Operation<CONFIG>::function = FnStore; }
stw.initialize_function =     { Operation<CONFIG>::function = FnStore; }
stwu.initialize_function =    { Operation<CONFIG>::function = FnStore; }
stwux.initialize_function =   { Operation<CONFIG>::function = FnStore; }
stwx.initialize_function =    { Operation<CONFIG>::function = FnStore; }
lhbrx.initialize_function =   { Operation<CONFIG>::function = FnLoadByteReversed; }
lwbrx.initialize_function =   { Operation<CONFIG>::function = FnLoadByteReversed; }
sthbrx.initialize_function =  { Operation<CONFIG>::function = FnStoreByteReversed; }
stwbrx.initialize_function =  { Operation<CONFIG>::function = FnStoreByteReversed; }
lmw.initialize_function =     { Operation<CONFIG>::function = FnLoadMultiple; }
lswi.initialize_function =    { Operation<CONFIG>::function = FnLoadStringImm; }
lswx.initialize_function =    { Operation<CONFIG>::function = FnLoadString; }
stswi.initialize_function =   { Operation<CONFIG>::function = FnStoreStringImm; }
stswx.initialize_function =   { Operation<CONFIG>::function = FnStoreString; }
stmw.initialize_function =    { Operation<CONFIG>::function = FnStoreMultiple; }
lfd.initialize_function =     { Operation<CONFIG>::function = FnLoadFloat; }
lfdu.initialize_function =    { Operation<CONFIG>::function = FnLoadFloat; }
lfdux.initialize_function =   { Operation<CONFIG>::function = FnLoadFloat; }
lfdx.initialize_function =    { Operation<CONFIG>::function = FnLoadFloat; }
lfs.initialize_function =     { Operation<CONFIG>::function = FnLoadFloat; }
lfsu.initialize_function =    { Operation<CONFIG>::function = FnLoadFloat; }
lfsux.initialize_function =   { Operation<CONFIG>::function = FnLoadFloat; }
lfsx.initialize_function =    { Operation<CONFIG>::function = FnLoadFloat; }
stfd.initialize_function =    { Operation<CONFIG>::function = FnStoreFloat; }
stfdu.initialize_function =   { Operation<CONFIG>::function = FnStoreFloat; }
stfdux.initialize_function =  { Operation<CONFIG>::function = FnStoreFloat; }
stfdx.initialize_function =   { Operation<CONFIG>::function = FnStoreFloat; }
stfiwx.initialize_function =  { Operation<CONFIG>::function = FnStoreFloat; }
stfs.initialize_function =    { Operation<CONFIG>::function = FnStoreFloat; }
stfsu.initialize_function =   { Operation<CONFIG>::function = FnStoreFloat; }
stfsux.initialize_function =  { Operation<CONFIG>::function = FnStoreFloat; }
stfsx.initialize_function =   { Operation<CONFIG>::function = FnStoreFloat; }
lwarx.initialize_function =   { Operation<CONFIG>::function = FnLoad; }
stwcx_.initialize_function =  { Operation<CONFIG>::function = FnStoreSerial; }
