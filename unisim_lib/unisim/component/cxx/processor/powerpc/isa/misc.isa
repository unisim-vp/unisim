/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */
 
/*************************************

	SYSTEM LINKAGE INSTRUCTIONS

*************************************/

op sc(17[6]:?[24]:1[1]:?[1])
sc.execute = {
	cpu->FlushSubsequentInstructions();
	throw SystemCallException<CONFIG>();
}
sc.disasm = {
	os << "sc";
}

op rfi(19[6]:?[15]:50[10]:?[1])
rfi.execute = {
	cpu->FlushSubsequentInstructions();
	uint32_t msr = cpu->GetMSR();
	if(unlikely(msr & CONFIG::MSR_PR_MASK)) throw PrivilegeViolationException<CONFIG>();

	cpu->SetNIA(cpu->GetSRR0() & 0xfffffffcUL);
	cpu->SetMSR((msr & 0xffff008cUL) | (cpu->GetSRR1() & 0x0000ff73UL));
}
rfi.disasm = {
	os << "rfi" << endl;
}

/***************************

	TRAP INSTRUCTIONS

***************************/

op tw(31[6]:to[5]:ra[5]:rb[5]:4[10]:?[1])
tw.execute = {
	int32_t a, b;
	int trap;
	a = cpu->GetGPR(ra);
	b = cpu->GetGPR(rb);
	trap = 0;
	if(a < b && (to & 16)) trap = 1;
	if(a > b && (to & 8)) trap = 1;
	if(a == b && (to & 4)) trap = 1;
	if((uint32_t) a < (uint32_t) b && (to & 2)) trap = 1;
	if((uint32_t) a > (uint32_t) b && (to & 1)) trap = 1;
	if(unlikely(trap)) throw TrapException<CONFIG>();
}
tw.disasm = {
	os << "tw " << (unsigned int) to << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op twi(03[6]:to[5]:ra[5]:sext<32> simm[16])
twi.execute = {
	int32_t a;
	int trap;
	a = (int32_t) cpu->GetGPR(ra);
	trap = 0;
	if(a < simm && (to & 16)) trap = 1;
	if(a > simm && (to & 8)) trap = 1;
	if(a == simm && (to & 4)) trap = 1;
	if((uint32_t) a < (uint32_t) simm && (to & 2)) trap = 1;
	if((uint32_t) a > (uint32_t) simm && (to & 1)) trap = 1;
	if(unlikely(trap)) throw TrapException<CONFIG>();
}
twi.disasm = {
	os << "twi " << (unsigned int) to << ", r" << (unsigned int) ra << ", " << simm;
}

/******************************************

	PROCESSOR CONTROL INSTRUCTIONS

******************************************/
op mcrxr(31[6]:crfD[3]:?[12]:512[10]:?[1])
mcrxr.execute = {
	// Read XER
	uint32_t xer = cpu->GetXER();
	
	// Read CR
	uint32_t cr = cpu->GetCR();
	
	// Generate CR[crfD]: CR[crfD]=XER[0-3]
	cr = (cr & ~(CONFIG::CR0_MASK >> (4 * crfD))) | ((xer & 0xf0000000UL) >> (4 * crfD));
	
	// Reset XER[0-3]
	xer = xer & 0x0fffffffUL;

	// Update CR
	cpu->SetCR(cr);
	
	// Update XER
	cpu->SetXER(xer);
}
mcrxr.disasm = {
	os << "mcrxr cr" << (unsigned int) crfD;
}

op mfcr(31[6]:rd[5]:?[10]:19[10]:?[1])
mfcr.execute = {
	// Move CR to destination GPR
	cpu->SetGPR(rd, cpu->GetCR());
}
mfcr.disasm = {
	os << "mfcr r" << (unsigned int) rd;
}

op mfmsr(31[6]:rd[5]:?[10]:83[10]:?[1])
mfmsr.execute = {
	uint32_t msr = cpu->GetMSR();
	if(unlikely(msr & CONFIG::MSR_PR_MASK)) throw PrivilegeViolationException<CONFIG>();

	// Move MSR to destination GPR
	cpu->SetGPR(rd, msr);
}
mfmsr.disasm = {
	os << "mfmsr r" << (unsigned int) rd;
}

op mfspr(31[6]:rd[5]:spr[10]:339[10]:?[1])
mfspr.execute = {
	uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
	uint32_t result = cpu->GetSPR(n);
	cpu->SetGPR(rd, result);
}
mfspr.disasm = {
	uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
	switch(n)
	{
		case 1: os << "mfxer r" << (unsigned int) rd;
		case 8: os << "mflr r" << (unsigned int) rd; return;
		case 9: os << "mfctr r" << (unsigned int) rd; return;
		case 22: os << "mfdec r" << (unsigned int) rd; return;
		case 528: os << "mfibatu r" << (unsigned int) rd << ", 0"; return;
		case 529: os << "mfibatl r" << (unsigned int) rd << ", 0"; return;
		case 530: os << "mfibatu r" << (unsigned int) rd << ", 1"; return;
		case 531: os << "mfibatl r" << (unsigned int) rd << ", 1"; return;
		case 532: os << "mfibatu r" << (unsigned int) rd << ", 2"; return;
		case 533: os << "mfibatl r" << (unsigned int) rd << ", 2"; return;
		case 534: os << "mfibatu r" << (unsigned int) rd << ", 3"; return;
		case 535: os << "mfibatl r" << (unsigned int) rd << ", 3"; return;
		case 536: os << "mfdbatu r" << (unsigned int) rd << ", 0"; return;
		case 537: os << "mfdbatl r" << (unsigned int) rd << ", 0"; return;
		case 538: os << "mfdbatu r" << (unsigned int) rd << ", 1"; return;
		case 539: os << "mfdbatl r" << (unsigned int) rd << ", 1"; return;
		case 540: os << "mfdbatu r" << (unsigned int) rd << ", 2"; return;
		case 541: os << "mfdbatl r" << (unsigned int) rd << ", 2"; return;
		case 542: os << "mfdbatu r" << (unsigned int) rd << ", 3"; return;
		case 543: os << "mfdbatl r" << (unsigned int) rd << ", 3"; return;
		case 560: os << "mfibatu r" << (unsigned int) rd << ", 4"; return;
		case 561: os << "mfibatl r" << (unsigned int) rd << ", 4"; return;
		case 562: os << "mfibatu r" << (unsigned int) rd << ", 5"; return;
		case 563: os << "mfibatl r" << (unsigned int) rd << ", 5"; return;
		case 564: os << "mfibatu r" << (unsigned int) rd << ", 6"; return;
		case 565: os << "mfibatl r" << (unsigned int) rd << ", 6"; return;
		case 566: os << "mfibatu r" << (unsigned int) rd << ", 7"; return;
		case 567: os << "mfibatl r" << (unsigned int) rd << ", 7"; return;
		case 568: os << "mfdbatu r" << (unsigned int) rd << ", 4"; return;
		case 569: os << "mfdbatl r" << (unsigned int) rd << ", 4"; return;
		case 570: os << "mfdbatu r" << (unsigned int) rd << ", 5"; return;
		case 571: os << "mfdbatl r" << (unsigned int) rd << ", 5"; return;
		case 572: os << "mfdbatu r" << (unsigned int) rd << ", 6"; return;
		case 573: os << "mfdbatl r" << (unsigned int) rd << ", 6"; return;
		case 574: os << "mfdbatu r" << (unsigned int) rd << ", 7"; return;
		case 575: os << "mfdbatl r" << (unsigned int) rd << ", 7"; return;
	}

	os << "mfspr r" << (unsigned int) rd << ", " << n;
}

op mtspr(31[6]:rs[5]:spr[10]:467[10]:?[1])
mtspr.execute = {
	uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
	uint32_t result = cpu->GetGPR(rs);
	cpu->SetSPR(n, result);
}
mtspr.disasm = {
	uint32_t n = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
	switch(n)
	{
		case 1: os << "mtxer r" << (unsigned int) rs; return;
		case 8: os << "mtlr r" << (unsigned int) rs; return;
		case 9: os << "mtctr r" << (unsigned int) rs; return;
		case 22: os << "mtdec r" << (unsigned int) rs; return;
		case 528: os << "mtibatu 0, r" << (unsigned int) rs; return;
		case 529: os << "mtibatl 0, r" << (unsigned int) rs; return;
		case 530: os << "mtibatu 1, r" << (unsigned int) rs; return;
		case 531: os << "mtibatl 1, r" << (unsigned int) rs; return;
		case 532: os << "mtibatu 2, r" << (unsigned int) rs; return;
		case 533: os << "mtibatl 2, r" << (unsigned int) rs; return;
		case 534: os << "mtibatu 3, r" << (unsigned int) rs; return;
		case 535: os << "mtibatl 3, r" << (unsigned int) rs; return;
		case 536: os << "mtdbatu 0, r" << (unsigned int) rs; return;
		case 537: os << "mtdbatl 0, r" << (unsigned int) rs; return;
		case 538: os << "mtdbatu 1, r" << (unsigned int) rs; return;
		case 539: os << "mtdbatl 1, r" << (unsigned int) rs; return;
		case 540: os << "mtdbatu 2, r" << (unsigned int) rs; return;
		case 541: os << "mtdbatl 2, r" << (unsigned int) rs; return;
		case 542: os << "mtdbatu 3, r" << (unsigned int) rs; return;
		case 543: os << "mtdbatl 3, r" << (unsigned int) rs; return;
		case 560: os << "mtibatu 4, r" << (unsigned int) rs; return;
		case 561: os << "mtibatl 4, r" << (unsigned int) rs; return;
		case 562: os << "mtibatu 5, r" << (unsigned int) rs; return;
		case 563: os << "mtibatl 5, r" << (unsigned int) rs; return;
		case 564: os << "mtibatu 6, r" << (unsigned int) rs; return;
		case 565: os << "mtibatl 6, r" << (unsigned int) rs; return;
		case 566: os << "mtibatu 7, r" << (unsigned int) rs; return;
		case 567: os << "mtibatl 7, r" << (unsigned int) rs; return;
		case 568: os << "mtdbatu 4, r" << (unsigned int) rs; return;
		case 569: os << "mtdbatl 4, r" << (unsigned int) rs; return;
		case 570: os << "mtdbatu 5, r" << (unsigned int) rs; return;
		case 571: os << "mtdbatl 5, r" << (unsigned int) rs; return;
		case 572: os << "mtdbatu 6, r" << (unsigned int) rs; return;
		case 573: os << "mtdbatl 6, r" << (unsigned int) rs; return;
		case 574: os << "mtdbatu 7, r" << (unsigned int) rs; return;
		case 575: os << "mtdbatl 7, r" << (unsigned int) rs; return;
	}

	os << "mtspr " << n << ", r" << (unsigned int) rs;
}

op mftb(31[6]:rd[5]:tbr[10]:371[10]:?[1])
mftb.execute = {
	uint32_t d;
	d = ((tbr & 0x1F) << 5) + ((tbr >> 5) & 0x1F);
	switch(d)
	{
		case 268: cpu->SetGPR(rd, cpu->GetTBL()); break;
		case 269: cpu->SetGPR(rd, cpu->GetTBU()); break;
		default:
			/* illegal instruction */
			throw IllegalInstructionException<CONFIG>();
	}
}
mftb.disasm = {
	os << "mftb r" << (unsigned int) rd << ", " << (unsigned int) tbr;
}

op mtcrf(31[6]:rs[5]:?[1]:crm[8]:?[1]:144[10]:?[1])
mtcrf.execute = {
	// Read the input operands
	uint32_t s = cpu->GetGPR(rs);
	uint32_t cr = cpu->GetCR();
	
	// Generate a bit mask of bits to move from source GPR to CR
	uint32_t m = 128;
	uint32_t mask = 0;
	unsigned int i = 8; // Hope compiler will unroll the loop !
	do
	{
		mask = (crm & m) ? (mask << 4) | 0xf : mask << 4;
	} while(m >>= 1, --i);
	
	// Apply the bit mask
	cr = (cr & ~mask) | (s & mask);
	
	// Update CR
	cpu->SetCR(cr);
}
mtcrf.disasm = {
	if(crm == 0xff)
		os << "mtcr r" << (unsigned int) rs;
	else
		os << "mtcrf " << (unsigned int) crm << ", r" << (unsigned int) rs;
}

op mtmsr(31[6]:rs[5]:?[10]:146[10]:?[1])
mtmsr.execute = {
	uint32_t msr = cpu->GetMSR();
	if(unlikely(msr & CONFIG::MSR_PR_MASK)) throw PrivilegeViolationException<CONFIG>();

	cpu->SetMSR(cpu->GetGPR(rs));
}
mtmsr.disasm = {
	os << "mtmsr r" << (unsigned int) rs;
}
