/*
 *  Copyright (c) 2016-2017,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 *          Yves Lhuillier (yves.lhuillier@cea.fr)
 */

impl {
#include <unisim/component/cxx/processor/powerpc/isa/book_vle/vle.hh>
}

/* Shift Right Algebraic Word */
op se_sraw(16[6]:1[2]:sext sry[4]:sext srx[4]);
se_sraw.var rx : {uint8_t} = {srx & 31}, ry : {uint8_t} = {sry & 31};

se_sraw.execute = {
	// Read the input operands
	CPU::U32 s = cpu->GetGPR(rx);
	CPU::U32 y = cpu->GetGPR(ry);
	XER& xer = cpu->GetXER();
	
	// Compute the result
	int32_t result;

	if(y & 0x20)
	{
		result = ((int32_t) s < 0) ? 0xffffffffUL : 0;
		xer.Set<XER::CA>(((int32_t) s < 0) && ((s & 0x7fffffffUL) != 0));
	}
	else
	{
		unsigned int n = y & 0x1f;
		if(n)
		{
			result = (int32_t) s >> n;
			xer.Set<XER::CA>(((int32_t) s < 0) && ((s << (32 - n)) != 0));
		}
		else
		{
			result = s;
			xer.Set<XER::CA>(0);
		}
	}
	
	// Write back the result
	cpu->SetGPR(rx, result);
	
	return true;
}

se_sraw.disasm = {
	os << "se_sraw " << GPRPrint(rx) << ',' << GPRPrint(ry);
}
