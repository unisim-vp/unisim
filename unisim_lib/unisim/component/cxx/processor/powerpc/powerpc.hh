/*** File generated by GenISSLib version 2.1: DO NOT MODIFY ***/
#ifndef __powerpc_unisim__component__cxx__processor__powerpc_HH__
#define __powerpc_unisim__component__cxx__processor__powerpc_HH__
#ifndef __STDC_FORMAT_MACROS
#define __STDC_FORMAT_MACROS
#endif

#include <vector>
#include <inttypes.h>
#include <cstring>
namespace unisim { namespace component { namespace cxx { namespace processor { namespace powerpc {
typedef uint32_t CodeType;

template <
#line 38 "ppc.isa"
class
#line 18 "powerpc.hh"
#line 38 "ppc.isa"
CONFIG
#line 21 "powerpc.hh"
>
class Operation;
const unsigned int NUM_OPERATIONS_PER_PAGE = 4096;
template <
#line 38 "ppc.isa"
class
#line 28 "powerpc.hh"
#line 38 "ppc.isa"
CONFIG
#line 31 "powerpc.hh"
>
class DecodeMapPage
{
public:
	DecodeMapPage(typename CONFIG::address_t key);
	~DecodeMapPage();
	typename CONFIG::address_t key;
	DecodeMapPage *next;
	Operation<
#line 38 "ppc.isa"
	CONFIG
#line 43 "powerpc.hh"
	> *operation[NUM_OPERATIONS_PER_PAGE];
};

template <
#line 38 "ppc.isa"
class
#line 50 "powerpc.hh"
#line 38 "ppc.isa"
CONFIG
#line 53 "powerpc.hh"
>
class DecodeTableEntry
{
public:
	DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 38 "ppc.isa"
	CONFIG
#line 61 "powerpc.hh"
	> *(*decode)(CodeType, typename CONFIG::address_t));
	CodeType opcode;
	CodeType opcode_mask;
	Operation<
#line 38 "ppc.isa"
	CONFIG
#line 68 "powerpc.hh"
	> *(*decode)(CodeType code, typename CONFIG::address_t addr);
};
const unsigned int NUM_DECODE_HASH_TABLE_ENTRIES = 4096;
template <
#line 38 "ppc.isa"
class
#line 75 "powerpc.hh"
#line 38 "ppc.isa"
CONFIG
#line 78 "powerpc.hh"
>
class Decoder
{
public:
	Decoder();
	virtual ~Decoder();

	Operation<
#line 38 "ppc.isa"
	CONFIG
#line 89 "powerpc.hh"
	>*NCDecode(typename CONFIG::address_t addr);
	Operation<
#line 38 "ppc.isa"
	CONFIG
#line 94 "powerpc.hh"
	> *NCDecode(typename CONFIG::address_t addr, CodeType code);
	Operation<
#line 38 "ppc.isa"
	CONFIG
#line 99 "powerpc.hh"
	> *Decode(typename CONFIG::address_t addr, CodeType insn);
	std::vector<DecodeTableEntry<
#line 38 "ppc.isa"
	CONFIG
#line 104 "powerpc.hh"
	> > const& GetDecodeTable() const { return decode_table; };
	void InvalidateDecodingCacheEntry(typename CONFIG::address_t addr);
	void InvalidateDecodingCache();

	void SetLittleEndian();
	void SetBigEndian();
private:
	bool is_little_endian;
	std::vector<DecodeTableEntry<
#line 38 "ppc.isa"
	CONFIG
#line 116 "powerpc.hh"
	> > decode_table;
	DecodeMapPage<
#line 38 "ppc.isa"
	CONFIG
#line 121 "powerpc.hh"
	> *mru_page;
	DecodeMapPage<
#line 38 "ppc.isa"
	CONFIG
#line 126 "powerpc.hh"
	> *decode_hash_table[NUM_DECODE_HASH_TABLE_ENTRIES];
	DecodeMapPage<
#line 38 "ppc.isa"
	CONFIG
#line 131 "powerpc.hh"
	> *FindPage(typename CONFIG::address_t page_key)
#if defined(__GNUC__) && (__GNUC__ >= 3 && (__GNUC__ != 3 || __GNUC_MINOR__ != 4 || __GNUC_PATCHLEVEL__ != 6))
	__attribute__((always_inline))
#endif
	;
};

} } } } }
#line 40 "ppc.isa"

#include <iosfwd>
#include <unisim/component/cxx/processor/powerpc/exception.hh>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					using std::ostream;

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 159 "powerpc.hh"
#line 38 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"


#include <stdarg.h>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					//typedef uint32_t registers_written_t;

#define RegNone					0x00000000
#define RegCTR					0x00000001
#define RegLR					0x00000002

					typedef uint32_t function_t;

#define FnInvalid				0x00000000
#define FnNop					0x00000001
#define FnIntBasic				0x00000002
#define FnIntBasicSerial			0x00000004
#define FnIntExtended				0x00000008
#define FnFpCommon				0x00000010
#define FnFpFPSCR				0x00000020
#define FnFpFPSCRSerial				0x00000040
#define FnCache					0x00000080
#define FnCacheSerial				0x00000100
#define FnBranch				0x00000200
#define FnConditionalBranch			0x00000400
#define FnBranchCountReg			0x00000800
#define FnBranchLinkReg				0x00001000
#define FnCondRegister				0x00002000
#define FnSysRegister				0x00004000
#define FnSysRegisterSerial			0x00008000
#define FnSysCall				0x00010000
#define FnMac					0x00020000

#define FnLoadInstruction			0x10000000
#define FnLoad					0x10000000
#define FnLoadByteReversed			0x11000000
#define FnLoadFloat				0x12000000
#define FnLoadMultiple				0x13000000
#define FnLoadMultipleRegList                   0x13100000
#define FnLoadString				0x14000000
#define FnLoadStringImm				0x15000000
#define FnLoadSerial				0x16000000

#define FnStore					0x20000000
#define FnStoreByteReversed			0x21000000
#define FnStoreFloat				0x22000000
#define FnStoreMultiple				0x23000000
#define FnStoreMultipleRegList                  0x23100000
#define FnStoreString				0x24000000
#define FnStoreStringImm			0x25000000
#define FnStoreSerial				0x26000000
#define FnDataCacheBA				0x27000000
#define FnDataCacheBF				0x28000000
#define FnDataCacheBI				0x29000000

					//STF
#define FnAccelerator				0x40000000
#define FnAcceleratorInit			0x40000001
#define FnAcceleratorMTA			0x40000002
#define FnAcceleratorMFA			0x40000003
					//EOSTF

#define FnPrefetchLoad                          0x80000000

					static char *get_function_name(function_t fn)
					{ static char buffer[256];
						char *buf = buffer;
						*buf = 0;
						if(!fn) buf += sprintf(buf, "FnInvalid");
						else    buf += sprintf(buf, "FnValid");
						return buffer;
					}

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 245 "powerpc.hh"
#line 37 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"


namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {


					typedef unsigned int latencies_t[8];
#define LAT(lat) (Operation<CONFIG>::latencies[Operation<CONFIG>::nstages++] = (lat), Operation<CONFIG>::latency += (lat))

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 265 "powerpc.hh"
#line 66 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"


#include <stdarg.h>
#include <sstream>
#include <string>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					using std::stringstream;
					using std::string;

					// DD New depencies are arriving ...
					/*
					typedef enum operand_type_t { GPR_T, FPR_T, CRF_T, CRB_T, FPSCRF_T,
						SR_T, CR_T , BO_T, BD_T, IMM_T, NONE_REGISTER} operand_type_t;
					*/
					/* New operand types for superscalar simulator... */
					typedef enum operand_type_t { GPR_T, FPR_T, CRF_T, CRB_T, FPSCRF_T, SR_T, BO_T, BD_T, IMM_T,
						CR_T, FPSCR_T, LR_T, CTR_T, XER_T, NONE_REGISTER} operand_type_t;


					typedef enum operand_direction_t { INPUT_T, OUTPUT_T } operand_direction_t;

					typedef struct operand_t
					{
						operand_type_t type;
						operand_direction_t dir;
						int value;
						struct operand_t *next;
					} operand_t;


#define INPUT(_type, _value) \
					{\
						Operation<CONFIG>::operands[Operation<CONFIG>::noperands].type = _type;\
						Operation<CONFIG>::operands[Operation<CONFIG>::noperands].dir = INPUT_T;\
						Operation<CONFIG>::operands[Operation<CONFIG>::noperands++].value = _value;\
					}

#define OUTPUT(_type, _value) \
					{\
						Operation<CONFIG>::operands[Operation<CONFIG>::noperands].type = _type;\
						Operation<CONFIG>::operands[Operation<CONFIG>::noperands].dir = OUTPUT_T;\
						Operation<CONFIG>::operands[Operation<CONFIG>::noperands++].value = _value;\
					}

					typedef operand_t operands_t[64];


				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 326 "powerpc.hh"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"

#include <list>
#include <iostream>
#include <stdlib.h>

namespace unisim {
	namespace component {
		namespace cxx {
			namespace processor {
				namespace powerpc {

					using std::list;
					using std::endl;
					using std::cerr;

				} // end of namespace powerpc
			} // end of namespace processor
		} // end of namespace cxx
	} // end of namespace component
} // end of namespace unisim

#line 349 "powerpc.hh"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace powerpc {
template <
#line 38 "ppc.isa"
class
#line 354 "powerpc.hh"
#line 38 "ppc.isa"
CONFIG
#line 357 "powerpc.hh"
>
class Operation
{
public:
	Operation(CodeType code, typename CONFIG::address_t addr, const char *name);
	virtual ~Operation();
	inline typename CONFIG::address_t GetAddr() const { return addr; }
	inline CodeType GetEncoding() const { return encoding; }
	inline unsigned int GetLength() const { return 32; }
	inline const char *GetName() const { return name; }
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	unsigned int num_uops;
#line 370 "powerpc.hh"
#line 36 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	unsigned int num_insn_operands;
#line 373 "powerpc.hh"
#line 37 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	typename CONFIG::operands_t insn_operands;
#line 376 "powerpc.hh"
#line 38 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	typename CONFIG::execution_unit_type_t execution_unit;
#line 379 "powerpc.hh"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	typename CONFIG::serialization_t serialization;
#line 382 "powerpc.hh"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	unsigned int insn_latency;
#line 385 "powerpc.hh"
#line 41 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	unsigned int insn_inv_thoughput;
#line 388 "powerpc.hh"
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_ppc.isa"
	function_t function;
#line 391 "powerpc.hh"
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
	unsigned int latency;
#line 394 "powerpc.hh"
#line 58 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
	int nstages;
#line 397 "powerpc.hh"
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_latencies.isa"
	latencies_t latencies;
#line 400 "powerpc.hh"
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
	int noperands;
#line 403 "powerpc.hh"
#line 128 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_dependencies.isa"
	operands_t operands;
#line 406 "powerpc.hh"
	virtual
#line 784 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	bool
#line 410 "powerpc.hh"
	is_sign_extended( );
	virtual
#line 771 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	bool
#line 415 "powerpc.hh"
	load_need_conversion( );
	virtual
#line 759 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	bool
#line 420 "powerpc.hh"
	store_need_conversion( );
	virtual
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	uint32_t
#line 425 "powerpc.hh"
	get_single(
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	typename CONFIG::STATE *
#line 429 "powerpc.hh"
#line 729 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	cpu
#line 432 "powerpc.hh"
	);
	virtual
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	list <Operation<CONFIG> *>
#line 437 "powerpc.hh"
	split_into( );
	virtual
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	bool
#line 442 "powerpc.hh"
	is_splitted( );
	virtual
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	typename CONFIG::address_t
#line 447 "powerpc.hh"
	loadstore_effective_address(
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	typename CONFIG::STATE *
#line 451 "powerpc.hh"
#line 249 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	cpu
#line 454 "powerpc.hh"
	);
	virtual
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	int
#line 459 "powerpc.hh"
	loadstore_string_numbyte(
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	typename CONFIG::STATE *
#line 463 "powerpc.hh"
#line 231 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	cpu
#line 466 "powerpc.hh"
	);
	virtual
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	int
#line 471 "powerpc.hh"
	memory_access_size( );
	virtual
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	int
#line 476 "powerpc.hh"
	loadstore_target_register(
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	typename CONFIG::STATE *
#line 480 "powerpc.hh"
#line 62 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_load.isa"
	cpu
#line 483 "powerpc.hh"
	);
	virtual
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	bool
#line 488 "powerpc.hh"
	branch_conditioned( );
	virtual
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	bool
#line 493 "powerpc.hh"
	branch_linked( );
	virtual
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	bool
#line 498 "powerpc.hh"
	branch_statically_predicted_taken(
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::STATE *
#line 502 "powerpc.hh"
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cpu
#line 505 "powerpc.hh"
	);
	virtual
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::address_t
#line 510 "powerpc.hh"
	get_target_address(
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::address_t
#line 514 "powerpc.hh"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cia
#line 517 "powerpc.hh"
	,
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	typename CONFIG::STATE *
#line 521 "powerpc.hh"
#line 40 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./sim_branch.isa"
	cpu
#line 524 "powerpc.hh"
	);
	virtual void initialize_operands( );
	virtual void initialize_latencies( );
	virtual void initialize_function( );
	virtual
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	unsigned int
#line 532 "powerpc.hh"
	get_num_uops(
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	typename CONFIG::STATE *
#line 536 "powerpc.hh"
#line 102 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	cpu
#line 539 "powerpc.hh"
	);
	virtual void initialize_write_fpscr( );
	virtual void initialize_read_xer( );
	virtual void initialize_write_xer( );
	virtual void initialize_write_crbd( );
	virtual void initialize_write_cr( );
	virtual void initialize_read_crbb( );
	virtual void initialize_read_crba( );
	virtual void initialize_read_cr( );
	virtual void initialize_write_ctr( );
	virtual void initialize_write_lr( );
	virtual void initialize_write_ear( );
	virtual void initialize_write_ra( );
	virtual void initialize_write_rd( );
	virtual void initialize_write_fd( );
	virtual void initialize_read_ctr( );
	virtual void initialize_read_lr( );
	virtual void initialize_read_fs( );
	virtual void initialize_read_fc( );
	virtual void initialize_read_fb( );
	virtual void initialize_read_fa( );
	virtual void initialize_read_rs( );
	virtual void initialize_read_rb( );
	virtual void initialize_read_ra( );
	virtual void initialize_serialization( );
	virtual void initialize_unit( );
	virtual
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	void
#line 569 "powerpc.hh"
	uop_execute(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	typename CONFIG::STATE *
#line 573 "powerpc.hh"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	cpu
#line 576 "powerpc.hh"
	,
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	unsigned int
#line 580 "powerpc.hh"
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	uop_num
#line 583 "powerpc.hh"
	);
	virtual
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	void
#line 588 "powerpc.hh"
	resolve(
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	typename CONFIG::STATE *
#line 592 "powerpc.hh"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	cpu
#line 595 "powerpc.hh"
	,
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	unsigned int
#line 599 "powerpc.hh"
#line 43 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/powerpc/./perf.isa"
	uop_num
#line 602 "powerpc.hh"
	);
	virtual
#line 64 "ppc.isa"
	void
#line 607 "powerpc.hh"
	disasm(
#line 64 "ppc.isa"
	typename CONFIG::STATE *
#line 611 "powerpc.hh"
#line 64 "ppc.isa"
	cpu
#line 614 "powerpc.hh"
	,
#line 64 "ppc.isa"
	ostream&
#line 618 "powerpc.hh"
#line 64 "ppc.isa"
	os
#line 621 "powerpc.hh"
	);
	virtual
#line 60 "ppc.isa"
	void
#line 626 "powerpc.hh"
	execute(
#line 60 "ppc.isa"
	typename CONFIG::STATE *
#line 630 "powerpc.hh"
#line 60 "ppc.isa"
	cpu
#line 633 "powerpc.hh"
	);
protected:
	CodeType encoding;
	typename CONFIG::address_t addr;
	const char *name;
};

} } } } }
#endif
