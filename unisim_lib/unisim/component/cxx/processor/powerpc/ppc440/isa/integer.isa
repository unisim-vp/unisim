/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

impl {

#include <unisim/util/arithmetic/arithmetic.hh>

namespace unisim {
namespace component {
namespace cxx {
namespace processor {
namespace powerpc {
namespace ppc440 {

using unisim::util::arithmetic::Add32;
using unisim::util::arithmetic::SignExtend;
using unisim::util::arithmetic::SignedSatAdd32;
using unisim::util::arithmetic::UnsignedSatAdd32;

} // end of namespace ppc440
} // end of namespace powerpc
} // end of namespace processor
} // end of namespace cxx
} // end of namespace component
} // end of namespace unisim

}

/****************************************************

	PPC4XX ADDITIONAL INSTRUCTIONS

****************************************************/

op isel(31[6]:rd[5]:ra[5]:rb[5]:crb[5]:15[5]:?[1])

isel.execute = {
	uint32_t cr = cpu->GetCR();
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	
	uint32_t result;
	result = (cr & (1UL << (31 - crb))) ? (ra ? a : 0) : b;
	
	cpu->SetGPR(rd, result);
}

isel.disasm = {
	os << "isel r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb << ", " << (unsigned int) crb;
}

op dlmzb(31[6]:rs[5]:ra[5]:rb[5]:78[10]:rc[1])

dlmzb.execute = {
	uint32_t s = cpu->GetGPR(rs);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t xer = cpu->GetXER();
	bool found = false;
	uint32_t x = 0;
	while(!found && x < 5)
	{
		x++;
		if(!(s & 0xff000000UL))
		{
			found = true;
		}
		else
		{
			s <<= 8;
		}
	}
	while(!found && x < 8)
	{
		x++;
		if(!(b & 0xff000000UL))
		{
			found = true;
		}
		else
		{
			b <<= 8;
		}
	}
	xer = (xer & ~CONFIG::XER_BYTE_COUNT_MASK) | ((x << CONFIG::XER_BYTE_COUNT_OFFSET) & CONFIG::XER_BYTE_COUNT_MASK);
	
	cpu->SetGPR(ra, x);
	cpu->SetXER(xer);
	
	if(unlikely(rc))
	{
		// Read CR
		uint32_t cr = cpu->GetCR();
		
		// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(found && x>=5) CR0[GT]=(found && x<5) CR0[EQ]=(!found)
		cr = (cr & ~CONFIG::CR0_MASK) |
			((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
			(found ? ((x < 5) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_LT_MASK) : CONFIG::CR0_EQ_MASK);
				
		// Update CR
		cpu->SetCR(cr);
	}
}

dlmzb.disasm = {
	os << "dlmzb" << (rc ? "." : "") << " r" << (unsigned int) ra << ", r " << (unsigned int) rs << ", r" << (unsigned int) rb;
}

op macchw(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:172[9]:rc[1])

macchw.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	int32_t prod32 = (int32_t)(int16_t)(uint16_t)(a & 0xffffUL) * (int32_t)(int16_t)(uint16_t)(b >> 16); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	Add32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

macchw.disasm = {
	os << "macchw" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op macchws(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:236[9]:rc[1])

macchws.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	int32_t prod32 = (int32_t)(int16_t)(uint16_t)(a & 0xffffUL) * (int32_t)(int16_t)(uint16_t)(b >> 16); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	SignedSatAdd32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

macchws.disasm = {
	os << "macchws" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op macchwsu(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:204[9]:rc[1])

macchwsu.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	uint32_t prod32 = (a & 0xffffUL) * (b >> 16); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	UnsignedSatAdd32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

macchwsu.disasm = {
	os << "macchwsu" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op macchwu(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:140[9]:rc[1])

macchwu.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	uint32_t prod32 = (a & 0xffffUL) * (b >> 16); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	Add32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

macchwu.disasm = {
	os << "macchwu" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op machhw(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:44[9]:rc[1])

machhw.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	int32_t prod32 = (int32_t)(int16_t)(uint16_t)(a >> 16) * (int32_t)(int16_t)(uint16_t)(b >> 16); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	Add32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

machhw.disasm = {
	os << "machhw" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op machhws(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:108[9]:rc[1])

machhws.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	int32_t prod32 = (int32_t)(int16_t)(uint16_t)(a >> 16) * (int32_t)(int16_t)(uint16_t)(b >> 16); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	SignedSatAdd32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

machhws.disasm = {
	os << "machhws" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op machhwsu(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:76[9]:rc[1])

machhwsu.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	uint32_t prod32 = (a >> 16) * (b >> 16); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	UnsignedSatAdd32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

machhwsu.disasm = {
	os << "machhwsu" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op machhwu(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:12[9]:rc[1])

machhwu.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	uint32_t prod32 = (a >> 16) * (b >> 16); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	Add32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

machhwu.disasm = {
	os << "machhwu" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op maclhw(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:428[9]:rc[1])

maclhw.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	int32_t prod32 = (int32_t)(int16_t)(uint16_t)(a & 0xffffUL) * (int32_t)(int16_t)(uint16_t)(b & 0xffffUL); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	Add32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

maclhw.disasm = {
	os << "maclhw" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op maclhws(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:492[9]:rc[1])

maclhws.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	int32_t prod32 = (int32_t)(int16_t)(uint16_t)(a & 0xffffUL) * (int32_t)(int16_t)(uint16_t)(b & 0xffffUL); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	SignedSatAdd32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

maclhws.disasm = {
	os << "maclhws" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op maclhwsu(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:460[9]:rc[1])

maclhwsu.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	uint32_t prod32 = (a & 0xffffUL) * (b & 0xffffUL); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	UnsignedSatAdd32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

maclhwsu.disasm = {
	os << "maclhwsu" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}


op maclhwu(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:396[9]:rc[1])

maclhwu.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	uint32_t prod32 = (a & 0xffffUL) * (b & 0xffffUL); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	Add32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

maclhwu.disasm = {
	os << "maclhwu" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op mulchw(4[6]:rd[5]:ra[5]:rb[5]:168[10]:rc[1])

mulchw.execute = {
	// Read the input operands
	int32_t a = SignExtend(cpu->GetGPR(ra) & 0xffff, 16);
	int32_t b = SignExtend(cpu->GetGPR(rb) >> 16, 16);
	
	// Compute the result
	int32_t result = a * b;
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();

		// Read CR
		uint32_t cr = cpu->GetCR();
		
		// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
		cr = (cr & ~CONFIG::CR0_MASK) |
			((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
			(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
				
		// Update CR
		cpu->SetCR(cr);
	}
}

mulchw.disasm = {
	os << "mulchw" << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op mulchwu(4[6]:rd[5]:ra[5]:rb[5]:136[10]:rc[1])

mulchwu.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra) & 0xffff;
	uint32_t b = cpu->GetGPR(rb) >> 16;
	
	// Compute the result
	uint32_t result = a * b;
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();

		// Read CR
		uint32_t cr = cpu->GetCR();
		
		// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
		cr = (cr & ~CONFIG::CR0_MASK) |
			((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
			(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
				
		// Update CR
		cpu->SetCR(cr);
	}
}

mulchwu.disasm = {
	os << "mulchwu" << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op mulhhw(4[6]:rd[5]:ra[5]:rb[5]:40[10]:rc[1])

mulhhw.execute = {
	// Read the input operands
	int32_t a = SignExtend(cpu->GetGPR(ra) >> 16, 16);
	int32_t b = SignExtend(cpu->GetGPR(rb) >> 16, 16);
	
	// Compute the result
	int32_t result = a * b;
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();

		// Read CR
		uint32_t cr = cpu->GetCR();
		
		// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
		cr = (cr & ~CONFIG::CR0_MASK) |
			((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
			(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
				
		// Update CR
		cpu->SetCR(cr);
	}
}

mulhhw.disasm = {
	os << "mulhhw" << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op mulhhwu(4[6]:rd[5]:ra[5]:rb[5]:8[10]:rc[1])

mulhhwu.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra) >> 16;
	uint32_t b = cpu->GetGPR(rb) >> 16;
	
	// Compute the result
	uint32_t result = a * b;
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();

		// Read CR
		uint32_t cr = cpu->GetCR();
		
		// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
		cr = (cr & ~CONFIG::CR0_MASK) |
			((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
			(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
				
		// Update CR
		cpu->SetCR(cr);
	}
}

mulhhwu.disasm = {
	os << "mulhhwu" << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}
op mullhw(4[6]:rd[5]:ra[5]:rb[5]:424[10]:rc[1])

mullhw.execute = {
	// Read the input operands
	int32_t a = SignExtend(cpu->GetGPR(ra) & 0xffff, 16);
	int32_t b = SignExtend(cpu->GetGPR(rb) & 0xffff, 16);
	
	// Compute the result
	int32_t result = a * b;
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();

		// Read CR
		uint32_t cr = cpu->GetCR();
		
		// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
		cr = (cr & ~CONFIG::CR0_MASK) |
			((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
			(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
				
		// Update CR
		cpu->SetCR(cr);
	}
}

mullhw.disasm = {
	os << "mullhw" << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op mullhwu(4[6]:rd[5]:ra[5]:rb[5]:392[10]:rc[1])

mullhwu.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra) & 0xffffUL;
	uint32_t b = cpu->GetGPR(rb) & 0xffffUL;
	
	// Compute the result
	uint32_t result = a * b;
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();

		// Read CR
		uint32_t cr = cpu->GetCR();
		
		// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
		cr = (cr & ~CONFIG::CR0_MASK) |
			((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
			(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
				
		// Update CR
		cpu->SetCR(cr);
	}
}

mullhwu.disasm = {
	os << "mullhwu" << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}


op nmacchw(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:174[9]:rc[1])

nmacchw.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	int32_t prod32 = -(int32_t)(int16_t)(uint16_t)(a & 0xffffUL) * (int32_t)(int16_t)(uint16_t)(b >> 16); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	Add32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

nmacchw.disasm = {
	os << "nmacchw" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op nmacchws(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:238[9]:rc[1])

nmacchws.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	int32_t prod32 = -(int32_t)(int16_t)(uint16_t)(a & 0xffffUL) * (int32_t)(int16_t)(uint16_t)(b >> 16); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	SignedSatAdd32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

nmacchws.disasm = {
	os << "nmacchws" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op nmachhw(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:46[9]:rc[1])

nmachhw.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	int32_t prod32 = -(int32_t)(int16_t)(uint16_t)(a >> 16) * (int32_t)(int16_t)(uint16_t)(b >> 16); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	Add32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

nmachhw.disasm = {
	os << "nmachhw" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op nmachhws(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:110[9]:rc[1])

nmachhws.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	int32_t prod32 = -(int32_t)(int16_t)(uint16_t)(a >> 16) * (int32_t)(int16_t)(uint16_t)(b >> 16); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	SignedSatAdd32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

nmachhws.disasm = {
	os << "nmachhws" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op nmaclhw(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:430[9]:rc[1])

nmaclhw.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	int32_t prod32 = -(int32_t)(int16_t)(uint16_t)(a & 0xffffUL) * (int32_t)(int16_t)(uint16_t)(b & 0xffffUL); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	Add32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

nmaclhw.disasm = {
	os << "nmaclhw" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}

op nmaclhws(4[6]:rd[5]:ra[5]:rb[5]:oe[1]:494[9]:rc[1])

nmaclhws.execute = {
	// Read the input operands
	uint32_t a = cpu->GetGPR(ra);
	uint32_t b = cpu->GetGPR(rb);
	uint32_t d = cpu->GetGPR(rd);
	
	// Compute the result
	int32_t prod32 = -(int32_t)(int16_t)(uint16_t)(a & 0xffffUL) * (int32_t)(int16_t)(uint16_t)(b & 0xffffUL); // this should not overflow
	uint32_t result;
	uint8_t carry_out;
	uint8_t overflow;
	uint8_t sign;
	
	SignedSatAdd32(result, carry_out, overflow, sign, prod32, d, 0); // this can overflow
	
	// Write back the result
	cpu->SetGPR(rd, result);
	
	if(unlikely(oe || rc))
	{
		// Read XER
		uint32_t xer = cpu->GetXER();
		
		if(unlikely(oe))
		{
			// Generate XER[OV] and XER[SO]
			xer = overflow ? xer | CONFIG::XER_OV_MASK | CONFIG::XER_SO_MASK : xer & ~CONFIG::XER_OV_MASK;
		}
		if(unlikely(rc))
		{
			// Read CR
			uint32_t cr = cpu->GetCR();
			
			// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
			cr = (cr & ~CONFIG::CR0_MASK) |
				((xer & CONFIG::XER_SO_MASK) ? CONFIG::CR0_SO_MASK : 0) |
				(((int32_t)(result) < 0) ? CONFIG::CR0_LT_MASK : (((int32_t)(result) > 0) ? CONFIG::CR0_GT_MASK : CONFIG::CR0_EQ_MASK));
					
			// Update CR
			cpu->SetCR(cr);
		}
	}
}

nmaclhws.disasm = {
	os << "nmaclhws" << (oe ? "o" : "") << (rc ? "." : "") << " r" << (unsigned int) rd << ", r" << (unsigned int) ra << ", r" << (unsigned int) rb;
}
