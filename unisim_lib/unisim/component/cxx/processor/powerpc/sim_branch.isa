/*
 *  Copyright (c) 2007,
 *  INRIA Futurs
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Sylvain Girbal (sylvain.girbal@inria.fr)
 *          David Parello (david.parello@univ-perp.fr)
 */

/**
 * Returns the target address of branch instructions.
 * The AA bit inform if the branch is relative or absolute.
 */
action {address_t} get_target_address({address_t} {cia}, {CPU *} {cpu}) {
  return 0;
}

b.get_target_address = {
  return (aa ? li : cia + li);
}

bc.get_target_address = {
  return (aa ? bd : cia + bd);
}

bcctr.get_target_address = {
  return (cpu->GetCTR() & 0xfffffffc);
}

bclr.get_target_address = {
  return (cpu->GetLR() & 0xfffffffc);
}

// ----------------------------------------------------------------------------

/**
 * Returns true if the branch is statically preficten taken.
 * The powerpc instruction set has a bit of the bo field to set
 * up the default branch prediction value statically.
 * See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
 */
action {bool} branch_statically_predicted_taken({CPU *} {cpu}) { 
  return true;
}

b.branch_statically_predicted_taken = {
  // Unconditional branch is statically predicted taken
  return true;
}

bc.branch_statically_predicted_taken = { 
  // bd represent the displacement
  // bo represent the behavior of the branch
  // See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
  return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04) || (bd < 0));
}

bcctr.branch_statically_predicted_taken = { 
  // Check the prediction bit of bo field unless it is an always branch statement
  // See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
  return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04));
}


bclr.branch_statically_predicted_taken = { 
  // Check the prediction bit of bo field unless it is an always branch statement
  // See PowerPC manual, p186 (4.2.4.2. Conditional Branch Control)
  return (bo & 0x10) != ((bo & 0x01) && (bo & 0x04));
}


// Are branches linked ?
//action {bool} branch_linked({CPU *} {cpu}) { 
action {bool} branch_linked() { 
  return false;
}

b.branch_linked = {
  return lk;
}

bc.branch_linked = {
  return lk;
}

bcctr.branch_linked = {
  return lk;
}

bclr.branch_linked = {
  return lk;
}

action {bool} branch_conditioned() { 
  return true;
}

b.branch_conditioned = {
  return false;
}

bc.branch_conditioned = {
  return ((bo & 16) == 0);
}

bcctr.branch_conditioned = {
  return ((bo & 16) == 0);
}

bclr.branch_conditioned = {
  return ((bo & 16) == 0);
}

