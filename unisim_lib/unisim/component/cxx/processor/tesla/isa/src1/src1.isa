/*
 *  Copyright (c) 2008,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Sylvain Collange (sylvain.collange@univ-perp.fr)
 */

namespace unisim::component::cxx::processor::tesla::isa::src1
little_endian
address {typename CONFIG::address_t}
template <{class} {CONFIG}>

{
#include <unisim/component/cxx/processor/tesla/cpu.hh>
}

//action {void} execute({CPU<CONFIG> *} {cpu}) {
//	throw IllegalInstructionException<CONFIG>();
//}

//constructor action initialize() {
//}

action {VectorRegister<CONFIG>} read({CPU<CONFIG> *} {cpu}, {int} {offset}) {
	throw IllegalInstructionException<CONFIG>();
}

action {void} disasm({CPU<CONFIG> *} {cpu}, {ostream&} {os}) {
	os << "???";
}

// template
// op alu_full_normal(/*subop*/?[3]:/*?*/?[1]:/*src3_neg*/?[1]:/*src1_neg*/[1]:0[1]:/*src2_imm*/?[1]:*rounding_mode*/?[2]:src1_sh[1]:/*src3*/[7]\
//	:/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/[1]:/*set_pred_reg*/[2]:/*ignore_output*/[1]:/*addr_hi*/[1]:/*marker*/0[2]:\
//	/*op*/?[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src3_cm*/?[1]:/*src2_cm*/?[1]:/*src2*/?[7]:src1[7]:\
//	/*dest*/?[7]:/*flow*/0[1]:/*long*/1[1])


// Reg

op alu_full_normal_reg(/*subop*/?[3]:/*?*/?[1]:/*src3_neg*/?[1]:/*src1_neg*/?[1]:0[1]:/*src2_imm*/?[1]:/*rounding_mode*/?[2]:/*src1_sh*/0[1]:/*src3*/?[7]\
	:/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*ignore_output*/?[1]:/*addr_hi*/?[1]:/*marker*/0[2]:\
	/*op*/?[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src3_cm*/?[1]:/*src2_cm*/?[1]:/*src2*/?[7]:src1[7]:\
	/*dest*/?[7]:/*flow*/0[1]:/*long*/1[1])

op alu_full_end_reg(/*subop*/?[3]:/*?*/?[1]:/*src3_neg*/?[1]:/*src1_neg*/?[1]:0[1]:/*src2_imm*/?[1]:/*rounding_mode*/?[2]:/*src1_sh*/0[1]:/*src3*/?[7]\
	:/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*ignore_output*/?[1]:/*addr_hi*/?[1]:/*marker*/1[2]:\
	/*op*/?[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src3_cm*/?[1]:/*src2_cm*/?[1]:/*src2*/?[7]:src1[7]:\
	/*dest*/?[7]:/*flow*/0[1]:/*long*/1[1])

op alu_full_join_reg(/*subop*/?[3]:/*?*/?[1]:/*src3_neg*/?[1]:/*src1_neg*/?[1]:0[1]:/*src2_imm*/?[1]:/*rounding_mode*/?[2]:/*src1_sh*/0[1]:/*src3*/?[7]\
	:/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*ignore_output*/?[1]:/*addr_hi*/?[1]:/*marker*/2[2]:\
	/*op*/?[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src3_cm*/?[1]:/*src2_cm*/?[1]:/*src2*/?[7]:src1[7]:\
	/*dest*/?[7]:/*flow*/0[1]:/*long*/1[1])

op alu_full_imm(/*subop*/?[3]:/*?*/?[1]:/*src3_neg*/?[1]:/*imm*/?[25]:/*marker*/3[2]:\
	/*op*/?[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src3_cm*/?[1]:/*src2_cm*/?[1]:/*src2*/?[7]:src1[7]:\
	/*dest*/?[7]:/*flow*/0[1]:/*long*/1[1])


// TODO: half ops


group alu_reg(alu_full_normal_reg, alu_full_end_reg, alu_full_join_reg, alu_full_imm)

alu_reg.read = {
	return cpu.GetGPR(src1 + offset);
}

alu_reg.disasm = {
	os << "r" << src1;
}


// Shared

op alu_full_normal_shared(/*subop*/?[3]:/*?*/?[1]:/*src3_neg*/?[1]:/*src1_neg*/?[1]:0[1]:/*src2_imm*/?[1]:/*rounding_mode*/?[2]:/*src1_sh*/1[1]:/*src3*/?[7]\
	:/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*ignore_output*/?[1]:/*addr_hi*/?[1]:/*marker*/0[2]:\
	/*op*/?[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src3_cm*/?[1]:/*src2_cm*/?[1]:/*src2*/?[7]:src1[7]:\
	/*dest*/?[7]:/*flow*/0[1]:/*long*/1[1])

op alu_full_end_shared(/*subop*/?[3]:/*?*/?[1]:/*src3_neg*/?[1]:/*src1_neg*/?[1]:0[1]:/*src2_imm*/?[1]:/*rounding_mode*/?[2]:/*src1_sh*/1[1]:/*src3*/?[7]\
	:/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*ignore_output*/?[1]:/*addr_hi*/?[1]:/*marker*/1[2]:\
	/*op*/?[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src3_cm*/?[1]:/*src2_cm*/?[1]:/*src2*/?[7]:src1[7]:\
	/*dest*/?[7]:/*flow*/0[1]:/*long*/1[1])

op alu_full_join_shared(/*subop*/?[3]:/*?*/?[1]:/*src3_neg*/?[1]:/*src1_neg*/?[1]:0[1]:/*src2_imm*/?[1]:/*rounding_mode*/?[2]:/*src1_sh*/1[1]:/*src3*/?[7]\
	:/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*ignore_output*/?[1]:/*addr_hi*/?[1]:/*marker*/2[2]:\
	/*op*/?[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src3_cm*/?[1]:/*src2_cm*/?[1]:/*src2*/?[7]:src1[7]:\
	/*dest*/?[7]:/*flow*/0[1]:/*long*/1[1])

// TODO: half ops

group alu_shared(alu_full_normal_shared, alu_full_end_shared, alu_full_join_shared)

alu_shared.read = {
	return cpu.ReadShared(src1 + offset);
}

alu_shared.disasm = {
	os << "s[" << src1 << "]";
}

