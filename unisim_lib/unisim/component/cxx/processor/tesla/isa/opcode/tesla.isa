/*
 *  Copyright (c) 2009,
 *  University of Perpignan (UPVD),
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of UPVD nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Sylvain Collange (sylvain.collange@univ-perp.fr)
 */
 
namespace unisim::component::cxx::processor::tesla::isa::opcode
little_endian

address {typename CONFIG::address_t}
template <{class} {CONFIG}>

decl {
//#include <unisim/component/cxx/processor/tesla/cpu.hh>
#include <unisim/component/cxx/processor/tesla/exec.hh>
#include <unisim/component/cxx/processor/tesla/disasm.hh>
#include <unisim/component/cxx/processor/tesla/flags.hh>
//#include <unisim/component/cxx/processor/tesla/instruction.hh>

namespace unisim {
namespace component {
namespace cxx {
namespace processor {
namespace tesla {

template<class CONFIG>
class CPU;

template<class CONFIG>
class Instruction;

} // end of namespace tesla 
} // end of namespace processor
} // end of namespace cxx
} // end of namespace component
} // end of namespace unisim


using namespace unisim::component::cxx::processor::tesla;
//using unisim::component::cxx::processor::tesla::Instruction;


template <class T, size_t SIZE>
struct SimpleArray
{
	T dt[SIZE];
	
	T & operator[] (size_t i) {
		assert(i < SIZE);
		return dt[i];
	}
	T operator[] (size_t i) const {
		assert(i < SIZE);
		return dt[i];
	}
};

typedef SimpleArray<DataType, 4> DataTypeArray;


}


impl {
#include <unisim/component/cxx/processor/tesla/instruction.hh>
#include <unisim/component/cxx/processor/tesla/exec.tcc>
#include <unisim/component/cxx/processor/tesla/flags.tcc>

using namespace unisim::component::cxx::processor::tesla;

}

action {void} execute({CPU<CONFIG> *} {cpu}, {Instruction<CONFIG> const *} {insn}) {
	throw IllegalInstructionException<CONFIG>();
}

action {void} disasm({CPU<CONFIG> *} {cpu}, {Instruction<CONFIG> const *} {insn}, {ostream&} {buffer}) {
	buffer << "???";
}

var op_type : { DataTypeArray }
var allow_segment : { bool }
var force_reg : { SimpleArray<bool, 4> }

constructor action init() {
	typedef Operation<CONFIG> inherited;
	inherited::allow_segment = false;
	inherited::op_type[OpDest] = DT_U32;
	inherited::op_type[OpSrc1] = DT_U32;
	inherited::op_type[OpSrc2] = DT_U32;
	inherited::op_type[OpSrc3] = DT_U32;
}

constructor action init_force_reg() {
	typedef Operation<CONFIG> inherited;
	inherited::force_reg[OpDest] = false;
	inherited::force_reg[OpSrc1] = false;
	inherited::force_reg[OpSrc2] = false;
	inherited::force_reg[OpSrc3] = false;
}

include "isa/opcode/fp32.isa"
include "isa/opcode/integer.isa"
include "isa/opcode/mov.isa"
include "isa/opcode/branch.isa"

//include "operands/operands.isa"

//op alu_reg_reg_reg_reg_full(opcode[4]:addr_lo[2]:addr_imm[1]:/*src3_cm*/0[1]:/*src2_cm*/0[1]:src2[7]:\
//	src1[7]:dest[7]:/*flow*/0[1]:/*IWidth*/1[1]:\
//	subop[3]:/*?*/0[1]:sat[1]:src1_neg[1]:0[2]:const_seg[2]:src1_sh[1]:src3[7]\
//	:pred_reg[2]:pred_cond[5]:set_pred[1]:set_pred_reg[2]:ignore_output[1]:addr_hi[1]:marker[2])

//op alu_reg_sm_reg_reg_full(opcode[4]:addr_lo[2]:addr_imm[1]:/*src3_cm*/0[1]:/*src2_cm*/0[1]:src2[7]:\
//	src1[7]:dest[7]:/*flow*/0[1]:/*IWidth*/1[1]:\
//	subop[3]:/*?*/0[1]:sat[1]:src1_neg[1]:0[2]:const_seg[2]:src1_sh[1]:src3[7]\
//	:pred_reg[2]:pred_cond[5]:set_pred[1]:set_pred_reg[2]:ignore_output[1]:addr_hi[1]:marker[2])

