/*
 *  Copyright (c) 2009,
 *  University of Perpignan (UPVD),
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of UPVD nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Sylvain Collange (sylvain.collange@univ-perp.fr)
 */


/***************************************************

	DATA MOVE INSTRUCTIONS

****************************************************/

op mov_reg_full_normal( \
	/*subop*/0[3]:/*?*/0[1]:/*cvt_round_half*/0[1]:data_32[1]:/*const_seg*/?[4]:/*src1_sh*/?[1]:abs_sat[2]:cvt_round[2]:cvt_type[3]:\
	/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*output*/?[1]:/*addr_hi*/?[1]:/*marker*/0[2]: \
	0x1[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src3_cm*/0[1]:/*src2_cm*/0[1]:f64[1]:/*?*/0[6]:\
	/*src1*/?[7]:/*dest*/?[7]:/*flow*/0[1]:/*IWidth*/1[1]\
)

group mov_reg_full_noimm(mov_reg_full_normal)

// No immediate : dest = conv(src1)
// If immediate : dest = src2

op mov_reg_full_imm( \
	/*subop*/0[3]:/*?*/0[1]:/*imm_hi*/?[26]:/*marker*/3[2]: \
	0x1[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*op1_shared*/?[1]:/*src2_cm*/0[1]:f64[1]:/*imm_lo*/?[6]:\
	/*src1*/?[7]:/*dest*/?[7]:/*flow*/0[1]:/*IWidth*/1[1]\
)

op mov_reg_half( \
	?[32]: \
	0x1[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src1_sm*/?[1]:/*src2_cm*/0[1]:f64[1]:/*imm_lo*/?[6]:\
	/*src1*/?[7]:/*dest*/?[7]:/*flow*/0[1]:/*IWidth*/0[1]\
)


mov_reg_full_noimm.disasm = {
//	cpu.DisasmPred(pred_cond, pred_reg, buffer);
	// data_32 = 0 -> mov.b16
	// data_32 = 1 -> mov.b32
	// cvt_round = 1 -> default, round down?
	// cvt_type = 7 -> default, no conv
	// pred_cond = 15 -> default, true
	buffer << "mov";
	insn->DisasmControl(buffer);

	//cpu.DisasmDataType(m_size, buffer);
	DisasmConvert(cvt_round, cvt_type, data_32, abs_sat, buffer);
//	cpu.DisasmMarker(marker, buffer);
	buffer << " ";
//	cpu.DisasmSetPred(set_pred_reg, set_pred, buffer);
//	cpu.DisasmDest(dest, ignore_output, buffer);
	insn->DisasmDest(buffer, RegType(data_32));

	buffer << ", ";
//	cpu.DisasmSrc(src1, 0, src1_sh, 0, addr_lo, addr_hi, addr_imm, buffer);
	insn->DisasmSrc1(buffer);	// source format??
}

mov_reg_full_noimm.execute = {
	typedef VectorRegister<CONFIG> reg_t;
//	cpu.ExecMarker(marker);
	// dest = a
	// TODO: Read 2 regs if 64-bit
	assert(!f64);
	reg_t a = insn->ReadSrc1();	// TODO: addr reg
	reg_t output = ConvertIntInt(a, cvt_round, cvt_type, data_32, AbsSat(abs_sat));

//	if(!ignore_output)
//		cpu.WriteOutput(output, dest, pred_cond, pred_reg);
	insn->WriteDest(output);
//	insn->SetPredFP32(output);	// TODO: check type?
	insn->SetPredI32(output);	// TODO: check type?
	
//	if(set_pred)
//		cpu.WritePred(set_pred_reg, pred_cond, pred_reg, ComputePredFP32(output));	// TODO: FP32 or...?
}

mov_reg_full_imm.disasm = {
	buffer << "mov";
	insn->DisasmControl(buffer);

//	DisasmConvert(cvt_round, cvt_type, data_32, buffer);
	buffer << " ";
	insn->DisasmDest(buffer);

	buffer << ", ";
	insn->DisasmSrc2(buffer);
}

mov_reg_full_imm.execute = {
	typedef VectorRegister<CONFIG> reg_t;
	// dest = a
	// TODO: Read 2 regs if 64-bit
	assert(!f64);
	reg_t a = insn->ReadSrc2();
	reg_t output = a;

	insn->WriteDest(output);
	//insn->SetPredFP32(output);
	insn->SetPredI32(output);	// TODO: check type?
}

mov_reg_half.disasm = {
	buffer << "mov";
	insn->DisasmControl(buffer);

	buffer << " ";
	insn->DisasmDest(buffer);

	buffer << ", ";
	insn->DisasmSrc1(buffer);
}

mov_reg_half.execute = {
	typedef VectorRegister<CONFIG> reg_t;
	// dest = a
	// TODO: Read 2 regs if 64-bit
	assert(!f64);
	reg_t a = insn->ReadSrc1();
	reg_t output = a;

	insn->WriteDest(output);
	insn->SetPredI32(output);	// TODO: check type?
}


op stsh_full( \
	/*subop*/7[3]:/*?*/0[1]:/*cvt_round_half*/0[1]:w32[1]:/*?*/0[2]: m_size[3]:src3[7]\
	:/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*output*/?[1]:addr_hi[1]:/*marker*/?[2]: \
	0x0[4]:addr_lo[2]:/*??*/0[1]:/*src3_cm*/0[1]:/*src2_cm*/0[1]: \
	dest[14]:/*?*/0[7]:/*flow*/0[1]:/*IWidth*/1[1]\
)

// Source/dest swapped?
//  mov g[a?src1], dest

stsh_full.disasm = {
	// m_size = 0 -> b16
	// m_size = 1 -> b32
	// m_size = 2 -> b8
	buffer << "mov";
	insn->DisasmControl(buffer);
	SMType smt;
	switch(m_size) {
	case 0:
		buffer << ".b16";
		break;
	case 1:
		buffer << ".b32";
		break;
	case 2:
		buffer << ".b8";
		break;
	default:
		buffer << ".b??";
	}

	if(!w32) {
		buffer << ".b16";
	}

	buffer << " ";
	
	DisasmShared(dest, addr_lo, addr_hi, 1, MvSizeToSMType(m_size), buffer);
	buffer << ", ";

//	buffer << "r" << src3;
	insn->DisasmSrc3(buffer, RegType(w32));
}

stsh_full.execute = {
	typedef VectorRegister<CONFIG> reg_t;
	// dest = a
	//reg_t a = cpu->GetGPR(src3);
	reg_t a = insn->ReadSrc3(0, RegType(w32));

	reg_t output = a;

	cpu->ScatterShared(output, dest, addr_lo, addr_hi, 1, insn->Mask(), MvSizeToSMType(m_size));
	insn->SetPredI32(output);
}


op stg_full( \
	/*subop*/5[3]:/*?*/0[1]:/*cvt_round_half*/0[1]:/*?*/0[3]: m_size[3]:/*?*/0[1]:/*?*/0[3]:/*cvt_type*/0[3]\
	:/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*output*/?[1]:addr_hi[1]:/*marker*/?[2]: \
	0xd[4]:addr_lo[2]:addr_imm[1]:/*src3_cm*/0[1]:/*src2_cm*/0[1]:segment[7]:\
	src1[7]:dest[7]:/*flow*/0[1]:/*IWidth*/1[1]\
)

// Source/dest swapped!
//  mov g[src1], dest

stg_full.disasm = {
//	cpu.DisasmPred(pred_cond, pred_reg, buffer);
	// m_size = 4 -> b64
	// m_size = 8 -> b32
	// data_32 = 0 -> mov.b16
	// data_32 = 1 -> mov.b32
	// cvt_round = 1 -> default, round down
	// cvt_type = 7 -> default, no conv
	// pred_cond = 15 -> default, true
	buffer << "mov";
	insn->DisasmControl(buffer);

	DisasmDataType(m_size, buffer);
//	cpu.DisasmMarker(marker, buffer);
	buffer << " ";
//	cpu.DisasmSetPred(set_pred_reg, set_pred, buffer);
	DisasmGlobal(src1, addr_lo, addr_hi, addr_imm, segment, m_size, buffer);
	buffer << ", ";
//	cpu.DisasmSrc(src1, 0, 0, 0, buffer);
//	insn->DisasmSrc1(buffer);	// TODO: force reg?
	buffer << "r" << dest;
}

stg_full.execute = {
	typedef VectorRegister<CONFIG> reg_t;
//	cpu.ExecMarker(marker);
	// dest = a
	reg_t a = cpu->GetGPR(dest);

	reg_t output = a;

//	if(!ignore_output)
	cpu->ScatterGlobal(output, src1, addr_lo, addr_hi, addr_imm, segment, insn->Mask(), DataType(m_size));
//	if(set_pred)
//		cpu.WritePred(set_pred_reg, pred_cond, pred_reg, ComputePredFP32(output));	// TODO: FP32 or...?
//	insn->WriteDest(output);
	insn->SetPredI32(output);
}


op ldg_full( \
	/*subop*/4[3]:/*?*/0[1]:/*cvt_round_half*/0[1]:/*?*/0[3]: m_size[3]:/*?*/0[1]:/*?*/0[3]:/*cvt_type*/0[3]\
	:/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*output*/?[1]:addr_hi[1]:/*marker*/?[2]: \
	0xd[4]:addr_lo[2]:addr_imm[1]:/*src3_cm*/0[1]:/*src2_cm*/0[1]:segment[7]:\
	src1[7]:/*dest*/?[7]:/*flow*/0[1]:/*IWidth*/1[1]\
)

//  mov dest, g[src1]

ldg_full.disasm = {
//	cpu.DisasmPred(pred_cond, pred_reg, buffer);
	// m_size = 4 -> b64
	// m_size = 8 -> b32
	// data_32 = 0 -> mov.b16
	// data_32 = 1 -> mov.b32
	// cvt_round = 1 -> default, round down
	// cvt_type = 7 -> default, no conv
	// pred_cond = 15 -> default, true
	buffer << "mov";
	insn->DisasmControl(buffer);

	DisasmDataType(m_size, buffer);
	buffer << " ";
	insn->DisasmDest(buffer);
	buffer << ", ";
	DisasmGlobal(src1, addr_lo, addr_hi, addr_imm, segment, m_size, buffer);
}

ldg_full.execute = {
	typedef VectorRegister<CONFIG> reg_t;

	reg_t output;

	cpu->GatherGlobal(output, src1, addr_lo, addr_hi, addr_imm, segment, insn->Mask(), DataType(m_size));
	insn->WriteDest(output);
	insn->SetPredI32(output);
}


// op mov_reg_xxx( \
// 	/*subop*/0[3]:/*?*/0[1]:/*cvt_round_half*/0[1]:data_32[1]:const_seg[4]:/*src1_sh*/?[1]:abs_sat[2]:cvt_round[2]:cvt_type[3]:\
// 	/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*output*/?[1]:/*addr_hi*/?[1]:/*marker*/?[2]: \
// 	0x1[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src3_cm*/0[1]:/*src2_cm*/0[1]:f64[1]:/*?*/0[6]:\
// 	src1[7]:dest[7]:/*flow*/0[1]:/*IWidth*/1[1]\
// )



op icvt_full_normal( \
	/*subop*/0[3]:/*?*/0[1]:/*cvt_round_half*/0[1]:data_32[1]:/*const_seg*/?[4]:/*src1_sh*/?[1]:abs_sat[2]:cvt_round[2]:cvt_type[3]:\
	/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*output*/?[1]:/*addr_hi*/?[1]:/*marker*/0[2]: \
	0xa[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src3_cm*/0[1]:/*src2_cm*/0[1]:f64[1]:/*?*/0[6]:\
	/*src1*/?[7]:/*dest*/?[7]:/*flow*/0[1]:/*IWidth*/1[1]\
)

group icvt_full_noimm(icvt_full_normal)

// No immediate : dest = conv(src1)


icvt_full_noimm.disasm = {
	// data_32 = 0 -> mov.b16
	// data_32 = 1 -> mov.b32
	// cvt_round = 1 -> default, round down?
	// cvt_type = 7 -> default, no conv
	// pred_cond = 15 -> default, true
	buffer << "cvt";
	insn->DisasmControl(buffer);

	DisasmConvert(cvt_round, cvt_type, data_32, abs_sat, buffer);
	buffer << " ";
	insn->DisasmDest(buffer, RegType(data_32));

	buffer << ", ";
	insn->DisasmSrc1(buffer, CvtTypeToRT(ConvType(cvt_type)));	// Or always 32??
}

icvt_full_noimm.execute = {
	typedef VectorRegister<CONFIG> reg_t;
	// dest = a
	// TODO: Read 2 regs if 64-bit
	assert(!f64);
	reg_t a = insn->ReadSrc1(0, CvtTypeToRT(ConvType(cvt_type)));
	reg_t output = ConvertIntInt(a, cvt_round, cvt_type, data_32, AbsSat(abs_sat));

	insn->WriteDest(output, 0, RegType(data_32));	// Always output to a 32-bit reg??
	insn->SetPredI32(output);	// TODO: check type?
	// (16-bit, etc.)
}

// TODO: icvt_neg (subop = 1)

op ldam_full_normal( \
	/*subop*/6[3]:/*?*/0[1]:/*cvt_round_half*/0[1]:data_32[1]:/*const_seg*/?[4]:/*src1_sh*/?[1]:abs_sat[2]:cvt_round[2]:cvt_type[3]:\
	/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*output*/?[1]:/*addr_hi*/?[1]:/*marker*/0[2]: \
	0x0[4]:/*addr_lo*/?[2]:/*addr_imm*/?[1]:/*src3_cm*/0[1]:/*src2_cm*/0[1]:src2[7]:\
	/*src1*/?[7]:dest[7]:/*flow*/0[1]:/*IWidth*/1[1]\
)

// TODO: end, join, imm, half

group ldam_full(ldam_full_normal)

ldam_full.disasm = {
	buffer << "lda";
	insn->DisasmControl(buffer);
	
	buffer << " a" << dest;
	buffer << ", ";
	insn->DisasmSrc1(buffer);
	
	buffer << " << ";
	//DisasmImm(0, src2, buffer);
	buffer << src2;
}

ldam_full.execute = {
	typedef VectorRegister<CONFIG> reg_t;
	reg_t a = insn->ReadSrc1();
	reg_t output = ShiftLeft(a, src2);
	cpu->GetAddr(dest).Write(VectorAddress<CONFIG>(output), insn->Mask());
	if(CONFIG::TRACE_REG) {
		cpu->DumpAddr(dest, cerr);
	}
}

op ldaa_full_normal( \
	/*subop*/1[3]:/*?*/0[1]:/*cvt_round_half*/0[1]:/*data_32?*/0[1]:/*const_seg*/?[4]:/*src1_sh*/?[1]:abs_sat[2]:cvt_round[2]:cvt_type[3]:\
	/*pred_reg*/?[2]:/*pred_cond*/?[5]:/*set_pred*/?[1]:/*set_pred_reg*/?[2]:/*output*/?[1]:addr_hi[1]:/*marker*/0[2]: \
	0xd[4]:addr_lo[2]:/*addr_imm??*/0[1]:/*src3_cm*/0[1]:/*src2_cm*/0[1]:src[14]:dest[7]:/*flow*/0[1]:/*IWidth*/1[1]\
)

group ldaa_full(ldaa_full_normal)

// TODO: end, join, imm, half

ldaa_full.disasm = {
	buffer << "lda";
	insn->DisasmControl(buffer);
	
	buffer << " a" << dest;
	buffer << ", ";
	DisasmAddress(src, addr_lo, addr_hi, 1, 0, buffer);
}

ldaa_full.execute = {
	typedef VectorRegister<CONFIG> reg_t;
	typedef VectorAddress<CONFIG> VecAddr;	

//	assert(data_32);

	VecAddr output = cpu->EffectiveAddress(src, addr_lo, addr_hi, 1, 0);
	cpu->GetAddr(dest).Write(output, insn->Mask());
	if(CONFIG::TRACE_REG) {
		cpu->DumpAddr(dest, cerr);
	}
}

