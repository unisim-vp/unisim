#!/usr/bin/env python

from @PYTHON__SIM__IMPORT_NAME@ import simulator
import re

class SimulatorHandler(simulator.Simulator):
	def trap_handler(self, context, id):
		# print("Python: Received a trap handler call with id = ", id)
		parms = self.get_parameters()
		stats = self.get_statistics()
		instruction_counter = stats['cpu.instruction-counter'].value
		current_time = stats['cpu.cpu-time'].value
		(current_time, time_unit) = re.split(' ', current_time)
		current_time = int(current_time)
		if re.match('ps', time_unit):
			current_time = current_time
		elif re.match('ns', time_unit):
			current_time = current_time * 1000
		elif re.match('us', time_unit):
			current_time = current_time * 1000 * 1000
		else:
			print("++++++++++++++++ Unknown time unit: '" + time_unit + "'")
			print("Stopping the simulation")
			self.log.close()
			self.stop()
		cpu_dcache_read_accesses = stats['cpu.dcache.read-accesses'].value
		cpu_dcache_write_accesses = stats['cpu.dcache.write-accesses'].value
		cpu_dcache_prefetch_accesses = stats['cpu.dcache.prefetch-accesses'].value
		cpu_dcache_read_hits = stats['cpu.dcache.read-hits'].value
		cpu_dcache_write_hits = stats['cpu.dcache.write-hits'].value
		cpu_dcache_prefetch_hits = stats['cpu.dcache.prefetch-hits'].value
		cpu_icache_read_accesses = stats['cpu.icache.read-accesses'].value
		cpu_icache_read_hits = stats['cpu.icache.read-hits'].value
		list = (instruction_counter,
				current_time - self.current_time,
				cpu_dcache_read_accesses - self.cpu_dcache_read_accesses,
				cpu_dcache_write_accesses - self.cpu_dcache_write_accesses,
				cpu_dcache_prefetch_accesses - self.cpu_dcache_prefetch_accesses,
				cpu_dcache_read_hits - self.cpu_dcache_read_hits,
				cpu_dcache_write_hits - self.cpu_dcache_write_hits,
				cpu_dcache_prefetch_hits - self.cpu_dcache_prefetch_hits,
				cpu_icache_read_accesses - self.cpu_icache_read_accesses,
				cpu_icache_read_hits - self.cpu_icache_read_hits)
		self.current_time = current_time
		self.cpu_dcache_read_accesses = cpu_dcache_read_accesses
		self.cpu_dcache_write_accesses = cpu_dcache_write_accesses
		self.cpu_dcache_prefetch_accesses = cpu_dcache_prefetch_accesses
		self.cpu_dcache_read_hits = cpu_dcache_read_hits
		self.cpu_dcache_write_hits = cpu_dcache_write_hits
		self.cpu_dcache_prefetch_hits = cpu_dcache_prefetch_hits
		self.cpu_icache_read_accesses = cpu_icache_read_accesses
		self.cpu_icache_read_hits = cpu_icache_read_hits
		for (i) in list:
			self.log.write(str(i))
			self.log.write(' ')
		self.log.write('\n')
		self.log.flush()
		if instruction_counter >= self.max_insns:
			print("Stopping the simulation")
			self.log.close()
			self.stop()
		else:
			new_instruction_counter = (instruction_counter - (instruction_counter % self.insn_threshold)) + self.insn_threshold
			parms['cpu.trap-on-instruction-counter'].value = new_instruction_counter

	def __init__(self):
		simulator.Simulator.__init__(self, parms={"enable-power-estimation":True})
		print("Simulator initialized")
		# parms = self.get_variables()
		# for name in parms:
		# 	print("+ %s" % (name), parms[name].get_value())
		self.insn_threshold = 100000
		self.insn_counter = 0
		# self.max_insns = self.insn_threshold * 3000
		self.max_insns = self.insn_threshold * 1 
		self.traps_to_logger = False
		self.current_time = 0
		self.cpu_dcache_read_accesses = 0
		self.cpu_dcache_write_accesses = 0
		self.cpu_dcache_prefetch_accesses = 0
		self.cpu_dcache_read_hits = 0
		self.cpu_dcache_write_hits = 0
		self.cpu_dcache_prefetch_hits = 0
		self.cpu_icache_read_accesses = 0
		self.cpu_icache_read_hits = 0
		print("__init__ finished")
		# parms['cpu.trap-on-instruction-counter'].value = self.insn_threshold
		# parms['trap-handler.send-traps-to-logger'].value = self.traps_to_logger
		# self.set_trap_handler(None, self.trap_handler)

	def insn_counter_listener(self, variable):
		self.insn_counter = variable.get_value()
		if self.insn_counter >= self.max_insns:
			if self.stop():
				print("Stopped the simulation")
			else:
				print("Could not stop the simulation")
				sys.exit(0)

	def setup(self):
		print("performing setup")
		# we can not call self.setup() because it would cause a recursive
		#   call to the SimulatorHandler class. To avoid that we call the
		#   class directly (simulator.Simulator.setup()) giving it the 
		#   reference to itself.
		simulator.Simulator.setup(self)
		print("setup finished")
		# we prepare a log file for our collected data
		self.log = open("log.txt", "w")
		print("instruction-counter variable")
		self.insn_counter_var = self.get_variable("cpu.instruction-counter")
		self.insn_counter_var.add_listener(self.insn_counter_listener)
		self.insn_counter_var.set_listener_context(self.insn_counter_var)
		print("instruction-counter data type = ", self.insn_counter_var.get_datatypename())
		print("instruction-counter variable finished")

	def dump_params(self):
		print("Dumping parameters:")
		parms = self.get_parameters()
		for k, v in sorted(parms.items()):
			print("- %s = %s" % (k, v.str) )

	def dump_statistics(self):
		print("Dumping statistics:")
		stats = self.get_statistics()
		forms = self.get_formulas()
		out = dict()
		out.update(stats)
		out.update(forms)
		for k, v in sorted(out.items()):
			print("- %s = %s" % (k, v.str) )

print("Creating simulator")
sim = SimulatorHandler()
print("Launching simulator setup")
sim.setup()
print("Checking existence of debugger")
has_debugger = sim.has_debugger()
if has_debugger:
	print("A debugger was found")
	debuggers = sim.get_debuggers()
	print("List of debuggers obtained.")
	print("List of debuggers: ", debuggers)
else:
	print("No debugger was found")
print("Launching simulation")
sim.run()
print("Simulation finished")
sim.remove_trap_handler()
sim.dump_params()
sim.dump_statistics()

print("Bye!")
