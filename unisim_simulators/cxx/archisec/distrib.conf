package unisim_archisec
version 0.0.9
full_name unisim_archisec
author 'Frédéric Recoules <frederic.recoules@cea.fr>'
author 'Yves Lhuillier <yves.lhuillier@cea.fr>'

use genisslib genisslib
import genisslib

UNISIM_LIB=unisim_lib

use unisim_lib $UNISIM_LIB

import unisim/component/cxx/processor/arm/dba/aarch32

import unisim/component/cxx/processor/arm/dba/aarch64

import unisim/component/cxx/processor/intel/dba

import unisim/component/cxx/processor/powerpc/dba/arch64

# import unisim/component/cxx/processor/sparc/dba/arch32

copy source isa header template data prog

UNISIM_LIB_FILES=()

function genisslib()
{
    (
        cd $UNISIM_LIB && ../genisslib/genisslib.py \
            -o $1 \
            -M $1.isadeps \
            -w 8 -I . --source-lines off \
            $1.isa
    )
    filenames=$(cat $UNISIM_LIB/$1.isadeps | while read in; do echo "$in"; done | cut -d: -f1)
    UNISIM_LIB_FILES+=($filenames)
}

genisslib unisim/component/cxx/processor/arm/isa/thumb2/thumb
genisslib unisim/component/cxx/processor/arm/isa/arm32/arm32

genisslib unisim/component/cxx/processor/arm/dba/arm64/arm64

genisslib unisim/component/cxx/processor/powerpc/dba/ppc64/ppc64

# genisslib unisim/component/cxx/processor/sparc/dba/sv8/sparc

UNISIM_LIB_FILES+=($(for filename in $(files source); do echo ${filename#$UNISIM_LIB/}; done))
UNISIM_LIB_FILES+=($(for filename in $(files header); do echo ${filename#$UNISIM_LIB/}; done))
UNISIM_LIB_FILES+=($(for filename in $(files template); do echo ${filename#$UNISIM_LIB/}; done))

SRCNAMES=()
for idx in ${!UNISIM_LIB_FILES[@]}
do
   SRC=${UNISIM_LIB_FILES[$idx]}
   if [[ $SRC == *.cc ]]; then
       filename=f$idx-$(basename $SRC)
       echo "#include <$SRC>" > $UNISIM_LIB/$filename
       SRCNAMES+=($(basename $filename .cc))
   fi
done

UNISIM_SIMULATOR_FILES="\
arm32dba.cc arm32dba.ml \
aarch64dba.cc aarch64dba.ml \
ppc64dba.cc ppc64dba.ml \
amd64dba.cc amd64dba.ml \
unittest.ml \
unittest.expected \
AUTHORS.md \
CHANGES.md \
INSTALL.md \
LICENSE.md \
README.md \
"

dist_copy ${UNISIM_SIMULATOR_FILES}

# Top level
cat << EOF > "dune-project"
(lang dune 3.0)
(generate_opam_files true)

(name unisim_archisec)
(version "$(version)")
(maintainers "BINSEC <binsec@saxifrage.saclay.cea.fr>")
(authors
  "Frédéric Recoules"
  "Yves Lhuillier"
)
(license BSD-3-Clause)
(homepage "https://binsec.github.io")
(source (github binsec/unisim_archisec))
(bug_reports "mailto:binsec@saxifrage.saclay.cea.fr")

(package
 (name unisim_archisec)
 (synopsis "UNISIM-VP DBA decoder")
 (description "
UNISIM ARCHISEC is a companion package of the binary analysis platform
BINSEC. It exposes disassembly metadata and DBA (Dynamic Bitvector Automata)
semantics of several instruction set architectures, including ARM, x86_64,
and ppc64.")
(depends
  (conf-gcc :build)
  (conf-g++ :build))
 (conflicts
  (binsec (< 0.5.0))))
EOF

cat <<EOF > "unisim_archisec.opam.template"
available: [ os = "linux" & (os-distribution != "ol" & os-distribution != "centos" | os-version >= 8) | os = "macos" & os-distribution = "homebrew" ]
EOF

cat <<EOF > "dune"
(env
  (_
   (c_flags :standard -std=gnu14 -g0)
   (cxx_flags :standard -std=gnu++14 -g0)))

(subdir
 $UNISIM_LIB
 (library
  (package unisim_archisec)
  (name $UNISIM_LIB)
  (foreign_stubs
   (language cxx)
   (names ${SRCNAMES[*]})
   (flags :standard -I.)
   (extra_deps ${UNISIM_LIB_FILES[*]}))))

(library
 (public_name unisim_archisec.arm32dba)
 (name arm32dba)
 (modules arm32dba)
 (foreign_stubs
  (language cxx)
  (names arm32dba)
  (flags :standard -I.))
 (libraries $UNISIM_LIB))

(library
 (public_name unisim_archisec.aarch64dba)
 (name aarch64dba)
 (modules aarch64dba)
 (foreign_stubs
  (language cxx)
  (names aarch64dba)
  (flags :standard -I.))
 (libraries $UNISIM_LIB))

(library
 (public_name unisim_archisec.ppc64dba)
 (name ppc64dba)
 (modules ppc64dba)
 (foreign_stubs
  (language cxx)
  (names ppc64dba)
  (flags :standard -I.))
 (libraries $UNISIM_LIB))

(library
 (public_name unisim_archisec.amd64dba)
 (name amd64dba)
 (modules amd64dba)
 (foreign_stubs
  (language cxx)
  (names amd64dba)
  (flags :standard -I.))
 (libraries $UNISIM_LIB))

(test
 (name unittest)
 (modes
  (best exe))
 (modules unittest)
 (libraries arm32dba aarch64dba ppc64dba amd64dba))
EOF

dune format-dune-file dune > dune.formatted
mv dune.formatted dune
