51a52,53
> namespace armsec {
> 
1380,1416c1382,1385
< uint32_t getu32( uint32_t& res, char const* arg )
< {
<   char *end;
<   uint32_t tmp = strtoul( arg, &end, 0 );
<   if ((*arg == '\0') or (*end != '\0'))
<     return false;
<   res = tmp;
<   return true;
< }
< 
< char const* usage()
< {
<   return
<     "usage: <program> arm|thumb <address> <encoding>\n";
< }
< 
< template <unsigned N>
< char const* after(std::string const& s, char const (&ref)[N])
< {
<   uintptr_t const size = N-1;
<   if (s.compare(0,size,&ref[0]))
<     return 0;
<   return &s[size];
< }
< 
< int
< main( int argc, char** argv )
< {
<   if (argc != 4)
<     {
<       std::cerr << "Wrong number of CLI arguments.\n" << usage();
<       return 1;
<     }
< 
<   uint32_t addr, code;
< 
<   if (not getu32(addr, argv[2]) or not getu32(code, argv[3]))
---
> int decode ( enum Processor::StatusRegister::InstructionSet iset, bool bigendian,
> 	     uint32_t mode, unsigned itstate,
> 	     uint32_t addr, uint32_t code,
> 	     std::ostream& sink )
1418,1421d1386
<       std::cerr << "<addr> and <code> should be 32bits numeric values.\n" << usage();
<       return 1;
<     }
< 
1424,1473c1389,1393
< 
<   std::string exec_flags(argv[1]);
<   exec_flags += ',';
<   for (std::string::iterator cur = exec_flags.begin(), end = exec_flags.end(), nxt; cur != end; cur = nxt+1 )
<     {
<       nxt = std::find( cur, end, ',' );
<       std::string flag( cur, nxt );
<       if (flag.size() == 0)
<         continue;
<       if      (flag == "arm")        { status.iset = status.Arm; }
<       else if (flag == "thumb")      { status.iset = status.Thumb; }
<       else if (flag == "little")     { status.bigendian = false; }
<       else if (flag == "big")        { status.bigendian = true; }
<       else if (flag == "user")       { status.mode = Processor::USER_MODE; }
<       else if (flag == "fiq")        { status.mode = Processor::FIQ_MODE; }
<       else if (flag == "irq")        { status.mode = Processor::IRQ_MODE; }
<       else if (flag == "supervisor") { status.mode = Processor::SUPERVISOR_MODE; }
<       else if (flag == "monitor")    { status.mode = Processor::MONITOR_MODE; }
<       else if (flag == "abort")      { status.mode = Processor::ABORT_MODE; }
<       else if (flag == "hypervisor") { status.mode = Processor::HYPERVISOR_MODE; }
<       else if (flag == "undefined")  { status.mode = Processor::UNDEFINED_MODE; }
<       else if (flag == "system")     { status.mode = Processor::SYSTEM_MODE; }
<       else if (flag == "outitb")     { status.itstate = 0; }
<       else if (char const* it = after(flag, "it"))
<         {
<           unsigned bits = 0;
<           if (char const* itstate = after(flag, "itstate="))
<             {
<               while (unsigned bit = *itstate++)
<                 {
<                   if ((bit -= '0') < 2)
<                     bits = (bits << 1) | bit;
<                 }
<             }
<           else
<             {
<               bits = int(unisim::component::cxx::processor::arm::Condition(it).code) << 4 | 0b1000;
<             }
<           status.itstate = bits;
<         }
<       else
<         {
<           std::cerr << "Unknown execution state flag: " << flag << std::endl;
<           return 1;
<         }
< 
<     }
< 
<   actset.translate( std::cout );
< 
---
>   status.iset = iset;
>   status.bigendian = bigendian;
>   status.mode = mode;
>   status.itstate = itstate;
>   actset.translate( sink );
1967a1888,1889
> }
> 
