/*
 *  Copyright (c) 2007,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */
 
{
#include <stdarg.h>

typedef enum operand_type_t { GPR_T, FPR_T, CRF_T, CRB_T, FPSCRF_T, SR_T, CR_T , BO_T, BD_T, IMM_T} operand_type_t;
typedef enum operand_direction_t { INPUT_T, OUTPUT_T } operand_direction_t;

typedef uint32_t registers_written_t;

#define RegNone					0x00000000
#define RegCTR					0x00000001
#define RegLR					0x00000002



typedef uint32_t function_t;

#define FnInvalid				0x00000000
#define FnNop					0x00000001
#define FnIntBasic				0x00000002
#define FnIntBasicSerial			0x00000004
#define FnIntExtended				0x00000008
#define FnFpCommon				0x00000010
#define FnFpFPSCR				0x00000020
#define FnFpFPSCRSerial				0x00000040
#define FnCache					0x00000080
#define FnCacheSerial				0x00000100
#define FnBranch				0x00000200
#define FnConditionalBranch			0x00000400
#define FnBranchCountReg			0x00000800
#define FnBranchLinkReg				0x00001000
#define FnCondRegister				0x00002000
#define FnSysRegister				0x00004000
#define FnSysRegisterSerial			0x00008000
#define FnSysCall				0x00010000
#define FnMac					0x00020000

#define FnLoadInstruction			0x10000000
#define FnLoad					0x10000000
#define FnLoadByteReversed			0x11000000
#define FnLoadFloat				0x12000000
#define FnLoadMultiple				0x13000000
#define FnLoadString				0x14000000
#define FnLoadStringImm				0x15000000
#define FnLoadSerial				0x16000000

#define FnStore					0x20000000
#define FnStoreByteReversed			0x21000000
#define FnStoreFloat				0x22000000
#define FnStoreMultiple				0x23000000
#define FnStoreString				0x24000000
#define FnStoreStringImm			0x25000000
#define FnStoreSerial				0x26000000
#define FnDataCacheBA				0x27000000
#define FnDataCacheBF				0x28000000
#define FnDataCacheBI				0x29000000

static char *get_function_name(function_t fn)
{
	static char buffer[256];
	char *buf = buffer;

	*buf = 0;
	if(!fn) buf += sprintf(buf, "FnInvalid"); else
		buf += sprintf(buf, "FnValid");
//	if(fn & FnsBPU) buf += sprintf(buf, "%sFnsBPU", buf != buffer ? "|" : "");
	return buffer;
}

typedef struct operand_t
{
	operand_type_t type;
	operand_direction_t dir;
	int value;
	struct operand_t *next;
} operand_t;

#define INPUT(_type, _value) \
{\
	operands[noperands].type = _type;\
	operands[noperands].dir = INPUT_T;\
	operands[noperands++].value = _value;\
}

/*#define OUTPUT(_type, _value) \
{\
	if(((_type) != GPR_T && (_type) != FPR_T) || (_value) != 31)\
	{\
		operands[noperands].type = _type;\
		operands[noperands].dir = OUTPUT_T;\
		operands[noperands++].value = _value;\
	}\
}*/

#define OUTPUT(_type, _value) \
{\
	operands[noperands].type = _type;\
	operands[noperands].dir = OUTPUT_T;\
	operands[noperands++].value = _value;\
}

typedef operand_t operands_t[8];
typedef unsigned int latencies_t[8];

#define LAT(lat) (latencies[nstages++] = (lat), latency += (lat))

}

var noperands : {int} = {0}
var operands : {operands_t}
var latency : {unsigned int} = {0}
var nstages : {int} = {0}
var latencies : {latencies_t}
var registers_written : {registers_written_t}

constructor action initialize_operands() {
}

group instr_nope(/*b, bc, bclr, bcctr,*/ sc, sync, tlbia, tlbsync, eieio, rfi, /*rfid,*/ isync)
instr_nope.initialize_operands = { }

group instr_bo_b(b)
instr_bo_b.initialize_operands = {
}

group instr_bc(bc)
instr_bc.initialize_operands = {
INPUT(BO_T, bo);
INPUT(BD_T, bd);
}

group instr_bcctr(bcctr)
instr_bcctr.initialize_operands = {
INPUT(BO_T, bo);
}

group instr_bclr(bclr)
instr_bclr.initialize_operands = {
INPUT(BO_T, bo);
}

group instr_rd_ra(addi, addic, addic_, lbz, lbzu, lha, lhau, lhz, lhzu, lmw, /*lmz, lmzu,*/ mulli, subfic,\
addme, addze, neg, subfme, subfze, lwz, lwzu)
instr_rd_ra.initialize_operands = {
OUTPUT(GPR_T, rd);
INPUT(GPR_T, ra);
}

group instr_fd_ra(lfd, lfdu, lfs, lfsu)
instr_fd_ra.initialize_operands = {
OUTPUT(FPR_T, fd);
INPUT(GPR_T, ra);
}

group instr_rs_ra(andi_, andis_, ori, oris, xori, xoris, rlwimi, rlwinm, srawi, cntlzw, extsb, extsh)
instr_rs_ra.initialize_operands = {
INPUT(GPR_T, rs);
OUTPUT(GPR_T, ra);
}

group instr_store_rs_ra(stb, stbu, sth, sthu, stmw, stw, stwu)
instr_store_rs_ra.initialize_operands = {
INPUT(GPR_T, rs);
INPUT(GPR_T, ra);
}

group instr_fs_ra(stfd, stfdu, stfs, stfsu)
instr_fs_ra.initialize_operands = {
INPUT(FPR_T, fs);
INPUT(GPR_T, ra);
}

group instr_to_ra(twi)
instr_to_ra.initialize_operands = {
INPUT(GPR_T, ra);
}

group instr_to_ra_rb(tw)
instr_to_ra_rb.initialize_operands = {
INPUT(GPR_T, ra);
INPUT(GPR_T, rb);
}

group instr_crfd_ra(cmpi, cmpli)
instr_crfd_ra.initialize_operands = {
INPUT(GPR_T, ra);
OUTPUT(CRF_T, crfD);
}

group instr_rs_ra_rb(and, andc, /*ecow,*/ eqv, nand, nor, or, orc, slw, sraw, srw, xor, rlwnm)
instr_rs_ra_rb.initialize_operands = {
OUTPUT(GPR_T, ra);
INPUT(GPR_T, rs);
INPUT(GPR_T, rb);
}

group instr_store_rs_ra_nb(stswi)
instr_store_rs_ra_nb.initialize_operands = {
INPUT(GPR_T, ra);
INPUT(GPR_T, rs);
INPUT(IMM_T, nb);
}

group instr_store_rd_ra_nb(lswi)
instr_store_rd_ra_nb.initialize_operands = {
INPUT(GPR_T, ra);
INPUT(GPR_T, rd);
INPUT(IMM_T, nb);
}

group instr_store_rs_ra_rb(stbux, stbx, sthbrx, sthux, sthx, stswx, stwbrx, stwcx_, stwux, stwx)
instr_store_rs_ra_rb.initialize_operands = {
INPUT(GPR_T, rs);
INPUT(GPR_T, ra);
INPUT(GPR_T, rb);
}

group instr_fs_ra_rb( stfdux, stfdx, stfiwx, stfsux, stfsx)
instr_fs_ra_rb.initialize_operands = {
INPUT(GPR_T, ra);
INPUT(GPR_T, fs);
INPUT(GPR_T, rb);
}

group instr_rd_ra_rb(eciwx, lbzux, lbzx, lhaux, lhax, lhbrx, lhzux, lhzx, lswx, lwarx, lwbrx, lwzux, lwzx,\
add, addc, adde, divw, divwu, mulhw, mulhwu, mullw, subf, subfc, subfe)
instr_rd_ra_rb.initialize_operands = {
OUTPUT(GPR_T, rd);
INPUT(GPR_T, ra);
INPUT(GPR_T, rb);
}

group instr_fd_ra_rb(lfdux, lfdx, /*flsux,*/ lfsx)
instr_fd_ra_rb.initialize_operands = {
OUTPUT(FPR_T, fd);
INPUT(GPR_T, ra);
INPUT(GPR_T, rb);
}

group instr_fd_fa_fb(fadd, fadds, fdiv, fdivs, fsub, fsubs)
instr_fd_fa_fb.initialize_operands = {
OUTPUT(FPR_T, fd);
INPUT(FPR_T, fa);
INPUT(FPR_T, fb);
}

group instr_fd_fa_fc(fmul, fmuls)
instr_fd_fa_fc.initialize_operands = {
OUTPUT(FPR_T, fd);
INPUT(FPR_T, fa);
INPUT(FPR_T, fc);
}

group instr_fd_fb(fres, frsqrte, fsqrts, fsqrt)
instr_fd_fb.initialize_operands = {
OUTPUT(FPR_T, fd);
INPUT(FPR_T, fb);
}

group instr_fd_fa_fb_fc(fmadd, fmadds, fmsub, fmsubs, fnmadd, fnmadds, fnmsub, fnmsubs, fsel)
instr_fd_fa_fb_fc.initialize_operands = {
OUTPUT(FPR_T, fd);
INPUT(FPR_T, fa);
INPUT(FPR_T, fb);
INPUT(FPR_T, fc);
}

group instr_rd_rb(mfsrin)
instr_rd_rb.initialize_operands = {
OUTPUT(GPR_T, rd);
INPUT(GPR_T, rb);
}

group instr_rd_rb_flt(fabs, fctiw, fctiwz, fmr, fnabs, fneg, frsp)
instr_rd_rb_flt.initialize_operands = {
OUTPUT(FPR_T, fd);
INPUT(FPR_T, fb);
}

group instr_rd(mfcr, mfmsr, mfspr, mftb)
instr_rd.initialize_operands = {
OUTPUT(GPR_T, rd);
}

group instr_fd(mffs)
instr_fd.initialize_operands = {
OUTPUT(FPR_T, fd);
}

group instr_rs(mtmsr, mtcrf, mtspr)
instr_rs.initialize_operands = {
INPUT(GPR_T, rs);
}

group instr_rs_sr(mtsr)
instr_rs_sr.initialize_operands = {
INPUT(GPR_T, rs);
OUTPUT(SR_T, sr);
}

group instr_rd_sr(mfsr)
instr_rd_sr.initialize_operands = {
OUTPUT(GPR_T, rd);
INPUT(SR_T, sr);
}

group instr_rs_rb(mtsrin)
instr_rs_rb.initialize_operands = {
INPUT(GPR_T, rs);
INPUT(GPR_T, rb);
}

group instr_crfd_ra_rb(cmp, cmpl)
instr_crfd_ra_rb.initialize_operands = {
INPUT(GPR_T, ra);
INPUT(GPR_T, rb);
OUTPUT(CRF_T, crfD);
}

group instr_fpscrfd_ra_rb(fcmpo, fcmpu)
instr_fpscrfd_ra_rb.initialize_operands = {
INPUT(FPR_T, fa);
INPUT(FPR_T, fb);
OUTPUT(FPSCRF_T, crfD);
}

group instr_rb_flt(mtfsf)
instr_rb_flt.initialize_operands = {
INPUT(FPR_T, fb);
}

group instr_ra_rb(dcba, dcbf, dcbi, dcbst, dcbt, dcbtst, dcbz, icbi)
instr_ra_rb.initialize_operands = {
INPUT(GPR_T, ra);
INPUT(GPR_T, rb);
}

group instr_crfd(mcrxr, mtfsfi)
instr_crfd.initialize_operands = {
OUTPUT(CRF_T, crfD);
}

group instr_crfd_fpscrfs(mcrfs)
instr_crfd_fpscrfs.initialize_operands = {
OUTPUT(CRF_T, crfD);
INPUT(FPSCRF_T, crfS);
}

group instr_crfd_crfs(mcrf)
instr_crfd_crfs.initialize_operands = {
OUTPUT(CRF_T, crfD);
INPUT(CRF_T, crfS);
}

group instr_crbd_crba_crbb(crand, crandc, creqv, crnand, crnor, cror, crorc, crxor)
instr_crbd_crba_crbb.initialize_operands = {
OUTPUT(CRF_T, crbD);
INPUT(CRF_T, crbA);
INPUT(CRF_T, crbB);
}

group instr_crbd(mtfsb0, mtfsb1)
instr_crbd.initialize_operands = {
INPUT(CRB_T, crbD);
}

group instr_rb(tlbie)
instr_rb.initialize_operands = {
INPUT(GPR_T, rb);
}

/** Functions **/
var function : {function_t}
constructor action initialize_function() {
	function = FnInvalid;
	registers_written = RegNone;
}

/** Branch (FnBranch | FnConditionalBranch | FnBranchCountReg | FnBranchLinkReg) **/
b.initialize_function = {
	function = FnBranch;
	registers_written = (lk ? RegLR : RegNone);
//	target_address = (aa ? li : pc + li);
}
bc.initialize_function = {
	function = FnConditionalBranch;
	registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
//	target_address = (aa ? bd : pc + bd);
}
bcctr.initialize_function = {
	function = FnBranchCountReg;
	registers_written = (lk ? RegLR : RegNone);
}
bclr.initialize_function = {
	function = FnBranchLinkReg;
	registers_written = (lk ? RegLR : RegNone) | (((bo & 4) == 0) ? RegCTR : RegNone);
}

/** System Register (FnSysRegister | FnSysRegisterSerial) **/
eieio.initialize_function = { function = FnSysRegister; }
isync.initialize_function = { function = FnSysRegisterSerial; }
mfmsr.initialize_function = { function = FnSysRegister; }
mfspr.initialize_function = { function = FnSysRegisterSerial; }
mfsr.initialize_function = { function = FnSysRegister; }
mfsrin.initialize_function = { function = FnSysRegisterSerial; }
mftb.initialize_function = { function = FnSysRegister; }
mtmsr.initialize_function = { function = FnSysRegisterSerial; }
mtspr.initialize_function = {
	function = FnSysRegisterSerial;
	uint32_t d = ((spr & 0x1f) << 5) | ((spr >> 5) & 0x1f);
	registers_written = ((d == 8) ? RegLR : RegNone) | ((d == 9) ? RegCTR : RegNone);
}
mtsr.initialize_function = { function = FnSysRegisterSerial; }
mtsrin.initialize_function = { function = FnSysRegisterSerial; }
rfi.initialize_function = { function = FnSysRegisterSerial; }
sc.initialize_function = { function = FnSysCall; }
sync.initialize_function = { function = FnSysRegister; }
tlbsync.initialize_function = { function = FnSysRegister; }
tlbia.initialize_function = { function = FnSysRegister; }
tlbie.initialize_function = { function = FnSysRegister; }

/** Condition Register **/
crand.initialize_function = { function = FnCondRegister; }
crandc.initialize_function = { function = FnCondRegister; }
creqv.initialize_function = { function = FnCondRegister; }
crnand.initialize_function = { function = FnCondRegister; }
crnor.initialize_function = { function = FnCondRegister; }
cror.initialize_function = { function = FnCondRegister; }
crorc.initialize_function = { function = FnCondRegister; }
crxor.initialize_function = { function = FnCondRegister; }
mcrf.initialize_function = { function = FnCondRegister; }
mcrxr.initialize_function = { function = FnCondRegister; }
mfcr.initialize_function = { function = FnCondRegister; }
mtcrf.initialize_function = { function = FnCondRegister; }

/** start impl specific instr **/
/** MAC **/
/*
macchw.initialize_function = { function = FnMac; }
machhw.initialize_function = { function = FnMac; }
maclhw.initialize_function = { function = FnMac; }
macchws.initialize_function = { function = FnMac; }
machhws.initialize_function = { function = FnMac; }
maclhws.initialize_function = { function = FnMac; }
macchwsu.initialize_function = { function = FnMac; }
machhwsu.initialize_function = { function = FnMac; }
maclhwsu.initialize_function = { function = FnMac; }
macchwu.initialize_function = { function = FnMac; }
machhwu.initialize_function = { function = FnMac; }
maclhwu.initialize_function = { function = FnMac; }
nmacchw.initialize_function = { function = FnMac; }
nmachhw.initialize_function = { function = FnMac; }
nmaclhw.initialize_function = { function = FnMac; }
nmacchws.initialize_function = { function = FnMac; }
nmachhws.initialize_function = { function = FnMac; }
nmaclhws.initialize_function = { function = FnMac; }
*/

/** mul 16x16 -> 32 **/
/*
mulchw.initialize_function = { function = FnMac; }
mulchwu.initialize_function = { function = FnMac; }
mulhhw.initialize_function = { function = FnMac; }
mulhhwu.initialize_function = { function = FnMac; }
mullhw.initialize_function = { function = FnMac; }
mullhwu.initialize_function = { function = FnMac; }
*/
/** other **/

/** end impl specific instr **/

/** Integer (FnIntBasic | FnIntBasicSerial | FnIntExtended) **/
add.initialize_function = { function = FnIntBasic; }
addc.initialize_function = { function = FnIntBasic; }
adde.initialize_function = { function = FnIntBasicSerial; }
addi.initialize_function = { function = FnIntBasic; }
addic.initialize_function = { function = FnIntBasic; }
addic_.initialize_function = { function = FnIntBasic; }
addis.initialize_function = { function = FnIntBasic; }
addme.initialize_function = { function = FnIntBasicSerial; }
addze.initialize_function = { function = FnIntBasicSerial; }
divw.initialize_function = { function = FnIntExtended; }
divwu.initialize_function = { function = FnIntExtended; }
mulhw.initialize_function = { function = FnIntBasic; }
mulhwu.initialize_function = { function = FnIntBasic; }
mulli.initialize_function = { function = FnIntExtended; }
mullw.initialize_function = { function = FnIntExtended; }
neg.initialize_function = { function = FnIntBasic; }
subf.initialize_function = { function = FnIntBasic; }
subfc.initialize_function = { function = FnIntBasic; }
subfe.initialize_function = { function = FnIntBasicSerial; }
subfic.initialize_function = { function = FnIntBasic; }
subfme.initialize_function = { function = FnIntBasicSerial; }
subfze.initialize_function = { function = FnIntBasicSerial; }
cmp.initialize_function = { function = FnIntBasic; }
cmpi.initialize_function = { function = FnIntBasic; }
cmpl.initialize_function = { function = FnIntBasic; }
cmpli.initialize_function = { function = FnIntBasic; }
and.initialize_function = { function = FnIntBasic; }
andc.initialize_function = { function = FnIntBasic; }
andi_.initialize_function = { function = FnIntBasic; }
andis_.initialize_function = { function = FnIntBasic; }
cntlzw.initialize_function = { function = FnIntBasic; }
eqv.initialize_function = { function = FnIntBasic; }
extsb.initialize_function = { function = FnIntBasic; }
extsh.initialize_function = { function = FnIntBasic; }
nand.initialize_function = { function = FnIntBasic; }
nor.initialize_function = { function = FnIntBasic; }
or.initialize_function = { function = FnIntBasic; }
orc.initialize_function = { function = FnIntBasic; }
ori.initialize_function = { function = FnIntBasic; }
oris.initialize_function = { function = FnIntBasic; }
xor.initialize_function = { function = FnIntBasic; }
xori.initialize_function = { function = FnIntBasic; }
xoris.initialize_function = { function = FnIntBasic; }
rlwimi.initialize_function = { function = FnIntBasic; }
rlwinm.initialize_function = { function = FnIntBasic; }
rlwnm.initialize_function = { function = FnIntBasic; }
slw.initialize_function = { function = FnIntBasic; }
sraw.initialize_function = { function = FnIntBasic; }
srawi.initialize_function = { function = FnIntBasic; }
srw.initialize_function = { function = FnIntBasic; }
tw.initialize_function = { function = FnIntBasicSerial; }
twi.initialize_function = { function = FnIntBasicSerial; }

/** Floating (FnFpCommon |FnFpFPSCR | FnFpFPSCRSerial) **/
fadd.initialize_function = { function = FnFpCommon; }
fadds.initialize_function = { function = FnFpCommon; }
fdiv.initialize_function = { function = FnFpCommon; }
fdivs.initialize_function = { function = FnFpCommon; }
fmul.initialize_function = { function = FnFpCommon; }
fmuls.initialize_function = { function = FnFpCommon; }
fres.initialize_function = { function = FnFpCommon; }
frsqrte.initialize_function = { function = FnFpCommon; }
fsub.initialize_function = { function = FnFpCommon; }
fsubs.initialize_function = { function = FnFpCommon; }
fsel.initialize_function = { function = FnFpCommon; }
fsqrt.initialize_function = { function = FnFpCommon; }
fsqrts.initialize_function = { function = FnFpCommon; }
fmadd.initialize_function = { function = FnFpCommon; }
fmadds.initialize_function = { function = FnFpCommon; }
fmsub.initialize_function = { function = FnFpCommon; }
fmsubs.initialize_function = { function = FnFpCommon; }
fnmadd.initialize_function = { function = FnFpCommon; }
fnmadds.initialize_function = { function = FnFpCommon; }
fnmsub.initialize_function = { function = FnFpCommon; }
fnmsubs.initialize_function = { function = FnFpCommon; }
fcmpo.initialize_function = { function = FnFpCommon; }
fcmpu.initialize_function = { function = FnFpCommon; }
fctiw.initialize_function = { function = FnFpCommon; }
fctiwz.initialize_function = { function = FnFpCommon; }
frsp.initialize_function = { function = FnFpCommon; }
fabs.initialize_function = { function = FnFpCommon; }
fmr.initialize_function = { function = FnFpCommon; }
fnabs.initialize_function = { function = FnFpCommon; }
fneg.initialize_function = { function = FnFpCommon; }
mcrfs.initialize_function = { function = FnFpFPSCRSerial; }
mffs.initialize_function = { function = FnFpFPSCRSerial; }
mtfsb0.initialize_function = { function = FnFpFPSCR; }
mtfsb1.initialize_function = { function = FnFpFPSCR; }
mtfsf.initialize_function = { function = FnFpFPSCR; }
mtfsfi.initialize_function = { function = FnFpFPSCR; }

/** Load Store (FnLoad | FnLoadFloat | FnLoadMultiple | FnLoadSerial | FnStore | FnStoreFloat | FnStoreMultiple | FnStoreSerial | FnCache | FnCacheSerial) **/
dcba.initialize_function = { function = FnDataCacheBA; }
dcbf.initialize_function = { function = FnDataCacheBF; }
dcbi.initialize_function = { function = FnDataCacheBI; }
dcbst.initialize_function = { function = FnCacheSerial; }
dcbt.initialize_function = { function = FnCache; }
dcbtst.initialize_function = { function = FnCache; }
dcbz.initialize_function = { function = FnCacheSerial; }
eciwx.initialize_function = { function = FnLoad; }
ecowx.initialize_function = { function = FnStore; }
icbi.initialize_function = { function = FnCacheSerial; }
lbz.initialize_function = { function = FnLoad; }
lbzu.initialize_function = { function = FnLoad; }
lbzux.initialize_function = { function = FnLoad; }
lbzx.initialize_function = { function = FnLoad; }
lha.initialize_function = { function = FnLoad; }
lhau.initialize_function = { function = FnLoad; }
lhaux.initialize_function = { function = FnLoad; }
lhax.initialize_function = { function = FnLoad; }
lhz.initialize_function = { function = FnLoad; }
lhzu.initialize_function = { function = FnLoad; }
lhzux.initialize_function = { function = FnLoad; }
lhzx.initialize_function = { function = FnLoad; }
lwz.initialize_function = { function = FnLoad; }
lwzu.initialize_function = { function = FnLoad; }
lwzux.initialize_function = { function = FnLoad; }
lwzx.initialize_function = { function = FnLoad; }
stb.initialize_function = { function = FnStore; }
stbu.initialize_function = { function = FnStore; }
stbux.initialize_function = { function = FnStore; }
stbx.initialize_function = { function = FnStore; }
sth.initialize_function = { function = FnStore; }
sthu.initialize_function = { function = FnStore; }
sthux.initialize_function = { function = FnStore; }
sthx.initialize_function = { function = FnStore; }
stw.initialize_function = { function = FnStore; }
stwu.initialize_function = { function = FnStore; }
stwux.initialize_function = { function = FnStore; }
stwx.initialize_function = { function = FnStore; }
lhbrx.initialize_function = { function = FnLoadByteReversed; }
lwbrx.initialize_function = { function = FnLoadByteReversed; }
sthbrx.initialize_function = { function = FnStoreByteReversed; }
stwbrx.initialize_function = { function = FnStoreByteReversed; }
lmw.initialize_function = { function = FnLoadMultiple; }
lswi.initialize_function = { function = FnLoadStringImm; }
lswx.initialize_function = { function = FnLoadString; }
stswi.initialize_function = { function = FnStoreStringImm; }
stswx.initialize_function = { function = FnStoreString; }
stmw.initialize_function = { function = FnStoreMultiple; }
lfd.initialize_function = { function = FnLoadFloat; }
lfdu.initialize_function = { function = FnLoadFloat; }
lfdux.initialize_function = { function = FnLoadFloat; }
lfdx.initialize_function = { function = FnLoadFloat; }
lfs.initialize_function = { function = FnLoadFloat; }
lfsu.initialize_function = { function = FnLoadFloat; }
lfsux.initialize_function = { function = FnLoadFloat; }
lfsx.initialize_function = { function = FnLoadFloat; }
stfd.initialize_function = { function = FnStoreFloat; }
stfdu.initialize_function = { function = FnStoreFloat; }
stfdux.initialize_function = { function = FnStoreFloat; }
stfdx.initialize_function = { function = FnStoreFloat; }
stfiwx.initialize_function = { function = FnStoreFloat; }
stfs.initialize_function = { function = FnStoreFloat; }
stfsu.initialize_function = { function = FnStoreFloat; }
stfsux.initialize_function = { function = FnStoreFloat; }
stfsx.initialize_function = { function = FnStoreFloat; }
lwarx.initialize_function = { function = FnLoad; }
stwcx_.initialize_function = { function = FnStoreSerial; }


/** Memory access **/
var memory_access_size : {int}
constructor action initialize_memory_access_size() { memory_access_size = 0; }

/** Load Store **/
lbz.initialize_memory_access_size = { memory_access_size = 1; }
lbzu.initialize_memory_access_size = { memory_access_size = 1; }
lbzux.initialize_memory_access_size = { memory_access_size = 1; }
lbzx.initialize_memory_access_size = { memory_access_size = 1; }
lha.initialize_memory_access_size = { memory_access_size = 2; }
lhau.initialize_memory_access_size = { memory_access_size = 2; }
lhaux.initialize_memory_access_size = { memory_access_size = 2; }
lhax.initialize_memory_access_size = { memory_access_size = 2; }
lhz.initialize_memory_access_size = { memory_access_size = 2; }
lhzu.initialize_memory_access_size = { memory_access_size = 2; }
lhzux.initialize_memory_access_size = { memory_access_size = 2; }
lhzx.initialize_memory_access_size = { memory_access_size = 2; }
lwz.initialize_memory_access_size = { memory_access_size = 4; }
lwzu.initialize_memory_access_size = { memory_access_size = 4; }
lwzux.initialize_memory_access_size = { memory_access_size = 4; }
lwzx.initialize_memory_access_size = { memory_access_size = 4; }
stb.initialize_memory_access_size = { memory_access_size = 1; }
stbu.initialize_memory_access_size = { memory_access_size = 1; }
stbux.initialize_memory_access_size = { memory_access_size = 1; }
stbx.initialize_memory_access_size = { memory_access_size = 1; }
sth.initialize_memory_access_size = { memory_access_size = 2; }
sthu.initialize_memory_access_size = { memory_access_size = 2; }
sthux.initialize_memory_access_size = { memory_access_size = 2; }
sthx.initialize_memory_access_size = { memory_access_size = 2; }
stw.initialize_memory_access_size = { memory_access_size = 4; }
stwu.initialize_memory_access_size = { memory_access_size = 4; }
stwux.initialize_memory_access_size = { memory_access_size = 4; }
stwx.initialize_memory_access_size = { memory_access_size = 4; }
lhbrx.initialize_memory_access_size = { memory_access_size = 2; }
lwbrx.initialize_memory_access_size = { memory_access_size = 4; }
sthbrx.initialize_memory_access_size = { memory_access_size = 2; }
stwbrx.initialize_memory_access_size = { memory_access_size = 4; }
lswi.initialize_memory_access_size = { memory_access_size = 4; }
lswx.initialize_memory_access_size = { memory_access_size = 4; }
stswi.initialize_memory_access_size = { memory_access_size = 4; }
stswx.initialize_memory_access_size = { memory_access_size = 4; }
lmw.initialize_memory_access_size = { memory_access_size = 4; }
stmw.initialize_memory_access_size = { memory_access_size = 4; }
lfd.initialize_memory_access_size = { memory_access_size = 8; }
lfdu.initialize_memory_access_size = { memory_access_size = 8; }
lfdux.initialize_memory_access_size = { memory_access_size = 8; }
lfdx.initialize_memory_access_size = { memory_access_size = 8; }
lfs.initialize_memory_access_size = { memory_access_size = 4; }
lfsu.initialize_memory_access_size = { memory_access_size = 4; }
lfsux.initialize_memory_access_size = { memory_access_size = 4; }
lfsx.initialize_memory_access_size = { memory_access_size = 4; }
stfd.initialize_memory_access_size = { memory_access_size = 8; }
stfdu.initialize_memory_access_size = { memory_access_size = 8; }
stfdux.initialize_memory_access_size = { memory_access_size = 8; }
stfdx.initialize_memory_access_size = { memory_access_size = 8; }
stfiwx.initialize_memory_access_size = { memory_access_size = 4; }
stfs.initialize_memory_access_size = { memory_access_size = 4; }
stfsu.initialize_memory_access_size = { memory_access_size = 4; }
stfsux.initialize_memory_access_size = { memory_access_size = 4; }
stfsx.initialize_memory_access_size = { memory_access_size = 4; }

dcba.initialize_memory_access_size = { memory_access_size = 4; }
dcbf.initialize_memory_access_size = { memory_access_size = 4; }
dcbi.initialize_memory_access_size = { memory_access_size = 4; }
dcbst.initialize_memory_access_size = { memory_access_size = 4; }
dcbt.initialize_memory_access_size = { memory_access_size = 4; }
dcbtst.initialize_memory_access_size = { memory_access_size = 4; }
dcbz.initialize_memory_access_size = { memory_access_size = 4; }
icbi.initialize_memory_access_size = { memory_access_size = 4; }
tlbia.initialize_memory_access_size = { memory_access_size = 4; }
tlbie.initialize_memory_access_size = { memory_access_size = 4; }
tlbsync.initialize_memory_access_size = { memory_access_size = 4; }
eciwx.initialize_memory_access_size = { memory_access_size = 4; }
ecowx.initialize_memory_access_size = { memory_access_size = 4; }
eieio.initialize_memory_access_size = { memory_access_size = 4; }
isync.initialize_memory_access_size = { memory_access_size = 4; }
lwarx.initialize_memory_access_size = { memory_access_size = 4; }
stwcx_.initialize_memory_access_size = { memory_access_size = 4; }
sync.initialize_memory_access_size = { memory_access_size = 4; }

/** Latenties **/
constructor action initialize_latencies() {
}

/** Branch **/
b.initialize_latencies = { LAT(1); }
bc.initialize_latencies = { LAT(1); }
bcctr.initialize_latencies = { LAT(1); }
bclr.initialize_latencies = { LAT(1); }

/** Condition **/
	crand.initialize_latencies = { LAT(1); }
	crandc.initialize_latencies = { LAT(1); }
	creqv.initialize_latencies = { LAT(1); }
	crnand.initialize_latencies = { LAT(1); }
	crnor.initialize_latencies = { LAT(1); }
	cror.initialize_latencies = { LAT(1); }
	crorc.initialize_latencies = { LAT(1); }
	crxor.initialize_latencies = { LAT(1); }
	mcrf.initialize_latencies = { LAT(1); }

/** Floating **/
	fabs.initialize_latencies = { LAT(3); }
	fadd.initialize_latencies = { LAT(3); }
	fadds.initialize_latencies = { LAT(3); }
	fdiv.initialize_latencies = { LAT(31); }
	fdivs.initialize_latencies = { LAT(17); }
	fres.initialize_latencies = { LAT(10); }
	fcmpo.initialize_latencies = { LAT(3); }
	fcmpu.initialize_latencies = { LAT(3); }
	fctiw.initialize_latencies = { LAT(3); }
	fctiwz.initialize_latencies = { LAT(3); }
	fmr.initialize_latencies = { LAT(3); }
	fmul.initialize_latencies = { LAT(3); }
	fmuls.initialize_latencies = { LAT(4); }
	fmadd.initialize_latencies = { LAT(4); }
	fmadds.initialize_latencies = { LAT(3); }
	fmsub.initialize_latencies = { LAT(4); }
	fmsubs.initialize_latencies = { LAT(3); }
	fnabs.initialize_latencies = { LAT(3); }
	fneg.initialize_latencies = { LAT(3); }
	fnmadd.initialize_latencies = { LAT(4); }
	fnmadds.initialize_latencies = { LAT(3); }
	fnmsub.initialize_latencies = { LAT(4); }
	fnmsubs.initialize_latencies = { LAT(3); }
	frsp.initialize_latencies = { LAT(3); }
	frsqrte.initialize_latencies = { LAT(3); }
	fsub.initialize_latencies = { LAT(3); }
	fsubs.initialize_latencies = { LAT(3); }
	fsel.initialize_latencies = { LAT(3); }
												fsqrt.initialize_latencies = { LAT(1); }
												fsqrts.initialize_latencies = { LAT(1); }
	mcrfs.initialize_latencies = { LAT(3); }
	mffs.initialize_latencies = { LAT(3); }
	mtfsb0.initialize_latencies = { LAT(3); }
	mtfsb1.initialize_latencies = { LAT(3); }
	mtfsf.initialize_latencies = { LAT(3); }
	mtfsfi.initialize_latencies = { LAT(3); }

/** Integer **/
add.initialize_latencies = { LAT(1); }
addc.initialize_latencies = { LAT(1); }
adde.initialize_latencies = { LAT(1); }
addi.initialize_latencies = { LAT(1); }
addic.initialize_latencies = { LAT(1); }
addic_.initialize_latencies = { LAT(1); }
addis.initialize_latencies = { LAT(1); }
addme.initialize_latencies = { LAT(1); }
addze.initialize_latencies = { LAT(1); }
divw.initialize_latencies = { LAT(35); }
divwu.initialize_latencies = { LAT(35); }
mulhw.initialize_latencies = { LAT(5); }
mulhwu.initialize_latencies = { LAT(5); }
mulli.initialize_latencies = { LAT(3); }
mullw.initialize_latencies = { if (oe) LAT(5); else LAT(4); }
neg.initialize_latencies = { LAT(1); }
subf.initialize_latencies = { LAT(1); }
subfc.initialize_latencies = { LAT(1); }
subfe.initialize_latencies = { LAT(1); }
subfic.initialize_latencies = { LAT(1); }
subfme.initialize_latencies = { LAT(1); }
subfze.initialize_latencies = { LAT(1); }
cmp.initialize_latencies = { LAT(1); }
cmpi.initialize_latencies = { LAT(1); }
cmpl.initialize_latencies = { LAT(1); }
cmpli.initialize_latencies = { LAT(1); }
and.initialize_latencies = { LAT(1); }
andc.initialize_latencies = { LAT(1); }
andi_.initialize_latencies = { LAT(1); }
andis_.initialize_latencies = { LAT(1); }
cntlzw.initialize_latencies = { LAT(1); }
eqv.initialize_latencies = { LAT(1); }
extsb.initialize_latencies = { LAT(1); }
extsh.initialize_latencies = { LAT(1); }
nand.initialize_latencies = { LAT(1); }
nor.initialize_latencies = { LAT(1); }
or.initialize_latencies = { LAT(1); }
orc.initialize_latencies = { LAT(1); }
ori.initialize_latencies = { LAT(1); }
oris.initialize_latencies = { LAT(1); }
xor.initialize_latencies = { LAT(1); }
xori.initialize_latencies = { LAT(1); }
xoris.initialize_latencies = { LAT(1); }
rlwimi.initialize_latencies = { LAT(1); }
rlwinm.initialize_latencies = { LAT(1); }
rlwnm.initialize_latencies = { LAT(1); }
slw.initialize_latencies = { LAT(1); }
sraw.initialize_latencies = { LAT(1); }
srawi.initialize_latencies = { LAT(1); }
srw.initialize_latencies = { LAT(1); }

/** Load Store **/
	lbz.initialize_latencies = { LAT(3); }
	lbzu.initialize_latencies = { LAT(3); }
	lbzux.initialize_latencies = { LAT(3); }
	lbzx.initialize_latencies = { LAT(3); }
	lha.initialize_latencies = { LAT(3); }
	lhau.initialize_latencies = { LAT(3); }
	lhaux.initialize_latencies = { LAT(3); }
	lhax.initialize_latencies = { LAT(3); }
	lhz.initialize_latencies = { LAT(3); }
	lhzu.initialize_latencies = { LAT(3); }
	lhzux.initialize_latencies = { LAT(3); }
	lhzx.initialize_latencies = { LAT(3); }
	lwz.initialize_latencies = { LAT(3); }
	lwzu.initialize_latencies = { LAT(3); }
	lwzux.initialize_latencies = { LAT(3); }
	lwzx.initialize_latencies = { LAT(3); }
	stb.initialize_latencies = { LAT(3); }
	stbu.initialize_latencies = { LAT(3); }
	stbux.initialize_latencies = { LAT(3); }
	stbx.initialize_latencies = { LAT(3); }
	sth.initialize_latencies = { LAT(3); }
	sthu.initialize_latencies = { LAT(3); }
	sthux.initialize_latencies = { LAT(3); }
	sthx.initialize_latencies = { LAT(3); }
	stw.initialize_latencies = { LAT(3); }
	stwu.initialize_latencies = { LAT(3); }
	stwux.initialize_latencies = { LAT(3); }
	stwx.initialize_latencies = { LAT(3); }
	lhbrx.initialize_latencies = { LAT(3); }
	lwbrx.initialize_latencies = { LAT(3); }
	sthbrx.initialize_latencies = { LAT(3); }
	stwbrx.initialize_latencies = { LAT(3); }
	lswi.initialize_latencies = { LAT(2); }
	lswx.initialize_latencies = { LAT(2); }
	stswi.initialize_latencies = { LAT(2); }
	stswx.initialize_latencies = { LAT(2); }
	lmw.initialize_latencies = { LAT(2); }
	stmw.initialize_latencies = { LAT(2); }
	lfd.initialize_latencies = { LAT(3); }
	lfdu.initialize_latencies = { LAT(3); }
	lfdux.initialize_latencies = { LAT(3); }
	lfdx.initialize_latencies = { LAT(3); }
	lfs.initialize_latencies = { LAT(3); }
	lfsu.initialize_latencies = { LAT(3); }
	lfsux.initialize_latencies = { LAT(3); }
	lfsx.initialize_latencies = { LAT(3); }
	stfd.initialize_latencies = { LAT(3); }
	stfdu.initialize_latencies = { LAT(3); }
	stfdux.initialize_latencies = { LAT(3); }
	stfdx.initialize_latencies = { LAT(3); }
	stfiwx.initialize_latencies = { LAT(3); }
	stfs.initialize_latencies = { LAT(3); }
	stfsu.initialize_latencies = { LAT(3); }
	stfsux.initialize_latencies = { LAT(3); }
	stfsx.initialize_latencies = { LAT(3); }
	dcba.initialize_latencies = { LAT(3); }
	dcbf.initialize_latencies = { LAT(8); }
	dcbi.initialize_latencies = { LAT(6); }
	dcbst.initialize_latencies = { LAT(3); }
	dcbt.initialize_latencies = { LAT(3); }
	dcbtst.initialize_latencies = { LAT(3); }
	dcbz.initialize_latencies = { LAT(3); }
	icbi.initialize_latencies = { LAT(3); }
	tlbia.initialize_latencies = { LAT(3); }
	tlbie.initialize_latencies = { LAT(3); }
	tlbsync.initialize_latencies = { LAT(3); }
	eciwx.initialize_latencies = { LAT(3); }
	ecowx.initialize_latencies = { LAT(3); }
	eieio.initialize_latencies = { LAT(3); }
	isync.initialize_latencies = { LAT(3); }
	lwarx.initialize_latencies = { LAT(4); }
	stwcx_.initialize_latencies = { LAT(16); }
	sync.initialize_latencies = { LAT(3); }

/** Misc **/
	sc.initialize_latencies = { LAT(2); }
	rfi.initialize_latencies = { LAT(2); }
	tw.initialize_latencies = { LAT(2); }
	twi.initialize_latencies = { LAT(2); }
	mcrxr.initialize_latencies = { LAT(1); }
	mfcr.initialize_latencies = { LAT(1); }
	mfmsr.initialize_latencies = { LAT(1); }
	mfspr.initialize_latencies = { LAT(3); }
	mftb.initialize_latencies = { LAT(1); }
	mtcrf.initialize_latencies = { LAT(1); }
	mtmsr.initialize_latencies = { LAT(1); }
	mtspr.initialize_latencies = { LAT(2); }
	mfsr.initialize_latencies = { LAT(3); }
	mfsrin.initialize_latencies = { LAT(3); }
	mtsr.initialize_latencies = { LAT(2); }
	mtsrin.initialize_latencies = { LAT(2); }

/** start impl specific instr **/
/** MAC 16x16 + 32 -> 32 **/
/*
macchw.initialize_latencies = { LAT(2); }
machhw.initialize_latencies = { LAT(2); }
maclhw.initialize_latencies = { LAT(2); }
macchws.initialize_latencies = { LAT(2); }
machhws.initialize_latencies = { LAT(2); }
maclhws.initialize_latencies = { LAT(2); }
macchwsu.initialize_latencies = { LAT(2); }
machhwsu.initialize_latencies = { LAT(2); }
maclhwsu.initialize_latencies = { LAT(2); }
macchwu.initialize_latencies = { LAT(2); }
machhwu.initialize_latencies = { LAT(2); }
maclhwu.initialize_latencies = { LAT(2); }
nmacchw.initialize_latencies = { LAT(2); }
nmachhw.initialize_latencies = { LAT(2); }
nmaclhw.initialize_latencies = { LAT(2); }
nmacchws.initialize_latencies = { LAT(2); }
nmachhws.initialize_latencies = { LAT(2); }
nmaclhws.initialize_latencies = { LAT(2); }
*/
/** mul 16x16 -> 32 **/
/*
mulchw.initialize_latencies = { LAT(2); }
mulchwu.initialize_latencies = { LAT(2); }
mulhhw.initialize_latencies = { LAT(2); }
mulhhwu.initialize_latencies = { LAT(2); }
mullhw.initialize_latencies = { LAT(2); }
mullhwu.initialize_latencies = { LAT(2); }
*/
/** other **/

/** end impl specific instr **/


/** get_target_address function for branches  **/

action {address_t} get_target_address({address_t} {cia}, {CPU<CONFIG> *} {cpu}) {
	return 0;
}

/** Branch (FnBranch | FnConditionalBranch | FnBranchCountReg | FnBranchLinkReg) **/
b.get_target_address = {
	return (aa ? li : cia + li);
}
bc.get_target_address = {
	return (aa ? bd : cia + bd);
}
bcctr.get_target_address = {
	return (cpu->GetCTR() & 0xfffffffc);
}
bclr.get_target_address = {
	return (cpu->GetLR() & 0xfffffffc);
}
